(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({"/home/ubuntu/starmask/app/scripts/contentscript.js":[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _querystring = _interopRequireDefault(require("querystring"));

var _pump = _interopRequireDefault(require("pump"));

var _postMessageStream = _interopRequireDefault(require("post-message-stream"));

var _objMultiplex = _interopRequireDefault(require("obj-multiplex"));

var _extensionizer = _interopRequireDefault(require("extensionizer"));

var _extensionPortStream = _interopRequireDefault(require("extension-port-stream"));

// These require calls need to use require to be statically recognized by browserify


const path = require('path');

const inpageContent = "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({\"/home/ubuntu/starmask/app/scripts/inpage.js\":[function(require,module,exports){\n(function (global){\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _loglevel = _interopRequireDefault(require(\"loglevel\"));\n\nvar _postMessageStream = _interopRequireDefault(require(\"post-message-stream\"));\n\nvar _stcInpageProvider = require(\"@starcoin/stc-inpage-provider\");\n\n// need to make sure we aren't affected by overlapping namespaces\n// and that we dont affect the app with our namespace\n// mostly a fix for web3's BigNumber if AMD's \"define\" is defined...\nlet __define;\n/**\n * Caches reference to global define object and deletes it to\n * avoid conflicts with other global define objects, such as\n * AMD's define function\n */\n\n\nconst cleanContextForImports = () => {\n  __define = global.define;\n\n  try {\n    global.define = undefined;\n  } catch (_) {\n    console.warn('StarMask - global.define could not be deleted.');\n  }\n};\n/**\n * Restores global define object from cached reference\n */\n\n\nconst restoreContextAfterImports = () => {\n  try {\n    global.define = __define;\n  } catch (_) {\n    console.warn('StarMask - global.define could not be overwritten.');\n  }\n};\n\ncleanContextForImports();\n/* eslint-disable import/first */\n\nrestoreContextAfterImports();\n\n_loglevel.default.setDefaultLevel(true ? 'debug' : 'warn'); //\n// setup plugin communication\n//\n// setup background connection\n\n\nconst starmaskStream = new _postMessageStream.default({\n  name: 'starmask-inpage',\n  target: 'starmask-contentscript'\n});\n(0, _stcInpageProvider.initializeProvider)({\n  connectionStream: starmaskStream,\n  jsonRpcStreamName: 'starmask-provider',\n  logger: _loglevel.default,\n  shouldSendMetadata: false\n});\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"@babel/runtime/helpers/interopRequireDefault\":\"/home/ubuntu/starmask/node_modules/@babel/runtime/helpers/interopRequireDefault.js\",\"@starcoin/stc-inpage-provider\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/index.js\",\"loglevel\":\"/home/ubuntu/starmask/node_modules/loglevel/lib/loglevel.js\",\"post-message-stream\":\"/home/ubuntu/starmask/node_modules/post-message-stream/index.js\"}],\"/home/ubuntu/starmask/node_modules/@babel/runtime/helpers/interopRequireDefault.js\":[function(require,module,exports){\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;\n},{}],\"/home/ubuntu/starmask/node_modules/@metamask/object-multiplex/dist/ObjectMultiplex.js\":[function(require,module,exports){\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ObjectMultiplex = void 0;\nconst readable_stream_1 = require(\"readable-stream\");\nconst end_of_stream_1 = __importDefault(require(\"end-of-stream\"));\nconst once_1 = __importDefault(require(\"once\"));\nconst Substream_1 = require(\"./Substream\");\nconst IGNORE_SUBSTREAM = Symbol('IGNORE_SUBSTREAM');\nclass ObjectMultiplex extends readable_stream_1.Duplex {\n    constructor(opts = {}) {\n        super(Object.assign(Object.assign({}, opts), { objectMode: true }));\n        this._substreams = {};\n    }\n    createStream(name) {\n        // guard stream against destroyed already\n        if (this.destroyed) {\n            throw new Error(`ObjectMultiplex - parent stream for name \"${name}\" already destroyed`);\n        }\n        // guard stream against ended already\n        if (this._readableState.ended || this._writableState.ended) {\n            throw new Error(`ObjectMultiplex - parent stream for name \"${name}\" already ended`);\n        }\n        // validate name\n        if (!name) {\n            throw new Error('ObjectMultiplex - name must not be empty');\n        }\n        if (this._substreams[name]) {\n            throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n        }\n        // create substream\n        const substream = new Substream_1.Substream({ parent: this, name });\n        this._substreams[name] = substream;\n        // listen for parent stream to end\n        anyStreamEnd(this, (_error) => {\n            return substream.destroy(_error || undefined);\n        });\n        return substream;\n    }\n    // ignore streams (dont display orphaned data warning)\n    ignoreStream(name) {\n        // validate name\n        if (!name) {\n            throw new Error('ObjectMultiplex - name must not be empty');\n        }\n        if (this._substreams[name]) {\n            throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n        }\n        // set\n        this._substreams[name] = IGNORE_SUBSTREAM;\n    }\n    _read() {\n        return undefined;\n    }\n    _write(chunk, _encoding, callback) {\n        const { name, data } = chunk;\n        if (!name) {\n            console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n            return callback();\n        }\n        // get corresponding substream\n        const substream = this._substreams[name];\n        if (!substream) {\n            console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n            return callback();\n        }\n        // push data into substream\n        if (substream !== IGNORE_SUBSTREAM) {\n            substream.push(data);\n        }\n        return callback();\n    }\n}\nexports.ObjectMultiplex = ObjectMultiplex;\n// util\nfunction anyStreamEnd(stream, _cb) {\n    const cb = once_1.default(_cb);\n    end_of_stream_1.default(stream, { readable: false }, cb);\n    end_of_stream_1.default(stream, { writable: false }, cb);\n}\n\n},{\"./Substream\":\"/home/ubuntu/starmask/node_modules/@metamask/object-multiplex/dist/Substream.js\",\"end-of-stream\":\"/home/ubuntu/starmask/node_modules/end-of-stream/index.js\",\"once\":\"/home/ubuntu/starmask/node_modules/once/once.js\",\"readable-stream\":\"/home/ubuntu/starmask/node_modules/readable-stream/readable-browser.js\"}],\"/home/ubuntu/starmask/node_modules/@metamask/object-multiplex/dist/Substream.js\":[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Substream = void 0;\nconst readable_stream_1 = require(\"readable-stream\");\nclass Substream extends readable_stream_1.Duplex {\n    constructor({ parent, name }) {\n        super({ objectMode: true });\n        this._parent = parent;\n        this._name = name;\n    }\n    /**\n     * Explicitly sets read operations to a no-op.\n     */\n    _read() {\n        return undefined;\n    }\n    /**\n     * Called when data should be written to this writable stream.\n     *\n     * @param chunk - Arbitrary object to write\n     * @param encoding - Encoding to use when writing payload\n     * @param callback - Called when writing is complete or an error occurs\n     */\n    _write(chunk, _encoding, callback) {\n        this._parent.push({\n            name: this._name,\n            data: chunk,\n        });\n        callback();\n    }\n}\nexports.Substream = Substream;\n\n},{\"readable-stream\":\"/home/ubuntu/starmask/node_modules/readable-stream/readable-browser.js\"}],\"/home/ubuntu/starmask/node_modules/@metamask/object-multiplex/dist/index.js\":[function(require,module,exports){\n\"use strict\";\nconst ObjectMultiplex_1 = require(\"./ObjectMultiplex\");\nmodule.exports = ObjectMultiplex_1.ObjectMultiplex;\n\n},{\"./ObjectMultiplex\":\"/home/ubuntu/starmask/node_modules/@metamask/object-multiplex/dist/ObjectMultiplex.js\"}],\"/home/ubuntu/starmask/node_modules/@metamask/safe-event-emitter/index.js\":[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nfunction safeApply(handler, context, args) {\n    try {\n        Reflect.apply(handler, context, args);\n    }\n    catch (err) {\n        // Throw error after timeout so as not to interrupt the stack\n        setTimeout(() => {\n            throw err;\n        });\n    }\n}\nfunction arrayClone(arr) {\n    const n = arr.length;\n    const copy = new Array(n);\n    for (let i = 0; i < n; i += 1) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}\nclass SafeEventEmitter extends events_1.EventEmitter {\n    emit(type, ...args) {\n        let doError = type === 'error';\n        const events = this._events;\n        if (events !== undefined) {\n            doError = doError && events.error === undefined;\n        }\n        else if (!doError) {\n            return false;\n        }\n        // If there is no 'error' event listener then throw.\n        if (doError) {\n            let er;\n            if (args.length > 0) {\n                [er] = args;\n            }\n            if (er instanceof Error) {\n                // Note: The comments on the `throw` lines are intentional, they show\n                // up in Node's output if this results in an unhandled exception.\n                throw er; // Unhandled 'error' event\n            }\n            // At least give some kind of context to the user\n            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : ''}`);\n            err.context = er;\n            throw err; // Unhandled 'error' event\n        }\n        const handler = events[type];\n        if (handler === undefined) {\n            return false;\n        }\n        if (typeof handler === 'function') {\n            safeApply(handler, this, args);\n        }\n        else {\n            const len = handler.length;\n            const listeners = arrayClone(handler);\n            for (let i = 0; i < len; i += 1) {\n                safeApply(listeners[i], this, args);\n            }\n        }\n        return true;\n    }\n}\nexports.default = SafeEventEmitter;\n\n},{\"events\":\"/home/ubuntu/starmask/node_modules/browserify/node_modules/events/events.js\"}],\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/BaseProvider.js\":[function(require,module,exports){\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst pump_1 = __importDefault(require(\"pump\"));\nconst json_rpc_engine_1 = require(\"json-rpc-engine\");\nconst json_rpc_middleware_stream_1 = require(\"json-rpc-middleware-stream\");\nconst object_multiplex_1 = __importDefault(require(\"@metamask/object-multiplex\"));\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst fast_deep_equal_1 = __importDefault(require(\"fast-deep-equal\"));\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nconst is_stream_1 = require(\"is-stream\");\nconst messages_1 = __importDefault(require(\"./messages\"));\nconst utils_1 = require(\"./utils\");\nclass BaseProvider extends safe_event_emitter_1.default {\n    /**\n     * @param connectionStream - A Node.js duplex stream\n     * @param options - An options bag\n     * @param options.jsonRpcStreamName - The name of the internal JSON-RPC stream.\n     * Default: metamask-provider\n     * @param options.logger - The logging API to use. Default: console\n     * @param options.maxEventListeners - The maximum number of event\n     * listeners. Default: 100\n     */\n    constructor(connectionStream, { jsonRpcStreamName = 'starmask-provider', logger = console, maxEventListeners = 100, } = {}) {\n        super();\n        if (!is_stream_1.duplex(connectionStream)) {\n            throw new Error(messages_1.default.errors.invalidDuplexStream());\n        }\n        this._log = logger;\n        this.setMaxListeners(maxEventListeners);\n        // private state\n        this._state = Object.assign({}, BaseProvider._defaultState);\n        // public state\n        this.selectedAddress = null;\n        this.chainId = null;\n        // bind functions (to prevent consumers from making unbound calls)\n        this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n        this._handleConnect = this._handleConnect.bind(this);\n        this._handleChainChanged = this._handleChainChanged.bind(this);\n        this._handleDisconnect = this._handleDisconnect.bind(this);\n        this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n        this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n        this._rpcRequest = this._rpcRequest.bind(this);\n        this.request = this.request.bind(this);\n        // setup connectionStream multiplexing\n        const mux = new object_multiplex_1.default();\n        pump_1.default(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, 'StarMask'));\n        // setup own event listeners\n        // EIP-1193 connect\n        this.on('connect', () => {\n            this._state.isConnected = true;\n        });\n        // setup RPC connection\n        this._jsonRpcConnection = json_rpc_middleware_stream_1.createStreamMiddleware();\n        pump_1.default(this._jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), this._jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, 'StarMask RpcProvider'));\n        // handle RPC requests via dapp-side rpc engine\n        const rpcEngine = new json_rpc_engine_1.JsonRpcEngine();\n        rpcEngine.push(json_rpc_engine_1.createIdRemapMiddleware());\n        rpcEngine.push(utils_1.createErrorMiddleware(this._log));\n        rpcEngine.push(this._jsonRpcConnection.middleware);\n        this._rpcEngine = rpcEngine;\n        this._initializeState();\n        // handle JSON-RPC notifications\n        this._jsonRpcConnection.events.on('notification', (payload) => {\n            const { method, params } = payload;\n            if (method === 'starmask_accountsChanged') {\n                this._handleAccountsChanged(params);\n            }\n            else if (method === 'starmask_unlockStateChanged') {\n                this._handleUnlockStateChanged(params);\n            }\n            else if (method === 'starmask_chainChanged') {\n                this._handleChainChanged(params);\n            }\n            else if (utils_1.EMITTED_NOTIFICATIONS.includes(method)) {\n                this.emit('message', {\n                    type: method,\n                    data: params,\n                });\n            }\n            else if (method === 'STARMASK_STREAM_FAILURE') {\n                connectionStream.destroy(new Error(messages_1.default.errors.permanentlyDisconnected()));\n            }\n        });\n    }\n    //====================\n    // Public Methods\n    //====================\n    /**\n     * Returns whether the provider can process RPC requests.\n     */\n    isConnected() {\n        return this._state.isConnected;\n    }\n    /**\n     * Submits an RPC request for the given method, with the given params.\n     * Resolves with the result of the method call, or rejects on error.\n     *\n     * @param args - The RPC request arguments.\n     * @param args.method - The RPC method name.\n     * @param args.params - The parameters for the RPC method.\n     * @returns A Promise that resolves with the result of the RPC method,\n     * or rejects if an error is encountered.\n     */\n    async request(args) {\n        if (!args || typeof args !== 'object' || Array.isArray(args)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: messages_1.default.errors.invalidRequestArgs(),\n                data: args,\n            });\n        }\n        const { method, params } = args;\n        if (typeof method !== 'string' || method.length === 0) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: messages_1.default.errors.invalidRequestMethod(),\n                data: args,\n            });\n        }\n        if (params !== undefined &&\n            !Array.isArray(params) &&\n            (typeof params !== 'object' || params === null)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: messages_1.default.errors.invalidRequestParams(),\n                data: args,\n            });\n        }\n        return new Promise((resolve, reject) => {\n            this._rpcRequest({ method, params }, utils_1.getRpcPromiseCallback(resolve, reject));\n        });\n    }\n    //====================\n    // Private Methods\n    //====================\n    /**\n     * Constructor helper.\n     * Populates initial state by calling 'starmask_getProviderState' and emits\n     * necessary events.\n     */\n    async _initializeState() {\n        try {\n            const { accounts, chainId, isUnlocked, networkVersion, } = (await this.request({\n                method: 'starmask_getProviderState',\n            }));\n            // indicate that we've connected, for EIP-1193 compliance\n            this.emit('connect', { chainId });\n            this._handleChainChanged({ chainId, networkVersion });\n            this._handleUnlockStateChanged({ accounts, isUnlocked });\n            this._handleAccountsChanged(accounts);\n        }\n        catch (error) {\n            this._log.error('StarMask: Failed to get initial state. Please report this bug.', error);\n        }\n        finally {\n            this._state.initialized = true;\n            this.emit('_initialized');\n        }\n    }\n    /**\n     * Internal RPC method. Forwards requests to background via the RPC engine.\n     * Also remap ids inbound and outbound.\n     *\n     * @param payload - The RPC request object.\n     * @param callback - The consumer's callback.\n     */\n    _rpcRequest(payload, callback) {\n        let cb = callback;\n        if (!Array.isArray(payload)) {\n            if (!payload.jsonrpc) {\n                payload.jsonrpc = '2.0';\n            }\n            if (payload.method === 'stc_accounts' ||\n                payload.method === 'stc_requestAccounts') {\n                // handle accounts changing\n                cb = (err, res) => {\n                    this._handleAccountsChanged(res.result || [], payload.method === 'stc_accounts');\n                    callback(err, res);\n                };\n            }\n            return this._rpcEngine.handle(payload, cb);\n        }\n        return this._rpcEngine.handle(payload, cb);\n    }\n    /**\n     * When the provider becomes connected, updates internal state and emits\n     * required events. Idempotent.\n     *\n     * @param chainId - The ID of the newly connected chain.\n     * @emits MetaMaskInpageProvider#connect\n     */\n    _handleConnect(chainId) {\n        if (!this._state.isConnected) {\n            this._state.isConnected = true;\n            this.emit('connect', { chainId });\n            this._log.debug(messages_1.default.info.connected(chainId));\n        }\n    }\n    /**\n     * When the provider becomes disconnected, updates internal state and emits\n     * required events. Idempotent with respect to the isRecoverable parameter.\n     *\n     * Error codes per the CloseEvent status codes as required by EIP-1193:\n     * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n     *\n     * @param isRecoverable - Whether the disconnection is recoverable.\n     * @param errorMessage - A custom error message.\n     * @emits MetaMaskInpageProvider#disconnect\n     */\n    _handleDisconnect(isRecoverable, errorMessage) {\n        if (this._state.isConnected ||\n            (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n            this._state.isConnected = false;\n            let error;\n            if (isRecoverable) {\n                error = new eth_rpc_errors_1.EthereumRpcError(1013, // Try again later\n                errorMessage || messages_1.default.errors.disconnected());\n                this._log.debug(error);\n            }\n            else {\n                error = new eth_rpc_errors_1.EthereumRpcError(1011, // Internal error\n                errorMessage || messages_1.default.errors.permanentlyDisconnected());\n                this._log.error(error);\n                this.chainId = null;\n                this._state.accounts = null;\n                this.selectedAddress = null;\n                this._state.isUnlocked = false;\n                this._state.isPermanentlyDisconnected = true;\n            }\n            this.emit('disconnect', error);\n        }\n    }\n    /**\n     * Called when connection is lost to critical streams.\n     *\n     * @emits MetamaskInpageProvider#disconnect\n     */\n    _handleStreamDisconnect(streamName, error) {\n        utils_1.logStreamDisconnectWarning(this._log, streamName, error, this);\n        this._handleDisconnect(false, error ? error.message : undefined);\n    }\n    /**\n     * Upon receipt of a new chainId and networkVersion, emits corresponding\n     * events and sets relevant public state.\n     * Does nothing if neither the chainId nor the networkVersion are different\n     * from existing values.\n     *\n     * @emits MetamaskInpageProvider#chainChanged\n     * @param networkInfo - An object with network info.\n     * @param networkInfo.chainId - The latest chain ID.\n     * @param networkInfo.networkVersion - The latest network ID.\n     */\n    _handleChainChanged({ chainId, networkVersion, } = {}) {\n        if (!chainId ||\n            typeof chainId !== 'string' ||\n            !chainId.startsWith('0x') ||\n            !networkVersion ||\n            typeof networkVersion !== 'string') {\n            this._log.error('StarMask: Received invalid network parameters. Please report this bug.', { chainId, networkVersion });\n            return;\n        }\n        if (networkVersion === 'loading') {\n            this._handleDisconnect(true);\n        }\n        else {\n            this._handleConnect(chainId);\n            if (chainId !== this.chainId) {\n                this.chainId = chainId;\n                if (this._state.initialized) {\n                    this.emit('chainChanged', this.chainId);\n                }\n            }\n        }\n    }\n    /**\n     * Called when accounts may have changed. Diffs the new accounts value with\n     * the current one, updates all state as necessary, and emits the\n     * accountsChanged event.\n     *\n     * @param accounts - The new accounts value.\n     * @param isEthAccounts - Whether the accounts value was returned by\n     * a call to stc_accounts.\n     */\n    _handleAccountsChanged(accounts, isEthAccounts = false) {\n        let _accounts = accounts;\n        if (!Array.isArray(accounts)) {\n            this._log.error('StarMask: Received invalid accounts parameter. Please report this bug.', accounts);\n            _accounts = [];\n        }\n        for (const account of accounts) {\n            if (typeof account !== 'string') {\n                this._log.error('StarMask: Received non-string account. Please report this bug.', accounts);\n                _accounts = [];\n                break;\n            }\n        }\n        // emit accountsChanged if anything about the accounts array has changed\n        if (!fast_deep_equal_1.default(this._state.accounts, _accounts)) {\n            // we should always have the correct accounts even before stc_accounts\n            // returns\n            if (isEthAccounts && this._state.accounts !== null) {\n                this._log.error(`StarMask: 'stc_accounts' unexpectedly updated accounts. Please report this bug.`, _accounts);\n            }\n            this._state.accounts = _accounts;\n            // handle selectedAddress\n            if (this.selectedAddress !== _accounts[0]) {\n                this.selectedAddress = _accounts[0] || null;\n            }\n            // finally, after all state has been updated, emit the event\n            if (this._state.initialized) {\n                this.emit('accountsChanged', _accounts);\n            }\n        }\n    }\n    /**\n     * Upon receipt of a new isUnlocked state, sets relevant public state.\n     * Calls the accounts changed handler with the received accounts, or an empty\n     * array.\n     *\n     * Does nothing if the received value is equal to the existing value.\n     * There are no lock/unlock events.\n     *\n     * @param opts - Options bag.\n     * @param opts.accounts - The exposed accounts, if any.\n     * @param opts.isUnlocked - The latest isUnlocked value.\n     */\n    _handleUnlockStateChanged({ accounts, isUnlocked, } = {}) {\n        if (typeof isUnlocked !== 'boolean') {\n            this._log.error('StarMask: Received invalid isUnlocked parameter. Please report this bug.');\n            return;\n        }\n        if (isUnlocked !== this._state.isUnlocked) {\n            this._state.isUnlocked = isUnlocked;\n            this._handleAccountsChanged(accounts || []);\n        }\n    }\n}\nexports.default = BaseProvider;\nBaseProvider._defaultState = {\n    accounts: null,\n    isConnected: false,\n    isUnlocked: false,\n    initialized: false,\n    isPermanentlyDisconnected: false,\n};\n\n},{\"./messages\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/messages.js\",\"./utils\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/utils.js\",\"@metamask/object-multiplex\":\"/home/ubuntu/starmask/node_modules/@metamask/object-multiplex/dist/index.js\",\"@metamask/safe-event-emitter\":\"/home/ubuntu/starmask/node_modules/@metamask/safe-event-emitter/index.js\",\"eth-rpc-errors\":\"/home/ubuntu/starmask/node_modules/eth-rpc-errors/dist/index.js\",\"fast-deep-equal\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/node_modules/fast-deep-equal/index.js\",\"is-stream\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/node_modules/is-stream/index.js\",\"json-rpc-engine\":\"/home/ubuntu/starmask/node_modules/json-rpc-engine/dist/index.js\",\"json-rpc-middleware-stream\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/node_modules/json-rpc-middleware-stream/dist/index.js\",\"pump\":\"/home/ubuntu/starmask/node_modules/pump/index.js\"}],\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/MetaMaskInpageProvider.js\":[function(require,module,exports){\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nconst siteMetadata_1 = __importDefault(require(\"./siteMetadata\"));\nconst messages_1 = __importDefault(require(\"./messages\"));\nconst utils_1 = require(\"./utils\");\nconst BaseProvider_1 = __importDefault(require(\"./BaseProvider\"));\nclass MetaMaskInpageProvider extends BaseProvider_1.default {\n    /**\n     * @param connectionStream - A Node.js duplex stream\n     * @param options - An options bag\n     * @param options.jsonRpcStreamName - The name of the internal JSON-RPC stream.\n     * Default: metamask-provider\n     * @param options.logger - The logging API to use. Default: console\n     * @param options.maxEventListeners - The maximum number of event\n     * listeners. Default: 100\n     * @param options.shouldSendMetadata - Whether the provider should\n     * send page metadata. Default: true\n     */\n    constructor(connectionStream, { jsonRpcStreamName = 'starmask-provider', logger = console, maxEventListeners = 100, shouldSendMetadata = true, } = {}) {\n        super(connectionStream, { jsonRpcStreamName, logger, maxEventListeners });\n        this._sentWarnings = {\n            // methods\n            enable: false,\n            experimentalMethods: false,\n            send: false,\n            // events\n            events: {\n                close: false,\n                data: false,\n                networkChanged: false,\n                notification: false,\n            },\n        };\n        this.networkVersion = null;\n        this.isStarMask = true;\n        this._sendSync = this._sendSync.bind(this);\n        this.enable = this.enable.bind(this);\n        this.send = this.send.bind(this);\n        this.sendAsync = this.sendAsync.bind(this);\n        this._warnOfDeprecation = this._warnOfDeprecation.bind(this);\n        this._starmask = this._getExperimentalApi();\n        // handle JSON-RPC notifications\n        this._jsonRpcConnection.events.on('notification', (payload) => {\n            const { method } = payload;\n            if (utils_1.EMITTED_NOTIFICATIONS.includes(method)) {\n                // deprecated\n                // emitted here because that was the original order\n                this.emit('data', payload);\n                // deprecated\n                this.emit('notification', payload.params.result);\n            }\n        });\n        // send website metadata\n        if (shouldSendMetadata) {\n            if (document.readyState === 'complete') {\n                siteMetadata_1.default(this._rpcEngine, this._log);\n            }\n            else {\n                const domContentLoadedHandler = () => {\n                    siteMetadata_1.default(this._rpcEngine, this._log);\n                    window.removeEventListener('DOMContentLoaded', domContentLoadedHandler);\n                };\n                window.addEventListener('DOMContentLoaded', domContentLoadedHandler);\n            }\n        }\n    }\n    //====================\n    // Public Methods\n    //====================\n    /**\n     * Submits an RPC request per the given JSON-RPC request object.\n     *\n     * @param payload - The RPC request object.\n     * @param cb - The callback function.\n     */\n    sendAsync(payload, callback) {\n        this._rpcRequest(payload, callback);\n    }\n    /**\n     * We override the following event methods so that we can warn consumers\n     * about deprecated events:\n     *   addListener, on, once, prependListener, prependOnceListener\n     */\n    addListener(eventName, listener) {\n        this._warnOfDeprecation(eventName);\n        return super.addListener(eventName, listener);\n    }\n    on(eventName, listener) {\n        this._warnOfDeprecation(eventName);\n        return super.on(eventName, listener);\n    }\n    once(eventName, listener) {\n        this._warnOfDeprecation(eventName);\n        return super.once(eventName, listener);\n    }\n    prependListener(eventName, listener) {\n        this._warnOfDeprecation(eventName);\n        return super.prependListener(eventName, listener);\n    }\n    prependOnceListener(eventName, listener) {\n        this._warnOfDeprecation(eventName);\n        return super.prependOnceListener(eventName, listener);\n    }\n    //====================\n    // Private Methods\n    //====================\n    /**\n     * When the provider becomes disconnected, updates internal state and emits\n     * required events. Idempotent with respect to the isRecoverable parameter.\n     *\n     * Error codes per the CloseEvent status codes as required by EIP-1193:\n     * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n     *\n     * @param isRecoverable - Whether the disconnection is recoverable.\n     * @param errorMessage - A custom error message.\n     * @emits MetaMaskInpageProvider#disconnect\n     */\n    _handleDisconnect(isRecoverable, errorMessage) {\n        super._handleDisconnect(isRecoverable, errorMessage);\n        if (this.networkVersion && !isRecoverable) {\n            this.networkVersion = null;\n        }\n    }\n    /**\n     * Warns of deprecation for the given event, if applicable.\n     */\n    _warnOfDeprecation(eventName) {\n        var _a;\n        if (((_a = this._sentWarnings) === null || _a === void 0 ? void 0 : _a.events[eventName]) === false) {\n            this._log.warn(messages_1.default.warnings.events[eventName]);\n            this._sentWarnings.events[eventName] = true;\n        }\n    }\n    //====================\n    // Deprecated Methods\n    //====================\n    /**\n     * Equivalent to: ethereum.request('stc_requestAccounts')\n     *\n     * @deprecated Use request({ method: 'stc_requestAccounts' }) instead.\n     * @returns A promise that resolves to an array of addresses.\n     */\n    enable() {\n        if (!this._sentWarnings.enable) {\n            this._log.warn(messages_1.default.warnings.enableDeprecation);\n            this._sentWarnings.enable = true;\n        }\n        return new Promise((resolve, reject) => {\n            try {\n                this._rpcRequest({ method: 'stc_requestAccounts', params: [] }, utils_1.getRpcPromiseCallback(resolve, reject));\n            }\n            catch (error) {\n                reject(error);\n            }\n        });\n    }\n    send(methodOrPayload, callbackOrArgs) {\n        if (!this._sentWarnings.send) {\n            this._log.warn(messages_1.default.warnings.sendDeprecation);\n            this._sentWarnings.send = true;\n        }\n        if (typeof methodOrPayload === 'string' &&\n            (!callbackOrArgs || Array.isArray(callbackOrArgs))) {\n            return new Promise((resolve, reject) => {\n                try {\n                    this._rpcRequest({ method: methodOrPayload, params: callbackOrArgs }, utils_1.getRpcPromiseCallback(resolve, reject, false));\n                }\n                catch (error) {\n                    reject(error);\n                }\n            });\n        }\n        else if (methodOrPayload &&\n            typeof methodOrPayload === 'object' &&\n            typeof callbackOrArgs === 'function') {\n            return this._rpcRequest(methodOrPayload, callbackOrArgs);\n        }\n        return this._sendSync(methodOrPayload);\n    }\n    /**\n     * Internal backwards compatibility method, used in send.\n     *\n     * @deprecated\n     */\n    _sendSync(payload) {\n        let result;\n        switch (payload.method) {\n            case 'stc_accounts':\n                result = this.selectedAddress ? [this.selectedAddress] : [];\n                break;\n            case 'stc_coinbase':\n                result = this.selectedAddress || null;\n                break;\n            case 'stc_uninstallFilter':\n                this._rpcRequest(payload, utils_1.NOOP);\n                result = true;\n                break;\n            case 'net_version':\n                result = this.networkVersion || null;\n                break;\n            default:\n                throw new Error(messages_1.default.errors.unsupportedSync(payload.method));\n        }\n        return {\n            id: payload.id,\n            jsonrpc: payload.jsonrpc,\n            result,\n        };\n    }\n    /**\n     * Constructor helper.\n     * Gets experimental _starmask API as Proxy, so that we can warn consumers\n     * about its experiment nature.\n     */\n    _getExperimentalApi() {\n        return new Proxy({\n            /**\n             * Determines if MetaMask is unlocked by the user.\n             *\n             * @returns Promise resolving to true if MetaMask is currently unlocked\n             */\n            isUnlocked: async () => {\n                if (!this._state.initialized) {\n                    await new Promise((resolve) => {\n                        this.on('_initialized', () => resolve());\n                    });\n                }\n                return this._state.isUnlocked;\n            },\n            /**\n             * Make a batch RPC request.\n             */\n            requestBatch: async (requests) => {\n                if (!Array.isArray(requests)) {\n                    throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                        message: 'Batch requests must be made with an array of request objects.',\n                        data: requests,\n                    });\n                }\n                return new Promise((resolve, reject) => {\n                    this._rpcRequest(requests, utils_1.getRpcPromiseCallback(resolve, reject));\n                });\n            },\n        }, {\n            get: (obj, prop, ...args) => {\n                if (!this._sentWarnings.experimentalMethods) {\n                    this._log.warn(messages_1.default.warnings.experimentalMethods);\n                    this._sentWarnings.experimentalMethods = true;\n                }\n                return Reflect.get(obj, prop, ...args);\n            },\n        });\n    }\n    /**\n     * Upon receipt of a new chainId and networkVersion, emits corresponding\n     * events and sets relevant public state.\n     * Does nothing if neither the chainId nor the networkVersion are different\n     * from existing values.\n     *\n     * @emits MetamaskInpageProvider#chainChanged\n     * @emits MetamaskInpageProvider#networkChanged\n     * @param networkInfo - An object with network info.\n     * @param networkInfo.chainId - The latest chain ID.\n     * @param networkInfo.networkVersion - The latest network ID.\n     */\n    _handleChainChanged({ chainId, networkVersion, } = {}) {\n        super._handleChainChanged({ chainId, networkVersion });\n        if (networkVersion &&\n            networkVersion !== 'loading' &&\n            networkVersion !== this.networkVersion) {\n            this.networkVersion = networkVersion;\n            if (this._state.initialized) {\n                this.emit('networkChanged', this.networkVersion);\n            }\n        }\n    }\n}\nexports.default = MetaMaskInpageProvider;\n\n},{\"./BaseProvider\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/BaseProvider.js\",\"./messages\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/messages.js\",\"./siteMetadata\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/siteMetadata.js\",\"./utils\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/utils.js\",\"eth-rpc-errors\":\"/home/ubuntu/starmask/node_modules/eth-rpc-errors/dist/index.js\"}],\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/extension-provider/createExternalExtensionProvider.js\":[function(require,module,exports){\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst extension_port_stream_1 = __importDefault(require(\"extension-port-stream\"));\nconst detect_browser_1 = require(\"detect-browser\");\nconst BaseProvider_1 = __importDefault(require(\"../BaseProvider\"));\nconst external_extension_config_json_1 = __importDefault(require(\"./external-extension-config.json\"));\nconst browser = detect_browser_1.detect();\nfunction createMetaMaskExternalExtensionProvider() {\n    let provider;\n    try {\n        const currentMetaMaskId = getMetaMaskId();\n        const metamaskPort = chrome.runtime.connect(currentMetaMaskId);\n        const pluginStream = new extension_port_stream_1.default(metamaskPort);\n        provider = new BaseProvider_1.default(pluginStream);\n    }\n    catch (e) {\n        console.dir(`Starmask connect error `, e);\n        throw e;\n    }\n    return provider;\n}\nexports.default = createMetaMaskExternalExtensionProvider;\nfunction getMetaMaskId() {\n    switch (browser === null || browser === void 0 ? void 0 : browser.name) {\n        case 'chrome':\n            return external_extension_config_json_1.default.CHROME_ID;\n        case 'firefox':\n            return external_extension_config_json_1.default.FIREFOX_ID;\n        default:\n            return external_extension_config_json_1.default.CHROME_ID;\n    }\n}\n\n},{\"../BaseProvider\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/BaseProvider.js\",\"./external-extension-config.json\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/extension-provider/external-extension-config.json\",\"detect-browser\":\"/home/ubuntu/starmask/node_modules/detect-browser/index.js\",\"extension-port-stream\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/node_modules/extension-port-stream/dist/index.js\"}],\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/extension-provider/external-extension-config.json\":[function(require,module,exports){\nmodule.exports={\n    \"CHROME_ID\": \"mfhbebgoclkghebffdldpobeajmbecfk\",\n    \"FIREFOX_ID\": \"webextension@westar.io\"\n}\n\n},{}],\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/index.js\":[function(require,module,exports){\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createExternalExtensionProvider = exports.setGlobalProvider = exports.BaseProvider = exports.MetaMaskInpageProvider = exports.initializeProvider = void 0;\nconst MetaMaskInpageProvider_1 = __importDefault(require(\"./MetaMaskInpageProvider\"));\nexports.MetaMaskInpageProvider = MetaMaskInpageProvider_1.default;\nconst createExternalExtensionProvider_1 = __importDefault(require(\"./extension-provider/createExternalExtensionProvider\"));\nexports.createExternalExtensionProvider = createExternalExtensionProvider_1.default;\nconst BaseProvider_1 = __importDefault(require(\"./BaseProvider\"));\nexports.BaseProvider = BaseProvider_1.default;\nconst initializeInpageProvider_1 = require(\"./initializeInpageProvider\");\nObject.defineProperty(exports, \"initializeProvider\", { enumerable: true, get: function () { return initializeInpageProvider_1.initializeProvider; } });\nObject.defineProperty(exports, \"setGlobalProvider\", { enumerable: true, get: function () { return initializeInpageProvider_1.setGlobalProvider; } });\n\n},{\"./BaseProvider\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/BaseProvider.js\",\"./MetaMaskInpageProvider\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/MetaMaskInpageProvider.js\",\"./extension-provider/createExternalExtensionProvider\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/extension-provider/createExternalExtensionProvider.js\",\"./initializeInpageProvider\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/initializeInpageProvider.js\"}],\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/initializeInpageProvider.js\":[function(require,module,exports){\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setGlobalProvider = exports.initializeProvider = void 0;\nconst MetaMaskInpageProvider_1 = __importDefault(require(\"./MetaMaskInpageProvider\"));\n/**\n * Initializes a MetaMaskInpageProvider and (optionally) assigns it as window.ethereum.\n *\n * @param options - An options bag.\n * @param options.connectionStream - A Node.js stream.\n * @param options.jsonRpcStreamName - The name of the internal JSON-RPC stream.\n * @param options.maxEventListeners - The maximum number of event listeners.\n * @param options.shouldSendMetadata - Whether the provider should send page metadata.\n * @param options.shouldSetOnWindow - Whether the provider should be set as window.ethereum.\n * @returns The initialized provider (whether set or not).\n */\nfunction initializeProvider({ connectionStream, jsonRpcStreamName, logger = console, maxEventListeners = 100, shouldSendMetadata = true, shouldSetOnWindow = true, }) {\n    let provider = new MetaMaskInpageProvider_1.default(connectionStream, {\n        jsonRpcStreamName,\n        logger,\n        maxEventListeners,\n        shouldSendMetadata,\n    });\n    provider = new Proxy(provider, {\n        // some common libraries, e.g. web3@1.x, mess with our API\n        deleteProperty: () => true,\n    });\n    if (shouldSetOnWindow) {\n        setGlobalProvider(provider);\n    }\n    return provider;\n}\nexports.initializeProvider = initializeProvider;\n/**\n * Sets the given provider instance as window.starcoin and dispatches the\n * 'starcoin#initialized' event on window.\n *\n * @param providerInstance - The provider instance.\n */\nfunction setGlobalProvider(providerInstance) {\n    window.starcoin = providerInstance;\n    window.dispatchEvent(new Event('starcoin#initialized'));\n}\nexports.setGlobalProvider = setGlobalProvider;\n\n},{\"./MetaMaskInpageProvider\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/MetaMaskInpageProvider.js\"}],\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/messages.js\":[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst messages = {\n    errors: {\n        disconnected: () => 'StarMask: Disconnected from chain. Attempting to connect.',\n        permanentlyDisconnected: () => 'StarMask: Disconnected from StarMask background. Page reload required.',\n        sendSiteMetadata: () => `StarMask: Failed to send site metadata. This is an internal error, please report this bug.`,\n        unsupportedSync: (method) => `StarMask: The StarMask Starcoin provider does not support synchronous methods like ${method} without a callback parameter.`,\n        invalidDuplexStream: () => 'Must provide a Node.js-style duplex stream.',\n        invalidRequestArgs: () => `Expected a single, non-array, object argument.`,\n        invalidRequestMethod: () => `'args.method' must be a non-empty string.`,\n        invalidRequestParams: () => `'args.params' must be an object or array if provided.`,\n        invalidLoggerObject: () => `'args.logger' must be an object if provided.`,\n        invalidLoggerMethod: (method) => `'args.logger' must include required method '${method}'.`,\n    },\n    info: {\n        connected: (chainId) => `StarMask: Connected to chain with ID \"${chainId}\".`,\n    },\n    warnings: {\n        // deprecated methods\n        enableDeprecation: `StarMask: 'starcoin.enable()' is deprecated and may be removed in the future. Please use the 'stc_requestAccounts' RPC method instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1102`,\n        sendDeprecation: `StarMask: 'starcoin.send(...)' is deprecated and may be removed in the future. Please use 'starcoin.sendAsync(...)' or 'starcoin.request(...)' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193`,\n        // deprecated events\n        events: {\n            close: `StarMask: The event 'close' is deprecated and may be removed in the future. Please use 'disconnect' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#disconnect`,\n            data: `StarMask: The event 'data' is deprecated and will be removed in the future. Use 'message' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#message`,\n            networkChanged: `StarMask: The event 'networkChanged' is deprecated and may be removed in the future. Use 'chainChanged' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#chainchanged`,\n            notification: `StarMask: The event 'notification' is deprecated and may be removed in the future. Use 'message' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#message`,\n        },\n        // misc\n        experimentalMethods: `StarMask: 'starcoin._metamask' exposes non-standard, experimental methods. They may be removed or changed without warning.`,\n    },\n};\nexports.default = messages;\n\n},{}],\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/siteMetadata.js\":[function(require,module,exports){\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst messages_1 = __importDefault(require(\"./messages\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Sends site metadata over an RPC request.\n *\n * @param engine - The JSON RPC Engine to send metadata over.\n * @param log - The logging API to use.\n */\nasync function sendSiteMetadata(engine, log) {\n    try {\n        const domainMetadata = await getSiteMetadata();\n        // call engine.handle directly to avoid normal RPC request handling\n        engine.handle({\n            jsonrpc: '2.0',\n            id: 1,\n            method: 'metamask_sendDomainMetadata',\n            params: domainMetadata,\n        }, utils_1.NOOP);\n    }\n    catch (error) {\n        log.error({\n            message: messages_1.default.errors.sendSiteMetadata(),\n            originalError: error,\n        });\n    }\n}\nexports.default = sendSiteMetadata;\n/**\n * Gets site metadata and returns it\n *\n */\nasync function getSiteMetadata() {\n    return {\n        name: getSiteName(window),\n        icon: await getSiteIcon(window),\n    };\n}\n/**\n * Extracts a name for the site from the DOM\n */\nfunction getSiteName(windowObject) {\n    const { document } = windowObject;\n    const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n    if (siteName) {\n        return siteName.content;\n    }\n    const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n    if (metaTitle) {\n        return metaTitle.content;\n    }\n    if (document.title && document.title.length > 0) {\n        return document.title;\n    }\n    return window.location.hostname;\n}\n/**\n * Extracts an icon for the site from the DOM\n * @returns an icon URL\n */\nasync function getSiteIcon(windowObject) {\n    const { document } = windowObject;\n    const icons = document.querySelectorAll('head > link[rel~=\"icon\"]');\n    for (const icon of icons) {\n        if (icon && (await imgExists(icon.href))) {\n            return icon.href;\n        }\n    }\n    return null;\n}\n/**\n * Returns whether the given image URL exists\n * @param url - the url of the image\n * @returns Whether the image exists.\n */\nfunction imgExists(url) {\n    return new Promise((resolve, reject) => {\n        try {\n            const img = document.createElement('img');\n            img.onload = () => resolve(true);\n            img.onerror = () => resolve(false);\n            img.src = url;\n        }\n        catch (e) {\n            reject(e);\n        }\n    });\n}\n\n},{\"./messages\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/messages.js\",\"./utils\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/utils.js\"}],\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/dist/utils.js\":[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EMITTED_NOTIFICATIONS = exports.NOOP = exports.logStreamDisconnectWarning = exports.getRpcPromiseCallback = exports.createErrorMiddleware = void 0;\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n// utility functions\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\nfunction createErrorMiddleware(log) {\n    return (req, res, next) => {\n        // json-rpc-engine will terminate the request when it notices this error\n        if (typeof req.method !== 'string' || !req.method) {\n            res.error = eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: `The request 'method' must be a non-empty string.`,\n                data: req,\n            });\n        }\n        next((done) => {\n            const { error } = res;\n            if (!error) {\n                return done();\n            }\n            log.error(res);\n            log.error(`StarMask - RPC Error: ${error.message}`, error);\n            return done();\n        });\n    };\n}\nexports.createErrorMiddleware = createErrorMiddleware;\n// resolve response.result or response, reject errors\nconst getRpcPromiseCallback = (resolve, reject, unwrapResult = true) => (error, response) => {\n    if (error || response.error) {\n        reject(error || response.error);\n    }\n    else {\n        !unwrapResult || Array.isArray(response)\n            ? resolve(response)\n            : resolve(response.result);\n    }\n};\nexports.getRpcPromiseCallback = getRpcPromiseCallback;\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\nfunction logStreamDisconnectWarning(log, remoteLabel, error, emitter) {\n    let warningMsg = `StarMask: Lost connection to \"${remoteLabel}\".`;\n    if (error === null || error === void 0 ? void 0 : error.stack) {\n        warningMsg += `\\n${error.stack}`;\n    }\n    log.warn(warningMsg);\n    if (emitter && emitter.listenerCount('error') > 0) {\n        emitter.emit('error', warningMsg);\n    }\n}\nexports.logStreamDisconnectWarning = logStreamDisconnectWarning;\nconst NOOP = () => undefined;\nexports.NOOP = NOOP;\n// constants\nexports.EMITTED_NOTIFICATIONS = [\n    'stc_subscription', // per eth-json-rpc-filters/subscriptionManager\n];\n\n},{\"eth-rpc-errors\":\"/home/ubuntu/starmask/node_modules/eth-rpc-errors/dist/index.js\"}],\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/node_modules/extension-port-stream/dist/index.js\":[function(require,module,exports){\n(function (Buffer){\n\"use strict\";\nconst stream_1 = require(\"stream\");\nmodule.exports = class PortDuplexStream extends stream_1.Duplex {\n    /**\n     * @param port - An instance of WebExtensions Runtime.Port. See:\n     * {@link https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/Port}\n     */\n    constructor(port) {\n        super({ objectMode: true });\n        this._port = port;\n        this._port.onMessage.addListener((msg) => this._onMessage(msg));\n        this._port.onDisconnect.addListener(() => this._onDisconnect());\n    }\n    /**\n     * Callback triggered when a message is received from\n     * the remote Port associated with this Stream.\n     *\n     * @param msg - Payload from the onMessage listener of the port\n     */\n    _onMessage(msg) {\n        if (Buffer.isBuffer(msg)) {\n            const data = Buffer.from(msg);\n            this.push(data);\n        }\n        else {\n            this.push(msg);\n        }\n    }\n    /**\n     * Callback triggered when the remote Port associated with this Stream\n     * disconnects.\n     */\n    _onDisconnect() {\n        this.destroy();\n    }\n    /**\n     * Explicitly sets read operations to a no-op.\n     */\n    _read() {\n        return undefined;\n    }\n    /**\n     * Called internally when data should be written to this writable stream.\n     *\n     * @param msg - Arbitrary object to write\n     * @param encoding - Encoding to use when writing payload\n     * @param cb - Called when writing is complete or an error occurs\n     */\n    _write(msg, _encoding, cb) {\n        try {\n            if (Buffer.isBuffer(msg)) {\n                const data = msg.toJSON();\n                data._isBuffer = true;\n                this._port.postMessage(data);\n            }\n            else {\n                this._port.postMessage(msg);\n            }\n        }\n        catch (error) {\n            return cb(new Error('PortDuplexStream - disconnected'));\n        }\n        return cb();\n    }\n};\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"buffer\":\"/home/ubuntu/starmask/node_modules/browserify/node_modules/buffer/index.js\",\"stream\":\"/home/ubuntu/starmask/node_modules/stream-browserify/index.js\"}],\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/node_modules/fast-deep-equal/index.js\":[function(require,module,exports){\n'use strict';\n\nvar isArray = Array.isArray;\nvar keyList = Object.keys;\nvar hasProp = Object.prototype.hasOwnProperty;\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var arrA = isArray(a)\n      , arrB = isArray(b)\n      , i\n      , length\n      , key;\n\n    if (arrA && arrB) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    if (arrA != arrB) return false;\n\n    var dateA = a instanceof Date\n      , dateB = b instanceof Date;\n    if (dateA != dateB) return false;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n\n    var regexpA = a instanceof RegExp\n      , regexpB = b instanceof RegExp;\n    if (regexpA != regexpB) return false;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n\n    var keys = keyList(a);\n    length = keys.length;\n\n    if (length !== keyList(b).length)\n      return false;\n\n    for (i = length; i-- !== 0;)\n      if (!hasProp.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      key = keys[i];\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  return a!==a && b!==b;\n};\n\n},{}],\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/node_modules/is-stream/index.js\":[function(require,module,exports){\n'use strict';\n\nconst isStream = stream =>\n\tstream !== null &&\n\ttypeof stream === 'object' &&\n\ttypeof stream.pipe === 'function';\n\nisStream.writable = stream =>\n\tisStream(stream) &&\n\tstream.writable !== false &&\n\ttypeof stream._write === 'function' &&\n\ttypeof stream._writableState === 'object';\n\nisStream.readable = stream =>\n\tisStream(stream) &&\n\tstream.readable !== false &&\n\ttypeof stream._read === 'function' &&\n\ttypeof stream._readableState === 'object';\n\nisStream.duplex = stream =>\n\tisStream.writable(stream) &&\n\tisStream.readable(stream);\n\nisStream.transform = stream =>\n\tisStream.duplex(stream) &&\n\ttypeof stream._transform === 'function' &&\n\ttypeof stream._transformState === 'object';\n\nmodule.exports = isStream;\n\n},{}],\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/node_modules/json-rpc-middleware-stream/dist/createEngineStream.js\":[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst readable_stream_1 = require(\"readable-stream\");\n/**\n * Takes a JsonRpcEngine and returns a Duplex stream wrapping it.\n *\n * @param opts - Options bag.\n * @param opts.engine - The JsonRpcEngine to wrap in a stream.\n * @returns The stream wrapping the engine.\n */\nfunction createEngineStream(opts) {\n    if (!opts || !opts.engine) {\n        throw new Error('Missing engine parameter!');\n    }\n    const { engine } = opts;\n    const stream = new readable_stream_1.Duplex({ objectMode: true, read, write });\n    // forward notifications\n    if (engine.on) {\n        engine.on('notification', (message) => {\n            stream.push(message);\n        });\n    }\n    return stream;\n    function read() {\n        return undefined;\n    }\n    function write(req, _encoding, cb) {\n        engine.handle(req, (_err, res) => {\n            stream.push(res);\n        });\n        cb();\n    }\n}\nexports.default = createEngineStream;\n\n},{\"readable-stream\":\"/home/ubuntu/starmask/node_modules/readable-stream/readable-browser.js\"}],\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/node_modules/json-rpc-middleware-stream/dist/createStreamMiddleware.js\":[function(require,module,exports){\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst readable_stream_1 = require(\"readable-stream\");\n/**\n * Creates a JsonRpcEngine middleware with an associated Duplex stream and\n * EventEmitter. The middleware, and by extension stream, assume that middleware\n * parameters are properly formatted. No runtime type checking or validation is\n * performed.\n *\n * @returns The event emitter, middleware, and stream.\n */\nfunction createStreamMiddleware() {\n    const idMap = {};\n    const stream = new readable_stream_1.Duplex({\n        objectMode: true,\n        read: readNoop,\n        write: processMessage,\n    });\n    const events = new safe_event_emitter_1.default();\n    const middleware = (req, res, next, end) => {\n        // write req to stream\n        stream.push(req);\n        // register request on id map\n        idMap[req.id] = { req, res, next, end };\n    };\n    return { events, middleware, stream };\n    function readNoop() {\n        return false;\n    }\n    function processMessage(res, _encoding, cb) {\n        let err;\n        try {\n            const isNotification = !res.id;\n            if (isNotification) {\n                processNotification(res);\n            }\n            else {\n                processResponse(res);\n            }\n        }\n        catch (_err) {\n            err = _err;\n        }\n        // continue processing stream\n        cb(err);\n    }\n    function processResponse(res) {\n        const context = idMap[res.id];\n        if (!context) {\n            throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n        }\n        delete idMap[res.id];\n        // copy whole res onto original res\n        Object.assign(context.res, res);\n        // run callback on empty stack,\n        // prevent internal stream-handler from catching errors\n        setTimeout(context.end);\n    }\n    function processNotification(res) {\n        events.emit('notification', res);\n    }\n}\nexports.default = createStreamMiddleware;\n\n},{\"@metamask/safe-event-emitter\":\"/home/ubuntu/starmask/node_modules/@metamask/safe-event-emitter/index.js\",\"readable-stream\":\"/home/ubuntu/starmask/node_modules/readable-stream/readable-browser.js\"}],\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/node_modules/json-rpc-middleware-stream/dist/index.js\":[function(require,module,exports){\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createStreamMiddleware = exports.createEngineStream = void 0;\nconst createEngineStream_1 = __importDefault(require(\"./createEngineStream\"));\nexports.createEngineStream = createEngineStream_1.default;\nconst createStreamMiddleware_1 = __importDefault(require(\"./createStreamMiddleware\"));\nexports.createStreamMiddleware = createStreamMiddleware_1.default;\n\n},{\"./createEngineStream\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/node_modules/json-rpc-middleware-stream/dist/createEngineStream.js\",\"./createStreamMiddleware\":\"/home/ubuntu/starmask/node_modules/@starcoin/stc-inpage-provider/node_modules/json-rpc-middleware-stream/dist/createStreamMiddleware.js\"}],\"/home/ubuntu/starmask/node_modules/base64-js/index.js\":[function(require,module,exports){\n'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n},{}],\"/home/ubuntu/starmask/node_modules/browser-resolve/empty.js\":[function(require,module,exports){\n\n},{}],\"/home/ubuntu/starmask/node_modules/browserify/node_modules/buffer/index.js\":[function(require,module,exports){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species != null &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayLike(value)\n  }\n\n  if (value == null) {\n    throw TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n          : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n},{\"base64-js\":\"/home/ubuntu/starmask/node_modules/base64-js/index.js\",\"ieee754\":\"/home/ubuntu/starmask/node_modules/ieee754/index.js\"}],\"/home/ubuntu/starmask/node_modules/browserify/node_modules/events/events.js\":[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n\n},{}],\"/home/ubuntu/starmask/node_modules/core-util-is/lib/util.js\":[function(require,module,exports){\n(function (Buffer){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n}).call(this,{\"isBuffer\":require(\"../../is-buffer/index.js\")})\n\n},{\"../../is-buffer/index.js\":\"/home/ubuntu/starmask/node_modules/is-buffer/index.js\"}],\"/home/ubuntu/starmask/node_modules/detect-browser/index.js\":[function(require,module,exports){\n(function (process){\n\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BrowserInfo = /** @class */ (function () {\n    function BrowserInfo(name, version, os) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.type = 'browser';\n    }\n    return BrowserInfo;\n}());\nexports.BrowserInfo = BrowserInfo;\nvar NodeInfo = /** @class */ (function () {\n    function NodeInfo(version) {\n        this.version = version;\n        this.type = 'node';\n        this.name = 'node';\n        this.os = process.platform;\n    }\n    return NodeInfo;\n}());\nexports.NodeInfo = NodeInfo;\nvar SearchBotDeviceInfo = /** @class */ (function () {\n    function SearchBotDeviceInfo(name, version, os, bot) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.bot = bot;\n        this.type = 'bot-device';\n    }\n    return SearchBotDeviceInfo;\n}());\nexports.SearchBotDeviceInfo = SearchBotDeviceInfo;\nvar BotInfo = /** @class */ (function () {\n    function BotInfo() {\n        this.type = 'bot';\n        this.bot = true; // NOTE: deprecated test name instead\n        this.name = 'bot';\n        this.version = null;\n        this.os = null;\n    }\n    return BotInfo;\n}());\nexports.BotInfo = BotInfo;\nvar ReactNativeInfo = /** @class */ (function () {\n    function ReactNativeInfo() {\n        this.type = 'react-native';\n        this.name = 'react-native';\n        this.version = null;\n        this.os = null;\n    }\n    return ReactNativeInfo;\n}());\nexports.ReactNativeInfo = ReactNativeInfo;\n// tslint:disable-next-line:max-line-length\nvar SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;\nvar SEARCHBOT_OS_REGEX = /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\\ Jeeves\\/Teoma|ia_archiver)/;\nvar REQUIRED_VERSION_PARTS = 3;\nvar userAgentRules = [\n    ['aol', /AOLShield\\/([0-9\\._]+)/],\n    ['edge', /Edge\\/([0-9\\._]+)/],\n    ['edge-ios', /EdgiOS\\/([0-9\\._]+)/],\n    ['yandexbrowser', /YaBrowser\\/([0-9\\._]+)/],\n    ['kakaotalk', /KAKAOTALK\\s([0-9\\.]+)/],\n    ['samsung', /SamsungBrowser\\/([0-9\\.]+)/],\n    ['silk', /\\bSilk\\/([0-9._-]+)\\b/],\n    ['miui', /MiuiBrowser\\/([0-9\\.]+)$/],\n    ['beaker', /BeakerBrowser\\/([0-9\\.]+)/],\n    ['edge-chromium', /EdgA?\\/([0-9\\.]+)/],\n    [\n        'chromium-webview',\n        /(?!Chrom.*OPR)wv\\).*Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/,\n    ],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/],\n    ['phantomjs', /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['crios', /CriOS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9\\.]+)(?:\\s|$)/],\n    ['fxios', /FxiOS\\/([0-9\\.]+)/],\n    ['opera-mini', /Opera Mini.*Version\\/([0-9\\.]+)/],\n    ['opera', /Opera\\/([0-9\\.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9\\.]+)(:?\\s|$)/],\n    ['ie', /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/],\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9\\.]+)/],\n    ['android', /Android\\s([0-9\\.]+)/],\n    ['ios', /Version\\/([0-9\\._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9\\._]+).*Safari/],\n    ['facebook', /FBAV\\/([0-9\\.]+)/],\n    ['instagram', /Instagram\\s([0-9\\.]+)/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Mobile/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Gecko\\)$/],\n    ['searchbot', SEARCHBOX_UA_REGEX],\n];\nvar operatingSystemRules = [\n    ['iOS', /iP(hone|od|ad)/],\n    ['Android OS', /Android/],\n    ['BlackBerry OS', /BlackBerry|BB10/],\n    ['Windows Mobile', /IEMobile/],\n    ['Amazon OS', /Kindle/],\n    ['Windows 3.11', /Win16/],\n    ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],\n    ['Windows 98', /(Windows 98)|(Win98)/],\n    ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],\n    ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],\n    ['Windows Server 2003', /(Windows NT 5.2)/],\n    ['Windows Vista', /(Windows NT 6.0)/],\n    ['Windows 7', /(Windows NT 6.1)/],\n    ['Windows 8', /(Windows NT 6.2)/],\n    ['Windows 8.1', /(Windows NT 6.3)/],\n    ['Windows 10', /(Windows NT 10.0)/],\n    ['Windows ME', /Windows ME/],\n    ['Open BSD', /OpenBSD/],\n    ['Sun OS', /SunOS/],\n    ['Chrome OS', /CrOS/],\n    ['Linux', /(Linux)|(X11)/],\n    ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],\n    ['QNX', /QNX/],\n    ['BeOS', /BeOS/],\n    ['OS/2', /OS\\/2/],\n];\nfunction detect(userAgent) {\n    if (!!userAgent) {\n        return parseUserAgent(userAgent);\n    }\n    if (typeof document === 'undefined' &&\n        typeof navigator !== 'undefined' &&\n        navigator.product === 'ReactNative') {\n        return new ReactNativeInfo();\n    }\n    if (typeof navigator !== 'undefined') {\n        return parseUserAgent(navigator.userAgent);\n    }\n    return getNodeVersion();\n}\nexports.detect = detect;\nfunction matchUserAgent(ua) {\n    // opted for using reduce here rather than Array#first with a regex.test call\n    // this is primarily because using the reduce we only perform the regex\n    // execution once rather than once for the test and for the exec again below\n    // probably something that needs to be benchmarked though\n    return (ua !== '' &&\n        userAgentRules.reduce(function (matched, _a) {\n            var browser = _a[0], regex = _a[1];\n            if (matched) {\n                return matched;\n            }\n            var uaMatch = regex.exec(ua);\n            return !!uaMatch && [browser, uaMatch];\n        }, false));\n}\nfunction browserName(ua) {\n    var data = matchUserAgent(ua);\n    return data ? data[0] : null;\n}\nexports.browserName = browserName;\nfunction parseUserAgent(ua) {\n    var matchedRule = matchUserAgent(ua);\n    if (!matchedRule) {\n        return null;\n    }\n    var name = matchedRule[0], match = matchedRule[1];\n    if (name === 'searchbot') {\n        return new BotInfo();\n    }\n    var versionParts = match[1] && match[1].split(/[._]/).slice(0, 3);\n    if (versionParts) {\n        if (versionParts.length < REQUIRED_VERSION_PARTS) {\n            versionParts = __spreadArrays(versionParts, createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length));\n        }\n    }\n    else {\n        versionParts = [];\n    }\n    var version = versionParts.join('.');\n    var os = detectOS(ua);\n    var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);\n    if (searchBotMatch && searchBotMatch[1]) {\n        return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);\n    }\n    return new BrowserInfo(name, version, os);\n}\nexports.parseUserAgent = parseUserAgent;\nfunction detectOS(ua) {\n    for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {\n        var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];\n        var match = regex.exec(ua);\n        if (match) {\n            return os;\n        }\n    }\n    return null;\n}\nexports.detectOS = detectOS;\nfunction getNodeVersion() {\n    var isNode = typeof process !== 'undefined' && process.version;\n    return isNode ? new NodeInfo(process.version.slice(1)) : null;\n}\nexports.getNodeVersion = getNodeVersion;\nfunction createVersionParts(count) {\n    var output = [];\n    for (var ii = 0; ii < count; ii++) {\n        output.push('0');\n    }\n    return output;\n}\n\n}).call(this,require('_process'))\n\n},{\"_process\":\"/home/ubuntu/starmask/node_modules/process/browser.js\"}],\"/home/ubuntu/starmask/node_modules/end-of-stream/index.js\":[function(require,module,exports){\n(function (process){\nvar once = require('once');\n\nvar noop = function() {};\n\nvar isRequest = function(stream) {\n\treturn stream.setHeader && typeof stream.abort === 'function';\n};\n\nvar isChildProcess = function(stream) {\n\treturn stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3\n};\n\nvar eos = function(stream, opts, callback) {\n\tif (typeof opts === 'function') return eos(stream, null, opts);\n\tif (!opts) opts = {};\n\n\tcallback = once(callback || noop);\n\n\tvar ws = stream._writableState;\n\tvar rs = stream._readableState;\n\tvar readable = opts.readable || (opts.readable !== false && stream.readable);\n\tvar writable = opts.writable || (opts.writable !== false && stream.writable);\n\tvar cancelled = false;\n\n\tvar onlegacyfinish = function() {\n\t\tif (!stream.writable) onfinish();\n\t};\n\n\tvar onfinish = function() {\n\t\twritable = false;\n\t\tif (!readable) callback.call(stream);\n\t};\n\n\tvar onend = function() {\n\t\treadable = false;\n\t\tif (!writable) callback.call(stream);\n\t};\n\n\tvar onexit = function(exitCode) {\n\t\tcallback.call(stream, exitCode ? new Error('exited with error code: ' + exitCode) : null);\n\t};\n\n\tvar onerror = function(err) {\n\t\tcallback.call(stream, err);\n\t};\n\n\tvar onclose = function() {\n\t\tprocess.nextTick(onclosenexttick);\n\t};\n\n\tvar onclosenexttick = function() {\n\t\tif (cancelled) return;\n\t\tif (readable && !(rs && (rs.ended && !rs.destroyed))) return callback.call(stream, new Error('premature close'));\n\t\tif (writable && !(ws && (ws.ended && !ws.destroyed))) return callback.call(stream, new Error('premature close'));\n\t};\n\n\tvar onrequest = function() {\n\t\tstream.req.on('finish', onfinish);\n\t};\n\n\tif (isRequest(stream)) {\n\t\tstream.on('complete', onfinish);\n\t\tstream.on('abort', onclose);\n\t\tif (stream.req) onrequest();\n\t\telse stream.on('request', onrequest);\n\t} else if (writable && !ws) { // legacy streams\n\t\tstream.on('end', onlegacyfinish);\n\t\tstream.on('close', onlegacyfinish);\n\t}\n\n\tif (isChildProcess(stream)) stream.on('exit', onexit);\n\n\tstream.on('end', onend);\n\tstream.on('finish', onfinish);\n\tif (opts.error !== false) stream.on('error', onerror);\n\tstream.on('close', onclose);\n\n\treturn function() {\n\t\tcancelled = true;\n\t\tstream.removeListener('complete', onfinish);\n\t\tstream.removeListener('abort', onclose);\n\t\tstream.removeListener('request', onrequest);\n\t\tif (stream.req) stream.req.removeListener('finish', onfinish);\n\t\tstream.removeListener('end', onlegacyfinish);\n\t\tstream.removeListener('close', onlegacyfinish);\n\t\tstream.removeListener('finish', onfinish);\n\t\tstream.removeListener('exit', onexit);\n\t\tstream.removeListener('end', onend);\n\t\tstream.removeListener('error', onerror);\n\t\tstream.removeListener('close', onclose);\n\t};\n};\n\nmodule.exports = eos;\n\n}).call(this,require('_process'))\n\n},{\"_process\":\"/home/ubuntu/starmask/node_modules/process/browser.js\",\"once\":\"/home/ubuntu/starmask/node_modules/once/once.js\"}],\"/home/ubuntu/starmask/node_modules/eth-rpc-errors/dist/classes.js\":[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EthereumProviderError = exports.EthereumRpcError = void 0;\nconst fast_safe_stringify_1 = require(\"fast-safe-stringify\");\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n * Permits any integer error code.\n */\nclass EthereumRpcError extends Error {\n    constructor(code, message, data) {\n        if (!Number.isInteger(code)) {\n            throw new Error('\"code\" must be an integer.');\n        }\n        if (!message || typeof message !== 'string') {\n            throw new Error('\"message\" must be a nonempty string.');\n        }\n        super(message);\n        this.code = code;\n        if (data !== undefined) {\n            this.data = data;\n        }\n    }\n    /**\n     * Returns a plain object with all public class properties.\n     */\n    serialize() {\n        const serialized = {\n            code: this.code,\n            message: this.message,\n        };\n        if (this.data !== undefined) {\n            serialized.data = this.data;\n        }\n        if (this.stack) {\n            serialized.stack = this.stack;\n        }\n        return serialized;\n    }\n    /**\n     * Return a string representation of the serialized error, omitting\n     * any circular references.\n     */\n    toString() {\n        return fast_safe_stringify_1.default(this.serialize(), stringifyReplacer, 2);\n    }\n}\nexports.EthereumRpcError = EthereumRpcError;\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nclass EthereumProviderError extends EthereumRpcError {\n    /**\n     * Create an Ethereum Provider JSON-RPC error.\n     * `code` must be an integer in the 1000 <= 4999 range.\n     */\n    constructor(code, message, data) {\n        if (!isValidEthProviderCode(code)) {\n            throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n        }\n        super(code, message, data);\n    }\n}\nexports.EthereumProviderError = EthereumProviderError;\n// Internal\nfunction isValidEthProviderCode(code) {\n    return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\nfunction stringifyReplacer(_, value) {\n    if (value === '[Circular]') {\n        return undefined;\n    }\n    return value;\n}\n\n},{\"fast-safe-stringify\":\"/home/ubuntu/starmask/node_modules/fast-safe-stringify/index.js\"}],\"/home/ubuntu/starmask/node_modules/eth-rpc-errors/dist/error-constants.js\":[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.errorValues = exports.errorCodes = void 0;\nexports.errorCodes = {\n    rpc: {\n        invalidInput: -32000,\n        resourceNotFound: -32001,\n        resourceUnavailable: -32002,\n        transactionRejected: -32003,\n        methodNotSupported: -32004,\n        limitExceeded: -32005,\n        parse: -32700,\n        invalidRequest: -32600,\n        methodNotFound: -32601,\n        invalidParams: -32602,\n        internal: -32603,\n    },\n    provider: {\n        userRejectedRequest: 4001,\n        unauthorized: 4100,\n        unsupportedMethod: 4200,\n        disconnected: 4900,\n        chainDisconnected: 4901,\n    },\n};\nexports.errorValues = {\n    '-32700': {\n        standard: 'JSON RPC 2.0',\n        message: 'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.',\n    },\n    '-32600': {\n        standard: 'JSON RPC 2.0',\n        message: 'The JSON sent is not a valid Request object.',\n    },\n    '-32601': {\n        standard: 'JSON RPC 2.0',\n        message: 'The method does not exist / is not available.',\n    },\n    '-32602': {\n        standard: 'JSON RPC 2.0',\n        message: 'Invalid method parameter(s).',\n    },\n    '-32603': {\n        standard: 'JSON RPC 2.0',\n        message: 'Internal JSON-RPC error.',\n    },\n    '-32000': {\n        standard: 'EIP-1474',\n        message: 'Invalid input.',\n    },\n    '-32001': {\n        standard: 'EIP-1474',\n        message: 'Resource not found.',\n    },\n    '-32002': {\n        standard: 'EIP-1474',\n        message: 'Resource unavailable.',\n    },\n    '-32003': {\n        standard: 'EIP-1474',\n        message: 'Transaction rejected.',\n    },\n    '-32004': {\n        standard: 'EIP-1474',\n        message: 'Method not supported.',\n    },\n    '-32005': {\n        standard: 'EIP-1474',\n        message: 'Request limit exceeded.',\n    },\n    '4001': {\n        standard: 'EIP-1193',\n        message: 'User rejected the request.',\n    },\n    '4100': {\n        standard: 'EIP-1193',\n        message: 'The requested account and/or method has not been authorized by the user.',\n    },\n    '4200': {\n        standard: 'EIP-1193',\n        message: 'The requested method is not supported by this Ethereum provider.',\n    },\n    '4900': {\n        standard: 'EIP-1193',\n        message: 'The provider is disconnected from all chains.',\n    },\n    '4901': {\n        standard: 'EIP-1193',\n        message: 'The provider is disconnected from the specified chain.',\n    },\n};\n\n},{}],\"/home/ubuntu/starmask/node_modules/eth-rpc-errors/dist/errors.js\":[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ethErrors = void 0;\nconst classes_1 = require(\"./classes\");\nconst utils_1 = require(\"./utils\");\nconst error_constants_1 = require(\"./error-constants\");\nexports.ethErrors = {\n    rpc: {\n        /**\n         * Get a JSON RPC 2.0 Parse (-32700) error.\n         */\n        parse: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg),\n        /**\n         * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n         */\n        invalidRequest: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg),\n        /**\n         * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n         */\n        invalidParams: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg),\n        /**\n         * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n         */\n        methodNotFound: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg),\n        /**\n         * Get a JSON RPC 2.0 Internal (-32603) error.\n         */\n        internal: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg),\n        /**\n         * Get a JSON RPC 2.0 Server error.\n         * Permits integer error codes in the [ -32099 <= -32005 ] range.\n         * Codes -32000 through -32004 are reserved by EIP-1474.\n         */\n        server: (opts) => {\n            if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n                throw new Error('Ethereum RPC Server errors must provide single object argument.');\n            }\n            const { code } = opts;\n            if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n                throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n            }\n            return getEthJsonRpcError(code, opts);\n        },\n        /**\n         * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n         */\n        invalidInput: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg),\n        /**\n         * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n         */\n        resourceNotFound: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg),\n        /**\n         * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n         */\n        resourceUnavailable: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg),\n        /**\n         * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n         */\n        transactionRejected: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg),\n        /**\n         * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n         */\n        methodNotSupported: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg),\n        /**\n         * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n         */\n        limitExceeded: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg),\n    },\n    provider: {\n        /**\n         * Get an Ethereum Provider User Rejected Request (4001) error.\n         */\n        userRejectedRequest: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);\n        },\n        /**\n         * Get an Ethereum Provider Unauthorized (4100) error.\n         */\n        unauthorized: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);\n        },\n        /**\n         * Get an Ethereum Provider Unsupported Method (4200) error.\n         */\n        unsupportedMethod: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);\n        },\n        /**\n         * Get an Ethereum Provider Not Connected (4900) error.\n         */\n        disconnected: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);\n        },\n        /**\n         * Get an Ethereum Provider Chain Not Connected (4901) error.\n         */\n        chainDisconnected: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);\n        },\n        /**\n         * Get a custom Ethereum Provider error.\n         */\n        custom: (opts) => {\n            if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n                throw new Error('Ethereum Provider custom errors must provide single object argument.');\n            }\n            const { code, message, data } = opts;\n            if (!message || typeof message !== 'string') {\n                throw new Error('\"message\" must be a nonempty string');\n            }\n            return new classes_1.EthereumProviderError(code, message, data);\n        },\n    },\n};\n// Internal\nfunction getEthJsonRpcError(code, arg) {\n    const [message, data] = parseOpts(arg);\n    return new classes_1.EthereumRpcError(code, message || utils_1.getMessageFromCode(code), data);\n}\nfunction getEthProviderError(code, arg) {\n    const [message, data] = parseOpts(arg);\n    return new classes_1.EthereumProviderError(code, message || utils_1.getMessageFromCode(code), data);\n}\nfunction parseOpts(arg) {\n    if (arg) {\n        if (typeof arg === 'string') {\n            return [arg];\n        }\n        else if (typeof arg === 'object' && !Array.isArray(arg)) {\n            const { message, data } = arg;\n            if (message && typeof message !== 'string') {\n                throw new Error('Must specify string message.');\n            }\n            return [message || undefined, data];\n        }\n    }\n    return [];\n}\n\n},{\"./classes\":\"/home/ubuntu/starmask/node_modules/eth-rpc-errors/dist/classes.js\",\"./error-constants\":\"/home/ubuntu/starmask/node_modules/eth-rpc-errors/dist/error-constants.js\",\"./utils\":\"/home/ubuntu/starmask/node_modules/eth-rpc-errors/dist/utils.js\"}],\"/home/ubuntu/starmask/node_modules/eth-rpc-errors/dist/index.js\":[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMessageFromCode = exports.serializeError = exports.EthereumProviderError = exports.EthereumRpcError = exports.ethErrors = exports.errorCodes = void 0;\nconst classes_1 = require(\"./classes\");\nObject.defineProperty(exports, \"EthereumRpcError\", { enumerable: true, get: function () { return classes_1.EthereumRpcError; } });\nObject.defineProperty(exports, \"EthereumProviderError\", { enumerable: true, get: function () { return classes_1.EthereumProviderError; } });\nconst utils_1 = require(\"./utils\");\nObject.defineProperty(exports, \"serializeError\", { enumerable: true, get: function () { return utils_1.serializeError; } });\nObject.defineProperty(exports, \"getMessageFromCode\", { enumerable: true, get: function () { return utils_1.getMessageFromCode; } });\nconst errors_1 = require(\"./errors\");\nObject.defineProperty(exports, \"ethErrors\", { enumerable: true, get: function () { return errors_1.ethErrors; } });\nconst error_constants_1 = require(\"./error-constants\");\nObject.defineProperty(exports, \"errorCodes\", { enumerable: true, get: function () { return error_constants_1.errorCodes; } });\n\n},{\"./classes\":\"/home/ubuntu/starmask/node_modules/eth-rpc-errors/dist/classes.js\",\"./error-constants\":\"/home/ubuntu/starmask/node_modules/eth-rpc-errors/dist/error-constants.js\",\"./errors\":\"/home/ubuntu/starmask/node_modules/eth-rpc-errors/dist/errors.js\",\"./utils\":\"/home/ubuntu/starmask/node_modules/eth-rpc-errors/dist/utils.js\"}],\"/home/ubuntu/starmask/node_modules/eth-rpc-errors/dist/utils.js\":[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializeError = exports.isValidCode = exports.getMessageFromCode = exports.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;\nconst error_constants_1 = require(\"./error-constants\");\nconst classes_1 = require(\"./classes\");\nconst FALLBACK_ERROR_CODE = error_constants_1.errorCodes.rpc.internal;\nconst FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.';\nconst FALLBACK_ERROR = {\n    code: FALLBACK_ERROR_CODE,\n    message: getMessageFromCode(FALLBACK_ERROR_CODE),\n};\nexports.JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n */\nfunction getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {\n    if (Number.isInteger(code)) {\n        const codeString = code.toString();\n        if (hasKey(error_constants_1.errorValues, codeString)) {\n            return error_constants_1.errorValues[codeString].message;\n        }\n        if (isJsonRpcServerError(code)) {\n            return exports.JSON_RPC_SERVER_ERROR_MESSAGE;\n        }\n    }\n    return fallbackMessage;\n}\nexports.getMessageFromCode = getMessageFromCode;\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n */\nfunction isValidCode(code) {\n    if (!Number.isInteger(code)) {\n        return false;\n    }\n    const codeString = code.toString();\n    if (error_constants_1.errorValues[codeString]) {\n        return true;\n    }\n    if (isJsonRpcServerError(code)) {\n        return true;\n    }\n    return false;\n}\nexports.isValidCode = isValidCode;\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * Merely copies the given error's values if it is already compatible.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.originalError property.\n */\nfunction serializeError(error, { fallbackError = FALLBACK_ERROR, shouldIncludeStack = false, } = {}) {\n    var _a, _b;\n    if (!fallbackError ||\n        !Number.isInteger(fallbackError.code) ||\n        typeof fallbackError.message !== 'string') {\n        throw new Error('Must provide fallback error with integer number code and string message.');\n    }\n    if (error instanceof classes_1.EthereumRpcError) {\n        return error.serialize();\n    }\n    const serialized = {};\n    if (error &&\n        typeof error === 'object' &&\n        !Array.isArray(error) &&\n        hasKey(error, 'code') &&\n        isValidCode(error.code)) {\n        const _error = error;\n        serialized.code = _error.code;\n        if (_error.message && typeof _error.message === 'string') {\n            serialized.message = _error.message;\n            if (hasKey(_error, 'data')) {\n                serialized.data = _error.data;\n            }\n        }\n        else {\n            serialized.message = getMessageFromCode(serialized.code);\n            serialized.data = { originalError: assignOriginalError(error) };\n        }\n    }\n    else {\n        serialized.code = fallbackError.code;\n        const message = (_a = error) === null || _a === void 0 ? void 0 : _a.message;\n        serialized.message = (message && typeof message === 'string'\n            ? message\n            : fallbackError.message);\n        serialized.data = { originalError: assignOriginalError(error) };\n    }\n    const stack = (_b = error) === null || _b === void 0 ? void 0 : _b.stack;\n    if (shouldIncludeStack && error && stack && typeof stack === 'string') {\n        serialized.stack = stack;\n    }\n    return serialized;\n}\nexports.serializeError = serializeError;\n// Internal\nfunction isJsonRpcServerError(code) {\n    return code >= -32099 && code <= -32000;\n}\nfunction assignOriginalError(error) {\n    if (error && typeof error === 'object' && !Array.isArray(error)) {\n        return Object.assign({}, error);\n    }\n    return error;\n}\nfunction hasKey(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\n},{\"./classes\":\"/home/ubuntu/starmask/node_modules/eth-rpc-errors/dist/classes.js\",\"./error-constants\":\"/home/ubuntu/starmask/node_modules/eth-rpc-errors/dist/error-constants.js\"}],\"/home/ubuntu/starmask/node_modules/fast-safe-stringify/index.js\":[function(require,module,exports){\nmodule.exports = stringify\nstringify.default = stringify\nstringify.stable = deterministicStringify\nstringify.stableStringify = deterministicStringify\n\nvar arr = []\nvar replacerStack = []\n\n// Regular stringify\nfunction stringify (obj, replacer, spacer) {\n  decirc(obj, '', [], undefined)\n  var res\n  if (replacerStack.length === 0) {\n    res = JSON.stringify(obj, replacer, spacer)\n  } else {\n    res = JSON.stringify(obj, replaceGetterValues(replacer), spacer)\n  }\n  while (arr.length !== 0) {\n    var part = arr.pop()\n    if (part.length === 4) {\n      Object.defineProperty(part[0], part[1], part[3])\n    } else {\n      part[0][part[1]] = part[2]\n    }\n  }\n  return res\n}\nfunction decirc (val, k, stack, parent) {\n  var i\n  if (typeof val === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)\n        if (propertyDescriptor.get !== undefined) {\n          if (propertyDescriptor.configurable) {\n            Object.defineProperty(parent, k, { value: '[Circular]' })\n            arr.push([parent, k, val, propertyDescriptor])\n          } else {\n            replacerStack.push([val, k])\n          }\n        } else {\n          parent[k] = '[Circular]'\n          arr.push([parent, k, val])\n        }\n        return\n      }\n    }\n    stack.push(val)\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        decirc(val[i], i, stack, val)\n      }\n    } else {\n      var keys = Object.keys(val)\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        decirc(val[key], key, stack, val)\n      }\n    }\n    stack.pop()\n  }\n}\n\n// Stable-stringify\nfunction compareFunction (a, b) {\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\nfunction deterministicStringify (obj, replacer, spacer) {\n  var tmp = deterministicDecirc(obj, '', [], undefined) || obj\n  var res\n  if (replacerStack.length === 0) {\n    res = JSON.stringify(tmp, replacer, spacer)\n  } else {\n    res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer)\n  }\n  while (arr.length !== 0) {\n    var part = arr.pop()\n    if (part.length === 4) {\n      Object.defineProperty(part[0], part[1], part[3])\n    } else {\n      part[0][part[1]] = part[2]\n    }\n  }\n  return res\n}\n\nfunction deterministicDecirc (val, k, stack, parent) {\n  var i\n  if (typeof val === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)\n        if (propertyDescriptor.get !== undefined) {\n          if (propertyDescriptor.configurable) {\n            Object.defineProperty(parent, k, { value: '[Circular]' })\n            arr.push([parent, k, val, propertyDescriptor])\n          } else {\n            replacerStack.push([val, k])\n          }\n        } else {\n          parent[k] = '[Circular]'\n          arr.push([parent, k, val])\n        }\n        return\n      }\n    }\n    if (typeof val.toJSON === 'function') {\n      return\n    }\n    stack.push(val)\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        deterministicDecirc(val[i], i, stack, val)\n      }\n    } else {\n      // Create a temporary object in the required way\n      var tmp = {}\n      var keys = Object.keys(val).sort(compareFunction)\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        deterministicDecirc(val[key], key, stack, val)\n        tmp[key] = val[key]\n      }\n      if (parent !== undefined) {\n        arr.push([parent, k, val])\n        parent[k] = tmp\n      } else {\n        return tmp\n      }\n    }\n    stack.pop()\n  }\n}\n\n// wraps replacer function to handle values we couldn't replace\n// and mark them as [Circular]\nfunction replaceGetterValues (replacer) {\n  replacer = replacer !== undefined ? replacer : function (k, v) { return v }\n  return function (key, val) {\n    if (replacerStack.length > 0) {\n      for (var i = 0; i < replacerStack.length; i++) {\n        var part = replacerStack[i]\n        if (part[1] === key && part[0] === val) {\n          val = '[Circular]'\n          replacerStack.splice(i, 1)\n          break\n        }\n      }\n    }\n    return replacer.call(this, key, val)\n  }\n}\n\n},{}],\"/home/ubuntu/starmask/node_modules/ieee754/index.js\":[function(require,module,exports){\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n},{}],\"/home/ubuntu/starmask/node_modules/inherits/inherits_browser.js\":[function(require,module,exports){\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n\n},{}],\"/home/ubuntu/starmask/node_modules/is-buffer/index.js\":[function(require,module,exports){\n/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n\n},{}],\"/home/ubuntu/starmask/node_modules/isarray/index.js\":[function(require,module,exports){\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n},{}],\"/home/ubuntu/starmask/node_modules/json-rpc-engine/dist/JsonRpcEngine.js\":[function(require,module,exports){\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcEngine = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nclass JsonRpcEngine extends safe_event_emitter_1.default {\n    constructor() {\n        super();\n        this._middleware = [];\n    }\n    /**\n     * Add a middleware function to the engine's middleware stack.\n     *\n     * @param middleware - The middleware function to add.\n     */\n    push(middleware) {\n        this._middleware.push(middleware);\n    }\n    handle(req, cb) {\n        if (cb && typeof cb !== 'function') {\n            throw new Error('\"callback\" must be a function if provided.');\n        }\n        if (Array.isArray(req)) {\n            if (cb) {\n                return this._handleBatch(req, cb);\n            }\n            return this._handleBatch(req);\n        }\n        if (cb) {\n            return this._handle(req, cb);\n        }\n        return this._promiseHandle(req);\n    }\n    /**\n     * Returns this engine as a middleware function that can be pushed to other\n     * engines.\n     *\n     * @returns This engine as a middleware function.\n     */\n    asMiddleware() {\n        return async (req, res, next, end) => {\n            try {\n                const [middlewareError, isComplete, returnHandlers,] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n                if (isComplete) {\n                    await JsonRpcEngine._runReturnHandlers(returnHandlers);\n                    return end(middlewareError);\n                }\n                return next(async (handlerCallback) => {\n                    try {\n                        await JsonRpcEngine._runReturnHandlers(returnHandlers);\n                    }\n                    catch (error) {\n                        return handlerCallback(error);\n                    }\n                    return handlerCallback();\n                });\n            }\n            catch (error) {\n                return end(error);\n            }\n        };\n    }\n    async _handleBatch(reqs, cb) {\n        // The order here is important\n        try {\n            // 2. Wait for all requests to finish, or throw on some kind of fatal\n            // error\n            const responses = await Promise.all(\n            // 1. Begin executing each request in the order received\n            reqs.map(this._promiseHandle.bind(this)));\n            // 3. Return batch response\n            if (cb) {\n                return cb(null, responses);\n            }\n            return responses;\n        }\n        catch (error) {\n            if (cb) {\n                return cb(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * A promise-wrapped _handle.\n     */\n    _promiseHandle(req) {\n        return new Promise((resolve) => {\n            this._handle(req, (_err, res) => {\n                // There will always be a response, and it will always have any error\n                // that is caught and propagated.\n                resolve(res);\n            });\n        });\n    }\n    /**\n     * Ensures that the request object is valid, processes it, and passes any\n     * error and the response object to the given callback.\n     *\n     * Does not reject.\n     */\n    async _handle(callerReq, cb) {\n        if (!callerReq ||\n            Array.isArray(callerReq) ||\n            typeof callerReq !== 'object') {\n            const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Requests must be plain objects. Received: ${typeof callerReq}`, { request: callerReq });\n            return cb(error, { id: undefined, jsonrpc: '2.0', error });\n        }\n        if (typeof callerReq.method !== 'string') {\n            const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Must specify a string method. Received: ${typeof callerReq.method}`, { request: callerReq });\n            return cb(error, { id: callerReq.id, jsonrpc: '2.0', error });\n        }\n        const req = Object.assign({}, callerReq);\n        const res = {\n            id: req.id,\n            jsonrpc: req.jsonrpc,\n        };\n        let error = null;\n        try {\n            await this._processRequest(req, res);\n        }\n        catch (_error) {\n            // A request handler error, a re-thrown middleware error, or something\n            // unexpected.\n            error = _error;\n        }\n        if (error) {\n            // Ensure no result is present on an errored response\n            delete res.result;\n            if (!res.error) {\n                res.error = eth_rpc_errors_1.serializeError(error);\n            }\n        }\n        return cb(error, res);\n    }\n    /**\n     * For the given request and response, runs all middleware and their return\n     * handlers, if any, and ensures that internal request processing semantics\n     * are satisfied.\n     */\n    async _processRequest(req, res) {\n        const [error, isComplete, returnHandlers,] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n        // Throw if \"end\" was not called, or if the response has neither a result\n        // nor an error.\n        JsonRpcEngine._checkForCompletion(req, res, isComplete);\n        // The return handlers should run even if an error was encountered during\n        // middleware processing.\n        await JsonRpcEngine._runReturnHandlers(returnHandlers);\n        // Now we re-throw the middleware processing error, if any, to catch it\n        // further up the call chain.\n        if (error) {\n            throw error;\n        }\n    }\n    /**\n     * Serially executes the given stack of middleware.\n     *\n     * @returns An array of any error encountered during middleware execution,\n     * a boolean indicating whether the request was completed, and an array of\n     * middleware-defined return handlers.\n     */\n    static async _runAllMiddleware(req, res, middlewareStack) {\n        const returnHandlers = [];\n        let error = null;\n        let isComplete = false;\n        // Go down stack of middleware, call and collect optional returnHandlers\n        for (const middleware of middlewareStack) {\n            [error, isComplete] = await JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);\n            if (isComplete) {\n                break;\n            }\n        }\n        return [error, isComplete, returnHandlers.reverse()];\n    }\n    /**\n     * Runs an individual middleware.\n     *\n     * @returns An array of any error encountered during middleware exection,\n     * and a boolean indicating whether the request should end.\n     */\n    static _runMiddleware(req, res, middleware, returnHandlers) {\n        return new Promise((resolve) => {\n            const end = (err) => {\n                const error = err || res.error;\n                if (error) {\n                    res.error = eth_rpc_errors_1.serializeError(error);\n                }\n                // True indicates that the request should end\n                resolve([error, true]);\n            };\n            const next = (returnHandler) => {\n                if (res.error) {\n                    end(res.error);\n                }\n                else {\n                    if (returnHandler) {\n                        if (typeof returnHandler !== 'function') {\n                            end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: \"next\" return handlers must be functions. ` +\n                                `Received \"${typeof returnHandler}\" for request:\\n${jsonify(req)}`, { request: req }));\n                        }\n                        returnHandlers.push(returnHandler);\n                    }\n                    // False indicates that the request should not end\n                    resolve([null, false]);\n                }\n            };\n            try {\n                middleware(req, res, next, end);\n            }\n            catch (error) {\n                end(error);\n            }\n        });\n    }\n    /**\n     * Serially executes array of return handlers. The request and response are\n     * assumed to be in their scope.\n     */\n    static async _runReturnHandlers(handlers) {\n        for (const handler of handlers) {\n            await new Promise((resolve, reject) => {\n                handler((err) => (err ? reject(err) : resolve()));\n            });\n        }\n    }\n    /**\n     * Throws an error if the response has neither a result nor an error, or if\n     * the \"isComplete\" flag is falsy.\n     */\n    static _checkForCompletion(req, res, isComplete) {\n        if (!('result' in res) && !('error' in res)) {\n            throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Response has no error or result for request:\\n${jsonify(req)}`, { request: req });\n        }\n        if (!isComplete) {\n            throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Nothing ended request:\\n${jsonify(req)}`, { request: req });\n        }\n    }\n}\nexports.JsonRpcEngine = JsonRpcEngine;\nfunction jsonify(request) {\n    return JSON.stringify(request, null, 2);\n}\n\n},{\"@metamask/safe-event-emitter\":\"/home/ubuntu/starmask/node_modules/@metamask/safe-event-emitter/index.js\",\"eth-rpc-errors\":\"/home/ubuntu/starmask/node_modules/eth-rpc-errors/dist/index.js\"}],\"/home/ubuntu/starmask/node_modules/json-rpc-engine/dist/createAsyncMiddleware.js\":[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createAsyncMiddleware = void 0;\n/**\n * JsonRpcEngine only accepts callback-based middleware directly.\n * createAsyncMiddleware exists to enable consumers to pass in async middleware\n * functions.\n *\n * Async middleware have no \"end\" function. Instead, they \"end\" if they return\n * without calling \"next\". Rather than passing in explicit return handlers,\n * async middleware can simply await \"next\", and perform operations on the\n * response object when execution resumes.\n *\n * To accomplish this, createAsyncMiddleware passes the async middleware a\n * wrapped \"next\" function. That function calls the internal JsonRpcEngine\n * \"next\" function with a return handler that resolves a promise when called.\n *\n * The return handler will always be called. Its resolution of the promise\n * enables the control flow described above.\n */\nfunction createAsyncMiddleware(asyncMiddleware) {\n    return async (req, res, next, end) => {\n        // nextPromise is the key to the implementation\n        // it is resolved by the return handler passed to the\n        // \"next\" function\n        let resolveNextPromise;\n        const nextPromise = new Promise((resolve) => {\n            resolveNextPromise = resolve;\n        });\n        let returnHandlerCallback = null;\n        let nextWasCalled = false;\n        // This will be called by the consumer's async middleware.\n        const asyncNext = async () => {\n            nextWasCalled = true;\n            // We pass a return handler to next(). When it is called by the engine,\n            // the consumer's async middleware will resume executing.\n            // eslint-disable-next-line node/callback-return\n            next((runReturnHandlersCallback) => {\n                // This callback comes from JsonRpcEngine._runReturnHandlers\n                returnHandlerCallback = runReturnHandlersCallback;\n                resolveNextPromise();\n            });\n            await nextPromise;\n        };\n        try {\n            await asyncMiddleware(req, res, asyncNext);\n            if (nextWasCalled) {\n                await nextPromise; // we must wait until the return handler is called\n                returnHandlerCallback(null);\n            }\n            else {\n                end(null);\n            }\n        }\n        catch (error) {\n            if (returnHandlerCallback) {\n                returnHandlerCallback(error);\n            }\n            else {\n                end(error);\n            }\n        }\n    };\n}\nexports.createAsyncMiddleware = createAsyncMiddleware;\n\n},{}],\"/home/ubuntu/starmask/node_modules/json-rpc-engine/dist/createScaffoldMiddleware.js\":[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createScaffoldMiddleware = void 0;\nfunction createScaffoldMiddleware(handlers) {\n    return (req, res, next, end) => {\n        const handler = handlers[req.method];\n        // if no handler, return\n        if (handler === undefined) {\n            return next();\n        }\n        // if handler is fn, call as middleware\n        if (typeof handler === 'function') {\n            return handler(req, res, next, end);\n        }\n        // if handler is some other value, use as result\n        res.result = handler;\n        return end();\n    };\n}\nexports.createScaffoldMiddleware = createScaffoldMiddleware;\n\n},{}],\"/home/ubuntu/starmask/node_modules/json-rpc-engine/dist/getUniqueId.js\":[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getUniqueId = void 0;\n// uint32 (two's complement) max\n// more conservative than Number.MAX_SAFE_INTEGER\nconst MAX = 4294967295;\nlet idCounter = Math.floor(Math.random() * MAX);\nfunction getUniqueId() {\n    idCounter = (idCounter + 1) % MAX;\n    return idCounter;\n}\nexports.getUniqueId = getUniqueId;\n\n},{}],\"/home/ubuntu/starmask/node_modules/json-rpc-engine/dist/idRemapMiddleware.js\":[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createIdRemapMiddleware = void 0;\nconst getUniqueId_1 = require(\"./getUniqueId\");\nfunction createIdRemapMiddleware() {\n    return (req, res, next, _end) => {\n        const originalId = req.id;\n        const newId = getUniqueId_1.getUniqueId();\n        req.id = newId;\n        res.id = newId;\n        next((done) => {\n            req.id = originalId;\n            res.id = originalId;\n            done();\n        });\n    };\n}\nexports.createIdRemapMiddleware = createIdRemapMiddleware;\n\n},{\"./getUniqueId\":\"/home/ubuntu/starmask/node_modules/json-rpc-engine/dist/getUniqueId.js\"}],\"/home/ubuntu/starmask/node_modules/json-rpc-engine/dist/index.js\":[function(require,module,exports){\n\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./idRemapMiddleware\"), exports);\n__exportStar(require(\"./createAsyncMiddleware\"), exports);\n__exportStar(require(\"./createScaffoldMiddleware\"), exports);\n__exportStar(require(\"./getUniqueId\"), exports);\n__exportStar(require(\"./JsonRpcEngine\"), exports);\n__exportStar(require(\"./mergeMiddleware\"), exports);\n\n},{\"./JsonRpcEngine\":\"/home/ubuntu/starmask/node_modules/json-rpc-engine/dist/JsonRpcEngine.js\",\"./createAsyncMiddleware\":\"/home/ubuntu/starmask/node_modules/json-rpc-engine/dist/createAsyncMiddleware.js\",\"./createScaffoldMiddleware\":\"/home/ubuntu/starmask/node_modules/json-rpc-engine/dist/createScaffoldMiddleware.js\",\"./getUniqueId\":\"/home/ubuntu/starmask/node_modules/json-rpc-engine/dist/getUniqueId.js\",\"./idRemapMiddleware\":\"/home/ubuntu/starmask/node_modules/json-rpc-engine/dist/idRemapMiddleware.js\",\"./mergeMiddleware\":\"/home/ubuntu/starmask/node_modules/json-rpc-engine/dist/mergeMiddleware.js\"}],\"/home/ubuntu/starmask/node_modules/json-rpc-engine/dist/mergeMiddleware.js\":[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mergeMiddleware = void 0;\nconst JsonRpcEngine_1 = require(\"./JsonRpcEngine\");\nfunction mergeMiddleware(middlewareStack) {\n    const engine = new JsonRpcEngine_1.JsonRpcEngine();\n    middlewareStack.forEach((middleware) => engine.push(middleware));\n    return engine.asMiddleware();\n}\nexports.mergeMiddleware = mergeMiddleware;\n\n},{\"./JsonRpcEngine\":\"/home/ubuntu/starmask/node_modules/json-rpc-engine/dist/JsonRpcEngine.js\"}],\"/home/ubuntu/starmask/node_modules/loglevel/lib/loglevel.js\":[function(require,module,exports){\n/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      var storageKey = \"loglevel\";\n      if (name) {\n        storageKey += \":\" + name;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== \"string\" || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    return defaultLogger;\n}));\n\n},{}],\"/home/ubuntu/starmask/node_modules/once/once.js\":[function(require,module,exports){\nvar wrappy = require('wrappy')\nmodule.exports = wrappy(once)\nmodule.exports.strict = wrappy(onceStrict)\n\nonce.proto = once(function () {\n  Object.defineProperty(Function.prototype, 'once', {\n    value: function () {\n      return once(this)\n    },\n    configurable: true\n  })\n\n  Object.defineProperty(Function.prototype, 'onceStrict', {\n    value: function () {\n      return onceStrict(this)\n    },\n    configurable: true\n  })\n})\n\nfunction once (fn) {\n  var f = function () {\n    if (f.called) return f.value\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  f.called = false\n  return f\n}\n\nfunction onceStrict (fn) {\n  var f = function () {\n    if (f.called)\n      throw new Error(f.onceError)\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  var name = fn.name || 'Function wrapped with `once`'\n  f.onceError = name + \" shouldn't be called more than once\"\n  f.called = false\n  return f\n}\n\n},{\"wrappy\":\"/home/ubuntu/starmask/node_modules/wrappy/wrappy.js\"}],\"/home/ubuntu/starmask/node_modules/post-message-stream/index.js\":[function(require,module,exports){\nconst DuplexStream = require('readable-stream').Duplex\nconst inherits = require('util').inherits\n\nmodule.exports = PostMessageStream\n\ninherits(PostMessageStream, DuplexStream)\n\nfunction PostMessageStream (opts) {\n  DuplexStream.call(this, {\n    objectMode: true,\n  })\n\n  this._name = opts.name\n  this._target = opts.target\n  this._targetWindow = opts.targetWindow || window\n  this._origin = (opts.targetWindow ? '*' : location.origin)\n\n  // initialization flags\n  this._init = false\n  this._haveSyn = false\n\n  window.addEventListener('message', this._onMessage.bind(this), false)\n  // send syncorization message\n  this._write('SYN', null, noop)\n  this.cork()\n}\n\n// private\nPostMessageStream.prototype._onMessage = function (event) {\n  var msg = event.data\n\n  // validate message\n  if (this._origin !== '*' && event.origin !== this._origin) return\n  if (event.source !== this._targetWindow) return\n  if (typeof msg !== 'object') return\n  if (msg.target !== this._name) return\n  if (!msg.data) return\n\n  if (!this._init) {\n    if (msg.data === 'SYN') {\n      this._haveSyn = true\n      this._write('ACK', null, noop)\n    } else if (msg.data === 'ACK') {\n      this._init = true\n      if (!this._haveSyn) {\n        this._write('ACK', null, noop)\n      }\n      this.uncork()\n    }\n  } else {\n    // forward message\n    try {\n      this.push(msg.data)\n    } catch (err) {\n      this.emit('error', err)\n    }\n  }\n}\n\n// stream plumbing\nPostMessageStream.prototype._read = noop\n\nPostMessageStream.prototype._write = function (data, encoding, cb) {\n  var message = {\n    target: this._target,\n    data: data,\n  }\n  this._targetWindow.postMessage(message, this._origin)\n  cb()\n}\n\n// util\n\nfunction noop () {}\n\n},{\"readable-stream\":\"/home/ubuntu/starmask/node_modules/readable-stream/readable-browser.js\",\"util\":\"/home/ubuntu/starmask/node_modules/util/util.js\"}],\"/home/ubuntu/starmask/node_modules/process/browser.js\":[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],\"/home/ubuntu/starmask/node_modules/pump/index.js\":[function(require,module,exports){\n(function (process){\nvar once = require('once')\nvar eos = require('end-of-stream')\nvar fs = require('fs') // we only need fs to get the ReadStream and WriteStream prototypes\n\nvar noop = function () {}\nvar ancient = /^v?\\.0/.test(process.version)\n\nvar isFn = function (fn) {\n  return typeof fn === 'function'\n}\n\nvar isFS = function (stream) {\n  if (!ancient) return false // newer node version do not need to care about fs is a special way\n  if (!fs) return false // browser\n  return (stream instanceof (fs.ReadStream || noop) || stream instanceof (fs.WriteStream || noop)) && isFn(stream.close)\n}\n\nvar isRequest = function (stream) {\n  return stream.setHeader && isFn(stream.abort)\n}\n\nvar destroyer = function (stream, reading, writing, callback) {\n  callback = once(callback)\n\n  var closed = false\n  stream.on('close', function () {\n    closed = true\n  })\n\n  eos(stream, {readable: reading, writable: writing}, function (err) {\n    if (err) return callback(err)\n    closed = true\n    callback()\n  })\n\n  var destroyed = false\n  return function (err) {\n    if (closed) return\n    if (destroyed) return\n    destroyed = true\n\n    if (isFS(stream)) return stream.close(noop) // use close for fs streams to avoid fd leaks\n    if (isRequest(stream)) return stream.abort() // request.destroy just do .end - .abort is what we want\n\n    if (isFn(stream.destroy)) return stream.destroy()\n\n    callback(err || new Error('stream was destroyed'))\n  }\n}\n\nvar call = function (fn) {\n  fn()\n}\n\nvar pipe = function (from, to) {\n  return from.pipe(to)\n}\n\nvar pump = function () {\n  var streams = Array.prototype.slice.call(arguments)\n  var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop\n\n  if (Array.isArray(streams[0])) streams = streams[0]\n  if (streams.length < 2) throw new Error('pump requires two streams per minimum')\n\n  var error\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1\n    var writing = i > 0\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err\n      if (err) destroys.forEach(call)\n      if (reading) return\n      destroys.forEach(call)\n      callback(error)\n    })\n  })\n\n  return streams.reduce(pipe)\n}\n\nmodule.exports = pump\n\n}).call(this,require('_process'))\n\n},{\"_process\":\"/home/ubuntu/starmask/node_modules/process/browser.js\",\"end-of-stream\":\"/home/ubuntu/starmask/node_modules/end-of-stream/index.js\",\"fs\":\"/home/ubuntu/starmask/node_modules/browser-resolve/empty.js\",\"once\":\"/home/ubuntu/starmask/node_modules/once/once.js\"}],\"/home/ubuntu/starmask/node_modules/readable-stream/duplex-browser.js\":[function(require,module,exports){\nmodule.exports = require('./lib/_stream_duplex.js');\n\n},{\"./lib/_stream_duplex.js\":\"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_duplex.js\"}],\"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_duplex.js\":[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  pna.nextTick(cb, err);\n};\n},{\"./_stream_readable\":\"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_readable.js\",\"./_stream_writable\":\"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_writable.js\",\"core-util-is\":\"/home/ubuntu/starmask/node_modules/core-util-is/lib/util.js\",\"inherits\":\"/home/ubuntu/starmask/node_modules/inherits/inherits_browser.js\",\"process-nextick-args\":\"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/process-nextick-args/index.js\"}],\"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_passthrough.js\":[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};\n},{\"./_stream_transform\":\"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_transform.js\",\"core-util-is\":\"/home/ubuntu/starmask/node_modules/core-util-is/lib/util.js\",\"inherits\":\"/home/ubuntu/starmask/node_modules/inherits/inherits_browser.js\"}],\"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_readable.js\":[function(require,module,exports){\n(function (process,global){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar destroyImpl = require('./internal/streams/destroy');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./_stream_duplex\":\"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_duplex.js\",\"./internal/streams/BufferList\":\"/home/ubuntu/starmask/node_modules/readable-stream/lib/internal/streams/BufferList.js\",\"./internal/streams/destroy\":\"/home/ubuntu/starmask/node_modules/readable-stream/lib/internal/streams/destroy.js\",\"./internal/streams/stream\":\"/home/ubuntu/starmask/node_modules/readable-stream/lib/internal/streams/stream-browser.js\",\"_process\":\"/home/ubuntu/starmask/node_modules/process/browser.js\",\"core-util-is\":\"/home/ubuntu/starmask/node_modules/core-util-is/lib/util.js\",\"events\":\"/home/ubuntu/starmask/node_modules/browserify/node_modules/events/events.js\",\"inherits\":\"/home/ubuntu/starmask/node_modules/inherits/inherits_browser.js\",\"isarray\":\"/home/ubuntu/starmask/node_modules/isarray/index.js\",\"process-nextick-args\":\"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/process-nextick-args/index.js\",\"safe-buffer\":\"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/safe-buffer/index.js\",\"string_decoder/\":\"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/string_decoder/lib/string_decoder.js\",\"util\":\"/home/ubuntu/starmask/node_modules/browser-resolve/empty.js\"}],\"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_transform.js\":[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}\n},{\"./_stream_duplex\":\"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_duplex.js\",\"core-util-is\":\"/home/ubuntu/starmask/node_modules/core-util-is/lib/util.js\",\"inherits\":\"/home/ubuntu/starmask/node_modules/inherits/inherits_browser.js\"}],\"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_writable.js\":[function(require,module,exports){\n(function (process,global,setImmediate){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {},require(\"timers\").setImmediate)\n\n},{\"./_stream_duplex\":\"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_duplex.js\",\"./internal/streams/destroy\":\"/home/ubuntu/starmask/node_modules/readable-stream/lib/internal/streams/destroy.js\",\"./internal/streams/stream\":\"/home/ubuntu/starmask/node_modules/readable-stream/lib/internal/streams/stream-browser.js\",\"_process\":\"/home/ubuntu/starmask/node_modules/process/browser.js\",\"core-util-is\":\"/home/ubuntu/starmask/node_modules/core-util-is/lib/util.js\",\"inherits\":\"/home/ubuntu/starmask/node_modules/inherits/inherits_browser.js\",\"process-nextick-args\":\"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/process-nextick-args/index.js\",\"safe-buffer\":\"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/safe-buffer/index.js\",\"timers\":\"/home/ubuntu/starmask/node_modules/timers-browserify/main.js\",\"util-deprecate\":\"/home/ubuntu/starmask/node_modules/util-deprecate/browser.js\"}],\"/home/ubuntu/starmask/node_modules/readable-stream/lib/internal/streams/BufferList.js\":[function(require,module,exports){\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Buffer = require('safe-buffer').Buffer;\nvar util = require('util');\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif (util && util.inspect && util.inspect.custom) {\n  module.exports.prototype[util.inspect.custom] = function () {\n    var obj = util.inspect({ length: this.length });\n    return this.constructor.name + ' ' + obj;\n  };\n}\n},{\"safe-buffer\":\"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/safe-buffer/index.js\",\"util\":\"/home/ubuntu/starmask/node_modules/browser-resolve/empty.js\"}],\"/home/ubuntu/starmask/node_modules/readable-stream/lib/internal/streams/destroy.js\":[function(require,module,exports){\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      pna.nextTick(emitErrorNT, this, err);\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      pna.nextTick(emitErrorNT, _this, err);\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n\n  return this;\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};\n},{\"process-nextick-args\":\"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/process-nextick-args/index.js\"}],\"/home/ubuntu/starmask/node_modules/readable-stream/lib/internal/streams/stream-browser.js\":[function(require,module,exports){\nmodule.exports = require('events').EventEmitter;\n\n},{\"events\":\"/home/ubuntu/starmask/node_modules/browserify/node_modules/events/events.js\"}],\"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/process-nextick-args/index.js\":[function(require,module,exports){\n(function (process){\n'use strict';\n\nif (typeof process === 'undefined' ||\n    !process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = { nextTick: nextTick };\n} else {\n  module.exports = process\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n\n}).call(this,require('_process'))\n\n},{\"_process\":\"/home/ubuntu/starmask/node_modules/process/browser.js\"}],\"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/safe-buffer/index.js\":[function(require,module,exports){\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n\n},{\"buffer\":\"/home/ubuntu/starmask/node_modules/browserify/node_modules/buffer/index.js\"}],\"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/string_decoder/lib/string_decoder.js\":[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}\n},{\"safe-buffer\":\"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/safe-buffer/index.js\"}],\"/home/ubuntu/starmask/node_modules/readable-stream/passthrough.js\":[function(require,module,exports){\nmodule.exports = require('./readable').PassThrough\n\n},{\"./readable\":\"/home/ubuntu/starmask/node_modules/readable-stream/readable-browser.js\"}],\"/home/ubuntu/starmask/node_modules/readable-stream/readable-browser.js\":[function(require,module,exports){\nexports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n\n},{\"./lib/_stream_duplex.js\":\"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_duplex.js\",\"./lib/_stream_passthrough.js\":\"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_passthrough.js\",\"./lib/_stream_readable.js\":\"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_readable.js\",\"./lib/_stream_transform.js\":\"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_transform.js\",\"./lib/_stream_writable.js\":\"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_writable.js\"}],\"/home/ubuntu/starmask/node_modules/readable-stream/transform.js\":[function(require,module,exports){\nmodule.exports = require('./readable').Transform\n\n},{\"./readable\":\"/home/ubuntu/starmask/node_modules/readable-stream/readable-browser.js\"}],\"/home/ubuntu/starmask/node_modules/readable-stream/writable-browser.js\":[function(require,module,exports){\nmodule.exports = require('./lib/_stream_writable.js');\n\n},{\"./lib/_stream_writable.js\":\"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_writable.js\"}],\"/home/ubuntu/starmask/node_modules/stream-browserify/index.js\":[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = require('events').EventEmitter;\nvar inherits = require('inherits');\n\ninherits(Stream, EE);\nStream.Readable = require('readable-stream/readable.js');\nStream.Writable = require('readable-stream/writable.js');\nStream.Duplex = require('readable-stream/duplex.js');\nStream.Transform = require('readable-stream/transform.js');\nStream.PassThrough = require('readable-stream/passthrough.js');\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n\n},{\"events\":\"/home/ubuntu/starmask/node_modules/browserify/node_modules/events/events.js\",\"inherits\":\"/home/ubuntu/starmask/node_modules/inherits/inherits_browser.js\",\"readable-stream/duplex.js\":\"/home/ubuntu/starmask/node_modules/readable-stream/duplex-browser.js\",\"readable-stream/passthrough.js\":\"/home/ubuntu/starmask/node_modules/readable-stream/passthrough.js\",\"readable-stream/readable.js\":\"/home/ubuntu/starmask/node_modules/readable-stream/readable-browser.js\",\"readable-stream/transform.js\":\"/home/ubuntu/starmask/node_modules/readable-stream/transform.js\",\"readable-stream/writable.js\":\"/home/ubuntu/starmask/node_modules/readable-stream/writable-browser.js\"}],\"/home/ubuntu/starmask/node_modules/timers-browserify/main.js\":[function(require,module,exports){\n(function (setImmediate,clearImmediate){\nvar nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n}).call(this,require(\"timers\").setImmediate,require(\"timers\").clearImmediate)\n\n},{\"process/browser.js\":\"/home/ubuntu/starmask/node_modules/process/browser.js\",\"timers\":\"/home/ubuntu/starmask/node_modules/timers-browserify/main.js\"}],\"/home/ubuntu/starmask/node_modules/util-deprecate/browser.js\":[function(require,module,exports){\n(function (global){\n\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],\"/home/ubuntu/starmask/node_modules/util/node_modules/inherits/inherits_browser.js\":[function(require,module,exports){\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n},{}],\"/home/ubuntu/starmask/node_modules/util/support/isBufferBrowser.js\":[function(require,module,exports){\nmodule.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n},{}],\"/home/ubuntu/starmask/node_modules/util/util.js\":[function(require,module,exports){\n(function (process,global){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./support/isBuffer\":\"/home/ubuntu/starmask/node_modules/util/support/isBufferBrowser.js\",\"_process\":\"/home/ubuntu/starmask/node_modules/process/browser.js\",\"inherits\":\"/home/ubuntu/starmask/node_modules/util/node_modules/inherits/inherits_browser.js\"}],\"/home/ubuntu/starmask/node_modules/wrappy/wrappy.js\":[function(require,module,exports){\n// Returns a wrapper function that returns a wrapped callback\n// The wrapper function should do some stuff, and return a\n// presumably different callback function.\n// This makes sure that own properties are retained, so that\n// decorations and such are not lost along the way.\nmodule.exports = wrappy\nfunction wrappy (fn, cb) {\n  if (fn && cb) return wrappy(fn)(cb)\n\n  if (typeof fn !== 'function')\n    throw new TypeError('need wrapper function')\n\n  Object.keys(fn).forEach(function (k) {\n    wrapper[k] = fn[k]\n  })\n\n  return wrapper\n\n  function wrapper() {\n    var args = new Array(arguments.length)\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i]\n    }\n    var ret = fn.apply(this, args)\n    var cb = args[args.length-1]\n    if (typeof ret === 'function' && ret !== cb) {\n      Object.keys(cb).forEach(function (k) {\n        ret[k] = cb[k]\n      })\n    }\n    return ret\n  }\n}\n\n},{}]},{},[\"/home/ubuntu/starmask/app/scripts/inpage.js\"])\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhcHAvc2NyaXB0cy9pbnBhZ2UuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJub2RlX21vZHVsZXMvQG1ldGFtYXNrL29iamVjdC1tdWx0aXBsZXgvZGlzdC9PYmplY3RNdWx0aXBsZXguanMiLCJub2RlX21vZHVsZXMvQG1ldGFtYXNrL29iamVjdC1tdWx0aXBsZXgvZGlzdC9TdWJzdHJlYW0uanMiLCJub2RlX21vZHVsZXMvQG1ldGFtYXNrL29iamVjdC1tdWx0aXBsZXgvZGlzdC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWV0YW1hc2svc2FmZS1ldmVudC1lbWl0dGVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BzdGFyY29pbi9zdGMtaW5wYWdlLXByb3ZpZGVyL2Rpc3QvQmFzZVByb3ZpZGVyLmpzIiwibm9kZV9tb2R1bGVzL0BzdGFyY29pbi9zdGMtaW5wYWdlLXByb3ZpZGVyL2Rpc3QvTWV0YU1hc2tJbnBhZ2VQcm92aWRlci5qcyIsIm5vZGVfbW9kdWxlcy9Ac3RhcmNvaW4vc3RjLWlucGFnZS1wcm92aWRlci9kaXN0L2V4dGVuc2lvbi1wcm92aWRlci9jcmVhdGVFeHRlcm5hbEV4dGVuc2lvblByb3ZpZGVyLmpzIiwibm9kZV9tb2R1bGVzL0BzdGFyY29pbi9zdGMtaW5wYWdlLXByb3ZpZGVyL2Rpc3QvZXh0ZW5zaW9uLXByb3ZpZGVyL2V4dGVybmFsLWV4dGVuc2lvbi1jb25maWcuanNvbiIsIm5vZGVfbW9kdWxlcy9Ac3RhcmNvaW4vc3RjLWlucGFnZS1wcm92aWRlci9kaXN0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BzdGFyY29pbi9zdGMtaW5wYWdlLXByb3ZpZGVyL2Rpc3QvaW5pdGlhbGl6ZUlucGFnZVByb3ZpZGVyLmpzIiwibm9kZV9tb2R1bGVzL0BzdGFyY29pbi9zdGMtaW5wYWdlLXByb3ZpZGVyL2Rpc3QvbWVzc2FnZXMuanMiLCJub2RlX21vZHVsZXMvQHN0YXJjb2luL3N0Yy1pbnBhZ2UtcHJvdmlkZXIvZGlzdC9zaXRlTWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvQHN0YXJjb2luL3N0Yy1pbnBhZ2UtcHJvdmlkZXIvZGlzdC91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9Ac3RhcmNvaW4vc3RjLWlucGFnZS1wcm92aWRlci9ub2RlX21vZHVsZXMvZXh0ZW5zaW9uLXBvcnQtc3RyZWFtL2Rpc3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQHN0YXJjb2luL3N0Yy1pbnBhZ2UtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL2Zhc3QtZGVlcC1lcXVhbC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9Ac3RhcmNvaW4vc3RjLWlucGFnZS1wcm92aWRlci9ub2RlX21vZHVsZXMvaXMtc3RyZWFtL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BzdGFyY29pbi9zdGMtaW5wYWdlLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9qc29uLXJwYy1taWRkbGV3YXJlLXN0cmVhbS9kaXN0L2NyZWF0ZUVuZ2luZVN0cmVhbS5qcyIsIm5vZGVfbW9kdWxlcy9Ac3RhcmNvaW4vc3RjLWlucGFnZS1wcm92aWRlci9ub2RlX21vZHVsZXMvanNvbi1ycGMtbWlkZGxld2FyZS1zdHJlYW0vZGlzdC9jcmVhdGVTdHJlYW1NaWRkbGV3YXJlLmpzIiwibm9kZV9tb2R1bGVzL0BzdGFyY29pbi9zdGMtaW5wYWdlLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9qc29uLXJwYy1taWRkbGV3YXJlLXN0cmVhbS9kaXN0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyLXJlc29sdmUvZW1wdHkuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJub2RlX21vZHVsZXMvY29yZS11dGlsLWlzL2xpYi91dGlsLmpzIiwibm9kZV9tb2R1bGVzL2RldGVjdC1icm93c2VyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2VuZC1vZi1zdHJlYW0vaW5kZXguanMiLCJub2RlX21vZHVsZXMvZXRoLXJwYy1lcnJvcnMvZGlzdC9jbGFzc2VzLmpzIiwibm9kZV9tb2R1bGVzL2V0aC1ycGMtZXJyb3JzL2Rpc3QvZXJyb3ItY29uc3RhbnRzLmpzIiwibm9kZV9tb2R1bGVzL2V0aC1ycGMtZXJyb3JzL2Rpc3QvZXJyb3JzLmpzIiwibm9kZV9tb2R1bGVzL2V0aC1ycGMtZXJyb3JzL2Rpc3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZXRoLXJwYy1lcnJvcnMvZGlzdC91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9mYXN0LXNhZmUtc3RyaW5naWZ5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9qc29uLXJwYy1lbmdpbmUvZGlzdC9Kc29uUnBjRW5naW5lLmpzIiwibm9kZV9tb2R1bGVzL2pzb24tcnBjLWVuZ2luZS9kaXN0L2NyZWF0ZUFzeW5jTWlkZGxld2FyZS5qcyIsIm5vZGVfbW9kdWxlcy9qc29uLXJwYy1lbmdpbmUvZGlzdC9jcmVhdGVTY2FmZm9sZE1pZGRsZXdhcmUuanMiLCJub2RlX21vZHVsZXMvanNvbi1ycGMtZW5naW5lL2Rpc3QvZ2V0VW5pcXVlSWQuanMiLCJub2RlX21vZHVsZXMvanNvbi1ycGMtZW5naW5lL2Rpc3QvaWRSZW1hcE1pZGRsZXdhcmUuanMiLCJub2RlX21vZHVsZXMvanNvbi1ycGMtZW5naW5lL2Rpc3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvanNvbi1ycGMtZW5naW5lL2Rpc3QvbWVyZ2VNaWRkbGV3YXJlLmpzIiwibm9kZV9tb2R1bGVzL2xvZ2xldmVsL2xpYi9sb2dsZXZlbC5qcyIsIm5vZGVfbW9kdWxlcy9vbmNlL29uY2UuanMiLCJub2RlX21vZHVsZXMvcG9zdC1tZXNzYWdlLXN0cmVhbS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvcHVtcC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vZHVwbGV4LWJyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0LmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95LmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0tYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbm9kZV9tb2R1bGVzL3Byb2Nlc3MtbmV4dGljay1hcmdzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS1icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLWJyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvc3RyZWFtLWJyb3dzZXJpZnkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIm5vZGVfbW9kdWxlcy91dGlsLWRlcHJlY2F0ZS9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3V0aWwvbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy91dGlsL3V0aWwuanMiLCJub2RlX21vZHVsZXMvd3JhcHB5L3dyYXBweS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FDaUNBOztBQUNBOztBQUNBOztBQW5DQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLFFBQUo7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxNQUFNLHNCQUFzQixHQUFHLE1BQU07QUFDbkMsRUFBQSxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQWxCOztBQUNBLE1BQUk7QUFDRixJQUFBLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLFNBQWhCO0FBQ0QsR0FGRCxDQUVFLE9BQU8sQ0FBUCxFQUFVO0FBQ1YsSUFBQSxPQUFPLENBQUMsSUFBUixDQUFhLGdEQUFiO0FBQ0Q7QUFDRixDQVBEO0FBU0E7QUFDQTtBQUNBOzs7QUFDQSxNQUFNLDBCQUEwQixHQUFHLE1BQU07QUFDdkMsTUFBSTtBQUNGLElBQUEsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsUUFBaEI7QUFDRCxHQUZELENBRUUsT0FBTyxDQUFQLEVBQVU7QUFDVixJQUFBLE9BQU8sQ0FBQyxJQUFSLENBQWEsb0RBQWI7QUFDRDtBQUNGLENBTkQ7O0FBUUEsc0JBQXNCO0FBRXRCOztBQUtBLDBCQUEwQjs7QUFFMUIsa0JBQUksZUFBSixDQUFvQixPQUFPLENBQUMsR0FBUixDQUFZLGNBQVosR0FBNkIsT0FBN0IsR0FBdUMsTUFBM0QsRSxDQUVBO0FBQ0E7QUFDQTtBQUVBOzs7QUFDQSxNQUFNLGNBQWMsR0FBRyxJQUFJLDBCQUFKLENBQTZCO0FBQ2xELEVBQUEsSUFBSSxFQUFFLGlCQUQ0QztBQUVsRCxFQUFBLE1BQU0sRUFBRTtBQUYwQyxDQUE3QixDQUF2QjtBQUtBLDJDQUFtQjtBQUNqQixFQUFBLGdCQUFnQixFQUFFLGNBREQ7QUFFakIsRUFBQSxpQkFBaUIsRUFBRSxtQkFGRjtBQUdqQixFQUFBLE1BQU0sRUFBRSxpQkFIUztBQUlqQixFQUFBLGtCQUFrQixFQUFFO0FBSkgsQ0FBbkI7Ozs7O0FDbkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDdEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEpBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDanZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMzZ0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUMzR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDck5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUM5RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6UEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN4TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2xGQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDMS9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDck5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzlxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekVBO0FBQ0E7OztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2U0E7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7O0FDREE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMvSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDM0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNuRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUMxa0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImlucGFnZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIvLyBuZWVkIHRvIG1ha2Ugc3VyZSB3ZSBhcmVuJ3QgYWZmZWN0ZWQgYnkgb3ZlcmxhcHBpbmcgbmFtZXNwYWNlc1xuLy8gYW5kIHRoYXQgd2UgZG9udCBhZmZlY3QgdGhlIGFwcCB3aXRoIG91ciBuYW1lc3BhY2Vcbi8vIG1vc3RseSBhIGZpeCBmb3Igd2ViMydzIEJpZ051bWJlciBpZiBBTUQncyBcImRlZmluZVwiIGlzIGRlZmluZWQuLi5cbmxldCBfX2RlZmluZTtcblxuLyoqXG4gKiBDYWNoZXMgcmVmZXJlbmNlIHRvIGdsb2JhbCBkZWZpbmUgb2JqZWN0IGFuZCBkZWxldGVzIGl0IHRvXG4gKiBhdm9pZCBjb25mbGljdHMgd2l0aCBvdGhlciBnbG9iYWwgZGVmaW5lIG9iamVjdHMsIHN1Y2ggYXNcbiAqIEFNRCdzIGRlZmluZSBmdW5jdGlvblxuICovXG5jb25zdCBjbGVhbkNvbnRleHRGb3JJbXBvcnRzID0gKCkgPT4ge1xuICBfX2RlZmluZSA9IGdsb2JhbC5kZWZpbmU7XG4gIHRyeSB7XG4gICAgZ2xvYmFsLmRlZmluZSA9IHVuZGVmaW5lZDtcbiAgfSBjYXRjaCAoXykge1xuICAgIGNvbnNvbGUud2FybignU3Rhck1hc2sgLSBnbG9iYWwuZGVmaW5lIGNvdWxkIG5vdCBiZSBkZWxldGVkLicpO1xuICB9XG59O1xuXG4vKipcbiAqIFJlc3RvcmVzIGdsb2JhbCBkZWZpbmUgb2JqZWN0IGZyb20gY2FjaGVkIHJlZmVyZW5jZVxuICovXG5jb25zdCByZXN0b3JlQ29udGV4dEFmdGVySW1wb3J0cyA9ICgpID0+IHtcbiAgdHJ5IHtcbiAgICBnbG9iYWwuZGVmaW5lID0gX19kZWZpbmU7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICBjb25zb2xlLndhcm4oJ1N0YXJNYXNrIC0gZ2xvYmFsLmRlZmluZSBjb3VsZCBub3QgYmUgb3ZlcndyaXR0ZW4uJyk7XG4gIH1cbn07XG5cbmNsZWFuQ29udGV4dEZvckltcG9ydHMoKTtcblxuLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L2ZpcnN0ICovXG5pbXBvcnQgbG9nIGZyb20gJ2xvZ2xldmVsJztcbmltcG9ydCBMb2NhbE1lc3NhZ2VEdXBsZXhTdHJlYW0gZnJvbSAncG9zdC1tZXNzYWdlLXN0cmVhbSc7XG5pbXBvcnQgeyBpbml0aWFsaXplUHJvdmlkZXIgfSBmcm9tICdAc3RhcmNvaW4vc3RjLWlucGFnZS1wcm92aWRlcic7XG5cbnJlc3RvcmVDb250ZXh0QWZ0ZXJJbXBvcnRzKCk7XG5cbmxvZy5zZXREZWZhdWx0TGV2ZWwocHJvY2Vzcy5lbnYuU1RBUk1BU0tfREVCVUcgPyAnZGVidWcnIDogJ3dhcm4nKTtcblxuLy9cbi8vIHNldHVwIHBsdWdpbiBjb21tdW5pY2F0aW9uXG4vL1xuXG4vLyBzZXR1cCBiYWNrZ3JvdW5kIGNvbm5lY3Rpb25cbmNvbnN0IHN0YXJtYXNrU3RyZWFtID0gbmV3IExvY2FsTWVzc2FnZUR1cGxleFN0cmVhbSh7XG4gIG5hbWU6ICdzdGFybWFzay1pbnBhZ2UnLFxuICB0YXJnZXQ6ICdzdGFybWFzay1jb250ZW50c2NyaXB0Jyxcbn0pO1xuXG5pbml0aWFsaXplUHJvdmlkZXIoe1xuICBjb25uZWN0aW9uU3RyZWFtOiBzdGFybWFza1N0cmVhbSxcbiAganNvblJwY1N0cmVhbU5hbWU6ICdzdGFybWFzay1wcm92aWRlcicsXG4gIGxvZ2dlcjogbG9nLFxuICBzaG91bGRTZW5kTWV0YWRhdGE6IGZhbHNlLFxufSk7XG4iLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PYmplY3RNdWx0aXBsZXggPSB2b2lkIDA7XG5jb25zdCByZWFkYWJsZV9zdHJlYW1fMSA9IHJlcXVpcmUoXCJyZWFkYWJsZS1zdHJlYW1cIik7XG5jb25zdCBlbmRfb2Zfc3RyZWFtXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImVuZC1vZi1zdHJlYW1cIikpO1xuY29uc3Qgb25jZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJvbmNlXCIpKTtcbmNvbnN0IFN1YnN0cmVhbV8xID0gcmVxdWlyZShcIi4vU3Vic3RyZWFtXCIpO1xuY29uc3QgSUdOT1JFX1NVQlNUUkVBTSA9IFN5bWJvbCgnSUdOT1JFX1NVQlNUUkVBTScpO1xuY2xhc3MgT2JqZWN0TXVsdGlwbGV4IGV4dGVuZHMgcmVhZGFibGVfc3RyZWFtXzEuRHVwbGV4IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICAgICAgc3VwZXIoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRzKSwgeyBvYmplY3RNb2RlOiB0cnVlIH0pKTtcbiAgICAgICAgdGhpcy5fc3Vic3RyZWFtcyA9IHt9O1xuICAgIH1cbiAgICBjcmVhdGVTdHJlYW0obmFtZSkge1xuICAgICAgICAvLyBndWFyZCBzdHJlYW0gYWdhaW5zdCBkZXN0cm95ZWQgYWxyZWFkeVxuICAgICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgT2JqZWN0TXVsdGlwbGV4IC0gcGFyZW50IHN0cmVhbSBmb3IgbmFtZSBcIiR7bmFtZX1cIiBhbHJlYWR5IGRlc3Ryb3llZGApO1xuICAgICAgICB9XG4gICAgICAgIC8vIGd1YXJkIHN0cmVhbSBhZ2FpbnN0IGVuZGVkIGFscmVhZHlcbiAgICAgICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBPYmplY3RNdWx0aXBsZXggLSBwYXJlbnQgc3RyZWFtIGZvciBuYW1lIFwiJHtuYW1lfVwiIGFscmVhZHkgZW5kZWRgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB2YWxpZGF0ZSBuYW1lXG4gICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPYmplY3RNdWx0aXBsZXggLSBuYW1lIG11c3Qgbm90IGJlIGVtcHR5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3N1YnN0cmVhbXNbbmFtZV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgT2JqZWN0TXVsdGlwbGV4IC0gU3Vic3RyZWFtIGZvciBuYW1lIFwiJHtuYW1lfVwiIGFscmVhZHkgZXhpc3RzYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY3JlYXRlIHN1YnN0cmVhbVxuICAgICAgICBjb25zdCBzdWJzdHJlYW0gPSBuZXcgU3Vic3RyZWFtXzEuU3Vic3RyZWFtKHsgcGFyZW50OiB0aGlzLCBuYW1lIH0pO1xuICAgICAgICB0aGlzLl9zdWJzdHJlYW1zW25hbWVdID0gc3Vic3RyZWFtO1xuICAgICAgICAvLyBsaXN0ZW4gZm9yIHBhcmVudCBzdHJlYW0gdG8gZW5kXG4gICAgICAgIGFueVN0cmVhbUVuZCh0aGlzLCAoX2Vycm9yKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gc3Vic3RyZWFtLmRlc3Ryb3koX2Vycm9yIHx8IHVuZGVmaW5lZCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3Vic3RyZWFtO1xuICAgIH1cbiAgICAvLyBpZ25vcmUgc3RyZWFtcyAoZG9udCBkaXNwbGF5IG9ycGhhbmVkIGRhdGEgd2FybmluZylcbiAgICBpZ25vcmVTdHJlYW0obmFtZSkge1xuICAgICAgICAvLyB2YWxpZGF0ZSBuYW1lXG4gICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPYmplY3RNdWx0aXBsZXggLSBuYW1lIG11c3Qgbm90IGJlIGVtcHR5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3N1YnN0cmVhbXNbbmFtZV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgT2JqZWN0TXVsdGlwbGV4IC0gU3Vic3RyZWFtIGZvciBuYW1lIFwiJHtuYW1lfVwiIGFscmVhZHkgZXhpc3RzYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2V0XG4gICAgICAgIHRoaXMuX3N1YnN0cmVhbXNbbmFtZV0gPSBJR05PUkVfU1VCU1RSRUFNO1xuICAgIH1cbiAgICBfcmVhZCgpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgX3dyaXRlKGNodW5rLCBfZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHsgbmFtZSwgZGF0YSB9ID0gY2h1bms7XG4gICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBPYmplY3RNdWx0aXBsZXggLSBtYWxmb3JtZWQgY2h1bmsgd2l0aG91dCBuYW1lIFwiJHtjaHVua31cImApO1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZ2V0IGNvcnJlc3BvbmRpbmcgc3Vic3RyZWFtXG4gICAgICAgIGNvbnN0IHN1YnN0cmVhbSA9IHRoaXMuX3N1YnN0cmVhbXNbbmFtZV07XG4gICAgICAgIGlmICghc3Vic3RyZWFtKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYE9iamVjdE11bHRpcGxleCAtIG9ycGhhbmVkIGRhdGEgZm9yIHN0cmVhbSBcIiR7bmFtZX1cImApO1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcHVzaCBkYXRhIGludG8gc3Vic3RyZWFtXG4gICAgICAgIGlmIChzdWJzdHJlYW0gIT09IElHTk9SRV9TVUJTVFJFQU0pIHtcbiAgICAgICAgICAgIHN1YnN0cmVhbS5wdXNoKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cbn1cbmV4cG9ydHMuT2JqZWN0TXVsdGlwbGV4ID0gT2JqZWN0TXVsdGlwbGV4O1xuLy8gdXRpbFxuZnVuY3Rpb24gYW55U3RyZWFtRW5kKHN0cmVhbSwgX2NiKSB7XG4gICAgY29uc3QgY2IgPSBvbmNlXzEuZGVmYXVsdChfY2IpO1xuICAgIGVuZF9vZl9zdHJlYW1fMS5kZWZhdWx0KHN0cmVhbSwgeyByZWFkYWJsZTogZmFsc2UgfSwgY2IpO1xuICAgIGVuZF9vZl9zdHJlYW1fMS5kZWZhdWx0KHN0cmVhbSwgeyB3cml0YWJsZTogZmFsc2UgfSwgY2IpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JqZWN0TXVsdGlwbGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdWJzdHJlYW0gPSB2b2lkIDA7XG5jb25zdCByZWFkYWJsZV9zdHJlYW1fMSA9IHJlcXVpcmUoXCJyZWFkYWJsZS1zdHJlYW1cIik7XG5jbGFzcyBTdWJzdHJlYW0gZXh0ZW5kcyByZWFkYWJsZV9zdHJlYW1fMS5EdXBsZXgge1xuICAgIGNvbnN0cnVjdG9yKHsgcGFyZW50LCBuYW1lIH0pIHtcbiAgICAgICAgc3VwZXIoeyBvYmplY3RNb2RlOiB0cnVlIH0pO1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuX25hbWUgPSBuYW1lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeHBsaWNpdGx5IHNldHMgcmVhZCBvcGVyYXRpb25zIHRvIGEgbm8tb3AuXG4gICAgICovXG4gICAgX3JlYWQoKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIGRhdGEgc2hvdWxkIGJlIHdyaXR0ZW4gdG8gdGhpcyB3cml0YWJsZSBzdHJlYW0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2h1bmsgLSBBcmJpdHJhcnkgb2JqZWN0IHRvIHdyaXRlXG4gICAgICogQHBhcmFtIGVuY29kaW5nIC0gRW5jb2RpbmcgdG8gdXNlIHdoZW4gd3JpdGluZyBwYXlsb2FkXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gQ2FsbGVkIHdoZW4gd3JpdGluZyBpcyBjb21wbGV0ZSBvciBhbiBlcnJvciBvY2N1cnNcbiAgICAgKi9cbiAgICBfd3JpdGUoY2h1bmssIF9lbmNvZGluZywgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fcGFyZW50LnB1c2goe1xuICAgICAgICAgICAgbmFtZTogdGhpcy5fbmFtZSxcbiAgICAgICAgICAgIGRhdGE6IGNodW5rLFxuICAgICAgICB9KTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG59XG5leHBvcnRzLlN1YnN0cmVhbSA9IFN1YnN0cmVhbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnN0cmVhbS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IE9iamVjdE11bHRpcGxleF8xID0gcmVxdWlyZShcIi4vT2JqZWN0TXVsdGlwbGV4XCIpO1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3RNdWx0aXBsZXhfMS5PYmplY3RNdWx0aXBsZXg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbmZ1bmN0aW9uIHNhZmVBcHBseShoYW5kbGVyLCBjb250ZXh0LCBhcmdzKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgUmVmbGVjdC5hcHBseShoYW5kbGVyLCBjb250ZXh0LCBhcmdzKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBUaHJvdyBlcnJvciBhZnRlciB0aW1lb3V0IHNvIGFzIG5vdCB0byBpbnRlcnJ1cHQgdGhlIHN0YWNrXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBhcnJheUNsb25lKGFycikge1xuICAgIGNvbnN0IG4gPSBhcnIubGVuZ3RoO1xuICAgIGNvbnN0IGNvcHkgPSBuZXcgQXJyYXkobik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpICs9IDEpIHtcbiAgICAgICAgY29weVtpXSA9IGFycltpXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvcHk7XG59XG5jbGFzcyBTYWZlRXZlbnRFbWl0dGVyIGV4dGVuZHMgZXZlbnRzXzEuRXZlbnRFbWl0dGVyIHtcbiAgICBlbWl0KHR5cGUsIC4uLmFyZ3MpIHtcbiAgICAgICAgbGV0IGRvRXJyb3IgPSB0eXBlID09PSAnZXJyb3InO1xuICAgICAgICBjb25zdCBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICAgIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZG9FcnJvciA9IGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWRvRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gICAgICAgIGlmIChkb0Vycm9yKSB7XG4gICAgICAgICAgICBsZXQgZXI7XG4gICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgW2VyXSA9IGFyZ3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgICAgICAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICAgICAgICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoYFVuaGFuZGxlZCBlcnJvci4ke2VyID8gYCAoJHtlci5tZXNzYWdlfSlgIDogJyd9YCk7XG4gICAgICAgICAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgICAgICAgICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG4gICAgICAgIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHNhZmVBcHBseShoYW5kbGVyLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBzYWZlQXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTYWZlRXZlbnRFbWl0dGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBwdW1wXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInB1bXBcIikpO1xuY29uc3QganNvbl9ycGNfZW5naW5lXzEgPSByZXF1aXJlKFwianNvbi1ycGMtZW5naW5lXCIpO1xuY29uc3QganNvbl9ycGNfbWlkZGxld2FyZV9zdHJlYW1fMSA9IHJlcXVpcmUoXCJqc29uLXJwYy1taWRkbGV3YXJlLXN0cmVhbVwiKTtcbmNvbnN0IG9iamVjdF9tdWx0aXBsZXhfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiQG1ldGFtYXNrL29iamVjdC1tdWx0aXBsZXhcIikpO1xuY29uc3Qgc2FmZV9ldmVudF9lbWl0dGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIkBtZXRhbWFzay9zYWZlLWV2ZW50LWVtaXR0ZXJcIikpO1xuY29uc3QgZmFzdF9kZWVwX2VxdWFsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImZhc3QtZGVlcC1lcXVhbFwiKSk7XG5jb25zdCBldGhfcnBjX2Vycm9yc18xID0gcmVxdWlyZShcImV0aC1ycGMtZXJyb3JzXCIpO1xuY29uc3QgaXNfc3RyZWFtXzEgPSByZXF1aXJlKFwiaXMtc3RyZWFtXCIpO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tZXNzYWdlc1wiKSk7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jbGFzcyBCYXNlUHJvdmlkZXIgZXh0ZW5kcyBzYWZlX2V2ZW50X2VtaXR0ZXJfMS5kZWZhdWx0IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY29ubmVjdGlvblN0cmVhbSAtIEEgTm9kZS5qcyBkdXBsZXggc3RyZWFtXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvcHRpb25zIGJhZ1xuICAgICAqIEBwYXJhbSBvcHRpb25zLmpzb25ScGNTdHJlYW1OYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGludGVybmFsIEpTT04tUlBDIHN0cmVhbS5cbiAgICAgKiBEZWZhdWx0OiBtZXRhbWFzay1wcm92aWRlclxuICAgICAqIEBwYXJhbSBvcHRpb25zLmxvZ2dlciAtIFRoZSBsb2dnaW5nIEFQSSB0byB1c2UuIERlZmF1bHQ6IGNvbnNvbGVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5tYXhFdmVudExpc3RlbmVycyAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBldmVudFxuICAgICAqIGxpc3RlbmVycy4gRGVmYXVsdDogMTAwXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvblN0cmVhbSwgeyBqc29uUnBjU3RyZWFtTmFtZSA9ICdzdGFybWFzay1wcm92aWRlcicsIGxvZ2dlciA9IGNvbnNvbGUsIG1heEV2ZW50TGlzdGVuZXJzID0gMTAwLCB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKCFpc19zdHJlYW1fMS5kdXBsZXgoY29ubmVjdGlvblN0cmVhbSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlc18xLmRlZmF1bHQuZXJyb3JzLmludmFsaWREdXBsZXhTdHJlYW0oKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbG9nID0gbG9nZ2VyO1xuICAgICAgICB0aGlzLnNldE1heExpc3RlbmVycyhtYXhFdmVudExpc3RlbmVycyk7XG4gICAgICAgIC8vIHByaXZhdGUgc3RhdGVcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBCYXNlUHJvdmlkZXIuX2RlZmF1bHRTdGF0ZSk7XG4gICAgICAgIC8vIHB1YmxpYyBzdGF0ZVxuICAgICAgICB0aGlzLnNlbGVjdGVkQWRkcmVzcyA9IG51bGw7XG4gICAgICAgIHRoaXMuY2hhaW5JZCA9IG51bGw7XG4gICAgICAgIC8vIGJpbmQgZnVuY3Rpb25zICh0byBwcmV2ZW50IGNvbnN1bWVycyBmcm9tIG1ha2luZyB1bmJvdW5kIGNhbGxzKVxuICAgICAgICB0aGlzLl9oYW5kbGVBY2NvdW50c0NoYW5nZWQgPSB0aGlzLl9oYW5kbGVBY2NvdW50c0NoYW5nZWQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5faGFuZGxlQ29ubmVjdCA9IHRoaXMuX2hhbmRsZUNvbm5lY3QuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5faGFuZGxlQ2hhaW5DaGFuZ2VkID0gdGhpcy5faGFuZGxlQ2hhaW5DaGFuZ2VkLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX2hhbmRsZURpc2Nvbm5lY3QgPSB0aGlzLl9oYW5kbGVEaXNjb25uZWN0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX2hhbmRsZVN0cmVhbURpc2Nvbm5lY3QgPSB0aGlzLl9oYW5kbGVTdHJlYW1EaXNjb25uZWN0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX2hhbmRsZVVubG9ja1N0YXRlQ2hhbmdlZCA9IHRoaXMuX2hhbmRsZVVubG9ja1N0YXRlQ2hhbmdlZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9ycGNSZXF1ZXN0ID0gdGhpcy5fcnBjUmVxdWVzdC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnJlcXVlc3QgPSB0aGlzLnJlcXVlc3QuYmluZCh0aGlzKTtcbiAgICAgICAgLy8gc2V0dXAgY29ubmVjdGlvblN0cmVhbSBtdWx0aXBsZXhpbmdcbiAgICAgICAgY29uc3QgbXV4ID0gbmV3IG9iamVjdF9tdWx0aXBsZXhfMS5kZWZhdWx0KCk7XG4gICAgICAgIHB1bXBfMS5kZWZhdWx0KGNvbm5lY3Rpb25TdHJlYW0sIG11eCwgY29ubmVjdGlvblN0cmVhbSwgdGhpcy5faGFuZGxlU3RyZWFtRGlzY29ubmVjdC5iaW5kKHRoaXMsICdTdGFyTWFzaycpKTtcbiAgICAgICAgLy8gc2V0dXAgb3duIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICAvLyBFSVAtMTE5MyBjb25uZWN0XG4gICAgICAgIHRoaXMub24oJ2Nvbm5lY3QnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZS5pc0Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBzZXR1cCBSUEMgY29ubmVjdGlvblxuICAgICAgICB0aGlzLl9qc29uUnBjQ29ubmVjdGlvbiA9IGpzb25fcnBjX21pZGRsZXdhcmVfc3RyZWFtXzEuY3JlYXRlU3RyZWFtTWlkZGxld2FyZSgpO1xuICAgICAgICBwdW1wXzEuZGVmYXVsdCh0aGlzLl9qc29uUnBjQ29ubmVjdGlvbi5zdHJlYW0sIG11eC5jcmVhdGVTdHJlYW0oanNvblJwY1N0cmVhbU5hbWUpLCB0aGlzLl9qc29uUnBjQ29ubmVjdGlvbi5zdHJlYW0sIHRoaXMuX2hhbmRsZVN0cmVhbURpc2Nvbm5lY3QuYmluZCh0aGlzLCAnU3Rhck1hc2sgUnBjUHJvdmlkZXInKSk7XG4gICAgICAgIC8vIGhhbmRsZSBSUEMgcmVxdWVzdHMgdmlhIGRhcHAtc2lkZSBycGMgZW5naW5lXG4gICAgICAgIGNvbnN0IHJwY0VuZ2luZSA9IG5ldyBqc29uX3JwY19lbmdpbmVfMS5Kc29uUnBjRW5naW5lKCk7XG4gICAgICAgIHJwY0VuZ2luZS5wdXNoKGpzb25fcnBjX2VuZ2luZV8xLmNyZWF0ZUlkUmVtYXBNaWRkbGV3YXJlKCkpO1xuICAgICAgICBycGNFbmdpbmUucHVzaCh1dGlsc18xLmNyZWF0ZUVycm9yTWlkZGxld2FyZSh0aGlzLl9sb2cpKTtcbiAgICAgICAgcnBjRW5naW5lLnB1c2godGhpcy5fanNvblJwY0Nvbm5lY3Rpb24ubWlkZGxld2FyZSk7XG4gICAgICAgIHRoaXMuX3JwY0VuZ2luZSA9IHJwY0VuZ2luZTtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZVN0YXRlKCk7XG4gICAgICAgIC8vIGhhbmRsZSBKU09OLVJQQyBub3RpZmljYXRpb25zXG4gICAgICAgIHRoaXMuX2pzb25ScGNDb25uZWN0aW9uLmV2ZW50cy5vbignbm90aWZpY2F0aW9uJywgKHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgbWV0aG9kLCBwYXJhbXMgfSA9IHBheWxvYWQ7XG4gICAgICAgICAgICBpZiAobWV0aG9kID09PSAnc3Rhcm1hc2tfYWNjb3VudHNDaGFuZ2VkJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUFjY291bnRzQ2hhbmdlZChwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWV0aG9kID09PSAnc3Rhcm1hc2tfdW5sb2NrU3RhdGVDaGFuZ2VkJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVVubG9ja1N0YXRlQ2hhbmdlZChwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWV0aG9kID09PSAnc3Rhcm1hc2tfY2hhaW5DaGFuZ2VkJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNoYWluQ2hhbmdlZChwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodXRpbHNfMS5FTUlUVEVEX05PVElGSUNBVElPTlMuaW5jbHVkZXMobWV0aG9kKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnbWVzc2FnZScsIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBwYXJhbXMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChtZXRob2QgPT09ICdTVEFSTUFTS19TVFJFQU1fRkFJTFVSRScpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uU3RyZWFtLmRlc3Ryb3kobmV3IEVycm9yKG1lc3NhZ2VzXzEuZGVmYXVsdC5lcnJvcnMucGVybWFuZW50bHlEaXNjb25uZWN0ZWQoKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy89PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIFB1YmxpYyBNZXRob2RzXG4gICAgLy89PT09PT09PT09PT09PT09PT09PVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgcHJvdmlkZXIgY2FuIHByb2Nlc3MgUlBDIHJlcXVlc3RzLlxuICAgICAqL1xuICAgIGlzQ29ubmVjdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGUuaXNDb25uZWN0ZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1Ym1pdHMgYW4gUlBDIHJlcXVlc3QgZm9yIHRoZSBnaXZlbiBtZXRob2QsIHdpdGggdGhlIGdpdmVuIHBhcmFtcy5cbiAgICAgKiBSZXNvbHZlcyB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIG1ldGhvZCBjYWxsLCBvciByZWplY3RzIG9uIGVycm9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFyZ3MgLSBUaGUgUlBDIHJlcXVlc3QgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSBhcmdzLm1ldGhvZCAtIFRoZSBSUEMgbWV0aG9kIG5hbWUuXG4gICAgICogQHBhcmFtIGFyZ3MucGFyYW1zIC0gVGhlIHBhcmFtZXRlcnMgZm9yIHRoZSBSUEMgbWV0aG9kLlxuICAgICAqIEByZXR1cm5zIEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgUlBDIG1ldGhvZCxcbiAgICAgKiBvciByZWplY3RzIGlmIGFuIGVycm9yIGlzIGVuY291bnRlcmVkLlxuICAgICAqL1xuICAgIGFzeW5jIHJlcXVlc3QoYXJncykge1xuICAgICAgICBpZiAoIWFyZ3MgfHwgdHlwZW9mIGFyZ3MgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkoYXJncykpIHtcbiAgICAgICAgICAgIHRocm93IGV0aF9ycGNfZXJyb3JzXzEuZXRoRXJyb3JzLnJwYy5pbnZhbGlkUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZXNfMS5kZWZhdWx0LmVycm9ycy5pbnZhbGlkUmVxdWVzdEFyZ3MoKSxcbiAgICAgICAgICAgICAgICBkYXRhOiBhcmdzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBtZXRob2QsIHBhcmFtcyB9ID0gYXJncztcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QgIT09ICdzdHJpbmcnIHx8IG1ldGhvZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IGV0aF9ycGNfZXJyb3JzXzEuZXRoRXJyb3JzLnJwYy5pbnZhbGlkUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZXNfMS5kZWZhdWx0LmVycm9ycy5pbnZhbGlkUmVxdWVzdE1ldGhvZCgpLFxuICAgICAgICAgICAgICAgIGRhdGE6IGFyZ3MsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICFBcnJheS5pc0FycmF5KHBhcmFtcykgJiZcbiAgICAgICAgICAgICh0eXBlb2YgcGFyYW1zICE9PSAnb2JqZWN0JyB8fCBwYXJhbXMgPT09IG51bGwpKSB7XG4gICAgICAgICAgICB0aHJvdyBldGhfcnBjX2Vycm9yc18xLmV0aEVycm9ycy5ycGMuaW52YWxpZFJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VzXzEuZGVmYXVsdC5lcnJvcnMuaW52YWxpZFJlcXVlc3RQYXJhbXMoKSxcbiAgICAgICAgICAgICAgICBkYXRhOiBhcmdzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3JwY1JlcXVlc3QoeyBtZXRob2QsIHBhcmFtcyB9LCB1dGlsc18xLmdldFJwY1Byb21pc2VDYWxsYmFjayhyZXNvbHZlLCByZWplY3QpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vPT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBQcml2YXRlIE1ldGhvZHNcbiAgICAvLz09PT09PT09PT09PT09PT09PT09XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3IgaGVscGVyLlxuICAgICAqIFBvcHVsYXRlcyBpbml0aWFsIHN0YXRlIGJ5IGNhbGxpbmcgJ3N0YXJtYXNrX2dldFByb3ZpZGVyU3RhdGUnIGFuZCBlbWl0c1xuICAgICAqIG5lY2Vzc2FyeSBldmVudHMuXG4gICAgICovXG4gICAgYXN5bmMgX2luaXRpYWxpemVTdGF0ZSgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgYWNjb3VudHMsIGNoYWluSWQsIGlzVW5sb2NrZWQsIG5ldHdvcmtWZXJzaW9uLCB9ID0gKGF3YWl0IHRoaXMucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnc3Rhcm1hc2tfZ2V0UHJvdmlkZXJTdGF0ZScsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAvLyBpbmRpY2F0ZSB0aGF0IHdlJ3ZlIGNvbm5lY3RlZCwgZm9yIEVJUC0xMTkzIGNvbXBsaWFuY2VcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnY29ubmVjdCcsIHsgY2hhaW5JZCB9KTtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNoYWluQ2hhbmdlZCh7IGNoYWluSWQsIG5ldHdvcmtWZXJzaW9uIH0pO1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlVW5sb2NrU3RhdGVDaGFuZ2VkKHsgYWNjb3VudHMsIGlzVW5sb2NrZWQgfSk7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVBY2NvdW50c0NoYW5nZWQoYWNjb3VudHMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5fbG9nLmVycm9yKCdTdGFyTWFzazogRmFpbGVkIHRvIGdldCBpbml0aWFsIHN0YXRlLiBQbGVhc2UgcmVwb3J0IHRoaXMgYnVnLicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnX2luaXRpYWxpemVkJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgUlBDIG1ldGhvZC4gRm9yd2FyZHMgcmVxdWVzdHMgdG8gYmFja2dyb3VuZCB2aWEgdGhlIFJQQyBlbmdpbmUuXG4gICAgICogQWxzbyByZW1hcCBpZHMgaW5ib3VuZCBhbmQgb3V0Ym91bmQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGF5bG9hZCAtIFRoZSBSUEMgcmVxdWVzdCBvYmplY3QuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gVGhlIGNvbnN1bWVyJ3MgY2FsbGJhY2suXG4gICAgICovXG4gICAgX3JwY1JlcXVlc3QocGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IGNiID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShwYXlsb2FkKSkge1xuICAgICAgICAgICAgaWYgKCFwYXlsb2FkLmpzb25ycGMpIHtcbiAgICAgICAgICAgICAgICBwYXlsb2FkLmpzb25ycGMgPSAnMi4wJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXlsb2FkLm1ldGhvZCA9PT0gJ3N0Y19hY2NvdW50cycgfHxcbiAgICAgICAgICAgICAgICBwYXlsb2FkLm1ldGhvZCA9PT0gJ3N0Y19yZXF1ZXN0QWNjb3VudHMnKSB7XG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIGFjY291bnRzIGNoYW5naW5nXG4gICAgICAgICAgICAgICAgY2IgPSAoZXJyLCByZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlQWNjb3VudHNDaGFuZ2VkKHJlcy5yZXN1bHQgfHwgW10sIHBheWxvYWQubWV0aG9kID09PSAnc3RjX2FjY291bnRzJyk7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JwY0VuZ2luZS5oYW5kbGUocGF5bG9hZCwgY2IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9ycGNFbmdpbmUuaGFuZGxlKHBheWxvYWQsIGNiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgcHJvdmlkZXIgYmVjb21lcyBjb25uZWN0ZWQsIHVwZGF0ZXMgaW50ZXJuYWwgc3RhdGUgYW5kIGVtaXRzXG4gICAgICogcmVxdWlyZWQgZXZlbnRzLiBJZGVtcG90ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNoYWluSWQgLSBUaGUgSUQgb2YgdGhlIG5ld2x5IGNvbm5lY3RlZCBjaGFpbi5cbiAgICAgKiBAZW1pdHMgTWV0YU1hc2tJbnBhZ2VQcm92aWRlciNjb25uZWN0XG4gICAgICovXG4gICAgX2hhbmRsZUNvbm5lY3QoY2hhaW5JZCkge1xuICAgICAgICBpZiAoIXRoaXMuX3N0YXRlLmlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZS5pc0Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3QnLCB7IGNoYWluSWQgfSk7XG4gICAgICAgICAgICB0aGlzLl9sb2cuZGVidWcobWVzc2FnZXNfMS5kZWZhdWx0LmluZm8uY29ubmVjdGVkKGNoYWluSWQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSBwcm92aWRlciBiZWNvbWVzIGRpc2Nvbm5lY3RlZCwgdXBkYXRlcyBpbnRlcm5hbCBzdGF0ZSBhbmQgZW1pdHNcbiAgICAgKiByZXF1aXJlZCBldmVudHMuIElkZW1wb3RlbnQgd2l0aCByZXNwZWN0IHRvIHRoZSBpc1JlY292ZXJhYmxlIHBhcmFtZXRlci5cbiAgICAgKlxuICAgICAqIEVycm9yIGNvZGVzIHBlciB0aGUgQ2xvc2VFdmVudCBzdGF0dXMgY29kZXMgYXMgcmVxdWlyZWQgYnkgRUlQLTExOTM6XG4gICAgICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0Nsb3NlRXZlbnQjU3RhdHVzX2NvZGVzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaXNSZWNvdmVyYWJsZSAtIFdoZXRoZXIgdGhlIGRpc2Nvbm5lY3Rpb24gaXMgcmVjb3ZlcmFibGUuXG4gICAgICogQHBhcmFtIGVycm9yTWVzc2FnZSAtIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UuXG4gICAgICogQGVtaXRzIE1ldGFNYXNrSW5wYWdlUHJvdmlkZXIjZGlzY29ubmVjdFxuICAgICAqL1xuICAgIF9oYW5kbGVEaXNjb25uZWN0KGlzUmVjb3ZlcmFibGUsIGVycm9yTWVzc2FnZSkge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUuaXNDb25uZWN0ZWQgfHxcbiAgICAgICAgICAgICghdGhpcy5fc3RhdGUuaXNQZXJtYW5lbnRseURpc2Nvbm5lY3RlZCAmJiAhaXNSZWNvdmVyYWJsZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlLmlzQ29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgZXJyb3I7XG4gICAgICAgICAgICBpZiAoaXNSZWNvdmVyYWJsZSkge1xuICAgICAgICAgICAgICAgIGVycm9yID0gbmV3IGV0aF9ycGNfZXJyb3JzXzEuRXRoZXJldW1ScGNFcnJvcigxMDEzLCAvLyBUcnkgYWdhaW4gbGF0ZXJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgfHwgbWVzc2FnZXNfMS5kZWZhdWx0LmVycm9ycy5kaXNjb25uZWN0ZWQoKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9nLmRlYnVnKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVycm9yID0gbmV3IGV0aF9ycGNfZXJyb3JzXzEuRXRoZXJldW1ScGNFcnJvcigxMDExLCAvLyBJbnRlcm5hbCBlcnJvclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSB8fCBtZXNzYWdlc18xLmRlZmF1bHQuZXJyb3JzLnBlcm1hbmVudGx5RGlzY29ubmVjdGVkKCkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvZy5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFpbklkID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZS5hY2NvdW50cyA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEFkZHJlc3MgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlLmlzVW5sb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZS5pc1Blcm1hbmVudGx5RGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZGlzY29ubmVjdCcsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBjb25uZWN0aW9uIGlzIGxvc3QgdG8gY3JpdGljYWwgc3RyZWFtcy5cbiAgICAgKlxuICAgICAqIEBlbWl0cyBNZXRhbWFza0lucGFnZVByb3ZpZGVyI2Rpc2Nvbm5lY3RcbiAgICAgKi9cbiAgICBfaGFuZGxlU3RyZWFtRGlzY29ubmVjdChzdHJlYW1OYW1lLCBlcnJvcikge1xuICAgICAgICB1dGlsc18xLmxvZ1N0cmVhbURpc2Nvbm5lY3RXYXJuaW5nKHRoaXMuX2xvZywgc3RyZWFtTmFtZSwgZXJyb3IsIHRoaXMpO1xuICAgICAgICB0aGlzLl9oYW5kbGVEaXNjb25uZWN0KGZhbHNlLCBlcnJvciA/IGVycm9yLm1lc3NhZ2UgOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcG9uIHJlY2VpcHQgb2YgYSBuZXcgY2hhaW5JZCBhbmQgbmV0d29ya1ZlcnNpb24sIGVtaXRzIGNvcnJlc3BvbmRpbmdcbiAgICAgKiBldmVudHMgYW5kIHNldHMgcmVsZXZhbnQgcHVibGljIHN0YXRlLlxuICAgICAqIERvZXMgbm90aGluZyBpZiBuZWl0aGVyIHRoZSBjaGFpbklkIG5vciB0aGUgbmV0d29ya1ZlcnNpb24gYXJlIGRpZmZlcmVudFxuICAgICAqIGZyb20gZXhpc3RpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQGVtaXRzIE1ldGFtYXNrSW5wYWdlUHJvdmlkZXIjY2hhaW5DaGFuZ2VkXG4gICAgICogQHBhcmFtIG5ldHdvcmtJbmZvIC0gQW4gb2JqZWN0IHdpdGggbmV0d29yayBpbmZvLlxuICAgICAqIEBwYXJhbSBuZXR3b3JrSW5mby5jaGFpbklkIC0gVGhlIGxhdGVzdCBjaGFpbiBJRC5cbiAgICAgKiBAcGFyYW0gbmV0d29ya0luZm8ubmV0d29ya1ZlcnNpb24gLSBUaGUgbGF0ZXN0IG5ldHdvcmsgSUQuXG4gICAgICovXG4gICAgX2hhbmRsZUNoYWluQ2hhbmdlZCh7IGNoYWluSWQsIG5ldHdvcmtWZXJzaW9uLCB9ID0ge30pIHtcbiAgICAgICAgaWYgKCFjaGFpbklkIHx8XG4gICAgICAgICAgICB0eXBlb2YgY2hhaW5JZCAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICFjaGFpbklkLnN0YXJ0c1dpdGgoJzB4JykgfHxcbiAgICAgICAgICAgICFuZXR3b3JrVmVyc2lvbiB8fFxuICAgICAgICAgICAgdHlwZW9mIG5ldHdvcmtWZXJzaW9uICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhpcy5fbG9nLmVycm9yKCdTdGFyTWFzazogUmVjZWl2ZWQgaW52YWxpZCBuZXR3b3JrIHBhcmFtZXRlcnMuIFBsZWFzZSByZXBvcnQgdGhpcyBidWcuJywgeyBjaGFpbklkLCBuZXR3b3JrVmVyc2lvbiB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV0d29ya1ZlcnNpb24gPT09ICdsb2FkaW5nJykge1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlRGlzY29ubmVjdCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNvbm5lY3QoY2hhaW5JZCk7XG4gICAgICAgICAgICBpZiAoY2hhaW5JZCAhPT0gdGhpcy5jaGFpbklkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFpbklkID0gY2hhaW5JZDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3RhdGUuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdjaGFpbkNoYW5nZWQnLCB0aGlzLmNoYWluSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBhY2NvdW50cyBtYXkgaGF2ZSBjaGFuZ2VkLiBEaWZmcyB0aGUgbmV3IGFjY291bnRzIHZhbHVlIHdpdGhcbiAgICAgKiB0aGUgY3VycmVudCBvbmUsIHVwZGF0ZXMgYWxsIHN0YXRlIGFzIG5lY2Vzc2FyeSwgYW5kIGVtaXRzIHRoZVxuICAgICAqIGFjY291bnRzQ2hhbmdlZCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhY2NvdW50cyAtIFRoZSBuZXcgYWNjb3VudHMgdmFsdWUuXG4gICAgICogQHBhcmFtIGlzRXRoQWNjb3VudHMgLSBXaGV0aGVyIHRoZSBhY2NvdW50cyB2YWx1ZSB3YXMgcmV0dXJuZWQgYnlcbiAgICAgKiBhIGNhbGwgdG8gc3RjX2FjY291bnRzLlxuICAgICAqL1xuICAgIF9oYW5kbGVBY2NvdW50c0NoYW5nZWQoYWNjb3VudHMsIGlzRXRoQWNjb3VudHMgPSBmYWxzZSkge1xuICAgICAgICBsZXQgX2FjY291bnRzID0gYWNjb3VudHM7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShhY2NvdW50cykpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvZy5lcnJvcignU3Rhck1hc2s6IFJlY2VpdmVkIGludmFsaWQgYWNjb3VudHMgcGFyYW1ldGVyLiBQbGVhc2UgcmVwb3J0IHRoaXMgYnVnLicsIGFjY291bnRzKTtcbiAgICAgICAgICAgIF9hY2NvdW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgYWNjb3VudCBvZiBhY2NvdW50cykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhY2NvdW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvZy5lcnJvcignU3Rhck1hc2s6IFJlY2VpdmVkIG5vbi1zdHJpbmcgYWNjb3VudC4gUGxlYXNlIHJlcG9ydCB0aGlzIGJ1Zy4nLCBhY2NvdW50cyk7XG4gICAgICAgICAgICAgICAgX2FjY291bnRzID0gW107XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gZW1pdCBhY2NvdW50c0NoYW5nZWQgaWYgYW55dGhpbmcgYWJvdXQgdGhlIGFjY291bnRzIGFycmF5IGhhcyBjaGFuZ2VkXG4gICAgICAgIGlmICghZmFzdF9kZWVwX2VxdWFsXzEuZGVmYXVsdCh0aGlzLl9zdGF0ZS5hY2NvdW50cywgX2FjY291bnRzKSkge1xuICAgICAgICAgICAgLy8gd2Ugc2hvdWxkIGFsd2F5cyBoYXZlIHRoZSBjb3JyZWN0IGFjY291bnRzIGV2ZW4gYmVmb3JlIHN0Y19hY2NvdW50c1xuICAgICAgICAgICAgLy8gcmV0dXJuc1xuICAgICAgICAgICAgaWYgKGlzRXRoQWNjb3VudHMgJiYgdGhpcy5fc3RhdGUuYWNjb3VudHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2cuZXJyb3IoYFN0YXJNYXNrOiAnc3RjX2FjY291bnRzJyB1bmV4cGVjdGVkbHkgdXBkYXRlZCBhY2NvdW50cy4gUGxlYXNlIHJlcG9ydCB0aGlzIGJ1Zy5gLCBfYWNjb3VudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc3RhdGUuYWNjb3VudHMgPSBfYWNjb3VudHM7XG4gICAgICAgICAgICAvLyBoYW5kbGUgc2VsZWN0ZWRBZGRyZXNzXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZEFkZHJlc3MgIT09IF9hY2NvdW50c1swXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRBZGRyZXNzID0gX2FjY291bnRzWzBdIHx8IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBmaW5hbGx5LCBhZnRlciBhbGwgc3RhdGUgaGFzIGJlZW4gdXBkYXRlZCwgZW1pdCB0aGUgZXZlbnRcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdGF0ZS5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnYWNjb3VudHNDaGFuZ2VkJywgX2FjY291bnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcG9uIHJlY2VpcHQgb2YgYSBuZXcgaXNVbmxvY2tlZCBzdGF0ZSwgc2V0cyByZWxldmFudCBwdWJsaWMgc3RhdGUuXG4gICAgICogQ2FsbHMgdGhlIGFjY291bnRzIGNoYW5nZWQgaGFuZGxlciB3aXRoIHRoZSByZWNlaXZlZCBhY2NvdW50cywgb3IgYW4gZW1wdHlcbiAgICAgKiBhcnJheS5cbiAgICAgKlxuICAgICAqIERvZXMgbm90aGluZyBpZiB0aGUgcmVjZWl2ZWQgdmFsdWUgaXMgZXF1YWwgdG8gdGhlIGV4aXN0aW5nIHZhbHVlLlxuICAgICAqIFRoZXJlIGFyZSBubyBsb2NrL3VubG9jayBldmVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0cyAtIE9wdGlvbnMgYmFnLlxuICAgICAqIEBwYXJhbSBvcHRzLmFjY291bnRzIC0gVGhlIGV4cG9zZWQgYWNjb3VudHMsIGlmIGFueS5cbiAgICAgKiBAcGFyYW0gb3B0cy5pc1VubG9ja2VkIC0gVGhlIGxhdGVzdCBpc1VubG9ja2VkIHZhbHVlLlxuICAgICAqL1xuICAgIF9oYW5kbGVVbmxvY2tTdGF0ZUNoYW5nZWQoeyBhY2NvdW50cywgaXNVbmxvY2tlZCwgfSA9IHt9KSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXNVbmxvY2tlZCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2cuZXJyb3IoJ1N0YXJNYXNrOiBSZWNlaXZlZCBpbnZhbGlkIGlzVW5sb2NrZWQgcGFyYW1ldGVyLiBQbGVhc2UgcmVwb3J0IHRoaXMgYnVnLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1VubG9ja2VkICE9PSB0aGlzLl9zdGF0ZS5pc1VubG9ja2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZS5pc1VubG9ja2VkID0gaXNVbmxvY2tlZDtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUFjY291bnRzQ2hhbmdlZChhY2NvdW50cyB8fCBbXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBCYXNlUHJvdmlkZXI7XG5CYXNlUHJvdmlkZXIuX2RlZmF1bHRTdGF0ZSA9IHtcbiAgICBhY2NvdW50czogbnVsbCxcbiAgICBpc0Nvbm5lY3RlZDogZmFsc2UsXG4gICAgaXNVbmxvY2tlZDogZmFsc2UsXG4gICAgaW5pdGlhbGl6ZWQ6IGZhbHNlLFxuICAgIGlzUGVybWFuZW50bHlEaXNjb25uZWN0ZWQ6IGZhbHNlLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJhc2VQcm92aWRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGV0aF9ycGNfZXJyb3JzXzEgPSByZXF1aXJlKFwiZXRoLXJwYy1lcnJvcnNcIik7XG5jb25zdCBzaXRlTWV0YWRhdGFfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zaXRlTWV0YWRhdGFcIikpO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tZXNzYWdlc1wiKSk7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCBCYXNlUHJvdmlkZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9CYXNlUHJvdmlkZXJcIikpO1xuY2xhc3MgTWV0YU1hc2tJbnBhZ2VQcm92aWRlciBleHRlbmRzIEJhc2VQcm92aWRlcl8xLmRlZmF1bHQge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBjb25uZWN0aW9uU3RyZWFtIC0gQSBOb2RlLmpzIGR1cGxleCBzdHJlYW1cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9wdGlvbnMgYmFnXG4gICAgICogQHBhcmFtIG9wdGlvbnMuanNvblJwY1N0cmVhbU5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgaW50ZXJuYWwgSlNPTi1SUEMgc3RyZWFtLlxuICAgICAqIERlZmF1bHQ6IG1ldGFtYXNrLXByb3ZpZGVyXG4gICAgICogQHBhcmFtIG9wdGlvbnMubG9nZ2VyIC0gVGhlIGxvZ2dpbmcgQVBJIHRvIHVzZS4gRGVmYXVsdDogY29uc29sZVxuICAgICAqIEBwYXJhbSBvcHRpb25zLm1heEV2ZW50TGlzdGVuZXJzIC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIGV2ZW50XG4gICAgICogbGlzdGVuZXJzLiBEZWZhdWx0OiAxMDBcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5zaG91bGRTZW5kTWV0YWRhdGEgLSBXaGV0aGVyIHRoZSBwcm92aWRlciBzaG91bGRcbiAgICAgKiBzZW5kIHBhZ2UgbWV0YWRhdGEuIERlZmF1bHQ6IHRydWVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uU3RyZWFtLCB7IGpzb25ScGNTdHJlYW1OYW1lID0gJ3N0YXJtYXNrLXByb3ZpZGVyJywgbG9nZ2VyID0gY29uc29sZSwgbWF4RXZlbnRMaXN0ZW5lcnMgPSAxMDAsIHNob3VsZFNlbmRNZXRhZGF0YSA9IHRydWUsIH0gPSB7fSkge1xuICAgICAgICBzdXBlcihjb25uZWN0aW9uU3RyZWFtLCB7IGpzb25ScGNTdHJlYW1OYW1lLCBsb2dnZXIsIG1heEV2ZW50TGlzdGVuZXJzIH0pO1xuICAgICAgICB0aGlzLl9zZW50V2FybmluZ3MgPSB7XG4gICAgICAgICAgICAvLyBtZXRob2RzXG4gICAgICAgICAgICBlbmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZXhwZXJpbWVudGFsTWV0aG9kczogZmFsc2UsXG4gICAgICAgICAgICBzZW5kOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIGV2ZW50c1xuICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgY2xvc2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRhdGE6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG5ldHdvcmtDaGFuZ2VkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb246IGZhbHNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5uZXR3b3JrVmVyc2lvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNTdGFyTWFzayA9IHRydWU7XG4gICAgICAgIHRoaXMuX3NlbmRTeW5jID0gdGhpcy5fc2VuZFN5bmMuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5lbmFibGUgPSB0aGlzLmVuYWJsZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnNlbmQgPSB0aGlzLnNlbmQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zZW5kQXN5bmMgPSB0aGlzLnNlbmRBc3luYy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl93YXJuT2ZEZXByZWNhdGlvbiA9IHRoaXMuX3dhcm5PZkRlcHJlY2F0aW9uLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX3N0YXJtYXNrID0gdGhpcy5fZ2V0RXhwZXJpbWVudGFsQXBpKCk7XG4gICAgICAgIC8vIGhhbmRsZSBKU09OLVJQQyBub3RpZmljYXRpb25zXG4gICAgICAgIHRoaXMuX2pzb25ScGNDb25uZWN0aW9uLmV2ZW50cy5vbignbm90aWZpY2F0aW9uJywgKHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgbWV0aG9kIH0gPSBwYXlsb2FkO1xuICAgICAgICAgICAgaWYgKHV0aWxzXzEuRU1JVFRFRF9OT1RJRklDQVRJT05TLmluY2x1ZGVzKG1ldGhvZCkpIHtcbiAgICAgICAgICAgICAgICAvLyBkZXByZWNhdGVkXG4gICAgICAgICAgICAgICAgLy8gZW1pdHRlZCBoZXJlIGJlY2F1c2UgdGhhdCB3YXMgdGhlIG9yaWdpbmFsIG9yZGVyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdkYXRhJywgcGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgLy8gZGVwcmVjYXRlZFxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnbm90aWZpY2F0aW9uJywgcGF5bG9hZC5wYXJhbXMucmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHNlbmQgd2Vic2l0ZSBtZXRhZGF0YVxuICAgICAgICBpZiAoc2hvdWxkU2VuZE1ldGFkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICAgICAgICAgIHNpdGVNZXRhZGF0YV8xLmRlZmF1bHQodGhpcy5fcnBjRW5naW5lLCB0aGlzLl9sb2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZG9tQ29udGVudExvYWRlZEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNpdGVNZXRhZGF0YV8xLmRlZmF1bHQodGhpcy5fcnBjRW5naW5lLCB0aGlzLl9sb2cpO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGRvbUNvbnRlbnRMb2FkZWRIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZG9tQ29udGVudExvYWRlZEhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vPT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBQdWJsaWMgTWV0aG9kc1xuICAgIC8vPT09PT09PT09PT09PT09PT09PT1cbiAgICAvKipcbiAgICAgKiBTdWJtaXRzIGFuIFJQQyByZXF1ZXN0IHBlciB0aGUgZ2l2ZW4gSlNPTi1SUEMgcmVxdWVzdCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGF5bG9hZCAtIFRoZSBSUEMgcmVxdWVzdCBvYmplY3QuXG4gICAgICogQHBhcmFtIGNiIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHNlbmRBc3luYyhwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9ycGNSZXF1ZXN0KHBheWxvYWQsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2Ugb3ZlcnJpZGUgdGhlIGZvbGxvd2luZyBldmVudCBtZXRob2RzIHNvIHRoYXQgd2UgY2FuIHdhcm4gY29uc3VtZXJzXG4gICAgICogYWJvdXQgZGVwcmVjYXRlZCBldmVudHM6XG4gICAgICogICBhZGRMaXN0ZW5lciwgb24sIG9uY2UsIHByZXBlbmRMaXN0ZW5lciwgcHJlcGVuZE9uY2VMaXN0ZW5lclxuICAgICAqL1xuICAgIGFkZExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fd2Fybk9mRGVwcmVjYXRpb24oZXZlbnROYW1lKTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmFkZExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICBvbihldmVudE5hbWUsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX3dhcm5PZkRlcHJlY2F0aW9uKGV2ZW50TmFtZSk7XG4gICAgICAgIHJldHVybiBzdXBlci5vbihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgb25jZShldmVudE5hbWUsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX3dhcm5PZkRlcHJlY2F0aW9uKGV2ZW50TmFtZSk7XG4gICAgICAgIHJldHVybiBzdXBlci5vbmNlKGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICBwcmVwZW5kTGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl93YXJuT2ZEZXByZWNhdGlvbihldmVudE5hbWUpO1xuICAgICAgICByZXR1cm4gc3VwZXIucHJlcGVuZExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICBwcmVwZW5kT25jZUxpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fd2Fybk9mRGVwcmVjYXRpb24oZXZlbnROYW1lKTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLnByZXBlbmRPbmNlTGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIC8vPT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBQcml2YXRlIE1ldGhvZHNcbiAgICAvLz09PT09PT09PT09PT09PT09PT09XG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgcHJvdmlkZXIgYmVjb21lcyBkaXNjb25uZWN0ZWQsIHVwZGF0ZXMgaW50ZXJuYWwgc3RhdGUgYW5kIGVtaXRzXG4gICAgICogcmVxdWlyZWQgZXZlbnRzLiBJZGVtcG90ZW50IHdpdGggcmVzcGVjdCB0byB0aGUgaXNSZWNvdmVyYWJsZSBwYXJhbWV0ZXIuXG4gICAgICpcbiAgICAgKiBFcnJvciBjb2RlcyBwZXIgdGhlIENsb3NlRXZlbnQgc3RhdHVzIGNvZGVzIGFzIHJlcXVpcmVkIGJ5IEVJUC0xMTkzOlxuICAgICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DbG9zZUV2ZW50I1N0YXR1c19jb2Rlc1xuICAgICAqXG4gICAgICogQHBhcmFtIGlzUmVjb3ZlcmFibGUgLSBXaGV0aGVyIHRoZSBkaXNjb25uZWN0aW9uIGlzIHJlY292ZXJhYmxlLlxuICAgICAqIEBwYXJhbSBlcnJvck1lc3NhZ2UgLSBBIGN1c3RvbSBlcnJvciBtZXNzYWdlLlxuICAgICAqIEBlbWl0cyBNZXRhTWFza0lucGFnZVByb3ZpZGVyI2Rpc2Nvbm5lY3RcbiAgICAgKi9cbiAgICBfaGFuZGxlRGlzY29ubmVjdChpc1JlY292ZXJhYmxlLCBlcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIuX2hhbmRsZURpc2Nvbm5lY3QoaXNSZWNvdmVyYWJsZSwgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgaWYgKHRoaXMubmV0d29ya1ZlcnNpb24gJiYgIWlzUmVjb3ZlcmFibGUpIHtcbiAgICAgICAgICAgIHRoaXMubmV0d29ya1ZlcnNpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdhcm5zIG9mIGRlcHJlY2F0aW9uIGZvciB0aGUgZ2l2ZW4gZXZlbnQsIGlmIGFwcGxpY2FibGUuXG4gICAgICovXG4gICAgX3dhcm5PZkRlcHJlY2F0aW9uKGV2ZW50TmFtZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICgoKF9hID0gdGhpcy5fc2VudFdhcm5pbmdzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZXZlbnRzW2V2ZW50TmFtZV0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5fbG9nLndhcm4obWVzc2FnZXNfMS5kZWZhdWx0Lndhcm5pbmdzLmV2ZW50c1tldmVudE5hbWVdKTtcbiAgICAgICAgICAgIHRoaXMuX3NlbnRXYXJuaW5ncy5ldmVudHNbZXZlbnROYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy89PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIERlcHJlY2F0ZWQgTWV0aG9kc1xuICAgIC8vPT09PT09PT09PT09PT09PT09PT1cbiAgICAvKipcbiAgICAgKiBFcXVpdmFsZW50IHRvOiBldGhlcmV1bS5yZXF1ZXN0KCdzdGNfcmVxdWVzdEFjY291bnRzJylcbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSByZXF1ZXN0KHsgbWV0aG9kOiAnc3RjX3JlcXVlc3RBY2NvdW50cycgfSkgaW5zdGVhZC5cbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBhcnJheSBvZiBhZGRyZXNzZXMuXG4gICAgICovXG4gICAgZW5hYmxlKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3NlbnRXYXJuaW5ncy5lbmFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvZy53YXJuKG1lc3NhZ2VzXzEuZGVmYXVsdC53YXJuaW5ncy5lbmFibGVEZXByZWNhdGlvbik7XG4gICAgICAgICAgICB0aGlzLl9zZW50V2FybmluZ3MuZW5hYmxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ycGNSZXF1ZXN0KHsgbWV0aG9kOiAnc3RjX3JlcXVlc3RBY2NvdW50cycsIHBhcmFtczogW10gfSwgdXRpbHNfMS5nZXRScGNQcm9taXNlQ2FsbGJhY2socmVzb2x2ZSwgcmVqZWN0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2VuZChtZXRob2RPclBheWxvYWQsIGNhbGxiYWNrT3JBcmdzKSB7XG4gICAgICAgIGlmICghdGhpcy5fc2VudFdhcm5pbmdzLnNlbmQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvZy53YXJuKG1lc3NhZ2VzXzEuZGVmYXVsdC53YXJuaW5ncy5zZW5kRGVwcmVjYXRpb24pO1xuICAgICAgICAgICAgdGhpcy5fc2VudFdhcm5pbmdzLnNlbmQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbWV0aG9kT3JQYXlsb2FkID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgKCFjYWxsYmFja09yQXJncyB8fCBBcnJheS5pc0FycmF5KGNhbGxiYWNrT3JBcmdzKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcnBjUmVxdWVzdCh7IG1ldGhvZDogbWV0aG9kT3JQYXlsb2FkLCBwYXJhbXM6IGNhbGxiYWNrT3JBcmdzIH0sIHV0aWxzXzEuZ2V0UnBjUHJvbWlzZUNhbGxiYWNrKHJlc29sdmUsIHJlamVjdCwgZmFsc2UpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWV0aG9kT3JQYXlsb2FkICYmXG4gICAgICAgICAgICB0eXBlb2YgbWV0aG9kT3JQYXlsb2FkID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgdHlwZW9mIGNhbGxiYWNrT3JBcmdzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcnBjUmVxdWVzdChtZXRob2RPclBheWxvYWQsIGNhbGxiYWNrT3JBcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc2VuZFN5bmMobWV0aG9kT3JQYXlsb2FkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgbWV0aG9kLCB1c2VkIGluIHNlbmQuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIF9zZW5kU3luYyhwYXlsb2FkKSB7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIHN3aXRjaCAocGF5bG9hZC5tZXRob2QpIHtcbiAgICAgICAgICAgIGNhc2UgJ3N0Y19hY2NvdW50cyc6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5zZWxlY3RlZEFkZHJlc3MgPyBbdGhpcy5zZWxlY3RlZEFkZHJlc3NdIDogW107XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzdGNfY29pbmJhc2UnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuc2VsZWN0ZWRBZGRyZXNzIHx8IG51bGw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzdGNfdW5pbnN0YWxsRmlsdGVyJzpcbiAgICAgICAgICAgICAgICB0aGlzLl9ycGNSZXF1ZXN0KHBheWxvYWQsIHV0aWxzXzEuTk9PUCk7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ25ldF92ZXJzaW9uJzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLm5ldHdvcmtWZXJzaW9uIHx8IG51bGw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlc18xLmRlZmF1bHQuZXJyb3JzLnVuc3VwcG9ydGVkU3luYyhwYXlsb2FkLm1ldGhvZCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogcGF5bG9hZC5pZCxcbiAgICAgICAgICAgIGpzb25ycGM6IHBheWxvYWQuanNvbnJwYyxcbiAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3IgaGVscGVyLlxuICAgICAqIEdldHMgZXhwZXJpbWVudGFsIF9zdGFybWFzayBBUEkgYXMgUHJveHksIHNvIHRoYXQgd2UgY2FuIHdhcm4gY29uc3VtZXJzXG4gICAgICogYWJvdXQgaXRzIGV4cGVyaW1lbnQgbmF0dXJlLlxuICAgICAqL1xuICAgIF9nZXRFeHBlcmltZW50YWxBcGkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJveHkoe1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZXRlcm1pbmVzIGlmIE1ldGFNYXNrIGlzIHVubG9ja2VkIGJ5IHRoZSB1c2VyLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIHRydWUgaWYgTWV0YU1hc2sgaXMgY3VycmVudGx5IHVubG9ja2VkXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlzVW5sb2NrZWQ6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3N0YXRlLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uKCdfaW5pdGlhbGl6ZWQnLCAoKSA9PiByZXNvbHZlKCkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlLmlzVW5sb2NrZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBNYWtlIGEgYmF0Y2ggUlBDIHJlcXVlc3QuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlcXVlc3RCYXRjaDogYXN5bmMgKHJlcXVlc3RzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlcXVlc3RzKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBldGhfcnBjX2Vycm9yc18xLmV0aEVycm9ycy5ycGMuaW52YWxpZFJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0JhdGNoIHJlcXVlc3RzIG11c3QgYmUgbWFkZSB3aXRoIGFuIGFycmF5IG9mIHJlcXVlc3Qgb2JqZWN0cy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcmVxdWVzdHMsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ycGNSZXF1ZXN0KHJlcXVlc3RzLCB1dGlsc18xLmdldFJwY1Byb21pc2VDYWxsYmFjayhyZXNvbHZlLCByZWplY3QpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGdldDogKG9iaiwgcHJvcCwgLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fc2VudFdhcm5pbmdzLmV4cGVyaW1lbnRhbE1ldGhvZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9nLndhcm4obWVzc2FnZXNfMS5kZWZhdWx0Lndhcm5pbmdzLmV4cGVyaW1lbnRhbE1ldGhvZHMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZW50V2FybmluZ3MuZXhwZXJpbWVudGFsTWV0aG9kcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldChvYmosIHByb3AsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwb24gcmVjZWlwdCBvZiBhIG5ldyBjaGFpbklkIGFuZCBuZXR3b3JrVmVyc2lvbiwgZW1pdHMgY29ycmVzcG9uZGluZ1xuICAgICAqIGV2ZW50cyBhbmQgc2V0cyByZWxldmFudCBwdWJsaWMgc3RhdGUuXG4gICAgICogRG9lcyBub3RoaW5nIGlmIG5laXRoZXIgdGhlIGNoYWluSWQgbm9yIHRoZSBuZXR3b3JrVmVyc2lvbiBhcmUgZGlmZmVyZW50XG4gICAgICogZnJvbSBleGlzdGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAZW1pdHMgTWV0YW1hc2tJbnBhZ2VQcm92aWRlciNjaGFpbkNoYW5nZWRcbiAgICAgKiBAZW1pdHMgTWV0YW1hc2tJbnBhZ2VQcm92aWRlciNuZXR3b3JrQ2hhbmdlZFxuICAgICAqIEBwYXJhbSBuZXR3b3JrSW5mbyAtIEFuIG9iamVjdCB3aXRoIG5ldHdvcmsgaW5mby5cbiAgICAgKiBAcGFyYW0gbmV0d29ya0luZm8uY2hhaW5JZCAtIFRoZSBsYXRlc3QgY2hhaW4gSUQuXG4gICAgICogQHBhcmFtIG5ldHdvcmtJbmZvLm5ldHdvcmtWZXJzaW9uIC0gVGhlIGxhdGVzdCBuZXR3b3JrIElELlxuICAgICAqL1xuICAgIF9oYW5kbGVDaGFpbkNoYW5nZWQoeyBjaGFpbklkLCBuZXR3b3JrVmVyc2lvbiwgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyLl9oYW5kbGVDaGFpbkNoYW5nZWQoeyBjaGFpbklkLCBuZXR3b3JrVmVyc2lvbiB9KTtcbiAgICAgICAgaWYgKG5ldHdvcmtWZXJzaW9uICYmXG4gICAgICAgICAgICBuZXR3b3JrVmVyc2lvbiAhPT0gJ2xvYWRpbmcnICYmXG4gICAgICAgICAgICBuZXR3b3JrVmVyc2lvbiAhPT0gdGhpcy5uZXR3b3JrVmVyc2lvbikge1xuICAgICAgICAgICAgdGhpcy5uZXR3b3JrVmVyc2lvbiA9IG5ldHdvcmtWZXJzaW9uO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXRlLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCduZXR3b3JrQ2hhbmdlZCcsIHRoaXMubmV0d29ya1ZlcnNpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gTWV0YU1hc2tJbnBhZ2VQcm92aWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1ldGFNYXNrSW5wYWdlUHJvdmlkZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBleHRlbnNpb25fcG9ydF9zdHJlYW1fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZXh0ZW5zaW9uLXBvcnQtc3RyZWFtXCIpKTtcbmNvbnN0IGRldGVjdF9icm93c2VyXzEgPSByZXF1aXJlKFwiZGV0ZWN0LWJyb3dzZXJcIik7XG5jb25zdCBCYXNlUHJvdmlkZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vQmFzZVByb3ZpZGVyXCIpKTtcbmNvbnN0IGV4dGVybmFsX2V4dGVuc2lvbl9jb25maWdfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2V4dGVybmFsLWV4dGVuc2lvbi1jb25maWcuanNvblwiKSk7XG5jb25zdCBicm93c2VyID0gZGV0ZWN0X2Jyb3dzZXJfMS5kZXRlY3QoKTtcbmZ1bmN0aW9uIGNyZWF0ZU1ldGFNYXNrRXh0ZXJuYWxFeHRlbnNpb25Qcm92aWRlcigpIHtcbiAgICBsZXQgcHJvdmlkZXI7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY3VycmVudE1ldGFNYXNrSWQgPSBnZXRNZXRhTWFza0lkKCk7XG4gICAgICAgIGNvbnN0IG1ldGFtYXNrUG9ydCA9IGNocm9tZS5ydW50aW1lLmNvbm5lY3QoY3VycmVudE1ldGFNYXNrSWQpO1xuICAgICAgICBjb25zdCBwbHVnaW5TdHJlYW0gPSBuZXcgZXh0ZW5zaW9uX3BvcnRfc3RyZWFtXzEuZGVmYXVsdChtZXRhbWFza1BvcnQpO1xuICAgICAgICBwcm92aWRlciA9IG5ldyBCYXNlUHJvdmlkZXJfMS5kZWZhdWx0KHBsdWdpblN0cmVhbSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZGlyKGBTdGFybWFzayBjb25uZWN0IGVycm9yIGAsIGUpO1xuICAgICAgICB0aHJvdyBlO1xuICAgIH1cbiAgICByZXR1cm4gcHJvdmlkZXI7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVNZXRhTWFza0V4dGVybmFsRXh0ZW5zaW9uUHJvdmlkZXI7XG5mdW5jdGlvbiBnZXRNZXRhTWFza0lkKCkge1xuICAgIHN3aXRjaCAoYnJvd3NlciA9PT0gbnVsbCB8fCBicm93c2VyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBicm93c2VyLm5hbWUpIHtcbiAgICAgICAgY2FzZSAnY2hyb21lJzpcbiAgICAgICAgICAgIHJldHVybiBleHRlcm5hbF9leHRlbnNpb25fY29uZmlnX2pzb25fMS5kZWZhdWx0LkNIUk9NRV9JRDtcbiAgICAgICAgY2FzZSAnZmlyZWZveCc6XG4gICAgICAgICAgICByZXR1cm4gZXh0ZXJuYWxfZXh0ZW5zaW9uX2NvbmZpZ19qc29uXzEuZGVmYXVsdC5GSVJFRk9YX0lEO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGV4dGVybmFsX2V4dGVuc2lvbl9jb25maWdfanNvbl8xLmRlZmF1bHQuQ0hST01FX0lEO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUV4dGVybmFsRXh0ZW5zaW9uUHJvdmlkZXIuanMubWFwIiwibW9kdWxlLmV4cG9ydHM9e1xuICAgIFwiQ0hST01FX0lEXCI6IFwibWZoYmViZ29jbGtnaGViZmZkbGRwb2JlYWptYmVjZmtcIixcbiAgICBcIkZJUkVGT1hfSURcIjogXCJ3ZWJleHRlbnNpb25Ad2VzdGFyLmlvXCJcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVFeHRlcm5hbEV4dGVuc2lvblByb3ZpZGVyID0gZXhwb3J0cy5zZXRHbG9iYWxQcm92aWRlciA9IGV4cG9ydHMuQmFzZVByb3ZpZGVyID0gZXhwb3J0cy5NZXRhTWFza0lucGFnZVByb3ZpZGVyID0gZXhwb3J0cy5pbml0aWFsaXplUHJvdmlkZXIgPSB2b2lkIDA7XG5jb25zdCBNZXRhTWFza0lucGFnZVByb3ZpZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vTWV0YU1hc2tJbnBhZ2VQcm92aWRlclwiKSk7XG5leHBvcnRzLk1ldGFNYXNrSW5wYWdlUHJvdmlkZXIgPSBNZXRhTWFza0lucGFnZVByb3ZpZGVyXzEuZGVmYXVsdDtcbmNvbnN0IGNyZWF0ZUV4dGVybmFsRXh0ZW5zaW9uUHJvdmlkZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9leHRlbnNpb24tcHJvdmlkZXIvY3JlYXRlRXh0ZXJuYWxFeHRlbnNpb25Qcm92aWRlclwiKSk7XG5leHBvcnRzLmNyZWF0ZUV4dGVybmFsRXh0ZW5zaW9uUHJvdmlkZXIgPSBjcmVhdGVFeHRlcm5hbEV4dGVuc2lvblByb3ZpZGVyXzEuZGVmYXVsdDtcbmNvbnN0IEJhc2VQcm92aWRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0Jhc2VQcm92aWRlclwiKSk7XG5leHBvcnRzLkJhc2VQcm92aWRlciA9IEJhc2VQcm92aWRlcl8xLmRlZmF1bHQ7XG5jb25zdCBpbml0aWFsaXplSW5wYWdlUHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL2luaXRpYWxpemVJbnBhZ2VQcm92aWRlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImluaXRpYWxpemVQcm92aWRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5pdGlhbGl6ZUlucGFnZVByb3ZpZGVyXzEuaW5pdGlhbGl6ZVByb3ZpZGVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2V0R2xvYmFsUHJvdmlkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluaXRpYWxpemVJbnBhZ2VQcm92aWRlcl8xLnNldEdsb2JhbFByb3ZpZGVyOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNldEdsb2JhbFByb3ZpZGVyID0gZXhwb3J0cy5pbml0aWFsaXplUHJvdmlkZXIgPSB2b2lkIDA7XG5jb25zdCBNZXRhTWFza0lucGFnZVByb3ZpZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vTWV0YU1hc2tJbnBhZ2VQcm92aWRlclwiKSk7XG4vKipcbiAqIEluaXRpYWxpemVzIGEgTWV0YU1hc2tJbnBhZ2VQcm92aWRlciBhbmQgKG9wdGlvbmFsbHkpIGFzc2lnbnMgaXQgYXMgd2luZG93LmV0aGVyZXVtLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb3B0aW9ucyBiYWcuXG4gKiBAcGFyYW0gb3B0aW9ucy5jb25uZWN0aW9uU3RyZWFtIC0gQSBOb2RlLmpzIHN0cmVhbS5cbiAqIEBwYXJhbSBvcHRpb25zLmpzb25ScGNTdHJlYW1OYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGludGVybmFsIEpTT04tUlBDIHN0cmVhbS5cbiAqIEBwYXJhbSBvcHRpb25zLm1heEV2ZW50TGlzdGVuZXJzIC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIGV2ZW50IGxpc3RlbmVycy5cbiAqIEBwYXJhbSBvcHRpb25zLnNob3VsZFNlbmRNZXRhZGF0YSAtIFdoZXRoZXIgdGhlIHByb3ZpZGVyIHNob3VsZCBzZW5kIHBhZ2UgbWV0YWRhdGEuXG4gKiBAcGFyYW0gb3B0aW9ucy5zaG91bGRTZXRPbldpbmRvdyAtIFdoZXRoZXIgdGhlIHByb3ZpZGVyIHNob3VsZCBiZSBzZXQgYXMgd2luZG93LmV0aGVyZXVtLlxuICogQHJldHVybnMgVGhlIGluaXRpYWxpemVkIHByb3ZpZGVyICh3aGV0aGVyIHNldCBvciBub3QpLlxuICovXG5mdW5jdGlvbiBpbml0aWFsaXplUHJvdmlkZXIoeyBjb25uZWN0aW9uU3RyZWFtLCBqc29uUnBjU3RyZWFtTmFtZSwgbG9nZ2VyID0gY29uc29sZSwgbWF4RXZlbnRMaXN0ZW5lcnMgPSAxMDAsIHNob3VsZFNlbmRNZXRhZGF0YSA9IHRydWUsIHNob3VsZFNldE9uV2luZG93ID0gdHJ1ZSwgfSkge1xuICAgIGxldCBwcm92aWRlciA9IG5ldyBNZXRhTWFza0lucGFnZVByb3ZpZGVyXzEuZGVmYXVsdChjb25uZWN0aW9uU3RyZWFtLCB7XG4gICAgICAgIGpzb25ScGNTdHJlYW1OYW1lLFxuICAgICAgICBsb2dnZXIsXG4gICAgICAgIG1heEV2ZW50TGlzdGVuZXJzLFxuICAgICAgICBzaG91bGRTZW5kTWV0YWRhdGEsXG4gICAgfSk7XG4gICAgcHJvdmlkZXIgPSBuZXcgUHJveHkocHJvdmlkZXIsIHtcbiAgICAgICAgLy8gc29tZSBjb21tb24gbGlicmFyaWVzLCBlLmcuIHdlYjNAMS54LCBtZXNzIHdpdGggb3VyIEFQSVxuICAgICAgICBkZWxldGVQcm9wZXJ0eTogKCkgPT4gdHJ1ZSxcbiAgICB9KTtcbiAgICBpZiAoc2hvdWxkU2V0T25XaW5kb3cpIHtcbiAgICAgICAgc2V0R2xvYmFsUHJvdmlkZXIocHJvdmlkZXIpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvdmlkZXI7XG59XG5leHBvcnRzLmluaXRpYWxpemVQcm92aWRlciA9IGluaXRpYWxpemVQcm92aWRlcjtcbi8qKlxuICogU2V0cyB0aGUgZ2l2ZW4gcHJvdmlkZXIgaW5zdGFuY2UgYXMgd2luZG93LnN0YXJjb2luIGFuZCBkaXNwYXRjaGVzIHRoZVxuICogJ3N0YXJjb2luI2luaXRpYWxpemVkJyBldmVudCBvbiB3aW5kb3cuXG4gKlxuICogQHBhcmFtIHByb3ZpZGVySW5zdGFuY2UgLSBUaGUgcHJvdmlkZXIgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHNldEdsb2JhbFByb3ZpZGVyKHByb3ZpZGVySW5zdGFuY2UpIHtcbiAgICB3aW5kb3cuc3RhcmNvaW4gPSBwcm92aWRlckluc3RhbmNlO1xuICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnc3RhcmNvaW4jaW5pdGlhbGl6ZWQnKSk7XG59XG5leHBvcnRzLnNldEdsb2JhbFByb3ZpZGVyID0gc2V0R2xvYmFsUHJvdmlkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbml0aWFsaXplSW5wYWdlUHJvdmlkZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBtZXNzYWdlcyA9IHtcbiAgICBlcnJvcnM6IHtcbiAgICAgICAgZGlzY29ubmVjdGVkOiAoKSA9PiAnU3Rhck1hc2s6IERpc2Nvbm5lY3RlZCBmcm9tIGNoYWluLiBBdHRlbXB0aW5nIHRvIGNvbm5lY3QuJyxcbiAgICAgICAgcGVybWFuZW50bHlEaXNjb25uZWN0ZWQ6ICgpID0+ICdTdGFyTWFzazogRGlzY29ubmVjdGVkIGZyb20gU3Rhck1hc2sgYmFja2dyb3VuZC4gUGFnZSByZWxvYWQgcmVxdWlyZWQuJyxcbiAgICAgICAgc2VuZFNpdGVNZXRhZGF0YTogKCkgPT4gYFN0YXJNYXNrOiBGYWlsZWQgdG8gc2VuZCBzaXRlIG1ldGFkYXRhLiBUaGlzIGlzIGFuIGludGVybmFsIGVycm9yLCBwbGVhc2UgcmVwb3J0IHRoaXMgYnVnLmAsXG4gICAgICAgIHVuc3VwcG9ydGVkU3luYzogKG1ldGhvZCkgPT4gYFN0YXJNYXNrOiBUaGUgU3Rhck1hc2sgU3RhcmNvaW4gcHJvdmlkZXIgZG9lcyBub3Qgc3VwcG9ydCBzeW5jaHJvbm91cyBtZXRob2RzIGxpa2UgJHttZXRob2R9IHdpdGhvdXQgYSBjYWxsYmFjayBwYXJhbWV0ZXIuYCxcbiAgICAgICAgaW52YWxpZER1cGxleFN0cmVhbTogKCkgPT4gJ011c3QgcHJvdmlkZSBhIE5vZGUuanMtc3R5bGUgZHVwbGV4IHN0cmVhbS4nLFxuICAgICAgICBpbnZhbGlkUmVxdWVzdEFyZ3M6ICgpID0+IGBFeHBlY3RlZCBhIHNpbmdsZSwgbm9uLWFycmF5LCBvYmplY3QgYXJndW1lbnQuYCxcbiAgICAgICAgaW52YWxpZFJlcXVlc3RNZXRob2Q6ICgpID0+IGAnYXJncy5tZXRob2QnIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nLmAsXG4gICAgICAgIGludmFsaWRSZXF1ZXN0UGFyYW1zOiAoKSA9PiBgJ2FyZ3MucGFyYW1zJyBtdXN0IGJlIGFuIG9iamVjdCBvciBhcnJheSBpZiBwcm92aWRlZC5gLFxuICAgICAgICBpbnZhbGlkTG9nZ2VyT2JqZWN0OiAoKSA9PiBgJ2FyZ3MubG9nZ2VyJyBtdXN0IGJlIGFuIG9iamVjdCBpZiBwcm92aWRlZC5gLFxuICAgICAgICBpbnZhbGlkTG9nZ2VyTWV0aG9kOiAobWV0aG9kKSA9PiBgJ2FyZ3MubG9nZ2VyJyBtdXN0IGluY2x1ZGUgcmVxdWlyZWQgbWV0aG9kICcke21ldGhvZH0nLmAsXG4gICAgfSxcbiAgICBpbmZvOiB7XG4gICAgICAgIGNvbm5lY3RlZDogKGNoYWluSWQpID0+IGBTdGFyTWFzazogQ29ubmVjdGVkIHRvIGNoYWluIHdpdGggSUQgXCIke2NoYWluSWR9XCIuYCxcbiAgICB9LFxuICAgIHdhcm5pbmdzOiB7XG4gICAgICAgIC8vIGRlcHJlY2F0ZWQgbWV0aG9kc1xuICAgICAgICBlbmFibGVEZXByZWNhdGlvbjogYFN0YXJNYXNrOiAnc3RhcmNvaW4uZW5hYmxlKCknIGlzIGRlcHJlY2F0ZWQgYW5kIG1heSBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuIFBsZWFzZSB1c2UgdGhlICdzdGNfcmVxdWVzdEFjY291bnRzJyBSUEMgbWV0aG9kIGluc3RlYWQuXFxuRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZTogaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0xMTAyYCxcbiAgICAgICAgc2VuZERlcHJlY2F0aW9uOiBgU3Rhck1hc2s6ICdzdGFyY29pbi5zZW5kKC4uLiknIGlzIGRlcHJlY2F0ZWQgYW5kIG1heSBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuIFBsZWFzZSB1c2UgJ3N0YXJjb2luLnNlbmRBc3luYyguLi4pJyBvciAnc3RhcmNvaW4ucmVxdWVzdCguLi4pJyBpbnN0ZWFkLlxcbkZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWU6IGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTE5M2AsXG4gICAgICAgIC8vIGRlcHJlY2F0ZWQgZXZlbnRzXG4gICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgY2xvc2U6IGBTdGFyTWFzazogVGhlIGV2ZW50ICdjbG9zZScgaXMgZGVwcmVjYXRlZCBhbmQgbWF5IGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4gUGxlYXNlIHVzZSAnZGlzY29ubmVjdCcgaW5zdGVhZC5cXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlOiBodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTExOTMjZGlzY29ubmVjdGAsXG4gICAgICAgICAgICBkYXRhOiBgU3Rhck1hc2s6IFRoZSBldmVudCAnZGF0YScgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuIFVzZSAnbWVzc2FnZScgaW5zdGVhZC5cXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlOiBodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTExOTMjbWVzc2FnZWAsXG4gICAgICAgICAgICBuZXR3b3JrQ2hhbmdlZDogYFN0YXJNYXNrOiBUaGUgZXZlbnQgJ25ldHdvcmtDaGFuZ2VkJyBpcyBkZXByZWNhdGVkIGFuZCBtYXkgYmUgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLiBVc2UgJ2NoYWluQ2hhbmdlZCcgaW5zdGVhZC5cXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlOiBodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTExOTMjY2hhaW5jaGFuZ2VkYCxcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbjogYFN0YXJNYXNrOiBUaGUgZXZlbnQgJ25vdGlmaWNhdGlvbicgaXMgZGVwcmVjYXRlZCBhbmQgbWF5IGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4gVXNlICdtZXNzYWdlJyBpbnN0ZWFkLlxcbkZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWU6IGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTE5MyNtZXNzYWdlYCxcbiAgICAgICAgfSxcbiAgICAgICAgLy8gbWlzY1xuICAgICAgICBleHBlcmltZW50YWxNZXRob2RzOiBgU3Rhck1hc2s6ICdzdGFyY29pbi5fbWV0YW1hc2snIGV4cG9zZXMgbm9uLXN0YW5kYXJkLCBleHBlcmltZW50YWwgbWV0aG9kcy4gVGhleSBtYXkgYmUgcmVtb3ZlZCBvciBjaGFuZ2VkIHdpdGhvdXQgd2FybmluZy5gLFxuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gbWVzc2FnZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXNzYWdlcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbWVzc2FnZXNcIikpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuLyoqXG4gKiBTZW5kcyBzaXRlIG1ldGFkYXRhIG92ZXIgYW4gUlBDIHJlcXVlc3QuXG4gKlxuICogQHBhcmFtIGVuZ2luZSAtIFRoZSBKU09OIFJQQyBFbmdpbmUgdG8gc2VuZCBtZXRhZGF0YSBvdmVyLlxuICogQHBhcmFtIGxvZyAtIFRoZSBsb2dnaW5nIEFQSSB0byB1c2UuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHNlbmRTaXRlTWV0YWRhdGEoZW5naW5lLCBsb2cpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBkb21haW5NZXRhZGF0YSA9IGF3YWl0IGdldFNpdGVNZXRhZGF0YSgpO1xuICAgICAgICAvLyBjYWxsIGVuZ2luZS5oYW5kbGUgZGlyZWN0bHkgdG8gYXZvaWQgbm9ybWFsIFJQQyByZXF1ZXN0IGhhbmRsaW5nXG4gICAgICAgIGVuZ2luZS5oYW5kbGUoe1xuICAgICAgICAgICAganNvbnJwYzogJzIuMCcsXG4gICAgICAgICAgICBpZDogMSxcbiAgICAgICAgICAgIG1ldGhvZDogJ21ldGFtYXNrX3NlbmREb21haW5NZXRhZGF0YScsXG4gICAgICAgICAgICBwYXJhbXM6IGRvbWFpbk1ldGFkYXRhLFxuICAgICAgICB9LCB1dGlsc18xLk5PT1ApO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgbG9nLmVycm9yKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VzXzEuZGVmYXVsdC5lcnJvcnMuc2VuZFNpdGVNZXRhZGF0YSgpLFxuICAgICAgICAgICAgb3JpZ2luYWxFcnJvcjogZXJyb3IsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHNlbmRTaXRlTWV0YWRhdGE7XG4vKipcbiAqIEdldHMgc2l0ZSBtZXRhZGF0YSBhbmQgcmV0dXJucyBpdFxuICpcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0U2l0ZU1ldGFkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGdldFNpdGVOYW1lKHdpbmRvdyksXG4gICAgICAgIGljb246IGF3YWl0IGdldFNpdGVJY29uKHdpbmRvdyksXG4gICAgfTtcbn1cbi8qKlxuICogRXh0cmFjdHMgYSBuYW1lIGZvciB0aGUgc2l0ZSBmcm9tIHRoZSBET01cbiAqL1xuZnVuY3Rpb24gZ2V0U2l0ZU5hbWUod2luZG93T2JqZWN0KSB7XG4gICAgY29uc3QgeyBkb2N1bWVudCB9ID0gd2luZG93T2JqZWN0O1xuICAgIGNvbnN0IHNpdGVOYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZCA+IG1ldGFbcHJvcGVydHk9XCJvZzpzaXRlX25hbWVcIl0nKTtcbiAgICBpZiAoc2l0ZU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHNpdGVOYW1lLmNvbnRlbnQ7XG4gICAgfVxuICAgIGNvbnN0IG1ldGFUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQgPiBtZXRhW25hbWU9XCJ0aXRsZVwiXScpO1xuICAgIGlmIChtZXRhVGl0bGUpIHtcbiAgICAgICAgcmV0dXJuIG1ldGFUaXRsZS5jb250ZW50O1xuICAgIH1cbiAgICBpZiAoZG9jdW1lbnQudGl0bGUgJiYgZG9jdW1lbnQudGl0bGUubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQudGl0bGU7XG4gICAgfVxuICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWU7XG59XG4vKipcbiAqIEV4dHJhY3RzIGFuIGljb24gZm9yIHRoZSBzaXRlIGZyb20gdGhlIERPTVxuICogQHJldHVybnMgYW4gaWNvbiBVUkxcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0U2l0ZUljb24od2luZG93T2JqZWN0KSB7XG4gICAgY29uc3QgeyBkb2N1bWVudCB9ID0gd2luZG93T2JqZWN0O1xuICAgIGNvbnN0IGljb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaGVhZCA+IGxpbmtbcmVsfj1cImljb25cIl0nKTtcbiAgICBmb3IgKGNvbnN0IGljb24gb2YgaWNvbnMpIHtcbiAgICAgICAgaWYgKGljb24gJiYgKGF3YWl0IGltZ0V4aXN0cyhpY29uLmhyZWYpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGljb24uaHJlZjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBnaXZlbiBpbWFnZSBVUkwgZXhpc3RzXG4gKiBAcGFyYW0gdXJsIC0gdGhlIHVybCBvZiB0aGUgaW1hZ2VcbiAqIEByZXR1cm5zIFdoZXRoZXIgdGhlIGltYWdlIGV4aXN0cy5cbiAqL1xuZnVuY3Rpb24gaW1nRXhpc3RzKHVybCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgICAgICAgIGltZy5vbmxvYWQgPSAoKSA9PiByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgaW1nLm9uZXJyb3IgPSAoKSA9PiByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgICAgIGltZy5zcmMgPSB1cmw7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2l0ZU1ldGFkYXRhLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FTUlUVEVEX05PVElGSUNBVElPTlMgPSBleHBvcnRzLk5PT1AgPSBleHBvcnRzLmxvZ1N0cmVhbURpc2Nvbm5lY3RXYXJuaW5nID0gZXhwb3J0cy5nZXRScGNQcm9taXNlQ2FsbGJhY2sgPSBleHBvcnRzLmNyZWF0ZUVycm9yTWlkZGxld2FyZSA9IHZvaWQgMDtcbmNvbnN0IGV0aF9ycGNfZXJyb3JzXzEgPSByZXF1aXJlKFwiZXRoLXJwYy1lcnJvcnNcIik7XG4vLyB1dGlsaXR5IGZ1bmN0aW9uc1xuLyoqXG4gKiBqc29uLXJwYy1lbmdpbmUgbWlkZGxld2FyZSB0aGF0IGxvZ3MgUlBDIGVycm9ycyBhbmQgYW5kIHZhbGlkYXRlcyByZXEubWV0aG9kLlxuICpcbiAqIEBwYXJhbSBsb2cgLSBUaGUgbG9nZ2luZyBBUEkgdG8gdXNlLlxuICogQHJldHVybnMgIGpzb24tcnBjLWVuZ2luZSBtaWRkbGV3YXJlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUVycm9yTWlkZGxld2FyZShsb2cpIHtcbiAgICByZXR1cm4gKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICAgIC8vIGpzb24tcnBjLWVuZ2luZSB3aWxsIHRlcm1pbmF0ZSB0aGUgcmVxdWVzdCB3aGVuIGl0IG5vdGljZXMgdGhpcyBlcnJvclxuICAgICAgICBpZiAodHlwZW9mIHJlcS5tZXRob2QgIT09ICdzdHJpbmcnIHx8ICFyZXEubWV0aG9kKSB7XG4gICAgICAgICAgICByZXMuZXJyb3IgPSBldGhfcnBjX2Vycm9yc18xLmV0aEVycm9ycy5ycGMuaW52YWxpZFJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBUaGUgcmVxdWVzdCAnbWV0aG9kJyBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZy5gLFxuICAgICAgICAgICAgICAgIGRhdGE6IHJlcSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIG5leHQoKGRvbmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IHJlcztcbiAgICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9uZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nLmVycm9yKHJlcyk7XG4gICAgICAgICAgICBsb2cuZXJyb3IoYFN0YXJNYXNrIC0gUlBDIEVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCwgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbmV4cG9ydHMuY3JlYXRlRXJyb3JNaWRkbGV3YXJlID0gY3JlYXRlRXJyb3JNaWRkbGV3YXJlO1xuLy8gcmVzb2x2ZSByZXNwb25zZS5yZXN1bHQgb3IgcmVzcG9uc2UsIHJlamVjdCBlcnJvcnNcbmNvbnN0IGdldFJwY1Byb21pc2VDYWxsYmFjayA9IChyZXNvbHZlLCByZWplY3QsIHVud3JhcFJlc3VsdCA9IHRydWUpID0+IChlcnJvciwgcmVzcG9uc2UpID0+IHtcbiAgICBpZiAoZXJyb3IgfHwgcmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yIHx8IHJlc3BvbnNlLmVycm9yKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgICF1bndyYXBSZXN1bHQgfHwgQXJyYXkuaXNBcnJheShyZXNwb25zZSlcbiAgICAgICAgICAgID8gcmVzb2x2ZShyZXNwb25zZSlcbiAgICAgICAgICAgIDogcmVzb2x2ZShyZXNwb25zZS5yZXN1bHQpO1xuICAgIH1cbn07XG5leHBvcnRzLmdldFJwY1Byb21pc2VDYWxsYmFjayA9IGdldFJwY1Byb21pc2VDYWxsYmFjaztcbi8qKlxuICogTG9ncyBhIHN0cmVhbSBkaXNjb25uZWN0aW9uIGVycm9yLiBFbWl0cyBhbiAnZXJyb3InIGlmIGdpdmVuIGFuXG4gKiBFdmVudEVtaXR0ZXIgdGhhdCBoYXMgbGlzdGVuZXJzIGZvciB0aGUgJ2Vycm9yJyBldmVudC5cbiAqXG4gKiBAcGFyYW0gbG9nIC0gVGhlIGxvZ2dpbmcgQVBJIHRvIHVzZS5cbiAqIEBwYXJhbSByZW1vdGVMYWJlbCAtIFRoZSBsYWJlbCBvZiB0aGUgZGlzY29ubmVjdGVkIHN0cmVhbS5cbiAqIEBwYXJhbSBlcnJvciAtIFRoZSBhc3NvY2lhdGVkIGVycm9yIHRvIGxvZy5cbiAqIEBwYXJhbSBlbWl0dGVyIC0gVGhlIGxvZ2dpbmcgQVBJIHRvIHVzZS5cbiAqL1xuZnVuY3Rpb24gbG9nU3RyZWFtRGlzY29ubmVjdFdhcm5pbmcobG9nLCByZW1vdGVMYWJlbCwgZXJyb3IsIGVtaXR0ZXIpIHtcbiAgICBsZXQgd2FybmluZ01zZyA9IGBTdGFyTWFzazogTG9zdCBjb25uZWN0aW9uIHRvIFwiJHtyZW1vdGVMYWJlbH1cIi5gO1xuICAgIGlmIChlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3Iuc3RhY2spIHtcbiAgICAgICAgd2FybmluZ01zZyArPSBgXFxuJHtlcnJvci5zdGFja31gO1xuICAgIH1cbiAgICBsb2cud2Fybih3YXJuaW5nTXNnKTtcbiAgICBpZiAoZW1pdHRlciAmJiBlbWl0dGVyLmxpc3RlbmVyQ291bnQoJ2Vycm9yJykgPiAwKSB7XG4gICAgICAgIGVtaXR0ZXIuZW1pdCgnZXJyb3InLCB3YXJuaW5nTXNnKTtcbiAgICB9XG59XG5leHBvcnRzLmxvZ1N0cmVhbURpc2Nvbm5lY3RXYXJuaW5nID0gbG9nU3RyZWFtRGlzY29ubmVjdFdhcm5pbmc7XG5jb25zdCBOT09QID0gKCkgPT4gdW5kZWZpbmVkO1xuZXhwb3J0cy5OT09QID0gTk9PUDtcbi8vIGNvbnN0YW50c1xuZXhwb3J0cy5FTUlUVEVEX05PVElGSUNBVElPTlMgPSBbXG4gICAgJ3N0Y19zdWJzY3JpcHRpb24nLCAvLyBwZXIgZXRoLWpzb24tcnBjLWZpbHRlcnMvc3Vic2NyaXB0aW9uTWFuYWdlclxuXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwic3RyZWFtXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBQb3J0RHVwbGV4U3RyZWFtIGV4dGVuZHMgc3RyZWFtXzEuRHVwbGV4IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gcG9ydCAtIEFuIGluc3RhbmNlIG9mIFdlYkV4dGVuc2lvbnMgUnVudGltZS5Qb3J0LiBTZWU6XG4gICAgICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvTW96aWxsYS9BZGQtb25zL1dlYkV4dGVuc2lvbnMvQVBJL3J1bnRpbWUvUG9ydH1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwb3J0KSB7XG4gICAgICAgIHN1cGVyKHsgb2JqZWN0TW9kZTogdHJ1ZSB9KTtcbiAgICAgICAgdGhpcy5fcG9ydCA9IHBvcnQ7XG4gICAgICAgIHRoaXMuX3BvcnQub25NZXNzYWdlLmFkZExpc3RlbmVyKChtc2cpID0+IHRoaXMuX29uTWVzc2FnZShtc2cpKTtcbiAgICAgICAgdGhpcy5fcG9ydC5vbkRpc2Nvbm5lY3QuYWRkTGlzdGVuZXIoKCkgPT4gdGhpcy5fb25EaXNjb25uZWN0KCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayB0cmlnZ2VyZWQgd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWQgZnJvbVxuICAgICAqIHRoZSByZW1vdGUgUG9ydCBhc3NvY2lhdGVkIHdpdGggdGhpcyBTdHJlYW0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbXNnIC0gUGF5bG9hZCBmcm9tIHRoZSBvbk1lc3NhZ2UgbGlzdGVuZXIgb2YgdGhlIHBvcnRcbiAgICAgKi9cbiAgICBfb25NZXNzYWdlKG1zZykge1xuICAgICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKG1zZykpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBCdWZmZXIuZnJvbShtc2cpO1xuICAgICAgICAgICAgdGhpcy5wdXNoKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wdXNoKG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgdHJpZ2dlcmVkIHdoZW4gdGhlIHJlbW90ZSBQb3J0IGFzc29jaWF0ZWQgd2l0aCB0aGlzIFN0cmVhbVxuICAgICAqIGRpc2Nvbm5lY3RzLlxuICAgICAqL1xuICAgIF9vbkRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeHBsaWNpdGx5IHNldHMgcmVhZCBvcGVyYXRpb25zIHRvIGEgbm8tb3AuXG4gICAgICovXG4gICAgX3JlYWQoKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCBpbnRlcm5hbGx5IHdoZW4gZGF0YSBzaG91bGQgYmUgd3JpdHRlbiB0byB0aGlzIHdyaXRhYmxlIHN0cmVhbS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtc2cgLSBBcmJpdHJhcnkgb2JqZWN0IHRvIHdyaXRlXG4gICAgICogQHBhcmFtIGVuY29kaW5nIC0gRW5jb2RpbmcgdG8gdXNlIHdoZW4gd3JpdGluZyBwYXlsb2FkXG4gICAgICogQHBhcmFtIGNiIC0gQ2FsbGVkIHdoZW4gd3JpdGluZyBpcyBjb21wbGV0ZSBvciBhbiBlcnJvciBvY2N1cnNcbiAgICAgKi9cbiAgICBfd3JpdGUobXNnLCBfZW5jb2RpbmcsIGNiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKG1zZykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gbXNnLnRvSlNPTigpO1xuICAgICAgICAgICAgICAgIGRhdGEuX2lzQnVmZmVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3J0LnBvc3RNZXNzYWdlKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcG9ydC5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcignUG9ydER1cGxleFN0cmVhbSAtIGRpc2Nvbm5lY3RlZCcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2IoKTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG52YXIga2V5TGlzdCA9IE9iamVjdC5rZXlzO1xudmFyIGhhc1Byb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhICYmIGIgJiYgdHlwZW9mIGEgPT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgPT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYXJyQSA9IGlzQXJyYXkoYSlcbiAgICAgICwgYXJyQiA9IGlzQXJyYXkoYilcbiAgICAgICwgaVxuICAgICAgLCBsZW5ndGhcbiAgICAgICwga2V5O1xuXG4gICAgaWYgKGFyckEgJiYgYXJyQikge1xuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICAgIGlmICghZXF1YWwoYVtpXSwgYltpXSkpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChhcnJBICE9IGFyckIpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBkYXRlQSA9IGEgaW5zdGFuY2VvZiBEYXRlXG4gICAgICAsIGRhdGVCID0gYiBpbnN0YW5jZW9mIERhdGU7XG4gICAgaWYgKGRhdGVBICE9IGRhdGVCKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGRhdGVBICYmIGRhdGVCKSByZXR1cm4gYS5nZXRUaW1lKCkgPT0gYi5nZXRUaW1lKCk7XG5cbiAgICB2YXIgcmVnZXhwQSA9IGEgaW5zdGFuY2VvZiBSZWdFeHBcbiAgICAgICwgcmVnZXhwQiA9IGIgaW5zdGFuY2VvZiBSZWdFeHA7XG4gICAgaWYgKHJlZ2V4cEEgIT0gcmVnZXhwQikgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChyZWdleHBBICYmIHJlZ2V4cEIpIHJldHVybiBhLnRvU3RyaW5nKCkgPT0gYi50b1N0cmluZygpO1xuXG4gICAgdmFyIGtleXMgPSBrZXlMaXN0KGEpO1xuICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuXG4gICAgaWYgKGxlbmd0aCAhPT0ga2V5TGlzdChiKS5sZW5ndGgpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICBpZiAoIWhhc1Byb3AuY2FsbChiLCBrZXlzW2ldKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYgKCFlcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBhIT09YSAmJiBiIT09Yjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGlzU3RyZWFtID0gc3RyZWFtID0+XG5cdHN0cmVhbSAhPT0gbnVsbCAmJlxuXHR0eXBlb2Ygc3RyZWFtID09PSAnb2JqZWN0JyAmJlxuXHR0eXBlb2Ygc3RyZWFtLnBpcGUgPT09ICdmdW5jdGlvbic7XG5cbmlzU3RyZWFtLndyaXRhYmxlID0gc3RyZWFtID0+XG5cdGlzU3RyZWFtKHN0cmVhbSkgJiZcblx0c3RyZWFtLndyaXRhYmxlICE9PSBmYWxzZSAmJlxuXHR0eXBlb2Ygc3RyZWFtLl93cml0ZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHR0eXBlb2Ygc3RyZWFtLl93cml0YWJsZVN0YXRlID09PSAnb2JqZWN0JztcblxuaXNTdHJlYW0ucmVhZGFibGUgPSBzdHJlYW0gPT5cblx0aXNTdHJlYW0oc3RyZWFtKSAmJlxuXHRzdHJlYW0ucmVhZGFibGUgIT09IGZhbHNlICYmXG5cdHR5cGVvZiBzdHJlYW0uX3JlYWQgPT09ICdmdW5jdGlvbicgJiZcblx0dHlwZW9mIHN0cmVhbS5fcmVhZGFibGVTdGF0ZSA9PT0gJ29iamVjdCc7XG5cbmlzU3RyZWFtLmR1cGxleCA9IHN0cmVhbSA9PlxuXHRpc1N0cmVhbS53cml0YWJsZShzdHJlYW0pICYmXG5cdGlzU3RyZWFtLnJlYWRhYmxlKHN0cmVhbSk7XG5cbmlzU3RyZWFtLnRyYW5zZm9ybSA9IHN0cmVhbSA9PlxuXHRpc1N0cmVhbS5kdXBsZXgoc3RyZWFtKSAmJlxuXHR0eXBlb2Ygc3RyZWFtLl90cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicgJiZcblx0dHlwZW9mIHN0cmVhbS5fdHJhbnNmb3JtU3RhdGUgPT09ICdvYmplY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3RyZWFtO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCByZWFkYWJsZV9zdHJlYW1fMSA9IHJlcXVpcmUoXCJyZWFkYWJsZS1zdHJlYW1cIik7XG4vKipcbiAqIFRha2VzIGEgSnNvblJwY0VuZ2luZSBhbmQgcmV0dXJucyBhIER1cGxleCBzdHJlYW0gd3JhcHBpbmcgaXQuXG4gKlxuICogQHBhcmFtIG9wdHMgLSBPcHRpb25zIGJhZy5cbiAqIEBwYXJhbSBvcHRzLmVuZ2luZSAtIFRoZSBKc29uUnBjRW5naW5lIHRvIHdyYXAgaW4gYSBzdHJlYW0uXG4gKiBAcmV0dXJucyBUaGUgc3RyZWFtIHdyYXBwaW5nIHRoZSBlbmdpbmUuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUVuZ2luZVN0cmVhbShvcHRzKSB7XG4gICAgaWYgKCFvcHRzIHx8ICFvcHRzLmVuZ2luZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgZW5naW5lIHBhcmFtZXRlciEnKTtcbiAgICB9XG4gICAgY29uc3QgeyBlbmdpbmUgfSA9IG9wdHM7XG4gICAgY29uc3Qgc3RyZWFtID0gbmV3IHJlYWRhYmxlX3N0cmVhbV8xLkR1cGxleCh7IG9iamVjdE1vZGU6IHRydWUsIHJlYWQsIHdyaXRlIH0pO1xuICAgIC8vIGZvcndhcmQgbm90aWZpY2F0aW9uc1xuICAgIGlmIChlbmdpbmUub24pIHtcbiAgICAgICAgZW5naW5lLm9uKCdub3RpZmljYXRpb24nLCAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgc3RyZWFtLnB1c2gobWVzc2FnZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gc3RyZWFtO1xuICAgIGZ1bmN0aW9uIHJlYWQoKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdyaXRlKHJlcSwgX2VuY29kaW5nLCBjYikge1xuICAgICAgICBlbmdpbmUuaGFuZGxlKHJlcSwgKF9lcnIsIHJlcykgPT4ge1xuICAgICAgICAgICAgc3RyZWFtLnB1c2gocmVzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNiKCk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlRW5naW5lU3RyZWFtO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlRW5naW5lU3RyZWFtLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc2FmZV9ldmVudF9lbWl0dGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIkBtZXRhbWFzay9zYWZlLWV2ZW50LWVtaXR0ZXJcIikpO1xuY29uc3QgcmVhZGFibGVfc3RyZWFtXzEgPSByZXF1aXJlKFwicmVhZGFibGUtc3RyZWFtXCIpO1xuLyoqXG4gKiBDcmVhdGVzIGEgSnNvblJwY0VuZ2luZSBtaWRkbGV3YXJlIHdpdGggYW4gYXNzb2NpYXRlZCBEdXBsZXggc3RyZWFtIGFuZFxuICogRXZlbnRFbWl0dGVyLiBUaGUgbWlkZGxld2FyZSwgYW5kIGJ5IGV4dGVuc2lvbiBzdHJlYW0sIGFzc3VtZSB0aGF0IG1pZGRsZXdhcmVcbiAqIHBhcmFtZXRlcnMgYXJlIHByb3Blcmx5IGZvcm1hdHRlZC4gTm8gcnVudGltZSB0eXBlIGNoZWNraW5nIG9yIHZhbGlkYXRpb24gaXNcbiAqIHBlcmZvcm1lZC5cbiAqXG4gKiBAcmV0dXJucyBUaGUgZXZlbnQgZW1pdHRlciwgbWlkZGxld2FyZSwgYW5kIHN0cmVhbS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlU3RyZWFtTWlkZGxld2FyZSgpIHtcbiAgICBjb25zdCBpZE1hcCA9IHt9O1xuICAgIGNvbnN0IHN0cmVhbSA9IG5ldyByZWFkYWJsZV9zdHJlYW1fMS5EdXBsZXgoe1xuICAgICAgICBvYmplY3RNb2RlOiB0cnVlLFxuICAgICAgICByZWFkOiByZWFkTm9vcCxcbiAgICAgICAgd3JpdGU6IHByb2Nlc3NNZXNzYWdlLFxuICAgIH0pO1xuICAgIGNvbnN0IGV2ZW50cyA9IG5ldyBzYWZlX2V2ZW50X2VtaXR0ZXJfMS5kZWZhdWx0KCk7XG4gICAgY29uc3QgbWlkZGxld2FyZSA9IChyZXEsIHJlcywgbmV4dCwgZW5kKSA9PiB7XG4gICAgICAgIC8vIHdyaXRlIHJlcSB0byBzdHJlYW1cbiAgICAgICAgc3RyZWFtLnB1c2gocmVxKTtcbiAgICAgICAgLy8gcmVnaXN0ZXIgcmVxdWVzdCBvbiBpZCBtYXBcbiAgICAgICAgaWRNYXBbcmVxLmlkXSA9IHsgcmVxLCByZXMsIG5leHQsIGVuZCB9O1xuICAgIH07XG4gICAgcmV0dXJuIHsgZXZlbnRzLCBtaWRkbGV3YXJlLCBzdHJlYW0gfTtcbiAgICBmdW5jdGlvbiByZWFkTm9vcCgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9jZXNzTWVzc2FnZShyZXMsIF9lbmNvZGluZywgY2IpIHtcbiAgICAgICAgbGV0IGVycjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGlzTm90aWZpY2F0aW9uID0gIXJlcy5pZDtcbiAgICAgICAgICAgIGlmIChpc05vdGlmaWNhdGlvbikge1xuICAgICAgICAgICAgICAgIHByb2Nlc3NOb3RpZmljYXRpb24ocmVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHByb2Nlc3NSZXNwb25zZShyZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfZXJyKSB7XG4gICAgICAgICAgICBlcnIgPSBfZXJyO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvbnRpbnVlIHByb2Nlc3Npbmcgc3RyZWFtXG4gICAgICAgIGNiKGVycik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZXNwb25zZShyZXMpIHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGlkTWFwW3Jlcy5pZF07XG4gICAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdHJlYW1NaWRkbGV3YXJlIC0gVW5rbm93biByZXNwb25zZSBpZCBcIiR7cmVzLmlkfVwiYCk7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIGlkTWFwW3Jlcy5pZF07XG4gICAgICAgIC8vIGNvcHkgd2hvbGUgcmVzIG9udG8gb3JpZ2luYWwgcmVzXG4gICAgICAgIE9iamVjdC5hc3NpZ24oY29udGV4dC5yZXMsIHJlcyk7XG4gICAgICAgIC8vIHJ1biBjYWxsYmFjayBvbiBlbXB0eSBzdGFjayxcbiAgICAgICAgLy8gcHJldmVudCBpbnRlcm5hbCBzdHJlYW0taGFuZGxlciBmcm9tIGNhdGNoaW5nIGVycm9yc1xuICAgICAgICBzZXRUaW1lb3V0KGNvbnRleHQuZW5kKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJvY2Vzc05vdGlmaWNhdGlvbihyZXMpIHtcbiAgICAgICAgZXZlbnRzLmVtaXQoJ25vdGlmaWNhdGlvbicsIHJlcyk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlU3RyZWFtTWlkZGxld2FyZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZVN0cmVhbU1pZGRsZXdhcmUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZVN0cmVhbU1pZGRsZXdhcmUgPSBleHBvcnRzLmNyZWF0ZUVuZ2luZVN0cmVhbSA9IHZvaWQgMDtcbmNvbnN0IGNyZWF0ZUVuZ2luZVN0cmVhbV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZUVuZ2luZVN0cmVhbVwiKSk7XG5leHBvcnRzLmNyZWF0ZUVuZ2luZVN0cmVhbSA9IGNyZWF0ZUVuZ2luZVN0cmVhbV8xLmRlZmF1bHQ7XG5jb25zdCBjcmVhdGVTdHJlYW1NaWRkbGV3YXJlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlU3RyZWFtTWlkZGxld2FyZVwiKSk7XG5leHBvcnRzLmNyZWF0ZVN0cmVhbU1pZGRsZXdhcmUgPSBjcmVhdGVTdHJlYW1NaWRkbGV3YXJlXzEuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbnZhciBLX01BWF9MRU5HVEggPSAweDdmZmZmZmZmXG5leHBvcnRzLmtNYXhMZW5ndGggPSBLX01BWF9MRU5HVEhcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgUHJpbnQgd2FybmluZyBhbmQgcmVjb21tZW5kIHVzaW5nIGBidWZmZXJgIHY0Lnggd2hpY2ggaGFzIGFuIE9iamVjdFxuICogICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogV2UgcmVwb3J0IHRoYXQgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0eXBlZCBhcnJheXMgaWYgdGhlIGFyZSBub3Qgc3ViY2xhc3NhYmxlXG4gKiB1c2luZyBfX3Byb3RvX18uIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgXG4gKiAoU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzgpLiBJRSAxMCBsYWNrcyBzdXBwb3J0XG4gKiBmb3IgX19wcm90b19fIGFuZCBoYXMgYSBidWdneSB0eXBlZCBhcnJheSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbmlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgY29uc29sZS5lcnJvcihcbiAgICAnVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5ICcgK1xuICAgICdgYnVmZmVyYCB2NS54LiBVc2UgYGJ1ZmZlcmAgdjQueCBpZiB5b3UgcmVxdWlyZSBvbGQgYnJvd3NlciBzdXBwb3J0LidcbiAgKVxufVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIC8vIENhbiB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZD9cbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0geyBfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH0gfVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ3BhcmVudCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5idWZmZXJcbiAgfVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdvZmZzZXQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuYnl0ZU9mZnNldFxuICB9XG59KVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAobGVuZ3RoID4gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBsZW5ndGggKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJylcbiAgfVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICB2YXIgYnVmID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICBidWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYnVmXG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUoYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICE9IG51bGwgJiZcbiAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICB2YWx1ZTogbnVsbCxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG5mdW5jdGlvbiBmcm9tICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHZhbHVlKVxuICB9XG5cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gICAgKVxuICB9XG5cbiAgaWYgKGlzSW5zdGFuY2UodmFsdWUsIEFycmF5QnVmZmVyKSB8fFxuICAgICAgKHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBBcnJheUJ1ZmZlcikpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJ1xuICAgIClcbiAgfVxuXG4gIHZhciB2YWx1ZU9mID0gdmFsdWUudmFsdWVPZiAmJiB2YWx1ZS52YWx1ZU9mKClcbiAgaWYgKHZhbHVlT2YgIT0gbnVsbCAmJiB2YWx1ZU9mICE9PSB2YWx1ZSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZU9mLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICB2YXIgYiA9IGZyb21PYmplY3QodmFsdWUpXG4gIGlmIChiKSByZXR1cm4gYlxuXG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9QcmltaXRpdmUgIT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oXG4gICAgICB2YWx1ZVtTeW1ib2wudG9QcmltaXRpdmVdKCdzdHJpbmcnKSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoXG4gICAgKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgJ29yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHZhbHVlKVxuICApXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gTm90ZTogQ2hhbmdlIHByb3RvdHlwZSAqYWZ0ZXIqIEJ1ZmZlci5mcm9tIGlzIGRlZmluZWQgdG8gd29ya2Fyb3VuZCBDaHJvbWUgYnVnOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC8xNDhcbkJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbkJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBzaXplICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAoc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IGJ1Zi53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgYnVmID0gYnVmLnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIGJ1ZltpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wib2Zmc2V0XCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJsZW5ndGhcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgdmFyIGJ1ZlxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgYnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0IChvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW4pXG5cbiAgICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGJ1ZlxuICAgIH1cblxuICAgIG9iai5jb3B5KGJ1ZiwgMCwgMCwgbGVuKVxuICAgIHJldHVybiBidWZcbiAgfVxuXG4gIGlmIChvYmoubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IG51bWJlcklzTmFOKG9iai5sZW5ndGgpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKDApXG4gICAgfVxuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iailcbiAgfVxuXG4gIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgQXJyYXkuaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmouZGF0YSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwgS19NQVhfTEVOR1RIYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBLX01BWF9MRU5HVEgudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiBiICE9IG51bGwgJiYgYi5faXNCdWZmZXIgPT09IHRydWUgJiZcbiAgICBiICE9PSBCdWZmZXIucHJvdG90eXBlIC8vIHNvIEJ1ZmZlci5pc0J1ZmZlcihCdWZmZXIucHJvdG90eXBlKSB3aWxsIGJlIGZhbHNlXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoaXNJbnN0YW5jZShhLCBVaW50OEFycmF5KSkgYSA9IEJ1ZmZlci5mcm9tKGEsIGEub2Zmc2V0LCBhLmJ5dGVMZW5ndGgpXG4gIGlmIChpc0luc3RhbmNlKGIsIFVpbnQ4QXJyYXkpKSBiID0gQnVmZmVyLmZyb20oYiwgYi5vZmZzZXQsIGIuYnl0ZUxlbmd0aClcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwiYnVmMVwiLCBcImJ1ZjJcIiBhcmd1bWVudHMgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheSdcbiAgICApXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoaXNJbnN0YW5jZShidWYsIFVpbnQ4QXJyYXkpKSB7XG4gICAgICBidWYgPSBCdWZmZXIuZnJvbShidWYpXG4gICAgfVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IGlzSW5zdGFuY2Uoc3RyaW5nLCBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIG9yIEFycmF5QnVmZmVyLiAnICtcbiAgICAgICdSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2Ygc3RyaW5nXG4gICAgKVxuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIG11c3RNYXRjaCA9IChhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gPT09IHRydWUpXG4gIGlmICghbXVzdE1hdGNoICYmIGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkge1xuICAgICAgICAgIHJldHVybiBtdXN0TWF0Y2ggPyAtMSA6IHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIH1cbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGlzIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgKGFuZCB0aGUgYGlzLWJ1ZmZlcmAgbnBtIHBhY2thZ2UpXG4vLyB0byBkZXRlY3QgYSBCdWZmZXIgaW5zdGFuY2UuIEl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBgaW5zdGFuY2VvZiBCdWZmZXJgXG4vLyByZWxpYWJseSBpbiBhIGJyb3dzZXJpZnkgY29udGV4dCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG11bHRpcGxlIGRpZmZlcmVudFxuLy8gY29waWVzIG9mIHRoZSAnYnVmZmVyJyBwYWNrYWdlIGluIHVzZS4gVGhpcyBtZXRob2Qgd29ya3MgZXZlbiBmb3IgQnVmZmVyXG4vLyBpbnN0YW5jZXMgdGhhdCB3ZXJlIGNyZWF0ZWQgZnJvbSBhbm90aGVyIGNvcHkgb2YgdGhlIGBidWZmZXJgIHBhY2thZ2UuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNTRcbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcgPSBCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nXG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkucmVwbGFjZSgvKC57Mn0pL2csICckMSAnKS50cmltKClcbiAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoaXNJbnN0YW5jZSh0YXJnZXQsIFVpbnQ4QXJyYXkpKSB7XG4gICAgdGFyZ2V0ID0gQnVmZmVyLmZyb20odGFyZ2V0LCB0YXJnZXQub2Zmc2V0LCB0YXJnZXQuYnl0ZUxlbmd0aClcbiAgfVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJ0YXJnZXRcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5LiAnICtcbiAgICAgICdSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHRhcmdldClcbiAgICApXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0IC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChudW1iZXJJc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChudW1iZXJJc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA+Pj4gMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIChieXRlc1tpICsgMV0gKiAyNTYpKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXInKVxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFVzZSBidWlsdC1pbiB3aGVuIGF2YWlsYWJsZSwgbWlzc2luZyBmcm9tIElFMTFcbiAgICB0aGlzLmNvcHlXaXRoaW4odGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpXG4gIH0gZWxzZSBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKHZhciBpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyAmJiBjb2RlIDwgMTI4KSB8fFxuICAgICAgICAgIGVuY29kaW5nID09PSAnbGF0aW4xJykge1xuICAgICAgICAvLyBGYXN0IHBhdGg6IElmIGB2YWxgIGZpdHMgaW50byBhIHNpbmdsZSBieXRlLCB1c2UgdGhhdCBudW1lcmljIHZhbHVlLlxuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHZhbHVlIFwiJyArIHZhbCArXG4gICAgICAgICdcIiBpcyBpbnZhbGlkIGZvciBhcmd1bWVudCBcInZhbHVlXCInKVxuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXisvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHRha2VzIGVxdWFsIHNpZ25zIGFzIGVuZCBvZiB0aGUgQmFzZTY0IGVuY29kaW5nXG4gIHN0ciA9IHN0ci5zcGxpdCgnPScpWzBdXG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuLy8gQXJyYXlCdWZmZXIgb3IgVWludDhBcnJheSBvYmplY3RzIGZyb20gb3RoZXIgY29udGV4dHMgKGkuZS4gaWZyYW1lcykgZG8gbm90IHBhc3Ncbi8vIHRoZSBgaW5zdGFuY2VvZmAgY2hlY2sgYnV0IHRoZXkgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgb2YgdGhhdCB0eXBlLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTY2XG5mdW5jdGlvbiBpc0luc3RhbmNlIChvYmosIHR5cGUpIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIHR5cGUgfHxcbiAgICAob2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgIT0gbnVsbCAmJlxuICAgICAgb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09IHR5cGUubmFtZSlcbn1cbmZ1bmN0aW9uIG51bWJlcklzTmFOIChvYmopIHtcbiAgLy8gRm9yIElFMTEgc3VwcG9ydFxuICByZXR1cm4gb2JqICE9PSBvYmogLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSB8fCBvYmplY3RDcmVhdGVQb2x5ZmlsbFxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBvYmplY3RLZXlzUG9seWZpbGxcbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgZnVuY3Rpb25CaW5kUG9seWZpbGxcblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsICdfZXZlbnRzJykpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBvYmplY3RDcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxudmFyIGhhc0RlZmluZVByb3BlcnR5O1xudHJ5IHtcbiAgdmFyIG8gPSB7fTtcbiAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sICd4JywgeyB2YWx1ZTogMCB9KTtcbiAgaGFzRGVmaW5lUHJvcGVydHkgPSBvLnggPT09IDA7XG59IGNhdGNoIChlcnIpIHsgaGFzRGVmaW5lUHJvcGVydHkgPSBmYWxzZSB9XG5pZiAoaGFzRGVmaW5lUHJvcGVydHkpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKGFyZykge1xuICAgICAgLy8gY2hlY2sgd2hldGhlciB0aGUgaW5wdXQgaXMgYSBwb3NpdGl2ZSBudW1iZXIgKHdob3NlIHZhbHVlIGlzIHplcm8gb3JcbiAgICAgIC8vIGdyZWF0ZXIgYW5kIG5vdCBhIE5hTikuXG4gICAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBhcmcgIT09IGFyZylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICAgICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSBkZWZhdWx0TWF4TGlzdGVuZXJzO1xufVxuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IGlzTmFOKG4pKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiblwiIGFyZ3VtZW50IG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiAkZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiAkZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuLy8gVGhlc2Ugc3RhbmRhbG9uZSBlbWl0KiBmdW5jdGlvbnMgYXJlIHVzZWQgdG8gb3B0aW1pemUgY2FsbGluZyBvZiBldmVudFxuLy8gaGFuZGxlcnMgZm9yIGZhc3QgY2FzZXMgYmVjYXVzZSBlbWl0KCkgaXRzZWxmIG9mdGVuIGhhcyBhIHZhcmlhYmxlIG51bWJlciBvZlxuLy8gYXJndW1lbnRzIGFuZCBjYW4gYmUgZGVvcHRpbWl6ZWQgYmVjYXVzZSBvZiB0aGF0LiBUaGVzZSBmdW5jdGlvbnMgYWx3YXlzIGhhdmVcbi8vIHRoZSBzYW1lIG51bWJlciBvZiBhcmd1bWVudHMgYW5kIHRodXMgZG8gbm90IGdldCBkZW9wdGltaXplZCwgc28gdGhlIGNvZGVcbi8vIGluc2lkZSB0aGVtIGNhbiBleGVjdXRlIGZhc3Rlci5cbmZ1bmN0aW9uIGVtaXROb25lKGhhbmRsZXIsIGlzRm4sIHNlbGYpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5jYWxsKHNlbGYpO1xuICBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZik7XG4gIH1cbn1cbmZ1bmN0aW9uIGVtaXRPbmUoaGFuZGxlciwgaXNGbiwgc2VsZiwgYXJnMSkge1xuICBpZiAoaXNGbilcbiAgICBoYW5kbGVyLmNhbGwoc2VsZiwgYXJnMSk7XG4gIGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBsaXN0ZW5lcnNbaV0uY2FsbChzZWxmLCBhcmcxKTtcbiAgfVxufVxuZnVuY3Rpb24gZW1pdFR3byhoYW5kbGVyLCBpc0ZuLCBzZWxmLCBhcmcxLCBhcmcyKSB7XG4gIGlmIChpc0ZuKVxuICAgIGhhbmRsZXIuY2FsbChzZWxmLCBhcmcxLCBhcmcyKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHNlbGYsIGFyZzEsIGFyZzIpO1xuICB9XG59XG5mdW5jdGlvbiBlbWl0VGhyZWUoaGFuZGxlciwgaXNGbiwgc2VsZiwgYXJnMSwgYXJnMiwgYXJnMykge1xuICBpZiAoaXNGbilcbiAgICBoYW5kbGVyLmNhbGwoc2VsZiwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gIGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBsaXN0ZW5lcnNbaV0uY2FsbChzZWxmLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0TWFueShoYW5kbGVyLCBpc0ZuLCBzZWxmLCBhcmdzKSB7XG4gIGlmIChpc0ZuKVxuICAgIGhhbmRsZXIuYXBwbHkoc2VsZiwgYXJncyk7XG4gIGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkoc2VsZiwgYXJncyk7XG4gIH1cbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBlciwgaGFuZGxlciwgbGVuLCBhcmdzLCBpLCBldmVudHM7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cylcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09IG51bGwpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSlcbiAgICAgIGVyID0gYXJndW1lbnRzWzFdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIFwiZXJyb3JcIiBldmVudC4gKCcgKyBlciArICcpJyk7XG4gICAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBoYW5kbGVyID0gZXZlbnRzW3R5cGVdO1xuXG4gIGlmICghaGFuZGxlcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGlzRm4gPSB0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJztcbiAgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgc3dpdGNoIChsZW4pIHtcbiAgICAgIC8vIGZhc3QgY2FzZXNcbiAgICBjYXNlIDE6XG4gICAgICBlbWl0Tm9uZShoYW5kbGVyLCBpc0ZuLCB0aGlzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIGVtaXRPbmUoaGFuZGxlciwgaXNGbiwgdGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIGVtaXRUd28oaGFuZGxlciwgaXNGbiwgdGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgZW1pdFRocmVlKGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM10pO1xuICAgICAgYnJlYWs7XG4gICAgICAvLyBzbG93ZXJcbiAgICBkZWZhdWx0OlxuICAgICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICAgIGZvciAoaSA9IDE7IGkgPCBsZW47IGkrKylcbiAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICBlbWl0TWFueShoYW5kbGVyLCBpc0ZuLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKCFldmVudHMpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IG9iamVjdENyZWF0ZShudWxsKTtcbiAgICB0YXJnZXQuX2V2ZW50c0NvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgICBpZiAoZXZlbnRzLm5ld0xpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmICghZXhpc3RpbmcpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgICBwcmVwZW5kID8gW2xpc3RlbmVyLCBleGlzdGluZ10gOiBbZXhpc3RpbmcsIGxpc3RlbmVyXTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgICAgaWYgKHByZXBlbmQpIHtcbiAgICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleGlzdGluZy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICAgIGlmICghZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBtID0gJGdldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgICAgaWYgKG0gJiYgbSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSkge1xuICAgICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgXCInICsgU3RyaW5nKHR5cGUpICsgJ1wiIGxpc3RlbmVycyAnICtcbiAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQuJyk7XG4gICAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICAgIHcudHlwZSA9IHR5cGU7XG4gICAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZSA9PT0gJ29iamVjdCcgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCclczogJXMnLCB3Lm5hbWUsIHcubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCk7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQsIGFyZ3VtZW50c1swXSk7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQsIGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdKTtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCwgYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0sXG4gICAgICAgICAgICBhcmd1bWVudHNbMl0pO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7ICsraSlcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmdzKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX29uY2VXcmFwKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIHN0YXRlID0geyBmaXJlZDogZmFsc2UsIHdyYXBGbjogdW5kZWZpbmVkLCB0YXJnZXQ6IHRhcmdldCwgdHlwZTogdHlwZSwgbGlzdGVuZXI6IGxpc3RlbmVyIH07XG4gIHZhciB3cmFwcGVkID0gYmluZC5jYWxsKG9uY2VXcmFwcGVyLCBzdGF0ZSk7XG4gIHdyYXBwZWQubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgc3RhdGUud3JhcEZuID0gd3JhcHBlZDtcbiAgcmV0dXJuIHdyYXBwZWQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UodHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIHRoaXMub24odHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kT25jZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKCFldmVudHMpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKCFsaXN0KVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8IGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IG9iamVjdENyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBzcGxpY2VPbmUobGlzdCwgcG9zaXRpb24pO1xuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMsIGV2ZW50cywgaTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKCFldmVudHMpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoIWV2ZW50cy5yZW1vdmVMaXN0ZW5lcikge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IG9iamVjdENyZWF0ZShudWxsKTtcbiAgICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBvYmplY3RDcmVhdGUobnVsbCk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB2YXIga2V5cyA9IG9iamVjdEtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IG9iamVjdENyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycykge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoIWV2ZW50cylcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmICghZXZsaXN0ZW5lcilcbiAgICByZXR1cm4gW107XG5cbiAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKVxuICAgIHJldHVybiB1bndyYXAgPyBbZXZsaXN0ZW5lci5saXN0ZW5lciB8fCBldmxpc3RlbmVyXSA6IFtldmxpc3RlbmVyXTtcblxuICByZXR1cm4gdW53cmFwID8gdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHJldHVybiB0aGlzLl9ldmVudHNDb3VudCA+IDAgPyBSZWZsZWN0Lm93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpLlxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSlcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBvYmplY3RDcmVhdGVQb2x5ZmlsbChwcm90bykge1xuICB2YXIgRiA9IGZ1bmN0aW9uKCkge307XG4gIEYucHJvdG90eXBlID0gcHJvdG87XG4gIHJldHVybiBuZXcgRjtcbn1cbmZ1bmN0aW9uIG9iamVjdEtleXNQb2x5ZmlsbChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIgayBpbiBvYmopIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrKSkge1xuICAgIGtleXMucHVzaChrKTtcbiAgfVxuICByZXR1cm4gaztcbn1cbmZ1bmN0aW9uIGZ1bmN0aW9uQmluZFBvbHlmaWxsKGNvbnRleHQpIHtcbiAgdmFyIGZuID0gdGhpcztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkoY29udGV4dCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuXG5mdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICBpZiAoQXJyYXkuaXNBcnJheSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXI7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fc3ByZWFkQXJyYXlzID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5cykgfHwgZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcbiAgICByZXR1cm4gcjtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQnJvd3NlckluZm8gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnJvd3NlckluZm8obmFtZSwgdmVyc2lvbiwgb3MpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy5vcyA9IG9zO1xuICAgICAgICB0aGlzLnR5cGUgPSAnYnJvd3Nlcic7XG4gICAgfVxuICAgIHJldHVybiBCcm93c2VySW5mbztcbn0oKSk7XG5leHBvcnRzLkJyb3dzZXJJbmZvID0gQnJvd3NlckluZm87XG52YXIgTm9kZUluZm8gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTm9kZUluZm8odmVyc2lvbikge1xuICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICB0aGlzLnR5cGUgPSAnbm9kZSc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdub2RlJztcbiAgICAgICAgdGhpcy5vcyA9IHByb2Nlc3MucGxhdGZvcm07XG4gICAgfVxuICAgIHJldHVybiBOb2RlSW5mbztcbn0oKSk7XG5leHBvcnRzLk5vZGVJbmZvID0gTm9kZUluZm87XG52YXIgU2VhcmNoQm90RGV2aWNlSW5mbyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZWFyY2hCb3REZXZpY2VJbmZvKG5hbWUsIHZlcnNpb24sIG9zLCBib3QpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy5vcyA9IG9zO1xuICAgICAgICB0aGlzLmJvdCA9IGJvdDtcbiAgICAgICAgdGhpcy50eXBlID0gJ2JvdC1kZXZpY2UnO1xuICAgIH1cbiAgICByZXR1cm4gU2VhcmNoQm90RGV2aWNlSW5mbztcbn0oKSk7XG5leHBvcnRzLlNlYXJjaEJvdERldmljZUluZm8gPSBTZWFyY2hCb3REZXZpY2VJbmZvO1xudmFyIEJvdEluZm8gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQm90SW5mbygpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2JvdCc7XG4gICAgICAgIHRoaXMuYm90ID0gdHJ1ZTsgLy8gTk9URTogZGVwcmVjYXRlZCB0ZXN0IG5hbWUgaW5zdGVhZFxuICAgICAgICB0aGlzLm5hbWUgPSAnYm90JztcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5vcyA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBCb3RJbmZvO1xufSgpKTtcbmV4cG9ydHMuQm90SW5mbyA9IEJvdEluZm87XG52YXIgUmVhY3ROYXRpdmVJbmZvID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlYWN0TmF0aXZlSW5mbygpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ3JlYWN0LW5hdGl2ZSc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdyZWFjdC1uYXRpdmUnO1xuICAgICAgICB0aGlzLnZlcnNpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm9zID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIFJlYWN0TmF0aXZlSW5mbztcbn0oKSk7XG5leHBvcnRzLlJlYWN0TmF0aXZlSW5mbyA9IFJlYWN0TmF0aXZlSW5mbztcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbnZhciBTRUFSQ0hCT1hfVUFfUkVHRVggPSAvYWxleGF8Ym90fGNyYXdsKGVyfGluZyl8ZmFjZWJvb2tleHRlcm5hbGhpdHxmZWVkYnVybmVyfGdvb2dsZSB3ZWIgcHJldmlld3xuYWdpb3N8cG9zdHJhbmt8cGluZ2RvbXxzbHVycHxzcGlkZXJ8eWFob28hfHlhbmRleC87XG52YXIgU0VBUkNIQk9UX09TX1JFR0VYID0gLyhudWhrfEdvb2dsZWJvdHxZYW1teWJvdHxPcGVuYm90fFNsdXJwfE1TTkJvdHxBc2tcXCBKZWV2ZXNcXC9UZW9tYXxpYV9hcmNoaXZlcikvO1xudmFyIFJFUVVJUkVEX1ZFUlNJT05fUEFSVFMgPSAzO1xudmFyIHVzZXJBZ2VudFJ1bGVzID0gW1xuICAgIFsnYW9sJywgL0FPTFNoaWVsZFxcLyhbMC05XFwuX10rKS9dLFxuICAgIFsnZWRnZScsIC9FZGdlXFwvKFswLTlcXC5fXSspL10sXG4gICAgWydlZGdlLWlvcycsIC9FZGdpT1NcXC8oWzAtOVxcLl9dKykvXSxcbiAgICBbJ3lhbmRleGJyb3dzZXInLCAvWWFCcm93c2VyXFwvKFswLTlcXC5fXSspL10sXG4gICAgWydrYWthb3RhbGsnLCAvS0FLQU9UQUxLXFxzKFswLTlcXC5dKykvXSxcbiAgICBbJ3NhbXN1bmcnLCAvU2Ftc3VuZ0Jyb3dzZXJcXC8oWzAtOVxcLl0rKS9dLFxuICAgIFsnc2lsaycsIC9cXGJTaWxrXFwvKFswLTkuXy1dKylcXGIvXSxcbiAgICBbJ21pdWknLCAvTWl1aUJyb3dzZXJcXC8oWzAtOVxcLl0rKSQvXSxcbiAgICBbJ2JlYWtlcicsIC9CZWFrZXJCcm93c2VyXFwvKFswLTlcXC5dKykvXSxcbiAgICBbJ2VkZ2UtY2hyb21pdW0nLCAvRWRnQT9cXC8oWzAtOVxcLl0rKS9dLFxuICAgIFtcbiAgICAgICAgJ2Nocm9taXVtLXdlYnZpZXcnLFxuICAgICAgICAvKD8hQ2hyb20uKk9QUil3dlxcKS4qQ2hyb20oPzplfGl1bSlcXC8oWzAtOVxcLl0rKSg6P1xcc3wkKS8sXG4gICAgXSxcbiAgICBbJ2Nocm9tZScsIC8oPyFDaHJvbS4qT1BSKUNocm9tKD86ZXxpdW0pXFwvKFswLTlcXC5dKykoOj9cXHN8JCkvXSxcbiAgICBbJ3BoYW50b21qcycsIC9QaGFudG9tSlNcXC8oWzAtOVxcLl0rKSg6P1xcc3wkKS9dLFxuICAgIFsnY3Jpb3MnLCAvQ3JpT1NcXC8oWzAtOVxcLl0rKSg6P1xcc3wkKS9dLFxuICAgIFsnZmlyZWZveCcsIC9GaXJlZm94XFwvKFswLTlcXC5dKykoPzpcXHN8JCkvXSxcbiAgICBbJ2Z4aW9zJywgL0Z4aU9TXFwvKFswLTlcXC5dKykvXSxcbiAgICBbJ29wZXJhLW1pbmknLCAvT3BlcmEgTWluaS4qVmVyc2lvblxcLyhbMC05XFwuXSspL10sXG4gICAgWydvcGVyYScsIC9PcGVyYVxcLyhbMC05XFwuXSspKD86XFxzfCQpL10sXG4gICAgWydvcGVyYScsIC9PUFJcXC8oWzAtOVxcLl0rKSg6P1xcc3wkKS9dLFxuICAgIFsnaWUnLCAvVHJpZGVudFxcLzdcXC4wLipydlxcOihbMC05XFwuXSspLipcXCkuKkdlY2tvJC9dLFxuICAgIFsnaWUnLCAvTVNJRVxccyhbMC05XFwuXSspOy4qVHJpZGVudFxcL1s0LTddLjAvXSxcbiAgICBbJ2llJywgL01TSUVcXHMoN1xcLjApL10sXG4gICAgWydiYjEwJywgL0JCMTA7XFxzVG91Y2guKlZlcnNpb25cXC8oWzAtOVxcLl0rKS9dLFxuICAgIFsnYW5kcm9pZCcsIC9BbmRyb2lkXFxzKFswLTlcXC5dKykvXSxcbiAgICBbJ2lvcycsIC9WZXJzaW9uXFwvKFswLTlcXC5fXSspLipNb2JpbGUuKlNhZmFyaS4qL10sXG4gICAgWydzYWZhcmknLCAvVmVyc2lvblxcLyhbMC05XFwuX10rKS4qU2FmYXJpL10sXG4gICAgWydmYWNlYm9vaycsIC9GQkFWXFwvKFswLTlcXC5dKykvXSxcbiAgICBbJ2luc3RhZ3JhbScsIC9JbnN0YWdyYW1cXHMoWzAtOVxcLl0rKS9dLFxuICAgIFsnaW9zLXdlYnZpZXcnLCAvQXBwbGVXZWJLaXRcXC8oWzAtOVxcLl0rKS4qTW9iaWxlL10sXG4gICAgWydpb3Mtd2VidmlldycsIC9BcHBsZVdlYktpdFxcLyhbMC05XFwuXSspLipHZWNrb1xcKSQvXSxcbiAgICBbJ3NlYXJjaGJvdCcsIFNFQVJDSEJPWF9VQV9SRUdFWF0sXG5dO1xudmFyIG9wZXJhdGluZ1N5c3RlbVJ1bGVzID0gW1xuICAgIFsnaU9TJywgL2lQKGhvbmV8b2R8YWQpL10sXG4gICAgWydBbmRyb2lkIE9TJywgL0FuZHJvaWQvXSxcbiAgICBbJ0JsYWNrQmVycnkgT1MnLCAvQmxhY2tCZXJyeXxCQjEwL10sXG4gICAgWydXaW5kb3dzIE1vYmlsZScsIC9JRU1vYmlsZS9dLFxuICAgIFsnQW1hem9uIE9TJywgL0tpbmRsZS9dLFxuICAgIFsnV2luZG93cyAzLjExJywgL1dpbjE2L10sXG4gICAgWydXaW5kb3dzIDk1JywgLyhXaW5kb3dzIDk1KXwoV2luOTUpfChXaW5kb3dzXzk1KS9dLFxuICAgIFsnV2luZG93cyA5OCcsIC8oV2luZG93cyA5OCl8KFdpbjk4KS9dLFxuICAgIFsnV2luZG93cyAyMDAwJywgLyhXaW5kb3dzIE5UIDUuMCl8KFdpbmRvd3MgMjAwMCkvXSxcbiAgICBbJ1dpbmRvd3MgWFAnLCAvKFdpbmRvd3MgTlQgNS4xKXwoV2luZG93cyBYUCkvXSxcbiAgICBbJ1dpbmRvd3MgU2VydmVyIDIwMDMnLCAvKFdpbmRvd3MgTlQgNS4yKS9dLFxuICAgIFsnV2luZG93cyBWaXN0YScsIC8oV2luZG93cyBOVCA2LjApL10sXG4gICAgWydXaW5kb3dzIDcnLCAvKFdpbmRvd3MgTlQgNi4xKS9dLFxuICAgIFsnV2luZG93cyA4JywgLyhXaW5kb3dzIE5UIDYuMikvXSxcbiAgICBbJ1dpbmRvd3MgOC4xJywgLyhXaW5kb3dzIE5UIDYuMykvXSxcbiAgICBbJ1dpbmRvd3MgMTAnLCAvKFdpbmRvd3MgTlQgMTAuMCkvXSxcbiAgICBbJ1dpbmRvd3MgTUUnLCAvV2luZG93cyBNRS9dLFxuICAgIFsnT3BlbiBCU0QnLCAvT3BlbkJTRC9dLFxuICAgIFsnU3VuIE9TJywgL1N1bk9TL10sXG4gICAgWydDaHJvbWUgT1MnLCAvQ3JPUy9dLFxuICAgIFsnTGludXgnLCAvKExpbnV4KXwoWDExKS9dLFxuICAgIFsnTWFjIE9TJywgLyhNYWNfUG93ZXJQQyl8KE1hY2ludG9zaCkvXSxcbiAgICBbJ1FOWCcsIC9RTlgvXSxcbiAgICBbJ0JlT1MnLCAvQmVPUy9dLFxuICAgIFsnT1MvMicsIC9PU1xcLzIvXSxcbl07XG5mdW5jdGlvbiBkZXRlY3QodXNlckFnZW50KSB7XG4gICAgaWYgKCEhdXNlckFnZW50KSB7XG4gICAgICAgIHJldHVybiBwYXJzZVVzZXJBZ2VudCh1c2VyQWdlbnQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAgICAgICByZXR1cm4gbmV3IFJlYWN0TmF0aXZlSW5mbygpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlVXNlckFnZW50KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0Tm9kZVZlcnNpb24oKTtcbn1cbmV4cG9ydHMuZGV0ZWN0ID0gZGV0ZWN0O1xuZnVuY3Rpb24gbWF0Y2hVc2VyQWdlbnQodWEpIHtcbiAgICAvLyBvcHRlZCBmb3IgdXNpbmcgcmVkdWNlIGhlcmUgcmF0aGVyIHRoYW4gQXJyYXkjZmlyc3Qgd2l0aCBhIHJlZ2V4LnRlc3QgY2FsbFxuICAgIC8vIHRoaXMgaXMgcHJpbWFyaWx5IGJlY2F1c2UgdXNpbmcgdGhlIHJlZHVjZSB3ZSBvbmx5IHBlcmZvcm0gdGhlIHJlZ2V4XG4gICAgLy8gZXhlY3V0aW9uIG9uY2UgcmF0aGVyIHRoYW4gb25jZSBmb3IgdGhlIHRlc3QgYW5kIGZvciB0aGUgZXhlYyBhZ2FpbiBiZWxvd1xuICAgIC8vIHByb2JhYmx5IHNvbWV0aGluZyB0aGF0IG5lZWRzIHRvIGJlIGJlbmNobWFya2VkIHRob3VnaFxuICAgIHJldHVybiAodWEgIT09ICcnICYmXG4gICAgICAgIHVzZXJBZ2VudFJ1bGVzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hlZCwgX2EpIHtcbiAgICAgICAgICAgIHZhciBicm93c2VyID0gX2FbMF0sIHJlZ2V4ID0gX2FbMV07XG4gICAgICAgICAgICBpZiAobWF0Y2hlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHVhTWF0Y2ggPSByZWdleC5leGVjKHVhKTtcbiAgICAgICAgICAgIHJldHVybiAhIXVhTWF0Y2ggJiYgW2Jyb3dzZXIsIHVhTWF0Y2hdO1xuICAgICAgICB9LCBmYWxzZSkpO1xufVxuZnVuY3Rpb24gYnJvd3Nlck5hbWUodWEpIHtcbiAgICB2YXIgZGF0YSA9IG1hdGNoVXNlckFnZW50KHVhKTtcbiAgICByZXR1cm4gZGF0YSA/IGRhdGFbMF0gOiBudWxsO1xufVxuZXhwb3J0cy5icm93c2VyTmFtZSA9IGJyb3dzZXJOYW1lO1xuZnVuY3Rpb24gcGFyc2VVc2VyQWdlbnQodWEpIHtcbiAgICB2YXIgbWF0Y2hlZFJ1bGUgPSBtYXRjaFVzZXJBZ2VudCh1YSk7XG4gICAgaWYgKCFtYXRjaGVkUnVsZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIG5hbWUgPSBtYXRjaGVkUnVsZVswXSwgbWF0Y2ggPSBtYXRjaGVkUnVsZVsxXTtcbiAgICBpZiAobmFtZSA9PT0gJ3NlYXJjaGJvdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCb3RJbmZvKCk7XG4gICAgfVxuICAgIHZhciB2ZXJzaW9uUGFydHMgPSBtYXRjaFsxXSAmJiBtYXRjaFsxXS5zcGxpdCgvWy5fXS8pLnNsaWNlKDAsIDMpO1xuICAgIGlmICh2ZXJzaW9uUGFydHMpIHtcbiAgICAgICAgaWYgKHZlcnNpb25QYXJ0cy5sZW5ndGggPCBSRVFVSVJFRF9WRVJTSU9OX1BBUlRTKSB7XG4gICAgICAgICAgICB2ZXJzaW9uUGFydHMgPSBfX3NwcmVhZEFycmF5cyh2ZXJzaW9uUGFydHMsIGNyZWF0ZVZlcnNpb25QYXJ0cyhSRVFVSVJFRF9WRVJTSU9OX1BBUlRTIC0gdmVyc2lvblBhcnRzLmxlbmd0aCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2ZXJzaW9uUGFydHMgPSBbXTtcbiAgICB9XG4gICAgdmFyIHZlcnNpb24gPSB2ZXJzaW9uUGFydHMuam9pbignLicpO1xuICAgIHZhciBvcyA9IGRldGVjdE9TKHVhKTtcbiAgICB2YXIgc2VhcmNoQm90TWF0Y2ggPSBTRUFSQ0hCT1RfT1NfUkVHRVguZXhlYyh1YSk7XG4gICAgaWYgKHNlYXJjaEJvdE1hdGNoICYmIHNlYXJjaEJvdE1hdGNoWzFdKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2VhcmNoQm90RGV2aWNlSW5mbyhuYW1lLCB2ZXJzaW9uLCBvcywgc2VhcmNoQm90TWF0Y2hbMV0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEJyb3dzZXJJbmZvKG5hbWUsIHZlcnNpb24sIG9zKTtcbn1cbmV4cG9ydHMucGFyc2VVc2VyQWdlbnQgPSBwYXJzZVVzZXJBZ2VudDtcbmZ1bmN0aW9uIGRldGVjdE9TKHVhKSB7XG4gICAgZm9yICh2YXIgaWkgPSAwLCBjb3VudCA9IG9wZXJhdGluZ1N5c3RlbVJ1bGVzLmxlbmd0aDsgaWkgPCBjb3VudDsgaWkrKykge1xuICAgICAgICB2YXIgX2EgPSBvcGVyYXRpbmdTeXN0ZW1SdWxlc1tpaV0sIG9zID0gX2FbMF0sIHJlZ2V4ID0gX2FbMV07XG4gICAgICAgIHZhciBtYXRjaCA9IHJlZ2V4LmV4ZWModWEpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBvcztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydHMuZGV0ZWN0T1MgPSBkZXRlY3RPUztcbmZ1bmN0aW9uIGdldE5vZGVWZXJzaW9uKCkge1xuICAgIHZhciBpc05vZGUgPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy52ZXJzaW9uO1xuICAgIHJldHVybiBpc05vZGUgPyBuZXcgTm9kZUluZm8ocHJvY2Vzcy52ZXJzaW9uLnNsaWNlKDEpKSA6IG51bGw7XG59XG5leHBvcnRzLmdldE5vZGVWZXJzaW9uID0gZ2V0Tm9kZVZlcnNpb247XG5mdW5jdGlvbiBjcmVhdGVWZXJzaW9uUGFydHMoY291bnQpIHtcbiAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGNvdW50OyBpaSsrKSB7XG4gICAgICAgIG91dHB1dC5wdXNoKCcwJyk7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG59XG4iLCJ2YXIgb25jZSA9IHJlcXVpcmUoJ29uY2UnKTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbigpIHt9O1xuXG52YXIgaXNSZXF1ZXN0ID0gZnVuY3Rpb24oc3RyZWFtKSB7XG5cdHJldHVybiBzdHJlYW0uc2V0SGVhZGVyICYmIHR5cGVvZiBzdHJlYW0uYWJvcnQgPT09ICdmdW5jdGlvbic7XG59O1xuXG52YXIgaXNDaGlsZFByb2Nlc3MgPSBmdW5jdGlvbihzdHJlYW0pIHtcblx0cmV0dXJuIHN0cmVhbS5zdGRpbyAmJiBBcnJheS5pc0FycmF5KHN0cmVhbS5zdGRpbykgJiYgc3RyZWFtLnN0ZGlvLmxlbmd0aCA9PT0gM1xufTtcblxudmFyIGVvcyA9IGZ1bmN0aW9uKHN0cmVhbSwgb3B0cywgY2FsbGJhY2spIHtcblx0aWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZW9zKHN0cmVhbSwgbnVsbCwgb3B0cyk7XG5cdGlmICghb3B0cykgb3B0cyA9IHt9O1xuXG5cdGNhbGxiYWNrID0gb25jZShjYWxsYmFjayB8fCBub29wKTtcblxuXHR2YXIgd3MgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG5cdHZhciBycyA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcblx0dmFyIHJlYWRhYmxlID0gb3B0cy5yZWFkYWJsZSB8fCAob3B0cy5yZWFkYWJsZSAhPT0gZmFsc2UgJiYgc3RyZWFtLnJlYWRhYmxlKTtcblx0dmFyIHdyaXRhYmxlID0gb3B0cy53cml0YWJsZSB8fCAob3B0cy53cml0YWJsZSAhPT0gZmFsc2UgJiYgc3RyZWFtLndyaXRhYmxlKTtcblx0dmFyIGNhbmNlbGxlZCA9IGZhbHNlO1xuXG5cdHZhciBvbmxlZ2FjeWZpbmlzaCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICghc3RyZWFtLndyaXRhYmxlKSBvbmZpbmlzaCgpO1xuXHR9O1xuXG5cdHZhciBvbmZpbmlzaCA9IGZ1bmN0aW9uKCkge1xuXHRcdHdyaXRhYmxlID0gZmFsc2U7XG5cdFx0aWYgKCFyZWFkYWJsZSkgY2FsbGJhY2suY2FsbChzdHJlYW0pO1xuXHR9O1xuXG5cdHZhciBvbmVuZCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJlYWRhYmxlID0gZmFsc2U7XG5cdFx0aWYgKCF3cml0YWJsZSkgY2FsbGJhY2suY2FsbChzdHJlYW0pO1xuXHR9O1xuXG5cdHZhciBvbmV4aXQgPSBmdW5jdGlvbihleGl0Q29kZSkge1xuXHRcdGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBleGl0Q29kZSA/IG5ldyBFcnJvcignZXhpdGVkIHdpdGggZXJyb3IgY29kZTogJyArIGV4aXRDb2RlKSA6IG51bGwpO1xuXHR9O1xuXG5cdHZhciBvbmVycm9yID0gZnVuY3Rpb24oZXJyKSB7XG5cdFx0Y2FsbGJhY2suY2FsbChzdHJlYW0sIGVycik7XG5cdH07XG5cblx0dmFyIG9uY2xvc2UgPSBmdW5jdGlvbigpIHtcblx0XHRwcm9jZXNzLm5leHRUaWNrKG9uY2xvc2VuZXh0dGljayk7XG5cdH07XG5cblx0dmFyIG9uY2xvc2VuZXh0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmIChjYW5jZWxsZWQpIHJldHVybjtcblx0XHRpZiAocmVhZGFibGUgJiYgIShycyAmJiAocnMuZW5kZWQgJiYgIXJzLmRlc3Ryb3llZCkpKSByZXR1cm4gY2FsbGJhY2suY2FsbChzdHJlYW0sIG5ldyBFcnJvcigncHJlbWF0dXJlIGNsb3NlJykpO1xuXHRcdGlmICh3cml0YWJsZSAmJiAhKHdzICYmICh3cy5lbmRlZCAmJiAhd3MuZGVzdHJveWVkKSkpIHJldHVybiBjYWxsYmFjay5jYWxsKHN0cmVhbSwgbmV3IEVycm9yKCdwcmVtYXR1cmUgY2xvc2UnKSk7XG5cdH07XG5cblx0dmFyIG9ucmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xuXHRcdHN0cmVhbS5yZXEub24oJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblx0fTtcblxuXHRpZiAoaXNSZXF1ZXN0KHN0cmVhbSkpIHtcblx0XHRzdHJlYW0ub24oJ2NvbXBsZXRlJywgb25maW5pc2gpO1xuXHRcdHN0cmVhbS5vbignYWJvcnQnLCBvbmNsb3NlKTtcblx0XHRpZiAoc3RyZWFtLnJlcSkgb25yZXF1ZXN0KCk7XG5cdFx0ZWxzZSBzdHJlYW0ub24oJ3JlcXVlc3QnLCBvbnJlcXVlc3QpO1xuXHR9IGVsc2UgaWYgKHdyaXRhYmxlICYmICF3cykgeyAvLyBsZWdhY3kgc3RyZWFtc1xuXHRcdHN0cmVhbS5vbignZW5kJywgb25sZWdhY3lmaW5pc2gpO1xuXHRcdHN0cmVhbS5vbignY2xvc2UnLCBvbmxlZ2FjeWZpbmlzaCk7XG5cdH1cblxuXHRpZiAoaXNDaGlsZFByb2Nlc3Moc3RyZWFtKSkgc3RyZWFtLm9uKCdleGl0Jywgb25leGl0KTtcblxuXHRzdHJlYW0ub24oJ2VuZCcsIG9uZW5kKTtcblx0c3RyZWFtLm9uKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cdGlmIChvcHRzLmVycm9yICE9PSBmYWxzZSkgc3RyZWFtLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuXHRzdHJlYW0ub24oJ2Nsb3NlJywgb25jbG9zZSk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdGNhbmNlbGxlZCA9IHRydWU7XG5cdFx0c3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdjb21wbGV0ZScsIG9uZmluaXNoKTtcblx0XHRzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Fib3J0Jywgb25jbG9zZSk7XG5cdFx0c3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdyZXF1ZXN0Jywgb25yZXF1ZXN0KTtcblx0XHRpZiAoc3RyZWFtLnJlcSkgc3RyZWFtLnJlcS5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuXHRcdHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25sZWdhY3lmaW5pc2gpO1xuXHRcdHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmxlZ2FjeWZpbmlzaCk7XG5cdFx0c3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cdFx0c3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdleGl0Jywgb25leGl0KTtcblx0XHRzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcblx0XHRzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG5cdFx0c3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuXHR9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlb3M7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXRoZXJldW1Qcm92aWRlckVycm9yID0gZXhwb3J0cy5FdGhlcmV1bVJwY0Vycm9yID0gdm9pZCAwO1xuY29uc3QgZmFzdF9zYWZlX3N0cmluZ2lmeV8xID0gcmVxdWlyZShcImZhc3Qtc2FmZS1zdHJpbmdpZnlcIik7XG4vKipcbiAqIEVycm9yIHN1YmNsYXNzIGltcGxlbWVudGluZyBKU09OIFJQQyAyLjAgZXJyb3JzIGFuZCBFdGhlcmV1bSBSUEMgZXJyb3JzXG4gKiBwZXIgRUlQLTE0NzQuXG4gKiBQZXJtaXRzIGFueSBpbnRlZ2VyIGVycm9yIGNvZGUuXG4gKi9cbmNsYXNzIEV0aGVyZXVtUnBjRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoY29kZSwgbWVzc2FnZSwgZGF0YSkge1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoY29kZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignXCJjb2RlXCIgbXVzdCBiZSBhbiBpbnRlZ2VyLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbWVzc2FnZSB8fCB0eXBlb2YgbWVzc2FnZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignXCJtZXNzYWdlXCIgbXVzdCBiZSBhIG5vbmVtcHR5IHN0cmluZy4nKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcGxhaW4gb2JqZWN0IHdpdGggYWxsIHB1YmxpYyBjbGFzcyBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgY29uc3Qgc2VyaWFsaXplZCA9IHtcbiAgICAgICAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzZXJpYWxpemVkLmRhdGEgPSB0aGlzLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RhY2spIHtcbiAgICAgICAgICAgIHNlcmlhbGl6ZWQuc3RhY2sgPSB0aGlzLnN0YWNrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXJpYWxpemVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHNlcmlhbGl6ZWQgZXJyb3IsIG9taXR0aW5nXG4gICAgICogYW55IGNpcmN1bGFyIHJlZmVyZW5jZXMuXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBmYXN0X3NhZmVfc3RyaW5naWZ5XzEuZGVmYXVsdCh0aGlzLnNlcmlhbGl6ZSgpLCBzdHJpbmdpZnlSZXBsYWNlciwgMik7XG4gICAgfVxufVxuZXhwb3J0cy5FdGhlcmV1bVJwY0Vycm9yID0gRXRoZXJldW1ScGNFcnJvcjtcbi8qKlxuICogRXJyb3Igc3ViY2xhc3MgaW1wbGVtZW50aW5nIEV0aGVyZXVtIFByb3ZpZGVyIGVycm9ycyBwZXIgRUlQLTExOTMuXG4gKiBQZXJtaXRzIGludGVnZXIgZXJyb3IgY29kZXMgaW4gdGhlIFsgMTAwMCA8PSA0OTk5IF0gcmFuZ2UuXG4gKi9cbmNsYXNzIEV0aGVyZXVtUHJvdmlkZXJFcnJvciBleHRlbmRzIEV0aGVyZXVtUnBjRXJyb3Ige1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBFdGhlcmV1bSBQcm92aWRlciBKU09OLVJQQyBlcnJvci5cbiAgICAgKiBgY29kZWAgbXVzdCBiZSBhbiBpbnRlZ2VyIGluIHRoZSAxMDAwIDw9IDQ5OTkgcmFuZ2UuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29kZSwgbWVzc2FnZSwgZGF0YSkge1xuICAgICAgICBpZiAoIWlzVmFsaWRFdGhQcm92aWRlckNvZGUoY29kZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignXCJjb2RlXCIgbXVzdCBiZSBhbiBpbnRlZ2VyIHN1Y2ggdGhhdDogMTAwMCA8PSBjb2RlIDw9IDQ5OTknKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihjb2RlLCBtZXNzYWdlLCBkYXRhKTtcbiAgICB9XG59XG5leHBvcnRzLkV0aGVyZXVtUHJvdmlkZXJFcnJvciA9IEV0aGVyZXVtUHJvdmlkZXJFcnJvcjtcbi8vIEludGVybmFsXG5mdW5jdGlvbiBpc1ZhbGlkRXRoUHJvdmlkZXJDb2RlKGNvZGUpIHtcbiAgICByZXR1cm4gTnVtYmVyLmlzSW50ZWdlcihjb2RlKSAmJiBjb2RlID49IDEwMDAgJiYgY29kZSA8PSA0OTk5O1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5UmVwbGFjZXIoXywgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09ICdbQ2lyY3VsYXJdJykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMnhoYzNObGN5NXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlqYkdGemMyVnpMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3p0QlFVRkJMRFpFUVVGblJEdEJRVk5vUkRzN096dEhRVWxITzBGQlEwZ3NUVUZCWVN4blFrRkJiMElzVTBGQlVTeExRVUZMTzBsQlRUVkRMRmxCUVZrc1NVRkJXU3hGUVVGRkxFOUJRV1VzUlVGQlJTeEpRVUZSTzFGQlJXcEVMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZPMWxCUXpOQ0xFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlEySXNORUpCUVRSQ0xFTkJRemRDTEVOQlFVTTdVMEZEU0R0UlFVTkVMRWxCUVVrc1EwRkJReXhQUVVGUExFbEJRVWtzVDBGQlR5eFBRVUZQTEV0QlFVc3NVVUZCVVN4RlFVRkZPMWxCUXpORExFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlEySXNjME5CUVhORExFTkJRM1pETEVOQlFVTTdVMEZEU0R0UlFVVkVMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dFJRVU5tTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRE8xRkJRMnBDTEVsQlFVa3NTVUZCU1N4TFFVRkxMRk5CUVZNc1JVRkJSVHRaUVVOMFFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRenRUUVVOc1FqdEpRVU5JTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxGTkJRVk03VVVGRFVDeE5RVUZOTEZWQlFWVXNSMEZCSzBJN1dVRkROME1zU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpPMWxCUTJZc1QwRkJUeXhGUVVGRkxFbEJRVWtzUTBGQlF5eFBRVUZQTzFOQlEzUkNMRU5CUVVNN1VVRkRSaXhKUVVGSkxFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NVMEZCVXl4RlFVRkZPMWxCUXpOQ0xGVkJRVlVzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJRenRUUVVNM1FqdFJRVU5FTEVsQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSVHRaUVVOa0xGVkJRVlVzUTBGQlF5eExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenRUUVVNdlFqdFJRVU5FTEU5QlFVOHNWVUZCVlN4RFFVRkRPMGxCUTNCQ0xFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hSUVVGUk8xRkJRMDRzVDBGQlR5dzJRa0ZCWVN4RFFVTnNRaXhKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVWQlEyaENMR2xDUVVGcFFpeEZRVU5xUWl4RFFVRkRMRU5CUTBZc1EwRkJRenRKUVVOS0xFTkJRVU03UTBGRFJqdEJRWFJFUkN3MFEwRnpSRU03UVVGRlJEczdPMGRCUjBjN1FVRkRTQ3hOUVVGaExIRkNRVUY1UWl4VFFVRlJMR2RDUVVGdFFqdEpRVVV2UkRzN08wOUJSMGM3U1VGRFNDeFpRVUZaTEVsQlFWa3NSVUZCUlN4UFFVRmxMRVZCUVVVc1NVRkJVVHRSUVVWcVJDeEpRVUZKTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVTdXVUZEYWtNc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGRFlpd3lSRUZCTWtRc1EwRkROVVFzUTBGQlF6dFRRVU5JTzFGQlJVUXNTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdTVUZETjBJc1EwRkJRenREUVVOR08wRkJhRUpFTEhORVFXZENRenRCUVVWRUxGZEJRVmM3UVVGRldDeFRRVUZUTEhOQ1FVRnpRaXhEUVVGRExFbEJRVms3U1VGRE1VTXNUMEZCVHl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVsQlFVa3NTVUZCU1N4SlFVRkpMRWxCUVVrc1NVRkJTU3hKUVVGSkxFbEJRVWtzUTBGQlF6dEJRVU5vUlN4RFFVRkRPMEZCUlVRc1UwRkJVeXhwUWtGQmFVSXNRMEZCUXl4RFFVRlZMRVZCUVVVc1MwRkJZenRKUVVOdVJDeEpRVUZKTEV0QlFVc3NTMEZCU3l4WlFVRlpMRVZCUVVVN1VVRkRNVUlzVDBGQlR5eFRRVUZUTEVOQlFVTTdTMEZEYkVJN1NVRkRSQ3hQUVVGUExFdEJRVXNzUTBGQlF6dEJRVU5tTEVOQlFVTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVycm9yVmFsdWVzID0gZXhwb3J0cy5lcnJvckNvZGVzID0gdm9pZCAwO1xuZXhwb3J0cy5lcnJvckNvZGVzID0ge1xuICAgIHJwYzoge1xuICAgICAgICBpbnZhbGlkSW5wdXQ6IC0zMjAwMCxcbiAgICAgICAgcmVzb3VyY2VOb3RGb3VuZDogLTMyMDAxLFxuICAgICAgICByZXNvdXJjZVVuYXZhaWxhYmxlOiAtMzIwMDIsXG4gICAgICAgIHRyYW5zYWN0aW9uUmVqZWN0ZWQ6IC0zMjAwMyxcbiAgICAgICAgbWV0aG9kTm90U3VwcG9ydGVkOiAtMzIwMDQsXG4gICAgICAgIGxpbWl0RXhjZWVkZWQ6IC0zMjAwNSxcbiAgICAgICAgcGFyc2U6IC0zMjcwMCxcbiAgICAgICAgaW52YWxpZFJlcXVlc3Q6IC0zMjYwMCxcbiAgICAgICAgbWV0aG9kTm90Rm91bmQ6IC0zMjYwMSxcbiAgICAgICAgaW52YWxpZFBhcmFtczogLTMyNjAyLFxuICAgICAgICBpbnRlcm5hbDogLTMyNjAzLFxuICAgIH0sXG4gICAgcHJvdmlkZXI6IHtcbiAgICAgICAgdXNlclJlamVjdGVkUmVxdWVzdDogNDAwMSxcbiAgICAgICAgdW5hdXRob3JpemVkOiA0MTAwLFxuICAgICAgICB1bnN1cHBvcnRlZE1ldGhvZDogNDIwMCxcbiAgICAgICAgZGlzY29ubmVjdGVkOiA0OTAwLFxuICAgICAgICBjaGFpbkRpc2Nvbm5lY3RlZDogNDkwMSxcbiAgICB9LFxufTtcbmV4cG9ydHMuZXJyb3JWYWx1ZXMgPSB7XG4gICAgJy0zMjcwMCc6IHtcbiAgICAgICAgc3RhbmRhcmQ6ICdKU09OIFJQQyAyLjAnLFxuICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBKU09OIHdhcyByZWNlaXZlZCBieSB0aGUgc2VydmVyLiBBbiBlcnJvciBvY2N1cnJlZCBvbiB0aGUgc2VydmVyIHdoaWxlIHBhcnNpbmcgdGhlIEpTT04gdGV4dC4nLFxuICAgIH0sXG4gICAgJy0zMjYwMCc6IHtcbiAgICAgICAgc3RhbmRhcmQ6ICdKU09OIFJQQyAyLjAnLFxuICAgICAgICBtZXNzYWdlOiAnVGhlIEpTT04gc2VudCBpcyBub3QgYSB2YWxpZCBSZXF1ZXN0IG9iamVjdC4nLFxuICAgIH0sXG4gICAgJy0zMjYwMSc6IHtcbiAgICAgICAgc3RhbmRhcmQ6ICdKU09OIFJQQyAyLjAnLFxuICAgICAgICBtZXNzYWdlOiAnVGhlIG1ldGhvZCBkb2VzIG5vdCBleGlzdCAvIGlzIG5vdCBhdmFpbGFibGUuJyxcbiAgICB9LFxuICAgICctMzI2MDInOiB7XG4gICAgICAgIHN0YW5kYXJkOiAnSlNPTiBSUEMgMi4wJyxcbiAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgbWV0aG9kIHBhcmFtZXRlcihzKS4nLFxuICAgIH0sXG4gICAgJy0zMjYwMyc6IHtcbiAgICAgICAgc3RhbmRhcmQ6ICdKU09OIFJQQyAyLjAnLFxuICAgICAgICBtZXNzYWdlOiAnSW50ZXJuYWwgSlNPTi1SUEMgZXJyb3IuJyxcbiAgICB9LFxuICAgICctMzIwMDAnOiB7XG4gICAgICAgIHN0YW5kYXJkOiAnRUlQLTE0NzQnLFxuICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBpbnB1dC4nLFxuICAgIH0sXG4gICAgJy0zMjAwMSc6IHtcbiAgICAgICAgc3RhbmRhcmQ6ICdFSVAtMTQ3NCcsXG4gICAgICAgIG1lc3NhZ2U6ICdSZXNvdXJjZSBub3QgZm91bmQuJyxcbiAgICB9LFxuICAgICctMzIwMDInOiB7XG4gICAgICAgIHN0YW5kYXJkOiAnRUlQLTE0NzQnLFxuICAgICAgICBtZXNzYWdlOiAnUmVzb3VyY2UgdW5hdmFpbGFibGUuJyxcbiAgICB9LFxuICAgICctMzIwMDMnOiB7XG4gICAgICAgIHN0YW5kYXJkOiAnRUlQLTE0NzQnLFxuICAgICAgICBtZXNzYWdlOiAnVHJhbnNhY3Rpb24gcmVqZWN0ZWQuJyxcbiAgICB9LFxuICAgICctMzIwMDQnOiB7XG4gICAgICAgIHN0YW5kYXJkOiAnRUlQLTE0NzQnLFxuICAgICAgICBtZXNzYWdlOiAnTWV0aG9kIG5vdCBzdXBwb3J0ZWQuJyxcbiAgICB9LFxuICAgICctMzIwMDUnOiB7XG4gICAgICAgIHN0YW5kYXJkOiAnRUlQLTE0NzQnLFxuICAgICAgICBtZXNzYWdlOiAnUmVxdWVzdCBsaW1pdCBleGNlZWRlZC4nLFxuICAgIH0sXG4gICAgJzQwMDEnOiB7XG4gICAgICAgIHN0YW5kYXJkOiAnRUlQLTExOTMnLFxuICAgICAgICBtZXNzYWdlOiAnVXNlciByZWplY3RlZCB0aGUgcmVxdWVzdC4nLFxuICAgIH0sXG4gICAgJzQxMDAnOiB7XG4gICAgICAgIHN0YW5kYXJkOiAnRUlQLTExOTMnLFxuICAgICAgICBtZXNzYWdlOiAnVGhlIHJlcXVlc3RlZCBhY2NvdW50IGFuZC9vciBtZXRob2QgaGFzIG5vdCBiZWVuIGF1dGhvcml6ZWQgYnkgdGhlIHVzZXIuJyxcbiAgICB9LFxuICAgICc0MjAwJzoge1xuICAgICAgICBzdGFuZGFyZDogJ0VJUC0xMTkzJyxcbiAgICAgICAgbWVzc2FnZTogJ1RoZSByZXF1ZXN0ZWQgbWV0aG9kIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBFdGhlcmV1bSBwcm92aWRlci4nLFxuICAgIH0sXG4gICAgJzQ5MDAnOiB7XG4gICAgICAgIHN0YW5kYXJkOiAnRUlQLTExOTMnLFxuICAgICAgICBtZXNzYWdlOiAnVGhlIHByb3ZpZGVyIGlzIGRpc2Nvbm5lY3RlZCBmcm9tIGFsbCBjaGFpbnMuJyxcbiAgICB9LFxuICAgICc0OTAxJzoge1xuICAgICAgICBzdGFuZGFyZDogJ0VJUC0xMTkzJyxcbiAgICAgICAgbWVzc2FnZTogJ1RoZSBwcm92aWRlciBpcyBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgc3BlY2lmaWVkIGNoYWluLicsXG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2laWEp5YjNJdFkyOXVjM1JoYm5SekxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dmMzSmpMMlZ5Y205eUxXTnZibk4wWVc1MGN5NTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3UVVGMVFtRXNVVUZCUVN4VlFVRlZMRWRCUVdVN1NVRkRjRU1zUjBGQlJ5eEZRVUZGTzFGQlEwZ3NXVUZCV1N4RlFVRkZMRU5CUVVNc1MwRkJTenRSUVVOd1FpeG5Ra0ZCWjBJc1JVRkJSU3hEUVVGRExFdEJRVXM3VVVGRGVFSXNiVUpCUVcxQ0xFVkJRVVVzUTBGQlF5eExRVUZMTzFGQlF6TkNMRzFDUVVGdFFpeEZRVUZGTEVOQlFVTXNTMEZCU3p0UlFVTXpRaXhyUWtGQmEwSXNSVUZCUlN4RFFVRkRMRXRCUVVzN1VVRkRNVUlzWVVGQllTeEZRVUZGTEVOQlFVTXNTMEZCU3p0UlFVTnlRaXhMUVVGTExFVkJRVVVzUTBGQlF5eExRVUZMTzFGQlEySXNZMEZCWXl4RlFVRkZMRU5CUVVNc1MwRkJTenRSUVVOMFFpeGpRVUZqTEVWQlFVVXNRMEZCUXl4TFFVRkxPMUZCUTNSQ0xHRkJRV0VzUlVGQlJTeERRVUZETEV0QlFVczdVVUZEY2tJc1VVRkJVU3hGUVVGRkxFTkJRVU1zUzBGQlN6dExRVU5xUWp0SlFVTkVMRkZCUVZFc1JVRkJSVHRSUVVOU0xHMUNRVUZ0UWl4RlFVRkZMRWxCUVVrN1VVRkRla0lzV1VGQldTeEZRVUZGTEVsQlFVazdVVUZEYkVJc2FVSkJRV2xDTEVWQlFVVXNTVUZCU1R0UlFVTjJRaXhaUVVGWkxFVkJRVVVzU1VGQlNUdFJRVU5zUWl4cFFrRkJhVUlzUlVGQlJTeEpRVUZKTzB0QlEzaENPME5CUTBZc1EwRkJRenRCUVVWWExGRkJRVUVzVjBGQlZ5eEhRVUZITzBsQlEzcENMRkZCUVZFc1JVRkJSVHRSUVVOU0xGRkJRVkVzUlVGQlJTeGpRVUZqTzFGQlEzaENMRTlCUVU4c1JVRkJSU3gxUjBGQmRVYzdTMEZEYWtnN1NVRkRSQ3hSUVVGUkxFVkJRVVU3VVVGRFVpeFJRVUZSTEVWQlFVVXNZMEZCWXp0UlFVTjRRaXhQUVVGUExFVkJRVVVzT0VOQlFUaERPMHRCUTNoRU8wbEJRMFFzVVVGQlVTeEZRVUZGTzFGQlExSXNVVUZCVVN4RlFVRkZMR05CUVdNN1VVRkRlRUlzVDBGQlR5eEZRVUZGTEN0RFFVRXJRenRMUVVONlJEdEpRVU5FTEZGQlFWRXNSVUZCUlR0UlFVTlNMRkZCUVZFc1JVRkJSU3hqUVVGak8xRkJRM2hDTEU5QlFVOHNSVUZCUlN3NFFrRkJPRUk3UzBGRGVFTTdTVUZEUkN4UlFVRlJMRVZCUVVVN1VVRkRVaXhSUVVGUkxFVkJRVVVzWTBGQll6dFJRVU40UWl4UFFVRlBMRVZCUVVVc01FSkJRVEJDTzB0QlEzQkRPMGxCUTBRc1VVRkJVU3hGUVVGRk8xRkJRMUlzVVVGQlVTeEZRVUZGTEZWQlFWVTdVVUZEY0VJc1QwRkJUeXhGUVVGRkxHZENRVUZuUWp0TFFVTXhRanRKUVVORUxGRkJRVkVzUlVGQlJUdFJRVU5TTEZGQlFWRXNSVUZCUlN4VlFVRlZPMUZCUTNCQ0xFOUJRVThzUlVGQlJTeHhRa0ZCY1VJN1MwRkRMMEk3U1VGRFJDeFJRVUZSTEVWQlFVVTdVVUZEVWl4UlFVRlJMRVZCUVVVc1ZVRkJWVHRSUVVOd1FpeFBRVUZQTEVWQlFVVXNkVUpCUVhWQ08wdEJRMnBETzBsQlEwUXNVVUZCVVN4RlFVRkZPMUZCUTFJc1VVRkJVU3hGUVVGRkxGVkJRVlU3VVVGRGNFSXNUMEZCVHl4RlFVRkZMSFZDUVVGMVFqdExRVU5xUXp0SlFVTkVMRkZCUVZFc1JVRkJSVHRSUVVOU0xGRkJRVkVzUlVGQlJTeFZRVUZWTzFGQlEzQkNMRTlCUVU4c1JVRkJSU3gxUWtGQmRVSTdTMEZEYWtNN1NVRkRSQ3hSUVVGUkxFVkJRVVU3VVVGRFVpeFJRVUZSTEVWQlFVVXNWVUZCVlR0UlFVTndRaXhQUVVGUExFVkJRVVVzZVVKQlFYbENPMHRCUTI1RE8wbEJRMFFzVFVGQlRTeEZRVUZGTzFGQlEwNHNVVUZCVVN4RlFVRkZMRlZCUVZVN1VVRkRjRUlzVDBGQlR5eEZRVUZGTERSQ1FVRTBRanRMUVVOMFF6dEpRVU5FTEUxQlFVMHNSVUZCUlR0UlFVTk9MRkZCUVZFc1JVRkJSU3hWUVVGVk8xRkJRM0JDTEU5QlFVOHNSVUZCUlN3d1JVRkJNRVU3UzBGRGNFWTdTVUZEUkN4TlFVRk5MRVZCUVVVN1VVRkRUaXhSUVVGUkxFVkJRVVVzVlVGQlZUdFJRVU53UWl4UFFVRlBMRVZCUVVVc2EwVkJRV3RGTzB0QlF6VkZPMGxCUTBRc1RVRkJUU3hGUVVGRk8xRkJRMDRzVVVGQlVTeEZRVUZGTEZWQlFWVTdVVUZEY0VJc1QwRkJUeXhGUVVGRkxDdERRVUVyUXp0TFFVTjZSRHRKUVVORUxFMUJRVTBzUlVGQlJUdFJRVU5PTEZGQlFWRXNSVUZCUlN4VlFVRlZPMUZCUTNCQ0xFOUJRVThzUlVGQlJTeDNSRUZCZDBRN1MwRkRiRVU3UTBGRFJpeERRVUZESW4wPSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ldGhFcnJvcnMgPSB2b2lkIDA7XG5jb25zdCBjbGFzc2VzXzEgPSByZXF1aXJlKFwiLi9jbGFzc2VzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuY29uc3QgZXJyb3JfY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9lcnJvci1jb25zdGFudHNcIik7XG5leHBvcnRzLmV0aEVycm9ycyA9IHtcbiAgICBycGM6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBhIEpTT04gUlBDIDIuMCBQYXJzZSAoLTMyNzAwKSBlcnJvci5cbiAgICAgICAgICovXG4gICAgICAgIHBhcnNlOiAoYXJnKSA9PiBnZXRFdGhKc29uUnBjRXJyb3IoZXJyb3JfY29uc3RhbnRzXzEuZXJyb3JDb2Rlcy5ycGMucGFyc2UsIGFyZyksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYSBKU09OIFJQQyAyLjAgSW52YWxpZCBSZXF1ZXN0ICgtMzI2MDApIGVycm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgaW52YWxpZFJlcXVlc3Q6IChhcmcpID0+IGdldEV0aEpzb25ScGNFcnJvcihlcnJvcl9jb25zdGFudHNfMS5lcnJvckNvZGVzLnJwYy5pbnZhbGlkUmVxdWVzdCwgYXJnKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBhIEpTT04gUlBDIDIuMCBJbnZhbGlkIFBhcmFtcyAoLTMyNjAyKSBlcnJvci5cbiAgICAgICAgICovXG4gICAgICAgIGludmFsaWRQYXJhbXM6IChhcmcpID0+IGdldEV0aEpzb25ScGNFcnJvcihlcnJvcl9jb25zdGFudHNfMS5lcnJvckNvZGVzLnJwYy5pbnZhbGlkUGFyYW1zLCBhcmcpLFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGEgSlNPTiBSUEMgMi4wIE1ldGhvZCBOb3QgRm91bmQgKC0zMjYwMSkgZXJyb3IuXG4gICAgICAgICAqL1xuICAgICAgICBtZXRob2ROb3RGb3VuZDogKGFyZykgPT4gZ2V0RXRoSnNvblJwY0Vycm9yKGVycm9yX2NvbnN0YW50c18xLmVycm9yQ29kZXMucnBjLm1ldGhvZE5vdEZvdW5kLCBhcmcpLFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGEgSlNPTiBSUEMgMi4wIEludGVybmFsICgtMzI2MDMpIGVycm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgaW50ZXJuYWw6IChhcmcpID0+IGdldEV0aEpzb25ScGNFcnJvcihlcnJvcl9jb25zdGFudHNfMS5lcnJvckNvZGVzLnJwYy5pbnRlcm5hbCwgYXJnKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBhIEpTT04gUlBDIDIuMCBTZXJ2ZXIgZXJyb3IuXG4gICAgICAgICAqIFBlcm1pdHMgaW50ZWdlciBlcnJvciBjb2RlcyBpbiB0aGUgWyAtMzIwOTkgPD0gLTMyMDA1IF0gcmFuZ2UuXG4gICAgICAgICAqIENvZGVzIC0zMjAwMCB0aHJvdWdoIC0zMjAwNCBhcmUgcmVzZXJ2ZWQgYnkgRUlQLTE0NzQuXG4gICAgICAgICAqL1xuICAgICAgICBzZXJ2ZXI6IChvcHRzKSA9PiB7XG4gICAgICAgICAgICBpZiAoIW9wdHMgfHwgdHlwZW9mIG9wdHMgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkob3B0cykpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V0aGVyZXVtIFJQQyBTZXJ2ZXIgZXJyb3JzIG11c3QgcHJvdmlkZSBzaW5nbGUgb2JqZWN0IGFyZ3VtZW50LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBjb2RlIH0gPSBvcHRzO1xuICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGNvZGUpIHx8IGNvZGUgPiAtMzIwMDUgfHwgY29kZSA8IC0zMjA5OSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignXCJjb2RlXCIgbXVzdCBiZSBhbiBpbnRlZ2VyIHN1Y2ggdGhhdDogLTMyMDk5IDw9IGNvZGUgPD0gLTMyMDA1Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZ2V0RXRoSnNvblJwY0Vycm9yKGNvZGUsIG9wdHMpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGFuIEV0aGVyZXVtIEpTT04gUlBDIEludmFsaWQgSW5wdXQgKC0zMjAwMCkgZXJyb3IuXG4gICAgICAgICAqL1xuICAgICAgICBpbnZhbGlkSW5wdXQ6IChhcmcpID0+IGdldEV0aEpzb25ScGNFcnJvcihlcnJvcl9jb25zdGFudHNfMS5lcnJvckNvZGVzLnJwYy5pbnZhbGlkSW5wdXQsIGFyZyksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYW4gRXRoZXJldW0gSlNPTiBSUEMgUmVzb3VyY2UgTm90IEZvdW5kICgtMzIwMDEpIGVycm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVzb3VyY2VOb3RGb3VuZDogKGFyZykgPT4gZ2V0RXRoSnNvblJwY0Vycm9yKGVycm9yX2NvbnN0YW50c18xLmVycm9yQ29kZXMucnBjLnJlc291cmNlTm90Rm91bmQsIGFyZyksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYW4gRXRoZXJldW0gSlNPTiBSUEMgUmVzb3VyY2UgVW5hdmFpbGFibGUgKC0zMjAwMikgZXJyb3IuXG4gICAgICAgICAqL1xuICAgICAgICByZXNvdXJjZVVuYXZhaWxhYmxlOiAoYXJnKSA9PiBnZXRFdGhKc29uUnBjRXJyb3IoZXJyb3JfY29uc3RhbnRzXzEuZXJyb3JDb2Rlcy5ycGMucmVzb3VyY2VVbmF2YWlsYWJsZSwgYXJnKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBhbiBFdGhlcmV1bSBKU09OIFJQQyBUcmFuc2FjdGlvbiBSZWplY3RlZCAoLTMyMDAzKSBlcnJvci5cbiAgICAgICAgICovXG4gICAgICAgIHRyYW5zYWN0aW9uUmVqZWN0ZWQ6IChhcmcpID0+IGdldEV0aEpzb25ScGNFcnJvcihlcnJvcl9jb25zdGFudHNfMS5lcnJvckNvZGVzLnJwYy50cmFuc2FjdGlvblJlamVjdGVkLCBhcmcpLFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGFuIEV0aGVyZXVtIEpTT04gUlBDIE1ldGhvZCBOb3QgU3VwcG9ydGVkICgtMzIwMDQpIGVycm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgbWV0aG9kTm90U3VwcG9ydGVkOiAoYXJnKSA9PiBnZXRFdGhKc29uUnBjRXJyb3IoZXJyb3JfY29uc3RhbnRzXzEuZXJyb3JDb2Rlcy5ycGMubWV0aG9kTm90U3VwcG9ydGVkLCBhcmcpLFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGFuIEV0aGVyZXVtIEpTT04gUlBDIExpbWl0IEV4Y2VlZGVkICgtMzIwMDUpIGVycm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgbGltaXRFeGNlZWRlZDogKGFyZykgPT4gZ2V0RXRoSnNvblJwY0Vycm9yKGVycm9yX2NvbnN0YW50c18xLmVycm9yQ29kZXMucnBjLmxpbWl0RXhjZWVkZWQsIGFyZyksXG4gICAgfSxcbiAgICBwcm92aWRlcjoge1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGFuIEV0aGVyZXVtIFByb3ZpZGVyIFVzZXIgUmVqZWN0ZWQgUmVxdWVzdCAoNDAwMSkgZXJyb3IuXG4gICAgICAgICAqL1xuICAgICAgICB1c2VyUmVqZWN0ZWRSZXF1ZXN0OiAoYXJnKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RXRoUHJvdmlkZXJFcnJvcihlcnJvcl9jb25zdGFudHNfMS5lcnJvckNvZGVzLnByb3ZpZGVyLnVzZXJSZWplY3RlZFJlcXVlc3QsIGFyZyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYW4gRXRoZXJldW0gUHJvdmlkZXIgVW5hdXRob3JpemVkICg0MTAwKSBlcnJvci5cbiAgICAgICAgICovXG4gICAgICAgIHVuYXV0aG9yaXplZDogKGFyZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGdldEV0aFByb3ZpZGVyRXJyb3IoZXJyb3JfY29uc3RhbnRzXzEuZXJyb3JDb2Rlcy5wcm92aWRlci51bmF1dGhvcml6ZWQsIGFyZyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYW4gRXRoZXJldW0gUHJvdmlkZXIgVW5zdXBwb3J0ZWQgTWV0aG9kICg0MjAwKSBlcnJvci5cbiAgICAgICAgICovXG4gICAgICAgIHVuc3VwcG9ydGVkTWV0aG9kOiAoYXJnKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RXRoUHJvdmlkZXJFcnJvcihlcnJvcl9jb25zdGFudHNfMS5lcnJvckNvZGVzLnByb3ZpZGVyLnVuc3VwcG9ydGVkTWV0aG9kLCBhcmcpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGFuIEV0aGVyZXVtIFByb3ZpZGVyIE5vdCBDb25uZWN0ZWQgKDQ5MDApIGVycm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgZGlzY29ubmVjdGVkOiAoYXJnKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RXRoUHJvdmlkZXJFcnJvcihlcnJvcl9jb25zdGFudHNfMS5lcnJvckNvZGVzLnByb3ZpZGVyLmRpc2Nvbm5lY3RlZCwgYXJnKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBhbiBFdGhlcmV1bSBQcm92aWRlciBDaGFpbiBOb3QgQ29ubmVjdGVkICg0OTAxKSBlcnJvci5cbiAgICAgICAgICovXG4gICAgICAgIGNoYWluRGlzY29ubmVjdGVkOiAoYXJnKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RXRoUHJvdmlkZXJFcnJvcihlcnJvcl9jb25zdGFudHNfMS5lcnJvckNvZGVzLnByb3ZpZGVyLmNoYWluRGlzY29ubmVjdGVkLCBhcmcpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGEgY3VzdG9tIEV0aGVyZXVtIFByb3ZpZGVyIGVycm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgY3VzdG9tOiAob3B0cykgPT4ge1xuICAgICAgICAgICAgaWYgKCFvcHRzIHx8IHR5cGVvZiBvcHRzICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG9wdHMpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFdGhlcmV1bSBQcm92aWRlciBjdXN0b20gZXJyb3JzIG11c3QgcHJvdmlkZSBzaW5nbGUgb2JqZWN0IGFyZ3VtZW50LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBjb2RlLCBtZXNzYWdlLCBkYXRhIH0gPSBvcHRzO1xuICAgICAgICAgICAgaWYgKCFtZXNzYWdlIHx8IHR5cGVvZiBtZXNzYWdlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignXCJtZXNzYWdlXCIgbXVzdCBiZSBhIG5vbmVtcHR5IHN0cmluZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBjbGFzc2VzXzEuRXRoZXJldW1Qcm92aWRlckVycm9yKGNvZGUsIG1lc3NhZ2UsIGRhdGEpO1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuLy8gSW50ZXJuYWxcbmZ1bmN0aW9uIGdldEV0aEpzb25ScGNFcnJvcihjb2RlLCBhcmcpIHtcbiAgICBjb25zdCBbbWVzc2FnZSwgZGF0YV0gPSBwYXJzZU9wdHMoYXJnKTtcbiAgICByZXR1cm4gbmV3IGNsYXNzZXNfMS5FdGhlcmV1bVJwY0Vycm9yKGNvZGUsIG1lc3NhZ2UgfHwgdXRpbHNfMS5nZXRNZXNzYWdlRnJvbUNvZGUoY29kZSksIGRhdGEpO1xufVxuZnVuY3Rpb24gZ2V0RXRoUHJvdmlkZXJFcnJvcihjb2RlLCBhcmcpIHtcbiAgICBjb25zdCBbbWVzc2FnZSwgZGF0YV0gPSBwYXJzZU9wdHMoYXJnKTtcbiAgICByZXR1cm4gbmV3IGNsYXNzZXNfMS5FdGhlcmV1bVByb3ZpZGVyRXJyb3IoY29kZSwgbWVzc2FnZSB8fCB1dGlsc18xLmdldE1lc3NhZ2VGcm9tQ29kZShjb2RlKSwgZGF0YSk7XG59XG5mdW5jdGlvbiBwYXJzZU9wdHMoYXJnKSB7XG4gICAgaWYgKGFyZykge1xuICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBbYXJnXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShhcmcpKSB7XG4gICAgICAgICAgICBjb25zdCB7IG1lc3NhZ2UsIGRhdGEgfSA9IGFyZztcbiAgICAgICAgICAgIGlmIChtZXNzYWdlICYmIHR5cGVvZiBtZXNzYWdlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBzcGVjaWZ5IHN0cmluZyBtZXNzYWdlLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFttZXNzYWdlIHx8IHVuZGVmaW5lZCwgZGF0YV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFtdO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWlhKeWIzSnpMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZjM0pqTDJWeWNtOXljeTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkJRU3gxUTBGQmIwVTdRVUZEY0VVc2JVTkJRVFpETzBGQlF6ZERMSFZFUVVFclF6dEJRV1ZzUXl4UlFVRkJMRk5CUVZNc1IwRkJSenRKUVVOMlFpeEhRVUZITEVWQlFVVTdVVUZGU0RzN1YwRkZSenRSUVVOSUxFdEJRVXNzUlVGQlJTeERRVUZKTEVkQlFXOUNMRVZCUVVVc1JVRkJSU3hEUVVGRExHdENRVUZyUWl4RFFVTndSQ3cwUWtGQlZTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRVZCUVVVc1IwRkJSeXhEUVVNeFFqdFJRVVZFT3p0WFFVVkhPMUZCUTBnc1kwRkJZeXhGUVVGRkxFTkJRVWtzUjBGQmIwSXNSVUZCUlN4RlFVRkZMRU5CUVVNc2EwSkJRV3RDTEVOQlF6ZEVMRFJDUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEdOQlFXTXNSVUZCUlN4SFFVRkhMRU5CUTI1RE8xRkJSVVE3TzFkQlJVYzdVVUZEU0N4aFFVRmhMRVZCUVVVc1EwRkJTU3hIUVVGdlFpeEZRVUZGTEVWQlFVVXNRMEZCUXl4clFrRkJhMElzUTBGRE5VUXNORUpCUVZVc1EwRkJReXhIUVVGSExFTkJRVU1zWVVGQllTeEZRVUZGTEVkQlFVY3NRMEZEYkVNN1VVRkZSRHM3VjBGRlJ6dFJRVU5JTEdOQlFXTXNSVUZCUlN4RFFVRkpMRWRCUVc5Q0xFVkJRVVVzUlVGQlJTeERRVUZETEd0Q1FVRnJRaXhEUVVNM1JDdzBRa0ZCVlN4RFFVRkRMRWRCUVVjc1EwRkJReXhqUVVGakxFVkJRVVVzUjBGQlJ5eERRVU51UXp0UlFVVkVPenRYUVVWSE8xRkJRMGdzVVVGQlVTeEZRVUZGTEVOQlFVa3NSMEZCYjBJc1JVRkJSU3hGUVVGRkxFTkJRVU1zYTBKQlFXdENMRU5CUTNaRUxEUkNRVUZWTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1JVRkJSU3hIUVVGSExFTkJRemRDTzFGQlJVUTdPenM3VjBGSlJ6dFJRVU5JTEUxQlFVMHNSVUZCUlN4RFFVRkpMRWxCUVRKQ0xFVkJRVVVzUlVGQlJUdFpRVU42UXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hKUVVGSkxFOUJRVThzU1VGQlNTeExRVUZMTEZGQlFWRXNTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTzJkQ1FVTTFSQ3hOUVVGTkxFbEJRVWtzUzBGQlN5eERRVUZETEdsRlFVRnBSU3hEUVVGRExFTkJRVU03WVVGRGNFWTdXVUZEUkN4TlFVRk5MRVZCUVVVc1NVRkJTU3hGUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETzFsQlEzUkNMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRWxCUVVrc1IwRkJSeXhEUVVGRExFdEJRVXNzU1VGQlNTeEpRVUZKTEVkQlFVY3NRMEZCUXl4TFFVRkxMRVZCUVVVN1owSkJRemRFTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUTJJc0swUkJRU3RFTEVOQlEyaEZMRU5CUVVNN1lVRkRTRHRaUVVORUxFOUJRVThzYTBKQlFXdENMRU5CUVVNc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzFGQlEzaERMRU5CUVVNN1VVRkZSRHM3VjBGRlJ6dFJRVU5JTEZsQlFWa3NSVUZCUlN4RFFVRkpMRWRCUVc5Q0xFVkJRVVVzUlVGQlJTeERRVUZETEd0Q1FVRnJRaXhEUVVNelJDdzBRa0ZCVlN4RFFVRkRMRWRCUVVjc1EwRkJReXhaUVVGWkxFVkJRVVVzUjBGQlJ5eERRVU5xUXp0UlFVVkVPenRYUVVWSE8xRkJRMGdzWjBKQlFXZENMRVZCUVVVc1EwRkJTU3hIUVVGdlFpeEZRVUZGTEVWQlFVVXNRMEZCUXl4clFrRkJhMElzUTBGREwwUXNORUpCUVZVc1EwRkJReXhIUVVGSExFTkJRVU1zWjBKQlFXZENMRVZCUVVVc1IwRkJSeXhEUVVOeVF6dFJRVVZFT3p0WFFVVkhPMUZCUTBnc2JVSkJRVzFDTEVWQlFVVXNRMEZCU1N4SFFVRnZRaXhGUVVGRkxFVkJRVVVzUTBGQlF5eHJRa0ZCYTBJc1EwRkRiRVVzTkVKQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc2JVSkJRVzFDTEVWQlFVVXNSMEZCUnl4RFFVTjRRenRSUVVWRU96dFhRVVZITzFGQlEwZ3NiVUpCUVcxQ0xFVkJRVVVzUTBGQlNTeEhRVUZ2UWl4RlFVRkZMRVZCUVVVc1EwRkJReXhyUWtGQmEwSXNRMEZEYkVVc05FSkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNiVUpCUVcxQ0xFVkJRVVVzUjBGQlJ5eERRVU40UXp0UlFVVkVPenRYUVVWSE8xRkJRMGdzYTBKQlFXdENMRVZCUVVVc1EwRkJTU3hIUVVGdlFpeEZRVUZGTEVWQlFVVXNRMEZCUXl4clFrRkJhMElzUTBGRGFrVXNORUpCUVZVc1EwRkJReXhIUVVGSExFTkJRVU1zYTBKQlFXdENMRVZCUVVVc1IwRkJSeXhEUVVOMlF6dFJRVVZFT3p0WFFVVkhPMUZCUTBnc1lVRkJZU3hGUVVGRkxFTkJRVWtzUjBGQmIwSXNSVUZCUlN4RlFVRkZMRU5CUVVNc2EwSkJRV3RDTEVOQlF6VkVMRFJDUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEdGQlFXRXNSVUZCUlN4SFFVRkhMRU5CUTJ4RE8wdEJRMFk3U1VGRlJDeFJRVUZSTEVWQlFVVTdVVUZGVWpzN1YwRkZSenRSUVVOSUxHMUNRVUZ0UWl4RlFVRkZMRU5CUVVrc1IwRkJiMElzUlVGQlJTeEZRVUZGTzFsQlF5OURMRTlCUVU4c2JVSkJRVzFDTEVOQlEzaENMRFJDUVVGVkxFTkJRVU1zVVVGQlVTeERRVUZETEcxQ1FVRnRRaXhGUVVGRkxFZEJRVWNzUTBGRE4wTXNRMEZCUXp0UlFVTktMRU5CUVVNN1VVRkZSRHM3VjBGRlJ6dFJRVU5JTEZsQlFWa3NSVUZCUlN4RFFVRkpMRWRCUVc5Q0xFVkJRVVVzUlVGQlJUdFpRVU40UXl4UFFVRlBMRzFDUVVGdFFpeERRVU40UWl3MFFrRkJWU3hEUVVGRExGRkJRVkVzUTBGQlF5eFpRVUZaTEVWQlFVVXNSMEZCUnl4RFFVTjBReXhEUVVGRE8xRkJRMG9zUTBGQlF6dFJRVVZFT3p0WFFVVkhPMUZCUTBnc2FVSkJRV2xDTEVWQlFVVXNRMEZCU1N4SFFVRnZRaXhGUVVGRkxFVkJRVVU3V1VGRE4wTXNUMEZCVHl4dFFrRkJiVUlzUTBGRGVFSXNORUpCUVZVc1EwRkJReXhSUVVGUkxFTkJRVU1zYVVKQlFXbENMRVZCUVVVc1IwRkJSeXhEUVVNelF5eERRVUZETzFGQlEwb3NRMEZCUXp0UlFVVkVPenRYUVVWSE8xRkJRMGdzV1VGQldTeEZRVUZGTEVOQlFVa3NSMEZCYjBJc1JVRkJSU3hGUVVGRk8xbEJRM2hETEU5QlFVOHNiVUpCUVcxQ0xFTkJRM2hDTERSQ1FVRlZMRU5CUVVNc1VVRkJVU3hEUVVGRExGbEJRVmtzUlVGQlJTeEhRVUZITEVOQlEzUkRMRU5CUVVNN1VVRkRTaXhEUVVGRE8xRkJSVVE3TzFkQlJVYzdVVUZEU0N4cFFrRkJhVUlzUlVGQlJTeERRVUZKTEVkQlFXOUNMRVZCUVVVc1JVRkJSVHRaUVVNM1F5eFBRVUZQTEcxQ1FVRnRRaXhEUVVONFFpdzBRa0ZCVlN4RFFVRkRMRkZCUVZFc1EwRkJReXhwUWtGQmFVSXNSVUZCUlN4SFFVRkhMRU5CUXpORExFTkJRVU03VVVGRFNpeERRVUZETzFGQlJVUTdPMWRCUlVjN1VVRkRTQ3hOUVVGTkxFVkJRVVVzUTBGQlNTeEpRVUV5UWl4RlFVRkZMRVZCUVVVN1dVRkRla01zU1VGQlNTeERRVUZETEVsQlFVa3NTVUZCU1N4UFFVRlBMRWxCUVVrc1MwRkJTeXhSUVVGUkxFbEJRVWtzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRuUWtGRE5VUXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkJReXh6UlVGQmMwVXNRMEZCUXl4RFFVRkRPMkZCUTNwR08xbEJRMFFzVFVGQlRTeEZRVUZGTEVsQlFVa3NSVUZCUlN4UFFVRlBMRVZCUVVVc1NVRkJTU3hGUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETzFsQlEzSkRMRWxCUVVrc1EwRkJReXhQUVVGUExFbEJRVWtzVDBGQlR5eFBRVUZQTEV0QlFVc3NVVUZCVVN4RlFVRkZPMmRDUVVNelF5eE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVTmlMSEZEUVVGeFF5eERRVU4wUXl4RFFVRkRPMkZCUTBnN1dVRkRSQ3hQUVVGUExFbEJRVWtzSzBKQlFYRkNMRU5CUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTjRSQ3hEUVVGRE8wdEJRMFk3UTBGRFJpeERRVUZETzBGQlJVWXNWMEZCVnp0QlFVVllMRk5CUVZNc2EwSkJRV3RDTEVOQlFVa3NTVUZCV1N4RlFVRkZMRWRCUVc5Q08wbEJReTlFTEUxQlFVMHNRMEZCUXl4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRExFZEJRVWNzVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUTNaRExFOUJRVThzU1VGQlNTd3dRa0ZCWjBJc1EwRkRla0lzU1VGQlNTeEZRVU5LTEU5QlFVOHNTVUZCU1N3d1FrRkJhMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZEYmtNc1NVRkJTU3hEUVVOTUxFTkJRVU03UVVGRFNpeERRVUZETzBGQlJVUXNVMEZCVXl4dFFrRkJiVUlzUTBGQlNTeEpRVUZaTEVWQlFVVXNSMEZCYjBJN1NVRkRhRVVzVFVGQlRTeERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1IwRkJSeXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZEZGtNc1QwRkJUeXhKUVVGSkxDdENRVUZ4UWl4RFFVTTVRaXhKUVVGSkxFVkJRMG9zVDBGQlR5eEpRVUZKTERCQ1FVRnJRaXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVU51UXl4SlFVRkpMRU5CUTB3c1EwRkJRenRCUVVOS0xFTkJRVU03UVVGRlJDeFRRVUZUTEZOQlFWTXNRMEZCU1N4SFFVRnZRanRKUVVONFF5eEpRVUZKTEVkQlFVY3NSVUZCUlR0UlFVTlFMRWxCUVVrc1QwRkJUeXhIUVVGSExFdEJRVXNzVVVGQlVTeEZRVUZGTzFsQlF6TkNMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dFRRVU5rTzJGQlFVMHNTVUZCU1N4UFFVRlBMRWRCUVVjc1MwRkJTeXhSUVVGUkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRk8xbEJRM3BFTEUxQlFVMHNSVUZCUlN4UFFVRlBMRVZCUVVVc1NVRkJTU3hGUVVGRkxFZEJRVWNzUjBGQlJ5eERRVUZETzFsQlJUbENMRWxCUVVrc1QwRkJUeXhKUVVGSkxFOUJRVThzVDBGQlR5eExRVUZMTEZGQlFWRXNSVUZCUlR0blFrRkRNVU1zVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUXl3NFFrRkJPRUlzUTBGQlF5eERRVUZETzJGQlEycEVPMWxCUTBRc1QwRkJUeXhEUVVGRExFOUJRVThzU1VGQlNTeFRRVUZUTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1UwRkRja003UzBGRFJqdEpRVU5FTEU5QlFVOHNSVUZCUlN4RFFVRkRPMEZCUTFvc1EwRkJReUo5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldE1lc3NhZ2VGcm9tQ29kZSA9IGV4cG9ydHMuc2VyaWFsaXplRXJyb3IgPSBleHBvcnRzLkV0aGVyZXVtUHJvdmlkZXJFcnJvciA9IGV4cG9ydHMuRXRoZXJldW1ScGNFcnJvciA9IGV4cG9ydHMuZXRoRXJyb3JzID0gZXhwb3J0cy5lcnJvckNvZGVzID0gdm9pZCAwO1xuY29uc3QgY2xhc3Nlc18xID0gcmVxdWlyZShcIi4vY2xhc3Nlc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkV0aGVyZXVtUnBjRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNsYXNzZXNfMS5FdGhlcmV1bVJwY0Vycm9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXRoZXJldW1Qcm92aWRlckVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjbGFzc2VzXzEuRXRoZXJldW1Qcm92aWRlckVycm9yOyB9IH0pO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2VyaWFsaXplRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzEuc2VyaWFsaXplRXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRNZXNzYWdlRnJvbUNvZGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzEuZ2V0TWVzc2FnZUZyb21Db2RlOyB9IH0pO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJldGhFcnJvcnNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yc18xLmV0aEVycm9yczsgfSB9KTtcbmNvbnN0IGVycm9yX2NvbnN0YW50c18xID0gcmVxdWlyZShcIi4vZXJyb3ItY29uc3RhbnRzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXJyb3JDb2Rlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXJyb3JfY29uc3RhbnRzXzEuZXJyb3JDb2RlczsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTl6Y21NdmFXNWtaWGd1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN08wRkJRVUVzZFVOQlFXOUZPMEZCVld4RkxHbEhRVlpQTERCQ1FVRm5RaXhQUVZWUU8wRkJRMmhDTEhOSFFWaDVRaXdyUWtGQmNVSXNUMEZYZWtJN1FVRldka0lzYlVOQlJXbENPMEZCVTJZc0swWkJWa0VzYzBKQlFXTXNUMEZWUVR0QlFVTmtMRzFIUVZoblFpd3dRa0ZCYTBJc1QwRlhhRUk3UVVGVWNFSXNjVU5CUVhGRE8wRkJTMjVETERCR1FVeFBMR3RDUVVGVExFOUJTMUE3UVVGS1dDeDFSRUZCSzBNN1FVRkhOME1zTWtaQlNFOHNORUpCUVZVc1QwRkhVQ0o5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNlcmlhbGl6ZUVycm9yID0gZXhwb3J0cy5pc1ZhbGlkQ29kZSA9IGV4cG9ydHMuZ2V0TWVzc2FnZUZyb21Db2RlID0gZXhwb3J0cy5KU09OX1JQQ19TRVJWRVJfRVJST1JfTUVTU0FHRSA9IHZvaWQgMDtcbmNvbnN0IGVycm9yX2NvbnN0YW50c18xID0gcmVxdWlyZShcIi4vZXJyb3ItY29uc3RhbnRzXCIpO1xuY29uc3QgY2xhc3Nlc18xID0gcmVxdWlyZShcIi4vY2xhc3Nlc1wiKTtcbmNvbnN0IEZBTExCQUNLX0VSUk9SX0NPREUgPSBlcnJvcl9jb25zdGFudHNfMS5lcnJvckNvZGVzLnJwYy5pbnRlcm5hbDtcbmNvbnN0IEZBTExCQUNLX01FU1NBR0UgPSAnVW5zcGVjaWZpZWQgZXJyb3IgbWVzc2FnZS4gVGhpcyBpcyBhIGJ1ZywgcGxlYXNlIHJlcG9ydCBpdC4nO1xuY29uc3QgRkFMTEJBQ0tfRVJST1IgPSB7XG4gICAgY29kZTogRkFMTEJBQ0tfRVJST1JfQ09ERSxcbiAgICBtZXNzYWdlOiBnZXRNZXNzYWdlRnJvbUNvZGUoRkFMTEJBQ0tfRVJST1JfQ09ERSksXG59O1xuZXhwb3J0cy5KU09OX1JQQ19TRVJWRVJfRVJST1JfTUVTU0FHRSA9ICdVbnNwZWNpZmllZCBzZXJ2ZXIgZXJyb3IuJztcbi8qKlxuICogR2V0cyB0aGUgbWVzc2FnZSBmb3IgYSBnaXZlbiBjb2RlLCBvciBhIGZhbGxiYWNrIG1lc3NhZ2UgaWYgdGhlIGNvZGUgaGFzXG4gKiBubyBjb3JyZXNwb25kaW5nIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIGdldE1lc3NhZ2VGcm9tQ29kZShjb2RlLCBmYWxsYmFja01lc3NhZ2UgPSBGQUxMQkFDS19NRVNTQUdFKSB7XG4gICAgaWYgKE51bWJlci5pc0ludGVnZXIoY29kZSkpIHtcbiAgICAgICAgY29uc3QgY29kZVN0cmluZyA9IGNvZGUudG9TdHJpbmcoKTtcbiAgICAgICAgaWYgKGhhc0tleShlcnJvcl9jb25zdGFudHNfMS5lcnJvclZhbHVlcywgY29kZVN0cmluZykpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcl9jb25zdGFudHNfMS5lcnJvclZhbHVlc1tjb2RlU3RyaW5nXS5tZXNzYWdlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0pzb25ScGNTZXJ2ZXJFcnJvcihjb2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGV4cG9ydHMuSlNPTl9SUENfU0VSVkVSX0VSUk9SX01FU1NBR0U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbGxiYWNrTWVzc2FnZTtcbn1cbmV4cG9ydHMuZ2V0TWVzc2FnZUZyb21Db2RlID0gZ2V0TWVzc2FnZUZyb21Db2RlO1xuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGdpdmVuIGNvZGUgaXMgdmFsaWQuXG4gKiBBIGNvZGUgaXMgb25seSB2YWxpZCBpZiBpdCBoYXMgYSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQ29kZShjb2RlKSB7XG4gICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGNvZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgY29kZVN0cmluZyA9IGNvZGUudG9TdHJpbmcoKTtcbiAgICBpZiAoZXJyb3JfY29uc3RhbnRzXzEuZXJyb3JWYWx1ZXNbY29kZVN0cmluZ10pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChpc0pzb25ScGNTZXJ2ZXJFcnJvcihjb2RlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0cy5pc1ZhbGlkQ29kZSA9IGlzVmFsaWRDb2RlO1xuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBlcnJvciB0byBhbiBFdGhlcmV1bSBKU09OIFJQQy1jb21wYXRpYmxlIGVycm9yIG9iamVjdC5cbiAqIE1lcmVseSBjb3BpZXMgdGhlIGdpdmVuIGVycm9yJ3MgdmFsdWVzIGlmIGl0IGlzIGFscmVhZHkgY29tcGF0aWJsZS5cbiAqIElmIHRoZSBnaXZlbiBlcnJvciBpcyBub3QgZnVsbHkgY29tcGF0aWJsZSwgaXQgd2lsbCBiZSBwcmVzZXJ2ZWQgb24gdGhlXG4gKiByZXR1cm5lZCBvYmplY3QncyBkYXRhLm9yaWdpbmFsRXJyb3IgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIHNlcmlhbGl6ZUVycm9yKGVycm9yLCB7IGZhbGxiYWNrRXJyb3IgPSBGQUxMQkFDS19FUlJPUiwgc2hvdWxkSW5jbHVkZVN0YWNrID0gZmFsc2UsIH0gPSB7fSkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgaWYgKCFmYWxsYmFja0Vycm9yIHx8XG4gICAgICAgICFOdW1iZXIuaXNJbnRlZ2VyKGZhbGxiYWNrRXJyb3IuY29kZSkgfHxcbiAgICAgICAgdHlwZW9mIGZhbGxiYWNrRXJyb3IubWVzc2FnZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHByb3ZpZGUgZmFsbGJhY2sgZXJyb3Igd2l0aCBpbnRlZ2VyIG51bWJlciBjb2RlIGFuZCBzdHJpbmcgbWVzc2FnZS4nKTtcbiAgICB9XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgY2xhc3Nlc18xLkV0aGVyZXVtUnBjRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yLnNlcmlhbGl6ZSgpO1xuICAgIH1cbiAgICBjb25zdCBzZXJpYWxpemVkID0ge307XG4gICAgaWYgKGVycm9yICYmXG4gICAgICAgIHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgIUFycmF5LmlzQXJyYXkoZXJyb3IpICYmXG4gICAgICAgIGhhc0tleShlcnJvciwgJ2NvZGUnKSAmJlxuICAgICAgICBpc1ZhbGlkQ29kZShlcnJvci5jb2RlKSkge1xuICAgICAgICBjb25zdCBfZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgc2VyaWFsaXplZC5jb2RlID0gX2Vycm9yLmNvZGU7XG4gICAgICAgIGlmIChfZXJyb3IubWVzc2FnZSAmJiB0eXBlb2YgX2Vycm9yLm1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBzZXJpYWxpemVkLm1lc3NhZ2UgPSBfZXJyb3IubWVzc2FnZTtcbiAgICAgICAgICAgIGlmIChoYXNLZXkoX2Vycm9yLCAnZGF0YScpKSB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZC5kYXRhID0gX2Vycm9yLmRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXJpYWxpemVkLm1lc3NhZ2UgPSBnZXRNZXNzYWdlRnJvbUNvZGUoc2VyaWFsaXplZC5jb2RlKTtcbiAgICAgICAgICAgIHNlcmlhbGl6ZWQuZGF0YSA9IHsgb3JpZ2luYWxFcnJvcjogYXNzaWduT3JpZ2luYWxFcnJvcihlcnJvcikgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc2VyaWFsaXplZC5jb2RlID0gZmFsbGJhY2tFcnJvci5jb2RlO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gKF9hID0gZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tZXNzYWdlO1xuICAgICAgICBzZXJpYWxpemVkLm1lc3NhZ2UgPSAobWVzc2FnZSAmJiB0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgID8gbWVzc2FnZVxuICAgICAgICAgICAgOiBmYWxsYmFja0Vycm9yLm1lc3NhZ2UpO1xuICAgICAgICBzZXJpYWxpemVkLmRhdGEgPSB7IG9yaWdpbmFsRXJyb3I6IGFzc2lnbk9yaWdpbmFsRXJyb3IoZXJyb3IpIH07XG4gICAgfVxuICAgIGNvbnN0IHN0YWNrID0gKF9iID0gZXJyb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zdGFjaztcbiAgICBpZiAoc2hvdWxkSW5jbHVkZVN0YWNrICYmIGVycm9yICYmIHN0YWNrICYmIHR5cGVvZiBzdGFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc2VyaWFsaXplZC5zdGFjayA9IHN0YWNrO1xuICAgIH1cbiAgICByZXR1cm4gc2VyaWFsaXplZDtcbn1cbmV4cG9ydHMuc2VyaWFsaXplRXJyb3IgPSBzZXJpYWxpemVFcnJvcjtcbi8vIEludGVybmFsXG5mdW5jdGlvbiBpc0pzb25ScGNTZXJ2ZXJFcnJvcihjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPj0gLTMyMDk5ICYmIGNvZGUgPD0gLTMyMDAwO1xufVxuZnVuY3Rpb24gYXNzaWduT3JpZ2luYWxFcnJvcihlcnJvcikge1xuICAgIGlmIChlcnJvciAmJiB0eXBlb2YgZXJyb3IgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGVycm9yKSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZXJyb3IpO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3I7XG59XG5mdW5jdGlvbiBoYXNLZXkob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRYUnBiSE11YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTl6Y21NdmRYUnBiSE11ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN08wRkJRVUVzZFVSQlFUUkVPMEZCUXpWRUxIVkRRVUY1UlR0QlFVVjZSU3hOUVVGTkxHMUNRVUZ0UWl4SFFVRkhMRFJDUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUXp0QlFVTndSQ3hOUVVGTkxHZENRVUZuUWl4SFFVRkhMRFpFUVVFMlJDeERRVUZETzBGQlEzWkdMRTFCUVUwc1kwRkJZeXhIUVVFclFqdEpRVU5xUkN4SlFVRkpMRVZCUVVVc2JVSkJRVzFDTzBsQlEzcENMRTlCUVU4c1JVRkJSU3hyUWtGQmEwSXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF6dERRVU5xUkN4RFFVRkRPMEZCUlZjc1VVRkJRU3cyUWtGQk5rSXNSMEZCUnl3eVFrRkJNa0lzUTBGQlF6dEJRVWw2UlRzN08wZEJSMGM3UVVGRFNDeFRRVUZuUWl4clFrRkJhMElzUTBGRGFFTXNTVUZCV1N4RlFVTmFMR3RDUVVFd1FpeG5Ra0ZCWjBJN1NVRkZNVU1zU1VGQlNTeE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8xRkJRekZDTEUxQlFVMHNWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dFJRVVZ1UXl4SlFVRkpMRTFCUVUwc1EwRkJReXcyUWtGQlZ5eEZRVUZGTEZWQlFWVXNRMEZCUXl4RlFVRkZPMWxCUTI1RExFOUJRVThzTmtKQlFWY3NRMEZCUXl4VlFVRXlRaXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETzFOQlEzcEVPMUZCUTBRc1NVRkJTU3h2UWtGQmIwSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRaUVVNNVFpeFBRVUZQTEhGRFFVRTJRaXhEUVVGRE8xTkJRM1JETzB0QlEwWTdTVUZEUkN4UFFVRlBMR1ZCUVdVc1EwRkJRenRCUVVONlFpeERRVUZETzBGQlprUXNaMFJCWlVNN1FVRkZSRHM3TzBkQlIwYzdRVUZEU0N4VFFVRm5RaXhYUVVGWExFTkJRVU1zU1VGQldUdEpRVU4wUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlR0UlFVTXpRaXhQUVVGUExFdEJRVXNzUTBGQlF6dExRVU5rTzBsQlJVUXNUVUZCVFN4VlFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETzBsQlEyNURMRWxCUVVrc05rSkJRVmNzUTBGQlF5eFZRVUV5UWl4RFFVRkRMRVZCUVVVN1VVRkROVU1zVDBGQlR5eEpRVUZKTEVOQlFVTTdTMEZEWWp0SlFVVkVMRWxCUVVrc2IwSkJRVzlDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVN1VVRkRPVUlzVDBGQlR5eEpRVUZKTEVOQlFVTTdTMEZEWWp0SlFVTkVMRTlCUVU4c1MwRkJTeXhEUVVGRE8wRkJRMllzUTBGQlF6dEJRV1JFTEd0RFFXTkRPMEZCUlVRN096czdPMGRCUzBjN1FVRkRTQ3hUUVVGblFpeGpRVUZqTEVOQlF6VkNMRXRCUVdNc1JVRkRaQ3hGUVVORkxHRkJRV0VzUjBGQlJ5eGpRVUZqTEVWQlF6bENMR3RDUVVGclFpeEhRVUZITEV0QlFVc3NSMEZETTBJc1IwRkJSeXhGUVVGRk96dEpRVWRPTEVsQlEwVXNRMEZCUXl4aFFVRmhPMUZCUTJRc1EwRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEdGQlFXRXNRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRja01zVDBGQlR5eGhRVUZoTEVOQlFVTXNUMEZCVHl4TFFVRkxMRkZCUVZFc1JVRkRla003VVVGRFFTeE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVTmlMREJGUVVFd1JTeERRVU16UlN4RFFVRkRPMHRCUTBnN1NVRkZSQ3hKUVVGSkxFdEJRVXNzV1VGQldTd3dRa0ZCWjBJc1JVRkJSVHRSUVVOeVF5eFBRVUZQTEV0QlFVc3NRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJRenRMUVVNeFFqdEpRVVZFTEUxQlFVMHNWVUZCVlN4SFFVRjNReXhGUVVGRkxFTkJRVU03U1VGRk0wUXNTVUZEUlN4TFFVRkxPMUZCUTB3c1QwRkJUeXhMUVVGTExFdEJRVXNzVVVGQlVUdFJRVU42UWl4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETzFGQlEzSkNMRTFCUVUwc1EwRkJReXhMUVVGblF5eEZRVUZGTEUxQlFVMHNRMEZCUXp0UlFVTm9SQ3hYUVVGWExFTkJRVVVzUzBGQmIwTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkRka1E3VVVGRFFTeE5RVUZOTEUxQlFVMHNSMEZCUnl4TFFVRTBReXhEUVVGRE8xRkJRelZFTEZWQlFWVXNRMEZCUXl4SlFVRkpMRWRCUVVjc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF6dFJRVVU1UWl4SlFVRkpMRTFCUVUwc1EwRkJReXhQUVVGUExFbEJRVWtzVDBGQlR5eE5RVUZOTEVOQlFVTXNUMEZCVHl4TFFVRkxMRkZCUVZFc1JVRkJSVHRaUVVONFJDeFZRVUZWTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU03V1VGRmNFTXNTVUZCU1N4TlFVRk5MRU5CUVVNc1RVRkJUU3hGUVVGRkxFMUJRVTBzUTBGQlF5eEZRVUZGTzJkQ1FVTXhRaXhWUVVGVkxFTkJRVU1zU1VGQlNTeEhRVUZITEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNN1lVRkRMMEk3VTBGRFJqdGhRVUZOTzFsQlEwd3NWVUZCVlN4RFFVRkRMRTlCUVU4c1IwRkJSeXhyUWtGQmEwSXNRMEZEY0VNc1ZVRkJlVU1zUTBGQlF5eEpRVUZKTEVOQlEyaEVMRU5CUVVNN1dVRkZSaXhWUVVGVkxFTkJRVU1zU1VGQlNTeEhRVUZITEVWQlFVVXNZVUZCWVN4RlFVRkZMRzFDUVVGdFFpeERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZMRU5CUVVNN1UwRkRha1U3UzBGRFJqdFRRVUZOTzFGQlEwd3NWVUZCVlN4RFFVRkRMRWxCUVVrc1IwRkJSeXhoUVVGaExFTkJRVU1zU1VGQlNTeERRVUZETzFGQlJYSkRMRTFCUVUwc1QwRkJUeXhUUVVGSkxFdEJRV0VzTUVOQlFVVXNUMEZCVHl4RFFVRkRPMUZCUlhoRExGVkJRVlVzUTBGQlF5eFBRVUZQTEVkQlFVY3NRMEZEYmtJc1QwRkJUeXhKUVVGSkxFOUJRVThzVDBGQlR5eExRVUZMTEZGQlFWRTdXVUZEY0VNc1EwRkJReXhEUVVGRExFOUJRVTg3V1VGRFZDeERRVUZETEVOQlFVTXNZVUZCWVN4RFFVRkRMRTlCUVU4c1EwRkRNVUlzUTBGQlF6dFJRVU5HTEZWQlFWVXNRMEZCUXl4SlFVRkpMRWRCUVVjc1JVRkJSU3hoUVVGaExFVkJRVVVzYlVKQlFXMUNMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVVzUTBGQlF6dExRVU5xUlR0SlFVVkVMRTFCUVUwc1MwRkJTeXhUUVVGSkxFdEJRV0VzTUVOQlFVVXNTMEZCU3l4RFFVRkRPMGxCUlhCRExFbEJRVWtzYTBKQlFXdENMRWxCUVVrc1MwRkJTeXhKUVVGSkxFdEJRVXNzU1VGQlNTeFBRVUZQTEV0QlFVc3NTMEZCU3l4UlFVRlJMRVZCUVVVN1VVRkRja1VzVlVGQlZTeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1MwRkRNVUk3U1VGRFJDeFBRVUZQTEZWQlFYZERMRU5CUVVNN1FVRkRiRVFzUTBGQlF6dEJRV3hGUkN4M1EwRnJSVU03UVVGRlJDeFhRVUZYTzBGQlJWZ3NVMEZCVXl4dlFrRkJiMElzUTBGQlF5eEpRVUZaTzBsQlEzaERMRTlCUVU4c1NVRkJTU3hKUVVGSkxFTkJRVU1zUzBGQlN5eEpRVUZKTEVsQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenRCUVVNeFF5eERRVUZETzBGQlJVUXNVMEZCVXl4dFFrRkJiVUlzUTBGQlF5eExRVUZqTzBsQlEzcERMRWxCUVVrc1MwRkJTeXhKUVVGSkxFOUJRVThzUzBGQlN5eExRVUZMTEZGQlFWRXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVTdVVUZETDBRc1QwRkJUeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRMUVVOcVF6dEpRVU5FTEU5QlFVOHNTMEZCU3l4RFFVRkRPMEZCUTJZc1EwRkJRenRCUVVWRUxGTkJRVk1zVFVGQlRTeERRVUZETEVkQlFUUkNMRVZCUVVVc1IwRkJWenRKUVVOMlJDeFBRVUZQTEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRlRVFzUTBGQlF5SjkiLCJtb2R1bGUuZXhwb3J0cyA9IHN0cmluZ2lmeVxuc3RyaW5naWZ5LmRlZmF1bHQgPSBzdHJpbmdpZnlcbnN0cmluZ2lmeS5zdGFibGUgPSBkZXRlcm1pbmlzdGljU3RyaW5naWZ5XG5zdHJpbmdpZnkuc3RhYmxlU3RyaW5naWZ5ID0gZGV0ZXJtaW5pc3RpY1N0cmluZ2lmeVxuXG52YXIgYXJyID0gW11cbnZhciByZXBsYWNlclN0YWNrID0gW11cblxuLy8gUmVndWxhciBzdHJpbmdpZnlcbmZ1bmN0aW9uIHN0cmluZ2lmeSAob2JqLCByZXBsYWNlciwgc3BhY2VyKSB7XG4gIGRlY2lyYyhvYmosICcnLCBbXSwgdW5kZWZpbmVkKVxuICB2YXIgcmVzXG4gIGlmIChyZXBsYWNlclN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgIHJlcyA9IEpTT04uc3RyaW5naWZ5KG9iaiwgcmVwbGFjZXIsIHNwYWNlcilcbiAgfSBlbHNlIHtcbiAgICByZXMgPSBKU09OLnN0cmluZ2lmeShvYmosIHJlcGxhY2VHZXR0ZXJWYWx1ZXMocmVwbGFjZXIpLCBzcGFjZXIpXG4gIH1cbiAgd2hpbGUgKGFyci5sZW5ndGggIT09IDApIHtcbiAgICB2YXIgcGFydCA9IGFyci5wb3AoKVxuICAgIGlmIChwYXJ0Lmxlbmd0aCA9PT0gNCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHBhcnRbMF0sIHBhcnRbMV0sIHBhcnRbM10pXG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnRbMF1bcGFydFsxXV0gPSBwYXJ0WzJdXG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cbmZ1bmN0aW9uIGRlY2lyYyAodmFsLCBrLCBzdGFjaywgcGFyZW50KSB7XG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwgIT09IG51bGwpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChzdGFja1tpXSA9PT0gdmFsKSB7XG4gICAgICAgIHZhciBwcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHBhcmVudCwgaylcbiAgICAgICAgaWYgKHByb3BlcnR5RGVzY3JpcHRvci5nZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChwcm9wZXJ0eURlc2NyaXB0b3IuY29uZmlndXJhYmxlKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocGFyZW50LCBrLCB7IHZhbHVlOiAnW0NpcmN1bGFyXScgfSlcbiAgICAgICAgICAgIGFyci5wdXNoKFtwYXJlbnQsIGssIHZhbCwgcHJvcGVydHlEZXNjcmlwdG9yXSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVwbGFjZXJTdGFjay5wdXNoKFt2YWwsIGtdKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJlbnRba10gPSAnW0NpcmN1bGFyXSdcbiAgICAgICAgICBhcnIucHVzaChbcGFyZW50LCBrLCB2YWxdKVxuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICBzdGFjay5wdXNoKHZhbClcbiAgICAvLyBPcHRpbWl6ZSBmb3IgQXJyYXlzLiBCaWcgYXJyYXlzIGNvdWxkIGtpbGwgdGhlIHBlcmZvcm1hbmNlIG90aGVyd2lzZSFcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRlY2lyYyh2YWxbaV0sIGksIHN0YWNrLCB2YWwpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsKVxuICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbaV1cbiAgICAgICAgZGVjaXJjKHZhbFtrZXldLCBrZXksIHN0YWNrLCB2YWwpXG4gICAgICB9XG4gICAgfVxuICAgIHN0YWNrLnBvcCgpXG4gIH1cbn1cblxuLy8gU3RhYmxlLXN0cmluZ2lmeVxuZnVuY3Rpb24gY29tcGFyZUZ1bmN0aW9uIChhLCBiKSB7XG4gIGlmIChhIDwgYikge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChhID4gYikge1xuICAgIHJldHVybiAxXG4gIH1cbiAgcmV0dXJuIDBcbn1cblxuZnVuY3Rpb24gZGV0ZXJtaW5pc3RpY1N0cmluZ2lmeSAob2JqLCByZXBsYWNlciwgc3BhY2VyKSB7XG4gIHZhciB0bXAgPSBkZXRlcm1pbmlzdGljRGVjaXJjKG9iaiwgJycsIFtdLCB1bmRlZmluZWQpIHx8IG9ialxuICB2YXIgcmVzXG4gIGlmIChyZXBsYWNlclN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgIHJlcyA9IEpTT04uc3RyaW5naWZ5KHRtcCwgcmVwbGFjZXIsIHNwYWNlcilcbiAgfSBlbHNlIHtcbiAgICByZXMgPSBKU09OLnN0cmluZ2lmeSh0bXAsIHJlcGxhY2VHZXR0ZXJWYWx1ZXMocmVwbGFjZXIpLCBzcGFjZXIpXG4gIH1cbiAgd2hpbGUgKGFyci5sZW5ndGggIT09IDApIHtcbiAgICB2YXIgcGFydCA9IGFyci5wb3AoKVxuICAgIGlmIChwYXJ0Lmxlbmd0aCA9PT0gNCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHBhcnRbMF0sIHBhcnRbMV0sIHBhcnRbM10pXG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnRbMF1bcGFydFsxXV0gPSBwYXJ0WzJdXG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZGV0ZXJtaW5pc3RpY0RlY2lyYyAodmFsLCBrLCBzdGFjaywgcGFyZW50KSB7XG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwgIT09IG51bGwpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChzdGFja1tpXSA9PT0gdmFsKSB7XG4gICAgICAgIHZhciBwcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHBhcmVudCwgaylcbiAgICAgICAgaWYgKHByb3BlcnR5RGVzY3JpcHRvci5nZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChwcm9wZXJ0eURlc2NyaXB0b3IuY29uZmlndXJhYmxlKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocGFyZW50LCBrLCB7IHZhbHVlOiAnW0NpcmN1bGFyXScgfSlcbiAgICAgICAgICAgIGFyci5wdXNoKFtwYXJlbnQsIGssIHZhbCwgcHJvcGVydHlEZXNjcmlwdG9yXSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVwbGFjZXJTdGFjay5wdXNoKFt2YWwsIGtdKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJlbnRba10gPSAnW0NpcmN1bGFyXSdcbiAgICAgICAgICBhcnIucHVzaChbcGFyZW50LCBrLCB2YWxdKVxuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbC50b0pTT04gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzdGFjay5wdXNoKHZhbClcbiAgICAvLyBPcHRpbWl6ZSBmb3IgQXJyYXlzLiBCaWcgYXJyYXlzIGNvdWxkIGtpbGwgdGhlIHBlcmZvcm1hbmNlIG90aGVyd2lzZSFcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRldGVybWluaXN0aWNEZWNpcmModmFsW2ldLCBpLCBzdGFjaywgdmFsKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDcmVhdGUgYSB0ZW1wb3Jhcnkgb2JqZWN0IGluIHRoZSByZXF1aXJlZCB3YXlcbiAgICAgIHZhciB0bXAgPSB7fVxuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpLnNvcnQoY29tcGFyZUZ1bmN0aW9uKVxuICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbaV1cbiAgICAgICAgZGV0ZXJtaW5pc3RpY0RlY2lyYyh2YWxba2V5XSwga2V5LCBzdGFjaywgdmFsKVxuICAgICAgICB0bXBba2V5XSA9IHZhbFtrZXldXG4gICAgICB9XG4gICAgICBpZiAocGFyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYXJyLnB1c2goW3BhcmVudCwgaywgdmFsXSlcbiAgICAgICAgcGFyZW50W2tdID0gdG1wXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdG1wXG4gICAgICB9XG4gICAgfVxuICAgIHN0YWNrLnBvcCgpXG4gIH1cbn1cblxuLy8gd3JhcHMgcmVwbGFjZXIgZnVuY3Rpb24gdG8gaGFuZGxlIHZhbHVlcyB3ZSBjb3VsZG4ndCByZXBsYWNlXG4vLyBhbmQgbWFyayB0aGVtIGFzIFtDaXJjdWxhcl1cbmZ1bmN0aW9uIHJlcGxhY2VHZXR0ZXJWYWx1ZXMgKHJlcGxhY2VyKSB7XG4gIHJlcGxhY2VyID0gcmVwbGFjZXIgIT09IHVuZGVmaW5lZCA/IHJlcGxhY2VyIDogZnVuY3Rpb24gKGssIHYpIHsgcmV0dXJuIHYgfVxuICByZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsKSB7XG4gICAgaWYgKHJlcGxhY2VyU3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXBsYWNlclN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gcmVwbGFjZXJTdGFja1tpXVxuICAgICAgICBpZiAocGFydFsxXSA9PT0ga2V5ICYmIHBhcnRbMF0gPT09IHZhbCkge1xuICAgICAgICAgIHZhbCA9ICdbQ2lyY3VsYXJdJ1xuICAgICAgICAgIHJlcGxhY2VyU3RhY2suc3BsaWNlKGksIDEpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbClcbiAgfVxufVxuIiwiLyohIGllZWU3NTQuIEJTRC0zLUNsYXVzZSBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbmV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSnNvblJwY0VuZ2luZSA9IHZvaWQgMDtcbmNvbnN0IHNhZmVfZXZlbnRfZW1pdHRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJAbWV0YW1hc2svc2FmZS1ldmVudC1lbWl0dGVyXCIpKTtcbmNvbnN0IGV0aF9ycGNfZXJyb3JzXzEgPSByZXF1aXJlKFwiZXRoLXJwYy1lcnJvcnNcIik7XG4vKipcbiAqIEEgSlNPTi1SUEMgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvY2Vzc29yLlxuICogR2l2ZSBpdCBhIHN0YWNrIG9mIG1pZGRsZXdhcmUsIHBhc3MgaXQgcmVxdWVzdHMsIGFuZCBnZXQgYmFjayByZXNwb25zZXMuXG4gKi9cbmNsYXNzIEpzb25ScGNFbmdpbmUgZXh0ZW5kcyBzYWZlX2V2ZW50X2VtaXR0ZXJfMS5kZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fbWlkZGxld2FyZSA9IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBtaWRkbGV3YXJlIGZ1bmN0aW9uIHRvIHRoZSBlbmdpbmUncyBtaWRkbGV3YXJlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1pZGRsZXdhcmUgLSBUaGUgbWlkZGxld2FyZSBmdW5jdGlvbiB0byBhZGQuXG4gICAgICovXG4gICAgcHVzaChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHRoaXMuX21pZGRsZXdhcmUucHVzaChtaWRkbGV3YXJlKTtcbiAgICB9XG4gICAgaGFuZGxlKHJlcSwgY2IpIHtcbiAgICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcImNhbGxiYWNrXCIgbXVzdCBiZSBhIGZ1bmN0aW9uIGlmIHByb3ZpZGVkLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlcSkpIHtcbiAgICAgICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVCYXRjaChyZXEsIGNiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVCYXRjaChyZXEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZShyZXEsIGNiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZUhhbmRsZShyZXEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoaXMgZW5naW5lIGFzIGEgbWlkZGxld2FyZSBmdW5jdGlvbiB0aGF0IGNhbiBiZSBwdXNoZWQgdG8gb3RoZXJcbiAgICAgKiBlbmdpbmVzLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhpcyBlbmdpbmUgYXMgYSBtaWRkbGV3YXJlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGFzTWlkZGxld2FyZSgpIHtcbiAgICAgICAgcmV0dXJuIGFzeW5jIChyZXEsIHJlcywgbmV4dCwgZW5kKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IFttaWRkbGV3YXJlRXJyb3IsIGlzQ29tcGxldGUsIHJldHVybkhhbmRsZXJzLF0gPSBhd2FpdCBKc29uUnBjRW5naW5lLl9ydW5BbGxNaWRkbGV3YXJlKHJlcSwgcmVzLCB0aGlzLl9taWRkbGV3YXJlKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBKc29uUnBjRW5naW5lLl9ydW5SZXR1cm5IYW5kbGVycyhyZXR1cm5IYW5kbGVycyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmQobWlkZGxld2FyZUVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHQoYXN5bmMgKGhhbmRsZXJDYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgSnNvblJwY0VuZ2luZS5fcnVuUmV0dXJuSGFuZGxlcnMocmV0dXJuSGFuZGxlcnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXJDYWxsYmFjayhlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXJDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVuZChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIF9oYW5kbGVCYXRjaChyZXFzLCBjYikge1xuICAgICAgICAvLyBUaGUgb3JkZXIgaGVyZSBpcyBpbXBvcnRhbnRcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIDIuIFdhaXQgZm9yIGFsbCByZXF1ZXN0cyB0byBmaW5pc2gsIG9yIHRocm93IG9uIHNvbWUga2luZCBvZiBmYXRhbFxuICAgICAgICAgICAgLy8gZXJyb3JcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlcyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICAgICAgLy8gMS4gQmVnaW4gZXhlY3V0aW5nIGVhY2ggcmVxdWVzdCBpbiB0aGUgb3JkZXIgcmVjZWl2ZWRcbiAgICAgICAgICAgIHJlcXMubWFwKHRoaXMuX3Byb21pc2VIYW5kbGUuYmluZCh0aGlzKSkpO1xuICAgICAgICAgICAgLy8gMy4gUmV0dXJuIGJhdGNoIHJlc3BvbnNlXG4gICAgICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2IobnVsbCwgcmVzcG9uc2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZXM7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlLXdyYXBwZWQgX2hhbmRsZS5cbiAgICAgKi9cbiAgICBfcHJvbWlzZUhhbmRsZShyZXEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGUocmVxLCAoX2VyciwgcmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gVGhlcmUgd2lsbCBhbHdheXMgYmUgYSByZXNwb25zZSwgYW5kIGl0IHdpbGwgYWx3YXlzIGhhdmUgYW55IGVycm9yXG4gICAgICAgICAgICAgICAgLy8gdGhhdCBpcyBjYXVnaHQgYW5kIHByb3BhZ2F0ZWQuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbnN1cmVzIHRoYXQgdGhlIHJlcXVlc3Qgb2JqZWN0IGlzIHZhbGlkLCBwcm9jZXNzZXMgaXQsIGFuZCBwYXNzZXMgYW55XG4gICAgICogZXJyb3IgYW5kIHRoZSByZXNwb25zZSBvYmplY3QgdG8gdGhlIGdpdmVuIGNhbGxiYWNrLlxuICAgICAqXG4gICAgICogRG9lcyBub3QgcmVqZWN0LlxuICAgICAqL1xuICAgIGFzeW5jIF9oYW5kbGUoY2FsbGVyUmVxLCBjYikge1xuICAgICAgICBpZiAoIWNhbGxlclJlcSB8fFxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShjYWxsZXJSZXEpIHx8XG4gICAgICAgICAgICB0eXBlb2YgY2FsbGVyUmVxICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgZXRoX3JwY19lcnJvcnNfMS5FdGhlcmV1bVJwY0Vycm9yKGV0aF9ycGNfZXJyb3JzXzEuZXJyb3JDb2Rlcy5ycGMuaW52YWxpZFJlcXVlc3QsIGBSZXF1ZXN0cyBtdXN0IGJlIHBsYWluIG9iamVjdHMuIFJlY2VpdmVkOiAke3R5cGVvZiBjYWxsZXJSZXF9YCwgeyByZXF1ZXN0OiBjYWxsZXJSZXEgfSk7XG4gICAgICAgICAgICByZXR1cm4gY2IoZXJyb3IsIHsgaWQ6IHVuZGVmaW5lZCwganNvbnJwYzogJzIuMCcsIGVycm9yIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGVyUmVxLm1ldGhvZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IGV0aF9ycGNfZXJyb3JzXzEuRXRoZXJldW1ScGNFcnJvcihldGhfcnBjX2Vycm9yc18xLmVycm9yQ29kZXMucnBjLmludmFsaWRSZXF1ZXN0LCBgTXVzdCBzcGVjaWZ5IGEgc3RyaW5nIG1ldGhvZC4gUmVjZWl2ZWQ6ICR7dHlwZW9mIGNhbGxlclJlcS5tZXRob2R9YCwgeyByZXF1ZXN0OiBjYWxsZXJSZXEgfSk7XG4gICAgICAgICAgICByZXR1cm4gY2IoZXJyb3IsIHsgaWQ6IGNhbGxlclJlcS5pZCwganNvbnJwYzogJzIuMCcsIGVycm9yIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcSA9IE9iamVjdC5hc3NpZ24oe30sIGNhbGxlclJlcSk7XG4gICAgICAgIGNvbnN0IHJlcyA9IHtcbiAgICAgICAgICAgIGlkOiByZXEuaWQsXG4gICAgICAgICAgICBqc29ucnBjOiByZXEuanNvbnJwYyxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGVycm9yID0gbnVsbDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3Byb2Nlc3NSZXF1ZXN0KHJlcSwgcmVzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX2Vycm9yKSB7XG4gICAgICAgICAgICAvLyBBIHJlcXVlc3QgaGFuZGxlciBlcnJvciwgYSByZS10aHJvd24gbWlkZGxld2FyZSBlcnJvciwgb3Igc29tZXRoaW5nXG4gICAgICAgICAgICAvLyB1bmV4cGVjdGVkLlxuICAgICAgICAgICAgZXJyb3IgPSBfZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBFbnN1cmUgbm8gcmVzdWx0IGlzIHByZXNlbnQgb24gYW4gZXJyb3JlZCByZXNwb25zZVxuICAgICAgICAgICAgZGVsZXRlIHJlcy5yZXN1bHQ7XG4gICAgICAgICAgICBpZiAoIXJlcy5lcnJvcikge1xuICAgICAgICAgICAgICAgIHJlcy5lcnJvciA9IGV0aF9ycGNfZXJyb3JzXzEuc2VyaWFsaXplRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYihlcnJvciwgcmVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yIHRoZSBnaXZlbiByZXF1ZXN0IGFuZCByZXNwb25zZSwgcnVucyBhbGwgbWlkZGxld2FyZSBhbmQgdGhlaXIgcmV0dXJuXG4gICAgICogaGFuZGxlcnMsIGlmIGFueSwgYW5kIGVuc3VyZXMgdGhhdCBpbnRlcm5hbCByZXF1ZXN0IHByb2Nlc3Npbmcgc2VtYW50aWNzXG4gICAgICogYXJlIHNhdGlzZmllZC5cbiAgICAgKi9cbiAgICBhc3luYyBfcHJvY2Vzc1JlcXVlc3QocmVxLCByZXMpIHtcbiAgICAgICAgY29uc3QgW2Vycm9yLCBpc0NvbXBsZXRlLCByZXR1cm5IYW5kbGVycyxdID0gYXdhaXQgSnNvblJwY0VuZ2luZS5fcnVuQWxsTWlkZGxld2FyZShyZXEsIHJlcywgdGhpcy5fbWlkZGxld2FyZSk7XG4gICAgICAgIC8vIFRocm93IGlmIFwiZW5kXCIgd2FzIG5vdCBjYWxsZWQsIG9yIGlmIHRoZSByZXNwb25zZSBoYXMgbmVpdGhlciBhIHJlc3VsdFxuICAgICAgICAvLyBub3IgYW4gZXJyb3IuXG4gICAgICAgIEpzb25ScGNFbmdpbmUuX2NoZWNrRm9yQ29tcGxldGlvbihyZXEsIHJlcywgaXNDb21wbGV0ZSk7XG4gICAgICAgIC8vIFRoZSByZXR1cm4gaGFuZGxlcnMgc2hvdWxkIHJ1biBldmVuIGlmIGFuIGVycm9yIHdhcyBlbmNvdW50ZXJlZCBkdXJpbmdcbiAgICAgICAgLy8gbWlkZGxld2FyZSBwcm9jZXNzaW5nLlxuICAgICAgICBhd2FpdCBKc29uUnBjRW5naW5lLl9ydW5SZXR1cm5IYW5kbGVycyhyZXR1cm5IYW5kbGVycyk7XG4gICAgICAgIC8vIE5vdyB3ZSByZS10aHJvdyB0aGUgbWlkZGxld2FyZSBwcm9jZXNzaW5nIGVycm9yLCBpZiBhbnksIHRvIGNhdGNoIGl0XG4gICAgICAgIC8vIGZ1cnRoZXIgdXAgdGhlIGNhbGwgY2hhaW4uXG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VyaWFsbHkgZXhlY3V0ZXMgdGhlIGdpdmVuIHN0YWNrIG9mIG1pZGRsZXdhcmUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiBhbnkgZXJyb3IgZW5jb3VudGVyZWQgZHVyaW5nIG1pZGRsZXdhcmUgZXhlY3V0aW9uLFxuICAgICAqIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHJlcXVlc3Qgd2FzIGNvbXBsZXRlZCwgYW5kIGFuIGFycmF5IG9mXG4gICAgICogbWlkZGxld2FyZS1kZWZpbmVkIHJldHVybiBoYW5kbGVycy5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgX3J1bkFsbE1pZGRsZXdhcmUocmVxLCByZXMsIG1pZGRsZXdhcmVTdGFjaykge1xuICAgICAgICBjb25zdCByZXR1cm5IYW5kbGVycyA9IFtdO1xuICAgICAgICBsZXQgZXJyb3IgPSBudWxsO1xuICAgICAgICBsZXQgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICAvLyBHbyBkb3duIHN0YWNrIG9mIG1pZGRsZXdhcmUsIGNhbGwgYW5kIGNvbGxlY3Qgb3B0aW9uYWwgcmV0dXJuSGFuZGxlcnNcbiAgICAgICAgZm9yIChjb25zdCBtaWRkbGV3YXJlIG9mIG1pZGRsZXdhcmVTdGFjaykge1xuICAgICAgICAgICAgW2Vycm9yLCBpc0NvbXBsZXRlXSA9IGF3YWl0IEpzb25ScGNFbmdpbmUuX3J1bk1pZGRsZXdhcmUocmVxLCByZXMsIG1pZGRsZXdhcmUsIHJldHVybkhhbmRsZXJzKTtcbiAgICAgICAgICAgIGlmIChpc0NvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtlcnJvciwgaXNDb21wbGV0ZSwgcmV0dXJuSGFuZGxlcnMucmV2ZXJzZSgpXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUnVucyBhbiBpbmRpdmlkdWFsIG1pZGRsZXdhcmUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiBhbnkgZXJyb3IgZW5jb3VudGVyZWQgZHVyaW5nIG1pZGRsZXdhcmUgZXhlY3Rpb24sXG4gICAgICogYW5kIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHJlcXVlc3Qgc2hvdWxkIGVuZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgX3J1bk1pZGRsZXdhcmUocmVxLCByZXMsIG1pZGRsZXdhcmUsIHJldHVybkhhbmRsZXJzKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZW5kID0gKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gZXJyIHx8IHJlcy5lcnJvcjtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLmVycm9yID0gZXRoX3JwY19lcnJvcnNfMS5zZXJpYWxpemVFcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFRydWUgaW5kaWNhdGVzIHRoYXQgdGhlIHJlcXVlc3Qgc2hvdWxkIGVuZFxuICAgICAgICAgICAgICAgIHJlc29sdmUoW2Vycm9yLCB0cnVlXSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgbmV4dCA9IChyZXR1cm5IYW5kbGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcy5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBlbmQocmVzLmVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXR1cm5IYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJldHVybkhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQobmV3IGV0aF9ycGNfZXJyb3JzXzEuRXRoZXJldW1ScGNFcnJvcihldGhfcnBjX2Vycm9yc18xLmVycm9yQ29kZXMucnBjLmludGVybmFsLCBgSnNvblJwY0VuZ2luZTogXCJuZXh0XCIgcmV0dXJuIGhhbmRsZXJzIG11c3QgYmUgZnVuY3Rpb25zLiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFJlY2VpdmVkIFwiJHt0eXBlb2YgcmV0dXJuSGFuZGxlcn1cIiBmb3IgcmVxdWVzdDpcXG4ke2pzb25pZnkocmVxKX1gLCB7IHJlcXVlc3Q6IHJlcSB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5IYW5kbGVycy5wdXNoKHJldHVybkhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEZhbHNlIGluZGljYXRlcyB0aGF0IHRoZSByZXF1ZXN0IHNob3VsZCBub3QgZW5kXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoW251bGwsIGZhbHNlXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbWlkZGxld2FyZShyZXEsIHJlcywgbmV4dCwgZW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGVuZChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXJpYWxseSBleGVjdXRlcyBhcnJheSBvZiByZXR1cm4gaGFuZGxlcnMuIFRoZSByZXF1ZXN0IGFuZCByZXNwb25zZSBhcmVcbiAgICAgKiBhc3N1bWVkIHRvIGJlIGluIHRoZWlyIHNjb3BlLlxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBfcnVuUmV0dXJuSGFuZGxlcnMoaGFuZGxlcnMpIHtcbiAgICAgICAgZm9yIChjb25zdCBoYW5kbGVyIG9mIGhhbmRsZXJzKSB7XG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcigoZXJyKSA9PiAoZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKCkpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRocm93cyBhbiBlcnJvciBpZiB0aGUgcmVzcG9uc2UgaGFzIG5laXRoZXIgYSByZXN1bHQgbm9yIGFuIGVycm9yLCBvciBpZlxuICAgICAqIHRoZSBcImlzQ29tcGxldGVcIiBmbGFnIGlzIGZhbHN5LlxuICAgICAqL1xuICAgIHN0YXRpYyBfY2hlY2tGb3JDb21wbGV0aW9uKHJlcSwgcmVzLCBpc0NvbXBsZXRlKSB7XG4gICAgICAgIGlmICghKCdyZXN1bHQnIGluIHJlcykgJiYgISgnZXJyb3InIGluIHJlcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBldGhfcnBjX2Vycm9yc18xLkV0aGVyZXVtUnBjRXJyb3IoZXRoX3JwY19lcnJvcnNfMS5lcnJvckNvZGVzLnJwYy5pbnRlcm5hbCwgYEpzb25ScGNFbmdpbmU6IFJlc3BvbnNlIGhhcyBubyBlcnJvciBvciByZXN1bHQgZm9yIHJlcXVlc3Q6XFxuJHtqc29uaWZ5KHJlcSl9YCwgeyByZXF1ZXN0OiByZXEgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0NvbXBsZXRlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXRoX3JwY19lcnJvcnNfMS5FdGhlcmV1bVJwY0Vycm9yKGV0aF9ycGNfZXJyb3JzXzEuZXJyb3JDb2Rlcy5ycGMuaW50ZXJuYWwsIGBKc29uUnBjRW5naW5lOiBOb3RoaW5nIGVuZGVkIHJlcXVlc3Q6XFxuJHtqc29uaWZ5KHJlcSl9YCwgeyByZXF1ZXN0OiByZXEgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkpzb25ScGNFbmdpbmUgPSBKc29uUnBjRW5naW5lO1xuZnVuY3Rpb24ganNvbmlmeShyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHJlcXVlc3QsIG51bGwsIDIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pU25OdmJsSndZMFZ1WjJsdVpTNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlLYzI5dVVuQmpSVzVuYVc1bExuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3p0QlFVRkJMSE5HUVVFMFJEdEJRVU0xUkN4dFJFRkJPRVU3UVVGMVJqbEZPenM3UjBGSFJ6dEJRVU5JTEUxQlFXRXNZVUZCWXl4VFFVRlJMRFJDUVVGblFqdEpRVWRxUkR0UlFVTkZMRXRCUVVzc1JVRkJSU3hEUVVGRE8xRkJRMUlzU1VGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4RlFVRkZMRU5CUVVNN1NVRkRlRUlzUTBGQlF6dEpRVVZFT3pzN08wOUJTVWM3U1VGRFNDeEpRVUZKTEVOQlFVOHNWVUZCYlVNN1VVRkROVU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJhVVFzUTBGQlF5eERRVUZETzBsQlF6TkZMRU5CUVVNN1NVRXlRMFFzVFVGQlRTeERRVUZETEVkQlFWa3NSVUZCUlN4RlFVRlJPMUZCUXpOQ0xFbEJRVWtzUlVGQlJTeEpRVUZKTEU5QlFVOHNSVUZCUlN4TFFVRkxMRlZCUVZVc1JVRkJSVHRaUVVOc1F5eE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMRFJEUVVFMFF5eERRVUZETEVOQlFVTTdVMEZETDBRN1VVRkZSQ3hKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVN1dVRkRkRUlzU1VGQlNTeEZRVUZGTEVWQlFVVTdaMEpCUTA0c1QwRkJUeXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVkQlFVY3NSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJRenRoUVVOdVF6dFpRVU5FTEU5QlFVOHNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dFRRVU12UWp0UlFVVkVMRWxCUVVrc1JVRkJSU3hGUVVGRk8xbEJRMDRzVDBGQlR5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVRoQ0xFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdVMEZEZWtRN1VVRkRSQ3hQUVVGUExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNSMEZCT0VJc1EwRkJReXhEUVVGRE8wbEJRemRFTEVOQlFVTTdTVUZGUkRzN096czdUMEZMUnp0SlFVTklMRmxCUVZrN1VVRkRWaXhQUVVGUExFdEJRVXNzUlVGQlJTeEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hIUVVGSExFVkJRVVVzUlVGQlJUdFpRVU51UXl4SlFVRkpPMmRDUVVOR0xFMUJRVTBzUTBGRFNpeGxRVUZsTEVWQlEyWXNWVUZCVlN4RlFVTldMR05CUVdNc1JVRkRaaXhIUVVGSExFMUJRVTBzWVVGQllTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8yZENRVVYwUlN4SlFVRkpMRlZCUVZVc1JVRkJSVHR2UWtGRFpDeE5RVUZOTEdGQlFXRXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXp0dlFrRkRka1FzVDBGQlR5eEhRVUZITEVOQlFVTXNaVUZCTmtNc1EwRkJReXhEUVVGRE8ybENRVU16UkR0blFrRkZSQ3hQUVVGUExFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNaVUZCWlN4RlFVRkZMRVZCUVVVN2IwSkJRM0JETEVsQlFVazdkMEpCUTBZc1RVRkJUU3hoUVVGaExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU03Y1VKQlEzaEVPMjlDUVVGRExFOUJRVThzUzBGQlN5eEZRVUZGTzNkQ1FVTmtMRTlCUVU4c1pVRkJaU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzNGQ1FVTXZRanR2UWtGRFJDeFBRVUZQTEdWQlFXVXNSVUZCUlN4RFFVRkRPMmRDUVVNelFpeERRVUZETEVOQlFVTXNRMEZCUXp0aFFVTktPMWxCUVVNc1QwRkJUeXhMUVVGTExFVkJRVVU3WjBKQlEyUXNUMEZCVHl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03WVVGRGJrSTdVVUZEU0N4RFFVRkRMRU5CUVVNN1NVRkRTaXhEUVVGRE8wbEJhVUpQTEV0QlFVc3NRMEZCUXl4WlFVRlpMRU5CUTNoQ0xFbEJRU3RDTEVWQlF5OUNMRVZCUVhGRk8xRkJSWEpGTERoQ1FVRTRRanRSUVVNNVFpeEpRVUZKTzFsQlEwWXNjVVZCUVhGRk8xbEJRM0pGTEZGQlFWRTdXVUZEVWl4TlFVRk5MRk5CUVZNc1IwRkJSeXhOUVVGTkxFOUJRVThzUTBGQlF5eEhRVUZITzFsQlEycERMSGRFUVVGM1JEdFpRVU40UkN4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRM3BETEVOQlFVTTdXVUZGUml3eVFrRkJNa0k3V1VGRE0wSXNTVUZCU1N4RlFVRkZMRVZCUVVVN1owSkJRMDRzVDBGQlR5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGRE8yRkJRelZDTzFsQlEwUXNUMEZCVHl4VFFVRlRMRU5CUVVNN1UwRkRiRUk3VVVGQlF5eFBRVUZQTEV0QlFVc3NSVUZCUlR0WlFVTmtMRWxCUVVrc1JVRkJSU3hGUVVGRk8yZENRVU5PTEU5QlFVOHNSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8yRkJRMnhDTzFsQlJVUXNUVUZCVFN4TFFVRkxMRU5CUVVNN1UwRkRZanRKUVVOSUxFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTkxMR05CUVdNc1EwRkRjRUlzUjBGQk5FSTdVVUZGTlVJc1QwRkJUeXhKUVVGSkxFOUJRVThzUTBGQlF5eERRVUZETEU5QlFVOHNSVUZCUlN4RlFVRkZPMWxCUXpkQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNc1NVRkJTU3hGUVVGRkxFZEJRVWNzUlVGQlJTeEZRVUZGTzJkQ1FVTTVRaXh4UlVGQmNVVTdaMEpCUTNKRkxHbERRVUZwUXp0blFrRkRha01zVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMWxCUTJZc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFRDeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTk1MRU5CUVVNN1NVRkZSRHM3T3pzN1QwRkxSenRKUVVOTExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlEyNUNMRk5CUVd0RExFVkJRMnhETEVWQlFXZEZPMUZCUldoRkxFbEJRMFVzUTBGQlF5eFRRVUZUTzFsQlExWXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU03V1VGRGVFSXNUMEZCVHl4VFFVRlRMRXRCUVVzc1VVRkJVU3hGUVVNM1FqdFpRVU5CTEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc2FVTkJRV2RDTEVOQlEyaERMREpDUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEdOQlFXTXNSVUZETjBJc05rTkJRVFpETEU5QlFVOHNVMEZCVXl4RlFVRkZMRVZCUXk5RUxFVkJRVVVzVDBGQlR5eEZRVUZGTEZOQlFWTXNSVUZCUlN4RFFVTjJRaXhEUVVGRE8xbEJRMFlzVDBGQlR5eEZRVUZGTEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRkxGTkJRVk1zUlVGQlJTeFBRVUZQTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hEUVVGRExFTkJRVU03VTBGRE5VUTdVVUZGUkN4SlFVRkpMRTlCUVU4c1UwRkJVeXhEUVVGRExFMUJRVTBzUzBGQlN5eFJRVUZSTEVWQlFVVTdXVUZEZUVNc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeHBRMEZCWjBJc1EwRkRhRU1zTWtKQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1kwRkJZeXhGUVVNM1Fpd3lRMEZCTWtNc1QwRkJUeXhUUVVGVExFTkJRVU1zVFVGQlRTeEZRVUZGTEVWQlEzQkZMRVZCUVVVc1QwRkJUeXhGUVVGRkxGTkJRVk1zUlVGQlJTeERRVU4yUWl4RFFVRkRPMWxCUTBZc1QwRkJUeXhGUVVGRkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZMRk5CUVZNc1EwRkJReXhGUVVGRkxFVkJRVVVzVDBGQlR5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1EwRkJReXhEUVVGRE8xTkJReTlFTzFGQlJVUXNUVUZCVFN4SFFVRkhMSEZDUVVGcFF5eFRRVUZUTEVOQlFVVXNRMEZCUXp0UlFVTjBSQ3hOUVVGTkxFZEJRVWNzUjBGQmIwTTdXVUZETTBNc1JVRkJSU3hGUVVGRkxFZEJRVWNzUTBGQlF5eEZRVUZGTzFsQlExWXNUMEZCVHl4RlFVRkZMRWRCUVVjc1EwRkJReXhQUVVGUE8xTkJRM0pDTEVOQlFVTTdVVUZEUml4SlFVRkpMRXRCUVVzc1IwRkJLMElzU1VGQlNTeERRVUZETzFGQlJUZERMRWxCUVVrN1dVRkRSaXhOUVVGTkxFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8xTkJRM1JETzFGQlFVTXNUMEZCVHl4TlFVRk5MRVZCUVVVN1dVRkRaaXh6UlVGQmMwVTdXVUZEZEVVc1kwRkJZenRaUVVOa0xFdEJRVXNzUjBGQlJ5eE5RVUZOTEVOQlFVTTdVMEZEYUVJN1VVRkZSQ3hKUVVGSkxFdEJRVXNzUlVGQlJUdFpRVU5VTEhGRVFVRnhSRHRaUVVOeVJDeFBRVUZQTEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNN1dVRkRiRUlzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRVZCUVVVN1owSkJRMlFzUjBGQlJ5eERRVUZETEV0QlFVc3NSMEZCUnl3clFrRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzJGQlEyNURPMU5CUTBZN1VVRkZSQ3hQUVVGUExFVkJRVVVzUTBGQlF5eExRVUZMTEVWQlFVVXNSMEZCSzBJc1EwRkJReXhEUVVGRE8wbEJRM0JFTEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwc3NTMEZCU3l4RFFVRkRMR1ZCUVdVc1EwRkRNMElzUjBGQk5FSXNSVUZETlVJc1IwRkJiME03VVVGRmNFTXNUVUZCVFN4RFFVTktMRXRCUVVzc1JVRkRUQ3hWUVVGVkxFVkJRMVlzWTBGQll5eEZRVU5tTEVkQlFVY3NUVUZCVFN4aFFVRmhMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdVVUZGZEVVc2VVVkJRWGxGTzFGQlEzcEZMR2RDUVVGblFqdFJRVU5vUWl4aFFVRmhMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hWUVVGVkxFTkJRVU1zUTBGQlF6dFJRVVY0UkN4NVJVRkJlVVU3VVVGRGVrVXNlVUpCUVhsQ08xRkJRM3BDTEUxQlFVMHNZVUZCWVN4RFFVRkRMR3RDUVVGclFpeERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRPMUZCUlhaRUxIVkZRVUYxUlR0UlFVTjJSU3cyUWtGQk5rSTdVVUZETjBJc1NVRkJTU3hMUVVGTExFVkJRVVU3V1VGRFZDeE5RVUZOTEV0QlFVc3NRMEZCUXp0VFFVTmlPMGxCUTBnc1EwRkJRenRKUVVWRU96czdPenM3VDBGTlJ6dEpRVU5MTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTEVOQlEzQkRMRWRCUVRSQ0xFVkJRelZDTEVkQlFXOURMRVZCUTNCRExHVkJRWE5FTzFGQlVYUkVMRTFCUVUwc1kwRkJZeXhIUVVGcFF5eEZRVUZGTEVOQlFVTTdVVUZEZUVRc1NVRkJTU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETzFGQlEycENMRWxCUVVrc1ZVRkJWU3hIUVVGSExFdEJRVXNzUTBGQlF6dFJRVVYyUWl4M1JVRkJkMFU3VVVGRGVFVXNTMEZCU3l4TlFVRk5MRlZCUVZVc1NVRkJTU3hsUVVGbExFVkJRVVU3V1VGRGVFTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1ZVRkJWU3hEUVVGRExFZEJRVWNzVFVGQlRTeGhRVUZoTEVOQlFVTXNZMEZCWXl4RFFVTjBSQ3hIUVVGSExFVkJRMGdzUjBGQlJ5eEZRVU5JTEZWQlFWVXNSVUZEVml4alFVRmpMRU5CUTJZc1EwRkJRenRaUVVOR0xFbEJRVWtzVlVGQlZTeEZRVUZGTzJkQ1FVTmtMRTFCUVUwN1lVRkRVRHRUUVVOR08xRkJRMFFzVDBGQlR5eERRVUZETEV0QlFVc3NSVUZCUlN4VlFVRlZMRVZCUVVVc1kwRkJZeXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEVOQlFVTTdTVUZEZGtRc1EwRkJRenRKUVVWRU96czdPenRQUVV0SE8wbEJRMHNzVFVGQlRTeERRVUZETEdOQlFXTXNRMEZETTBJc1IwRkJORUlzUlVGRE5VSXNSMEZCYjBNc1JVRkRjRU1zVlVGQkswTXNSVUZETDBNc1kwRkJORU03VVVGRk5VTXNUMEZCVHl4SlFVRkpMRTlCUVU4c1EwRkJReXhEUVVGRExFOUJRVThzUlVGQlJTeEZRVUZGTzFsQlF6ZENMRTFCUVUwc1IwRkJSeXhIUVVFMlFpeERRVUZETEVkQlFXRXNSVUZCUlN4RlFVRkZPMmRDUVVOMFJDeE5RVUZOTEV0QlFVc3NSMEZCUnl4SFFVRkhMRWxCUVVrc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF6dG5Ra0ZETDBJc1NVRkJTU3hMUVVGTExFVkJRVVU3YjBKQlExUXNSMEZCUnl4RFFVRkRMRXRCUVVzc1IwRkJSeXdyUWtGQll5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMmxDUVVOdVF6dG5Ra0ZEUkN3MlEwRkJOa003WjBKQlF6ZERMRTlCUVU4c1EwRkJReXhEUVVGRExFdEJRVXNzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNwQ0xFTkJRVU1zUTBGQlF6dFpRVVZHTEUxQlFVMHNTVUZCU1N4SFFVRTRRaXhEUVVOMFF5eGhRVUV3UXl4RlFVTXhReXhGUVVGRk8yZENRVU5HTEVsQlFVa3NSMEZCUnl4RFFVRkRMRXRCUVVzc1JVRkJSVHR2UWtGRFlpeEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8ybENRVU5vUWp0eFFrRkJUVHR2UWtGRFRDeEpRVUZKTEdGQlFXRXNSVUZCUlR0M1FrRkRha0lzU1VGQlNTeFBRVUZQTEdGQlFXRXNTMEZCU3l4VlFVRlZMRVZCUVVVN05FSkJRM1pETEVkQlFVY3NRMEZEUkN4SlFVRkpMR2xEUVVGblFpeERRVU5zUWl3eVFrRkJWU3hEUVVGRExFZEJRVWNzUTBGQlF5eFJRVUZSTEVWQlEzWkNMREpFUVVFeVJEdG5RMEZEZWtRc1lVRkJZU3hQUVVGUExHRkJRV0VzYlVKQlFXMUNMRTlCUVU4c1EwRkRla1FzUjBGQlJ5eERRVU5LTEVWQlFVVXNSVUZEVEN4RlFVRkZMRTlCUVU4c1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGRGFrSXNRMEZEUml4RFFVRkRPM2xDUVVOSU8zZENRVU5FTEdOQlFXTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03Y1VKQlEzQkRPMjlDUVVWRUxHdEVRVUZyUkR0dlFrRkRiRVFzVDBGQlR5eERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03YVVKQlEzaENPMWxCUTBnc1EwRkJReXhEUVVGRE8xbEJSVVlzU1VGQlNUdG5Ra0ZEUml4VlFVRlZMRU5CUVVNc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1lVRkRha003V1VGQlF5eFBRVUZQTEV0QlFVc3NSVUZCUlR0blFrRkRaQ3hIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdZVUZEV2p0UlFVTklMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMHdzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOTExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNhMEpCUVd0Q0xFTkJRM0pETEZGQlFYTkRPMUZCUlhSRExFdEJRVXNzVFVGQlRTeFBRVUZQTEVsQlFVa3NVVUZCVVN4RlFVRkZPMWxCUXpsQ0xFMUJRVTBzU1VGQlNTeFBRVUZQTEVOQlFVTXNRMEZCUXl4UFFVRlBMRVZCUVVVc1RVRkJUU3hGUVVGRkxFVkJRVVU3WjBKQlEzQkRMRTlCUVU4c1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEzQkVMRU5CUVVNc1EwRkJReXhEUVVGRE8xTkJRMG83U1VGRFNDeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMHNzVFVGQlRTeERRVUZETEcxQ1FVRnRRaXhEUVVOb1F5eEhRVUUwUWl4RlFVTTFRaXhIUVVGdlF5eEZRVU53UXl4VlFVRnRRanRSUVVWdVFpeEpRVUZKTEVOQlFVTXNRMEZCUXl4UlFVRlJMRWxCUVVrc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEU5QlFVOHNTVUZCU1N4SFFVRkhMRU5CUVVNc1JVRkJSVHRaUVVNelF5eE5RVUZOTEVsQlFVa3NhVU5CUVdkQ0xFTkJRM2hDTERKQ1FVRlZMRU5CUVVNc1IwRkJSeXhEUVVGRExGRkJRVkVzUlVGRGRrSXNaMFZCUVdkRkxFOUJRVThzUTBGRGNrVXNSMEZCUnl4RFFVTktMRVZCUVVVc1JVRkRTQ3hGUVVGRkxFOUJRVThzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZEYWtJc1EwRkJRenRUUVVOSU8xRkJRMFFzU1VGQlNTeERRVUZETEZWQlFWVXNSVUZCUlR0WlFVTm1MRTFCUVUwc1NVRkJTU3hwUTBGQlowSXNRMEZEZUVJc01rSkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RlFVTjJRaXd3UTBGQk1FTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFVkJRM2hFTEVWQlFVVXNUMEZCVHl4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVOcVFpeERRVUZETzFOQlEwZzdTVUZEU0N4RFFVRkRPME5CUTBZN1FVRnlXVVFzYzBOQmNWbERPMEZCUlVRc1UwRkJVeXhQUVVGUExFTkJRVU1zVDBGQlowTTdTVUZETDBNc1QwRkJUeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRE1VTXNRMEZCUXlKOSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVBc3luY01pZGRsZXdhcmUgPSB2b2lkIDA7XG4vKipcbiAqIEpzb25ScGNFbmdpbmUgb25seSBhY2NlcHRzIGNhbGxiYWNrLWJhc2VkIG1pZGRsZXdhcmUgZGlyZWN0bHkuXG4gKiBjcmVhdGVBc3luY01pZGRsZXdhcmUgZXhpc3RzIHRvIGVuYWJsZSBjb25zdW1lcnMgdG8gcGFzcyBpbiBhc3luYyBtaWRkbGV3YXJlXG4gKiBmdW5jdGlvbnMuXG4gKlxuICogQXN5bmMgbWlkZGxld2FyZSBoYXZlIG5vIFwiZW5kXCIgZnVuY3Rpb24uIEluc3RlYWQsIHRoZXkgXCJlbmRcIiBpZiB0aGV5IHJldHVyblxuICogd2l0aG91dCBjYWxsaW5nIFwibmV4dFwiLiBSYXRoZXIgdGhhbiBwYXNzaW5nIGluIGV4cGxpY2l0IHJldHVybiBoYW5kbGVycyxcbiAqIGFzeW5jIG1pZGRsZXdhcmUgY2FuIHNpbXBseSBhd2FpdCBcIm5leHRcIiwgYW5kIHBlcmZvcm0gb3BlcmF0aW9ucyBvbiB0aGVcbiAqIHJlc3BvbnNlIG9iamVjdCB3aGVuIGV4ZWN1dGlvbiByZXN1bWVzLlxuICpcbiAqIFRvIGFjY29tcGxpc2ggdGhpcywgY3JlYXRlQXN5bmNNaWRkbGV3YXJlIHBhc3NlcyB0aGUgYXN5bmMgbWlkZGxld2FyZSBhXG4gKiB3cmFwcGVkIFwibmV4dFwiIGZ1bmN0aW9uLiBUaGF0IGZ1bmN0aW9uIGNhbGxzIHRoZSBpbnRlcm5hbCBKc29uUnBjRW5naW5lXG4gKiBcIm5leHRcIiBmdW5jdGlvbiB3aXRoIGEgcmV0dXJuIGhhbmRsZXIgdGhhdCByZXNvbHZlcyBhIHByb21pc2Ugd2hlbiBjYWxsZWQuXG4gKlxuICogVGhlIHJldHVybiBoYW5kbGVyIHdpbGwgYWx3YXlzIGJlIGNhbGxlZC4gSXRzIHJlc29sdXRpb24gb2YgdGhlIHByb21pc2VcbiAqIGVuYWJsZXMgdGhlIGNvbnRyb2wgZmxvdyBkZXNjcmliZWQgYWJvdmUuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFzeW5jTWlkZGxld2FyZShhc3luY01pZGRsZXdhcmUpIHtcbiAgICByZXR1cm4gYXN5bmMgKHJlcSwgcmVzLCBuZXh0LCBlbmQpID0+IHtcbiAgICAgICAgLy8gbmV4dFByb21pc2UgaXMgdGhlIGtleSB0byB0aGUgaW1wbGVtZW50YXRpb25cbiAgICAgICAgLy8gaXQgaXMgcmVzb2x2ZWQgYnkgdGhlIHJldHVybiBoYW5kbGVyIHBhc3NlZCB0byB0aGVcbiAgICAgICAgLy8gXCJuZXh0XCIgZnVuY3Rpb25cbiAgICAgICAgbGV0IHJlc29sdmVOZXh0UHJvbWlzZTtcbiAgICAgICAgY29uc3QgbmV4dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZU5leHRQcm9taXNlID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCByZXR1cm5IYW5kbGVyQ2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBsZXQgbmV4dFdhc0NhbGxlZCA9IGZhbHNlO1xuICAgICAgICAvLyBUaGlzIHdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBjb25zdW1lcidzIGFzeW5jIG1pZGRsZXdhcmUuXG4gICAgICAgIGNvbnN0IGFzeW5jTmV4dCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIG5leHRXYXNDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgLy8gV2UgcGFzcyBhIHJldHVybiBoYW5kbGVyIHRvIG5leHQoKS4gV2hlbiBpdCBpcyBjYWxsZWQgYnkgdGhlIGVuZ2luZSxcbiAgICAgICAgICAgIC8vIHRoZSBjb25zdW1lcidzIGFzeW5jIG1pZGRsZXdhcmUgd2lsbCByZXN1bWUgZXhlY3V0aW5nLlxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvY2FsbGJhY2stcmV0dXJuXG4gICAgICAgICAgICBuZXh0KChydW5SZXR1cm5IYW5kbGVyc0NhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBjYWxsYmFjayBjb21lcyBmcm9tIEpzb25ScGNFbmdpbmUuX3J1blJldHVybkhhbmRsZXJzXG4gICAgICAgICAgICAgICAgcmV0dXJuSGFuZGxlckNhbGxiYWNrID0gcnVuUmV0dXJuSGFuZGxlcnNDYWxsYmFjaztcbiAgICAgICAgICAgICAgICByZXNvbHZlTmV4dFByb21pc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXdhaXQgbmV4dFByb21pc2U7XG4gICAgICAgIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBhc3luY01pZGRsZXdhcmUocmVxLCByZXMsIGFzeW5jTmV4dCk7XG4gICAgICAgICAgICBpZiAobmV4dFdhc0NhbGxlZCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IG5leHRQcm9taXNlOyAvLyB3ZSBtdXN0IHdhaXQgdW50aWwgdGhlIHJldHVybiBoYW5kbGVyIGlzIGNhbGxlZFxuICAgICAgICAgICAgICAgIHJldHVybkhhbmRsZXJDYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVuZChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChyZXR1cm5IYW5kbGVyQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm5IYW5kbGVyQ2FsbGJhY2soZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZW5kKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLmNyZWF0ZUFzeW5jTWlkZGxld2FyZSA9IGNyZWF0ZUFzeW5jTWlkZGxld2FyZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkzSmxZWFJsUVhONWJtTk5hV1JrYkdWM1lYSmxMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZjM0pqTDJOeVpXRjBaVUZ6ZVc1alRXbGtaR3hsZDJGeVpTNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3UVVGblFrRTdPenM3T3pzN096czdPenM3T3pzN1IwRm5Ra2M3UVVGRFNDeFRRVUZuUWl4eFFrRkJjVUlzUTBGRGJrTXNaVUZCTmtNN1NVRkZOME1zVDBGQlR5eExRVUZMTEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hKUVVGSkxFVkJRVVVzUjBGQlJ5eEZRVUZGTEVWQlFVVTdVVUZEYmtNc0swTkJRU3RETzFGQlF5OURMSEZFUVVGeFJEdFJRVU55UkN4clFrRkJhMEk3VVVGRGJFSXNTVUZCU1N4clFrRkJPRUlzUTBGQlF6dFJRVU51UXl4TlFVRk5MRmRCUVZjc1IwRkJSeXhKUVVGSkxFOUJRVThzUTBGQlF5eERRVUZETEU5QlFVOHNSVUZCUlN4RlFVRkZPMWxCUXpGRExHdENRVUZyUWl4SFFVRkhMRTlCUVU4c1EwRkJRenRSUVVNdlFpeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVVklMRWxCUVVrc2NVSkJRWEZDTEVkQlFWa3NTVUZCU1N4RFFVRkRPMUZCUXpGRExFbEJRVWtzWVVGQllTeEhRVUZITEV0QlFVc3NRMEZCUXp0UlFVVXhRaXd3UkVGQk1FUTdVVUZETVVRc1RVRkJUU3hUUVVGVExFZEJRVWNzUzBGQlN5eEpRVUZKTEVWQlFVVTdXVUZETTBJc1lVRkJZU3hIUVVGSExFbEJRVWtzUTBGQlF6dFpRVVZ5UWl4MVJVRkJkVVU3V1VGRGRrVXNlVVJCUVhsRU8xbEJRM3BFTEdkRVFVRm5SRHRaUVVOb1JDeEpRVUZKTEVOQlFVTXNRMEZCUXl4NVFrRkJlVUlzUlVGQlJTeEZRVUZGTzJkQ1FVTnFReXcwUkVGQk5FUTdaMEpCUXpWRUxIRkNRVUZ4UWl4SFFVRkhMSGxDUVVGNVFpeERRVUZETzJkQ1FVTnNSQ3hyUWtGQmEwSXNSVUZCUlN4RFFVRkRPMWxCUTNaQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEwZ3NUVUZCVFN4WFFVRlhMRU5CUVVNN1VVRkRjRUlzUTBGQlF5eERRVUZETzFGQlJVWXNTVUZCU1R0WlFVTkdMRTFCUVUwc1pVRkJaU3hEUVVGRExFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1dVRkZNME1zU1VGQlNTeGhRVUZoTEVWQlFVVTdaMEpCUTJwQ0xFMUJRVTBzVjBGQlZ5eERRVUZETEVOQlFVTXNhMFJCUVd0RU8yZENRVU53UlN4eFFrRkJLME1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0aFFVTjRSRHRwUWtGQlRUdG5Ra0ZEVEN4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03WVVGRFdEdFRRVU5HTzFGQlFVTXNUMEZCVHl4TFFVRkxMRVZCUVVVN1dVRkRaQ3hKUVVGSkxIRkNRVUZ4UWl4RlFVRkZPMmRDUVVONFFpeHhRa0ZCSzBNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dGhRVU42UkR0cFFrRkJUVHRuUWtGRFRDeEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1lVRkRXanRUUVVOR08wbEJRMGdzUTBGQlF5eERRVUZETzBGQlEwb3NRMEZCUXp0QlFTOURSQ3h6UkVFclEwTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZVNjYWZmb2xkTWlkZGxld2FyZSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGNyZWF0ZVNjYWZmb2xkTWlkZGxld2FyZShoYW5kbGVycykge1xuICAgIHJldHVybiAocmVxLCByZXMsIG5leHQsIGVuZCkgPT4ge1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbcmVxLm1ldGhvZF07XG4gICAgICAgIC8vIGlmIG5vIGhhbmRsZXIsIHJldHVyblxuICAgICAgICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIGhhbmRsZXIgaXMgZm4sIGNhbGwgYXMgbWlkZGxld2FyZVxuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVyKHJlcSwgcmVzLCBuZXh0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIGhhbmRsZXIgaXMgc29tZSBvdGhlciB2YWx1ZSwgdXNlIGFzIHJlc3VsdFxuICAgICAgICByZXMucmVzdWx0ID0gaGFuZGxlcjtcbiAgICAgICAgcmV0dXJuIGVuZCgpO1xuICAgIH07XG59XG5leHBvcnRzLmNyZWF0ZVNjYWZmb2xkTWlkZGxld2FyZSA9IGNyZWF0ZVNjYWZmb2xkTWlkZGxld2FyZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkzSmxZWFJsVTJOaFptWnZiR1JOYVdSa2JHVjNZWEpsTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2YzNKakwyTnlaV0YwWlZOallXWm1iMnhrVFdsa1pHeGxkMkZ5WlM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZKUVN4VFFVRm5RaXgzUWtGQmQwSXNRMEZCUXl4UlFVVjRRenRKUVVORExFOUJRVThzUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hIUVVGSExFVkJRVVVzUlVGQlJUdFJRVU0zUWl4TlFVRk5MRTlCUVU4c1IwRkJSeXhSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUTNKRExIZENRVUYzUWp0UlFVTjRRaXhKUVVGSkxFOUJRVThzUzBGQlN5eFRRVUZUTEVWQlFVVTdXVUZEZWtJc1QwRkJUeXhKUVVGSkxFVkJRVVVzUTBGQlF6dFRRVU5tTzFGQlEwUXNkVU5CUVhWRE8xRkJRM1pETEVsQlFVa3NUMEZCVHl4UFFVRlBMRXRCUVVzc1ZVRkJWU3hGUVVGRk8xbEJRMnBETEU5QlFVOHNUMEZCVHl4RFFVRkRMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVVzU1VGQlNTeEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMU5CUTNKRE8xRkJRMFFzWjBSQlFXZEVPMUZCUXk5RExFZEJRU3RDTEVOQlFVTXNUVUZCVFN4SFFVRkhMRTlCUVU4c1EwRkJRenRSUVVOc1JDeFBRVUZQTEVkQlFVY3NSVUZCUlN4RFFVRkRPMGxCUTJZc1EwRkJReXhEUVVGRE8wRkJRMG9zUTBGQlF6dEJRV3BDUkN3MFJFRnBRa01pZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRVbmlxdWVJZCA9IHZvaWQgMDtcbi8vIHVpbnQzMiAodHdvJ3MgY29tcGxlbWVudCkgbWF4XG4vLyBtb3JlIGNvbnNlcnZhdGl2ZSB0aGFuIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG5jb25zdCBNQVggPSA0Mjk0OTY3Mjk1O1xubGV0IGlkQ291bnRlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1BWCk7XG5mdW5jdGlvbiBnZXRVbmlxdWVJZCgpIHtcbiAgICBpZENvdW50ZXIgPSAoaWRDb3VudGVyICsgMSkgJSBNQVg7XG4gICAgcmV0dXJuIGlkQ291bnRlcjtcbn1cbmV4cG9ydHMuZ2V0VW5pcXVlSWQgPSBnZXRVbmlxdWVJZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVoyVjBWVzVwY1hWbFNXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOXpjbU12WjJWMFZXNXBjWFZsU1dRdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUVVFc1owTkJRV2RETzBGQlEyaERMR2xFUVVGcFJEdEJRVU5xUkN4TlFVRk5MRWRCUVVjc1IwRkJSeXhWUVVGVkxFTkJRVU03UVVGRGRrSXNTVUZCU1N4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRmFFUXNVMEZCWjBJc1YwRkJWenRKUVVONlFpeFRRVUZUTEVkQlFVY3NRMEZCUXl4VFFVRlRMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETzBsQlEyeERMRTlCUVU4c1UwRkJVeXhEUVVGRE8wRkJRMjVDTEVOQlFVTTdRVUZJUkN4clEwRkhReUo5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUlkUmVtYXBNaWRkbGV3YXJlID0gdm9pZCAwO1xuY29uc3QgZ2V0VW5pcXVlSWRfMSA9IHJlcXVpcmUoXCIuL2dldFVuaXF1ZUlkXCIpO1xuZnVuY3Rpb24gY3JlYXRlSWRSZW1hcE1pZGRsZXdhcmUoKSB7XG4gICAgcmV0dXJuIChyZXEsIHJlcywgbmV4dCwgX2VuZCkgPT4ge1xuICAgICAgICBjb25zdCBvcmlnaW5hbElkID0gcmVxLmlkO1xuICAgICAgICBjb25zdCBuZXdJZCA9IGdldFVuaXF1ZUlkXzEuZ2V0VW5pcXVlSWQoKTtcbiAgICAgICAgcmVxLmlkID0gbmV3SWQ7XG4gICAgICAgIHJlcy5pZCA9IG5ld0lkO1xuICAgICAgICBuZXh0KChkb25lKSA9PiB7XG4gICAgICAgICAgICByZXEuaWQgPSBvcmlnaW5hbElkO1xuICAgICAgICAgICAgcmVzLmlkID0gb3JpZ2luYWxJZDtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbmV4cG9ydHMuY3JlYXRlSWRSZW1hcE1pZGRsZXdhcmUgPSBjcmVhdGVJZFJlbWFwTWlkZGxld2FyZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXUlNaVzFoY0UxcFpHUnNaWGRoY21VdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk5emNtTXZhV1JTWlcxaGNFMXBaR1JzWlhkaGNtVXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzBGQlFVRXNLME5CUVRSRE8wRkJSelZETEZOQlFXZENMSFZDUVVGMVFqdEpRVU55UXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRVZCUVVVN1VVRkRPVUlzVFVGQlRTeFZRVUZWTEVkQlFVY3NSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJRenRSUVVNeFFpeE5RVUZOTEV0QlFVc3NSMEZCUnl4NVFrRkJWeXhGUVVGRkxFTkJRVU03VVVGRE5VSXNSMEZCUnl4RFFVRkRMRVZCUVVVc1IwRkJSeXhMUVVGTExFTkJRVU03VVVGRFppeEhRVUZITEVOQlFVTXNSVUZCUlN4SFFVRkhMRXRCUVVzc1EwRkJRenRSUVVObUxFbEJRVWtzUTBGQlF5eERRVUZETEVsQlFVa3NSVUZCUlN4RlFVRkZPMWxCUTFvc1IwRkJSeXhEUVVGRExFVkJRVVVzUjBGQlJ5eFZRVUZWTEVOQlFVTTdXVUZEY0VJc1IwRkJSeXhEUVVGRExFVkJRVVVzUjBGQlJ5eFZRVUZWTEVOQlFVTTdXVUZEY0VJc1NVRkJTU3hGUVVGRkxFTkJRVU03VVVGRFZDeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTk1MRU5CUVVNc1EwRkJRenRCUVVOS0xFTkJRVU03UVVGYVJDd3dSRUZaUXlKOSIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaWRSZW1hcE1pZGRsZXdhcmVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NyZWF0ZUFzeW5jTWlkZGxld2FyZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY3JlYXRlU2NhZmZvbGRNaWRkbGV3YXJlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9nZXRVbmlxdWVJZFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vSnNvblJwY0VuZ2luZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbWVyZ2VNaWRkbGV3YXJlXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTl6Y21NdmFXNWtaWGd1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN08wRkJRVUVzYzBSQlFXOURPMEZCUTNCRExEQkVRVUYzUXp0QlFVTjRReXcyUkVGQk1rTTdRVUZETTBNc1owUkJRVGhDTzBGQlF6bENMR3RFUVVGblF6dEJRVU5vUXl4dlJFRkJhME1pZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZXJnZU1pZGRsZXdhcmUgPSB2b2lkIDA7XG5jb25zdCBKc29uUnBjRW5naW5lXzEgPSByZXF1aXJlKFwiLi9Kc29uUnBjRW5naW5lXCIpO1xuZnVuY3Rpb24gbWVyZ2VNaWRkbGV3YXJlKG1pZGRsZXdhcmVTdGFjaykge1xuICAgIGNvbnN0IGVuZ2luZSA9IG5ldyBKc29uUnBjRW5naW5lXzEuSnNvblJwY0VuZ2luZSgpO1xuICAgIG1pZGRsZXdhcmVTdGFjay5mb3JFYWNoKChtaWRkbGV3YXJlKSA9PiBlbmdpbmUucHVzaChtaWRkbGV3YXJlKSk7XG4gICAgcmV0dXJuIGVuZ2luZS5hc01pZGRsZXdhcmUoKTtcbn1cbmV4cG9ydHMubWVyZ2VNaWRkbGV3YXJlID0gbWVyZ2VNaWRkbGV3YXJlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYldWeVoyVk5hV1JrYkdWM1lYSmxMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZjM0pqTDIxbGNtZGxUV2xrWkd4bGQyRnlaUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkJRU3h0UkVGQmJVVTdRVUZGYmtVc1UwRkJaMElzWlVGQlpTeERRVUZETEdWQlFYTkVPMGxCUTNCR0xFMUJRVTBzVFVGQlRTeEhRVUZITEVsQlFVa3NOa0pCUVdFc1JVRkJSU3hEUVVGRE8wbEJRMjVETEdWQlFXVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhWUVVGVkxFVkJRVVVzUlVGQlJTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5xUlN4UFFVRlBMRTFCUVUwc1EwRkJReXhaUVVGWkxFVkJRVVVzUTBGQlF6dEJRVU12UWl4RFFVRkRPMEZCU2tRc01FTkJTVU1pZlE9PSIsIi8qXG4qIGxvZ2xldmVsIC0gaHR0cHM6Ly9naXRodWIuY29tL3BpbXRlcnJ5L2xvZ2xldmVsXG4qXG4qIENvcHlyaWdodCAoYykgMjAxMyBUaW0gUGVycnlcbiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuKi9cbihmdW5jdGlvbiAocm9vdCwgZGVmaW5pdGlvbikge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKGRlZmluaXRpb24pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5sb2cgPSBkZWZpbml0aW9uKCk7XG4gICAgfVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAvLyBTbGlnaHRseSBkdWJpb3VzIHRyaWNrcyB0byBjdXQgZG93biBtaW5pbWl6ZWQgZmlsZSBzaXplXG4gICAgdmFyIG5vb3AgPSBmdW5jdGlvbigpIHt9O1xuICAgIHZhciB1bmRlZmluZWRUeXBlID0gXCJ1bmRlZmluZWRcIjtcblxuICAgIHZhciBsb2dNZXRob2RzID0gW1xuICAgICAgICBcInRyYWNlXCIsXG4gICAgICAgIFwiZGVidWdcIixcbiAgICAgICAgXCJpbmZvXCIsXG4gICAgICAgIFwid2FyblwiLFxuICAgICAgICBcImVycm9yXCJcbiAgICBdO1xuXG4gICAgLy8gQ3Jvc3MtYnJvd3NlciBiaW5kIGVxdWl2YWxlbnQgdGhhdCB3b3JrcyBhdCBsZWFzdCBiYWNrIHRvIElFNlxuICAgIGZ1bmN0aW9uIGJpbmRNZXRob2Qob2JqLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIHZhciBtZXRob2QgPSBvYmpbbWV0aG9kTmFtZV07XG4gICAgICAgIGlmICh0eXBlb2YgbWV0aG9kLmJpbmQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXRob2QuYmluZChvYmopO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbChtZXRob2QsIG9iaik7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gTWlzc2luZyBiaW5kIHNoaW0gb3IgSUU4ICsgTW9kZXJuaXpyLCBmYWxsYmFjayB0byB3cmFwcGluZ1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5hcHBseShtZXRob2QsIFtvYmosIGFyZ3VtZW50c10pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBCdWlsZCB0aGUgYmVzdCBsb2dnaW5nIG1ldGhvZCBwb3NzaWJsZSBmb3IgdGhpcyBlbnZcbiAgICAvLyBXaGVyZXZlciBwb3NzaWJsZSB3ZSB3YW50IHRvIGJpbmQsIG5vdCB3cmFwLCB0byBwcmVzZXJ2ZSBzdGFjayB0cmFjZXNcbiAgICBmdW5jdGlvbiByZWFsTWV0aG9kKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgaWYgKG1ldGhvZE5hbWUgPT09ICdkZWJ1ZycpIHtcbiAgICAgICAgICAgIG1ldGhvZE5hbWUgPSAnbG9nJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZSA9PT0gdW5kZWZpbmVkVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBObyBtZXRob2QgcG9zc2libGUsIGZvciBub3cgLSBmaXhlZCBsYXRlciBieSBlbmFibGVMb2dnaW5nV2hlbkNvbnNvbGVBcnJpdmVzXG4gICAgICAgIH0gZWxzZSBpZiAoY29uc29sZVttZXRob2ROYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gYmluZE1ldGhvZChjb25zb2xlLCBtZXRob2ROYW1lKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb25zb2xlLmxvZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gYmluZE1ldGhvZChjb25zb2xlLCAnbG9nJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbm9vcDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoZXNlIHByaXZhdGUgZnVuY3Rpb25zIGFsd2F5cyBuZWVkIGB0aGlzYCB0byBiZSBzZXQgcHJvcGVybHlcblxuICAgIGZ1bmN0aW9uIHJlcGxhY2VMb2dnaW5nTWV0aG9kcyhsZXZlbCwgbG9nZ2VyTmFtZSkge1xuICAgICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxvZ01ldGhvZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBtZXRob2ROYW1lID0gbG9nTWV0aG9kc1tpXTtcbiAgICAgICAgICAgIHRoaXNbbWV0aG9kTmFtZV0gPSAoaSA8IGxldmVsKSA/XG4gICAgICAgICAgICAgICAgbm9vcCA6XG4gICAgICAgICAgICAgICAgdGhpcy5tZXRob2RGYWN0b3J5KG1ldGhvZE5hbWUsIGxldmVsLCBsb2dnZXJOYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmluZSBsb2cubG9nIGFzIGFuIGFsaWFzIGZvciBsb2cuZGVidWdcbiAgICAgICAgdGhpcy5sb2cgPSB0aGlzLmRlYnVnO1xuICAgIH1cblxuICAgIC8vIEluIG9sZCBJRSB2ZXJzaW9ucywgdGhlIGNvbnNvbGUgaXNuJ3QgcHJlc2VudCB1bnRpbCB5b3UgZmlyc3Qgb3BlbiBpdC5cbiAgICAvLyBXZSBidWlsZCByZWFsTWV0aG9kKCkgcmVwbGFjZW1lbnRzIGhlcmUgdGhhdCByZWdlbmVyYXRlIGxvZ2dpbmcgbWV0aG9kc1xuICAgIGZ1bmN0aW9uIGVuYWJsZUxvZ2dpbmdXaGVuQ29uc29sZUFycml2ZXMobWV0aG9kTmFtZSwgbGV2ZWwsIGxvZ2dlck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gdW5kZWZpbmVkVHlwZSkge1xuICAgICAgICAgICAgICAgIHJlcGxhY2VMb2dnaW5nTWV0aG9kcy5jYWxsKHRoaXMsIGxldmVsLCBsb2dnZXJOYW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzW21ldGhvZE5hbWVdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gQnkgZGVmYXVsdCwgd2UgdXNlIGNsb3NlbHkgYm91bmQgcmVhbCBtZXRob2RzIHdoZXJldmVyIHBvc3NpYmxlLCBhbmRcbiAgICAvLyBvdGhlcndpc2Ugd2Ugd2FpdCBmb3IgYSBjb25zb2xlIHRvIGFwcGVhciwgYW5kIHRoZW4gdHJ5IGFnYWluLlxuICAgIGZ1bmN0aW9uIGRlZmF1bHRNZXRob2RGYWN0b3J5KG1ldGhvZE5hbWUsIGxldmVsLCBsb2dnZXJOYW1lKSB7XG4gICAgICAgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gICAgICAgIHJldHVybiByZWFsTWV0aG9kKG1ldGhvZE5hbWUpIHx8XG4gICAgICAgICAgICAgICBlbmFibGVMb2dnaW5nV2hlbkNvbnNvbGVBcnJpdmVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTG9nZ2VyKG5hbWUsIGRlZmF1bHRMZXZlbCwgZmFjdG9yeSkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGN1cnJlbnRMZXZlbDtcbiAgICAgIHZhciBzdG9yYWdlS2V5ID0gXCJsb2dsZXZlbFwiO1xuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgc3RvcmFnZUtleSArPSBcIjpcIiArIG5hbWU7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBlcnNpc3RMZXZlbElmUG9zc2libGUobGV2ZWxOdW0pIHtcbiAgICAgICAgICB2YXIgbGV2ZWxOYW1lID0gKGxvZ01ldGhvZHNbbGV2ZWxOdW1dIHx8ICdzaWxlbnQnKS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IHVuZGVmaW5lZFR5cGUpIHJldHVybjtcblxuICAgICAgICAgIC8vIFVzZSBsb2NhbFN0b3JhZ2UgaWYgYXZhaWxhYmxlXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZVtzdG9yYWdlS2V5XSA9IGxldmVsTmFtZTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cblxuICAgICAgICAgIC8vIFVzZSBzZXNzaW9uIGNvb2tpZSBhcyBmYWxsYmFja1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5jb29raWUgPVxuICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdG9yYWdlS2V5KSArIFwiPVwiICsgbGV2ZWxOYW1lICsgXCI7XCI7XG4gICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRQZXJzaXN0ZWRMZXZlbCgpIHtcbiAgICAgICAgICB2YXIgc3RvcmVkTGV2ZWw7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gdW5kZWZpbmVkVHlwZSkgcmV0dXJuO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgc3RvcmVkTGV2ZWwgPSB3aW5kb3cubG9jYWxTdG9yYWdlW3N0b3JhZ2VLZXldO1xuICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cblxuICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIGNvb2tpZXMgaWYgbG9jYWwgc3RvcmFnZSBnaXZlcyB1cyBub3RoaW5nXG4gICAgICAgICAgaWYgKHR5cGVvZiBzdG9yZWRMZXZlbCA9PT0gdW5kZWZpbmVkVHlwZSkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgdmFyIGNvb2tpZSA9IHdpbmRvdy5kb2N1bWVudC5jb29raWU7XG4gICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBjb29raWUuaW5kZXhPZihcbiAgICAgICAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RvcmFnZUtleSkgKyBcIj1cIik7XG4gICAgICAgICAgICAgICAgICBpZiAobG9jYXRpb24gIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RvcmVkTGV2ZWwgPSAvXihbXjtdKykvLmV4ZWMoY29va2llLnNsaWNlKGxvY2F0aW9uKSlbMV07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJZiB0aGUgc3RvcmVkIGxldmVsIGlzIG5vdCB2YWxpZCwgdHJlYXQgaXQgYXMgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuICAgICAgICAgIGlmIChzZWxmLmxldmVsc1tzdG9yZWRMZXZlbF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBzdG9yZWRMZXZlbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc3RvcmVkTGV2ZWw7XG4gICAgICB9XG5cbiAgICAgIC8qXG4gICAgICAgKlxuICAgICAgICogUHVibGljIGxvZ2dlciBBUEkgLSBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BpbXRlcnJ5L2xvZ2xldmVsIGZvciBkZXRhaWxzXG4gICAgICAgKlxuICAgICAgICovXG5cbiAgICAgIHNlbGYubmFtZSA9IG5hbWU7XG5cbiAgICAgIHNlbGYubGV2ZWxzID0geyBcIlRSQUNFXCI6IDAsIFwiREVCVUdcIjogMSwgXCJJTkZPXCI6IDIsIFwiV0FSTlwiOiAzLFxuICAgICAgICAgIFwiRVJST1JcIjogNCwgXCJTSUxFTlRcIjogNX07XG5cbiAgICAgIHNlbGYubWV0aG9kRmFjdG9yeSA9IGZhY3RvcnkgfHwgZGVmYXVsdE1ldGhvZEZhY3Rvcnk7XG5cbiAgICAgIHNlbGYuZ2V0TGV2ZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnRMZXZlbDtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuc2V0TGV2ZWwgPSBmdW5jdGlvbiAobGV2ZWwsIHBlcnNpc3QpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGxldmVsID09PSBcInN0cmluZ1wiICYmIHNlbGYubGV2ZWxzW2xldmVsLnRvVXBwZXJDYXNlKCldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgbGV2ZWwgPSBzZWxmLmxldmVsc1tsZXZlbC50b1VwcGVyQ2FzZSgpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiBsZXZlbCA9PT0gXCJudW1iZXJcIiAmJiBsZXZlbCA+PSAwICYmIGxldmVsIDw9IHNlbGYubGV2ZWxzLlNJTEVOVCkge1xuICAgICAgICAgICAgICBjdXJyZW50TGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgICAgICAgaWYgKHBlcnNpc3QgIT09IGZhbHNlKSB7ICAvLyBkZWZhdWx0cyB0byB0cnVlXG4gICAgICAgICAgICAgICAgICBwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlKGxldmVsKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXBsYWNlTG9nZ2luZ01ldGhvZHMuY2FsbChzZWxmLCBsZXZlbCwgbmFtZSk7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSA9PT0gdW5kZWZpbmVkVHlwZSAmJiBsZXZlbCA8IHNlbGYubGV2ZWxzLlNJTEVOVCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTm8gY29uc29sZSBhdmFpbGFibGUgZm9yIGxvZ2dpbmdcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IFwibG9nLnNldExldmVsKCkgY2FsbGVkIHdpdGggaW52YWxpZCBsZXZlbDogXCIgKyBsZXZlbDtcbiAgICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZWxmLnNldERlZmF1bHRMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgICAgIGlmICghZ2V0UGVyc2lzdGVkTGV2ZWwoKSkge1xuICAgICAgICAgICAgICBzZWxmLnNldExldmVsKGxldmVsLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2VsZi5lbmFibGVBbGwgPSBmdW5jdGlvbihwZXJzaXN0KSB7XG4gICAgICAgICAgc2VsZi5zZXRMZXZlbChzZWxmLmxldmVscy5UUkFDRSwgcGVyc2lzdCk7XG4gICAgICB9O1xuXG4gICAgICBzZWxmLmRpc2FibGVBbGwgPSBmdW5jdGlvbihwZXJzaXN0KSB7XG4gICAgICAgICAgc2VsZi5zZXRMZXZlbChzZWxmLmxldmVscy5TSUxFTlQsIHBlcnNpc3QpO1xuICAgICAgfTtcblxuICAgICAgLy8gSW5pdGlhbGl6ZSB3aXRoIHRoZSByaWdodCBsZXZlbFxuICAgICAgdmFyIGluaXRpYWxMZXZlbCA9IGdldFBlcnNpc3RlZExldmVsKCk7XG4gICAgICBpZiAoaW5pdGlhbExldmVsID09IG51bGwpIHtcbiAgICAgICAgICBpbml0aWFsTGV2ZWwgPSBkZWZhdWx0TGV2ZWwgPT0gbnVsbCA/IFwiV0FSTlwiIDogZGVmYXVsdExldmVsO1xuICAgICAgfVxuICAgICAgc2VsZi5zZXRMZXZlbChpbml0aWFsTGV2ZWwsIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqXG4gICAgICogVG9wLWxldmVsIEFQSVxuICAgICAqXG4gICAgICovXG5cbiAgICB2YXIgZGVmYXVsdExvZ2dlciA9IG5ldyBMb2dnZXIoKTtcblxuICAgIHZhciBfbG9nZ2Vyc0J5TmFtZSA9IHt9O1xuICAgIGRlZmF1bHRMb2dnZXIuZ2V0TG9nZ2VyID0gZnVuY3Rpb24gZ2V0TG9nZ2VyKG5hbWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiIHx8IG5hbWUgPT09IFwiXCIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiWW91IG11c3Qgc3VwcGx5IGEgbmFtZSB3aGVuIGNyZWF0aW5nIGEgbG9nZ2VyLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2dnZXIgPSBfbG9nZ2Vyc0J5TmFtZVtuYW1lXTtcbiAgICAgICAgaWYgKCFsb2dnZXIpIHtcbiAgICAgICAgICBsb2dnZXIgPSBfbG9nZ2Vyc0J5TmFtZVtuYW1lXSA9IG5ldyBMb2dnZXIoXG4gICAgICAgICAgICBuYW1lLCBkZWZhdWx0TG9nZ2VyLmdldExldmVsKCksIGRlZmF1bHRMb2dnZXIubWV0aG9kRmFjdG9yeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvZ2dlcjtcbiAgICB9O1xuXG4gICAgLy8gR3JhYiB0aGUgY3VycmVudCBnbG9iYWwgbG9nIHZhcmlhYmxlIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG4gICAgdmFyIF9sb2cgPSAodHlwZW9mIHdpbmRvdyAhPT0gdW5kZWZpbmVkVHlwZSkgPyB3aW5kb3cubG9nIDogdW5kZWZpbmVkO1xuICAgIGRlZmF1bHRMb2dnZXIubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gdW5kZWZpbmVkVHlwZSAmJlxuICAgICAgICAgICAgICAgd2luZG93LmxvZyA9PT0gZGVmYXVsdExvZ2dlcikge1xuICAgICAgICAgICAgd2luZG93LmxvZyA9IF9sb2c7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGVmYXVsdExvZ2dlcjtcbiAgICB9O1xuXG4gICAgZGVmYXVsdExvZ2dlci5nZXRMb2dnZXJzID0gZnVuY3Rpb24gZ2V0TG9nZ2VycygpIHtcbiAgICAgICAgcmV0dXJuIF9sb2dnZXJzQnlOYW1lO1xuICAgIH07XG5cbiAgICByZXR1cm4gZGVmYXVsdExvZ2dlcjtcbn0pKTtcbiIsInZhciB3cmFwcHkgPSByZXF1aXJlKCd3cmFwcHknKVxubW9kdWxlLmV4cG9ydHMgPSB3cmFwcHkob25jZSlcbm1vZHVsZS5leHBvcnRzLnN0cmljdCA9IHdyYXBweShvbmNlU3RyaWN0KVxuXG5vbmNlLnByb3RvID0gb25jZShmdW5jdGlvbiAoKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGdW5jdGlvbi5wcm90b3R5cGUsICdvbmNlJywge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gb25jZSh0aGlzKVxuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bmN0aW9uLnByb3RvdHlwZSwgJ29uY2VTdHJpY3QnLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBvbmNlU3RyaWN0KHRoaXMpXG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSlcbn0pXG5cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBmID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChmLmNhbGxlZCkgcmV0dXJuIGYudmFsdWVcbiAgICBmLmNhbGxlZCA9IHRydWVcbiAgICByZXR1cm4gZi52YWx1ZSA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgfVxuICBmLmNhbGxlZCA9IGZhbHNlXG4gIHJldHVybiBmXG59XG5cbmZ1bmN0aW9uIG9uY2VTdHJpY3QgKGZuKSB7XG4gIHZhciBmID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChmLmNhbGxlZClcbiAgICAgIHRocm93IG5ldyBFcnJvcihmLm9uY2VFcnJvcilcbiAgICBmLmNhbGxlZCA9IHRydWVcbiAgICByZXR1cm4gZi52YWx1ZSA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgfVxuICB2YXIgbmFtZSA9IGZuLm5hbWUgfHwgJ0Z1bmN0aW9uIHdyYXBwZWQgd2l0aCBgb25jZWAnXG4gIGYub25jZUVycm9yID0gbmFtZSArIFwiIHNob3VsZG4ndCBiZSBjYWxsZWQgbW9yZSB0aGFuIG9uY2VcIlxuICBmLmNhbGxlZCA9IGZhbHNlXG4gIHJldHVybiBmXG59XG4iLCJjb25zdCBEdXBsZXhTdHJlYW0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKS5EdXBsZXhcbmNvbnN0IGluaGVyaXRzID0gcmVxdWlyZSgndXRpbCcpLmluaGVyaXRzXG5cbm1vZHVsZS5leHBvcnRzID0gUG9zdE1lc3NhZ2VTdHJlYW1cblxuaW5oZXJpdHMoUG9zdE1lc3NhZ2VTdHJlYW0sIER1cGxleFN0cmVhbSlcblxuZnVuY3Rpb24gUG9zdE1lc3NhZ2VTdHJlYW0gKG9wdHMpIHtcbiAgRHVwbGV4U3RyZWFtLmNhbGwodGhpcywge1xuICAgIG9iamVjdE1vZGU6IHRydWUsXG4gIH0pXG5cbiAgdGhpcy5fbmFtZSA9IG9wdHMubmFtZVxuICB0aGlzLl90YXJnZXQgPSBvcHRzLnRhcmdldFxuICB0aGlzLl90YXJnZXRXaW5kb3cgPSBvcHRzLnRhcmdldFdpbmRvdyB8fCB3aW5kb3dcbiAgdGhpcy5fb3JpZ2luID0gKG9wdHMudGFyZ2V0V2luZG93ID8gJyonIDogbG9jYXRpb24ub3JpZ2luKVxuXG4gIC8vIGluaXRpYWxpemF0aW9uIGZsYWdzXG4gIHRoaXMuX2luaXQgPSBmYWxzZVxuICB0aGlzLl9oYXZlU3luID0gZmFsc2VcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuX29uTWVzc2FnZS5iaW5kKHRoaXMpLCBmYWxzZSlcbiAgLy8gc2VuZCBzeW5jb3JpemF0aW9uIG1lc3NhZ2VcbiAgdGhpcy5fd3JpdGUoJ1NZTicsIG51bGwsIG5vb3ApXG4gIHRoaXMuY29yaygpXG59XG5cbi8vIHByaXZhdGVcblBvc3RNZXNzYWdlU3RyZWFtLnByb3RvdHlwZS5fb25NZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHZhciBtc2cgPSBldmVudC5kYXRhXG5cbiAgLy8gdmFsaWRhdGUgbWVzc2FnZVxuICBpZiAodGhpcy5fb3JpZ2luICE9PSAnKicgJiYgZXZlbnQub3JpZ2luICE9PSB0aGlzLl9vcmlnaW4pIHJldHVyblxuICBpZiAoZXZlbnQuc291cmNlICE9PSB0aGlzLl90YXJnZXRXaW5kb3cpIHJldHVyblxuICBpZiAodHlwZW9mIG1zZyAhPT0gJ29iamVjdCcpIHJldHVyblxuICBpZiAobXNnLnRhcmdldCAhPT0gdGhpcy5fbmFtZSkgcmV0dXJuXG4gIGlmICghbXNnLmRhdGEpIHJldHVyblxuXG4gIGlmICghdGhpcy5faW5pdCkge1xuICAgIGlmIChtc2cuZGF0YSA9PT0gJ1NZTicpIHtcbiAgICAgIHRoaXMuX2hhdmVTeW4gPSB0cnVlXG4gICAgICB0aGlzLl93cml0ZSgnQUNLJywgbnVsbCwgbm9vcClcbiAgICB9IGVsc2UgaWYgKG1zZy5kYXRhID09PSAnQUNLJykge1xuICAgICAgdGhpcy5faW5pdCA9IHRydWVcbiAgICAgIGlmICghdGhpcy5faGF2ZVN5bikge1xuICAgICAgICB0aGlzLl93cml0ZSgnQUNLJywgbnVsbCwgbm9vcClcbiAgICAgIH1cbiAgICAgIHRoaXMudW5jb3JrKClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZm9yd2FyZCBtZXNzYWdlXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMucHVzaChtc2cuZGF0YSlcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpXG4gICAgfVxuICB9XG59XG5cbi8vIHN0cmVhbSBwbHVtYmluZ1xuUG9zdE1lc3NhZ2VTdHJlYW0ucHJvdG90eXBlLl9yZWFkID0gbm9vcFxuXG5Qb3N0TWVzc2FnZVN0cmVhbS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGRhdGEsIGVuY29kaW5nLCBjYikge1xuICB2YXIgbWVzc2FnZSA9IHtcbiAgICB0YXJnZXQ6IHRoaXMuX3RhcmdldCxcbiAgICBkYXRhOiBkYXRhLFxuICB9XG4gIHRoaXMuX3RhcmdldFdpbmRvdy5wb3N0TWVzc2FnZShtZXNzYWdlLCB0aGlzLl9vcmlnaW4pXG4gIGNiKClcbn1cblxuLy8gdXRpbFxuXG5mdW5jdGlvbiBub29wICgpIHt9XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwidmFyIG9uY2UgPSByZXF1aXJlKCdvbmNlJylcbnZhciBlb3MgPSByZXF1aXJlKCdlbmQtb2Ytc3RyZWFtJylcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJykgLy8gd2Ugb25seSBuZWVkIGZzIHRvIGdldCB0aGUgUmVhZFN0cmVhbSBhbmQgV3JpdGVTdHJlYW0gcHJvdG90eXBlc1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHt9XG52YXIgYW5jaWVudCA9IC9edj9cXC4wLy50ZXN0KHByb2Nlc3MudmVyc2lvbilcblxudmFyIGlzRm4gPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJ1xufVxuXG52YXIgaXNGUyA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgaWYgKCFhbmNpZW50KSByZXR1cm4gZmFsc2UgLy8gbmV3ZXIgbm9kZSB2ZXJzaW9uIGRvIG5vdCBuZWVkIHRvIGNhcmUgYWJvdXQgZnMgaXMgYSBzcGVjaWFsIHdheVxuICBpZiAoIWZzKSByZXR1cm4gZmFsc2UgLy8gYnJvd3NlclxuICByZXR1cm4gKHN0cmVhbSBpbnN0YW5jZW9mIChmcy5SZWFkU3RyZWFtIHx8IG5vb3ApIHx8IHN0cmVhbSBpbnN0YW5jZW9mIChmcy5Xcml0ZVN0cmVhbSB8fCBub29wKSkgJiYgaXNGbihzdHJlYW0uY2xvc2UpXG59XG5cbnZhciBpc1JlcXVlc3QgPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gIHJldHVybiBzdHJlYW0uc2V0SGVhZGVyICYmIGlzRm4oc3RyZWFtLmFib3J0KVxufVxuXG52YXIgZGVzdHJveWVyID0gZnVuY3Rpb24gKHN0cmVhbSwgcmVhZGluZywgd3JpdGluZywgY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sgPSBvbmNlKGNhbGxiYWNrKVxuXG4gIHZhciBjbG9zZWQgPSBmYWxzZVxuICBzdHJlYW0ub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgIGNsb3NlZCA9IHRydWVcbiAgfSlcblxuICBlb3Moc3RyZWFtLCB7cmVhZGFibGU6IHJlYWRpbmcsIHdyaXRhYmxlOiB3cml0aW5nfSwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpXG4gICAgY2xvc2VkID0gdHJ1ZVxuICAgIGNhbGxiYWNrKClcbiAgfSlcblxuICB2YXIgZGVzdHJveWVkID0gZmFsc2VcbiAgcmV0dXJuIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoY2xvc2VkKSByZXR1cm5cbiAgICBpZiAoZGVzdHJveWVkKSByZXR1cm5cbiAgICBkZXN0cm95ZWQgPSB0cnVlXG5cbiAgICBpZiAoaXNGUyhzdHJlYW0pKSByZXR1cm4gc3RyZWFtLmNsb3NlKG5vb3ApIC8vIHVzZSBjbG9zZSBmb3IgZnMgc3RyZWFtcyB0byBhdm9pZCBmZCBsZWFrc1xuICAgIGlmIChpc1JlcXVlc3Qoc3RyZWFtKSkgcmV0dXJuIHN0cmVhbS5hYm9ydCgpIC8vIHJlcXVlc3QuZGVzdHJveSBqdXN0IGRvIC5lbmQgLSAuYWJvcnQgaXMgd2hhdCB3ZSB3YW50XG5cbiAgICBpZiAoaXNGbihzdHJlYW0uZGVzdHJveSkpIHJldHVybiBzdHJlYW0uZGVzdHJveSgpXG5cbiAgICBjYWxsYmFjayhlcnIgfHwgbmV3IEVycm9yKCdzdHJlYW0gd2FzIGRlc3Ryb3llZCcpKVxuICB9XG59XG5cbnZhciBjYWxsID0gZnVuY3Rpb24gKGZuKSB7XG4gIGZuKClcbn1cblxudmFyIHBpcGUgPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcbiAgcmV0dXJuIGZyb20ucGlwZSh0bylcbn1cblxudmFyIHB1bXAgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdHJlYW1zID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxuICB2YXIgY2FsbGJhY2sgPSBpc0ZuKHN0cmVhbXNbc3RyZWFtcy5sZW5ndGggLSAxXSB8fCBub29wKSAmJiBzdHJlYW1zLnBvcCgpIHx8IG5vb3BcblxuICBpZiAoQXJyYXkuaXNBcnJheShzdHJlYW1zWzBdKSkgc3RyZWFtcyA9IHN0cmVhbXNbMF1cbiAgaWYgKHN0cmVhbXMubGVuZ3RoIDwgMikgdGhyb3cgbmV3IEVycm9yKCdwdW1wIHJlcXVpcmVzIHR3byBzdHJlYW1zIHBlciBtaW5pbXVtJylcblxuICB2YXIgZXJyb3JcbiAgdmFyIGRlc3Ryb3lzID0gc3RyZWFtcy5tYXAoZnVuY3Rpb24gKHN0cmVhbSwgaSkge1xuICAgIHZhciByZWFkaW5nID0gaSA8IHN0cmVhbXMubGVuZ3RoIC0gMVxuICAgIHZhciB3cml0aW5nID0gaSA+IDBcbiAgICByZXR1cm4gZGVzdHJveWVyKHN0cmVhbSwgcmVhZGluZywgd3JpdGluZywgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKCFlcnJvcikgZXJyb3IgPSBlcnJcbiAgICAgIGlmIChlcnIpIGRlc3Ryb3lzLmZvckVhY2goY2FsbClcbiAgICAgIGlmIChyZWFkaW5nKSByZXR1cm5cbiAgICAgIGRlc3Ryb3lzLmZvckVhY2goY2FsbClcbiAgICAgIGNhbGxiYWNrKGVycm9yKVxuICAgIH0pXG4gIH0pXG5cbiAgcmV0dXJuIHN0cmVhbXMucmVkdWNlKHBpcGUpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHVtcFxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgZHVwbGV4IHN0cmVhbSBpcyBqdXN0IGEgc3RyZWFtIHRoYXQgaXMgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUuXG4vLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzc1xuLy8gcHJvdG90eXBhbGx5IGluaGVyaXRzIGZyb20gUmVhZGFibGUsIGFuZCB0aGVuIHBhcmFzaXRpY2FsbHkgZnJvbVxuLy8gV3JpdGFibGUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gIH1yZXR1cm4ga2V5cztcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3JlYWRhYmxlJyk7XG52YXIgV3JpdGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fd3JpdGFibGUnKTtcblxudXRpbC5pbmhlcml0cyhEdXBsZXgsIFJlYWRhYmxlKTtcblxue1xuICAvLyBhdm9pZCBzY29wZSBjcmVlcCwgdGhlIGtleXMgYXJyYXkgY2FuIHRoZW4gYmUgY29sbGVjdGVkXG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpO1xuICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICB2YXIgbWV0aG9kID0ga2V5c1t2XTtcbiAgICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuXG4gIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSkgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dIYWxmT3BlbiA9PT0gZmFsc2UpIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuXG4gIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIHRoZSBuby1oYWxmLW9wZW4gZW5mb3JjZXJcbmZ1bmN0aW9uIG9uZW5kKCkge1xuICAvLyBpZiB3ZSBhbGxvdyBoYWxmLW9wZW4gc3RhdGUsIG9yIGlmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLFxuICAvLyB0aGVuIHdlJ3JlIG9rLlxuICBpZiAodGhpcy5hbGxvd0hhbGZPcGVuIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpIHJldHVybjtcblxuICAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uXG4gIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLlxuICBwbmEubmV4dFRpY2sob25FbmROVCwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIG9uRW5kTlQoc2VsZikge1xuICBzZWxmLmVuZCgpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5EdXBsZXgucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICB0aGlzLmVuZCgpO1xuXG4gIHBuYS5uZXh0VGljayhjYiwgZXJyKTtcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL19zdHJlYW1fdHJhbnNmb3JtJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkYWJsZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblJlYWRhYmxlLlJlYWRhYmxlU3RhdGUgPSBSZWFkYWJsZVN0YXRlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG52YXIgRUVsaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGRlYnVnVXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBkZWJ1ZyA9IHZvaWQgMDtcbmlmIChkZWJ1Z1V0aWwgJiYgZGVidWdVdGlsLmRlYnVnbG9nKSB7XG4gIGRlYnVnID0gZGVidWdVdGlsLmRlYnVnbG9nKCdzdHJlYW0nKTtcbn0gZWxzZSB7XG4gIGRlYnVnID0gZnVuY3Rpb24gKCkge307XG59XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlckxpc3QgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdCcpO1xudmFyIGRlc3Ryb3lJbXBsID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3knKTtcbnZhciBTdHJpbmdEZWNvZGVyO1xuXG51dGlsLmluaGVyaXRzKFJlYWRhYmxlLCBTdHJlYW0pO1xuXG52YXIga1Byb3h5RXZlbnRzID0gWydlcnJvcicsICdjbG9zZScsICdkZXN0cm95JywgJ3BhdXNlJywgJ3Jlc3VtZSddO1xuXG5mdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuKSB7XG4gIC8vIFNhZGx5IHRoaXMgaXMgbm90IGNhY2hlYWJsZSBhcyBzb21lIGxpYnJhcmllcyBidW5kbGUgdGhlaXIgb3duXG4gIC8vIGV2ZW50IGVtaXR0ZXIgaW1wbGVtZW50YXRpb24gd2l0aCB0aGVtLlxuICBpZiAodHlwZW9mIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIoZXZlbnQsIGZuKTtcblxuICAvLyBUaGlzIGlzIGEgaGFjayB0byBtYWtlIHN1cmUgdGhhdCBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgYW55XG4gIC8vIHVzZXJsYW5kIG9uZXMuICBORVZFUiBETyBUSElTLiBUaGlzIGlzIGhlcmUgb25seSBiZWNhdXNlIHRoaXMgY29kZSBuZWVkc1xuICAvLyB0byBjb250aW51ZSB0byB3b3JrIHdpdGggb2xkZXIgdmVyc2lvbnMgb2YgTm9kZS5qcyB0aGF0IGRvIG5vdCBpbmNsdWRlXG4gIC8vIHRoZSBwcmVwZW5kTGlzdGVuZXIoKSBtZXRob2QuIFRoZSBnb2FsIGlzIHRvIGV2ZW50dWFsbHkgcmVtb3ZlIHRoaXMgaGFjay5cbiAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1tldmVudF0pIGVtaXR0ZXIub24oZXZlbnQsIGZuKTtlbHNlIGlmIChpc0FycmF5KGVtaXR0ZXIuX2V2ZW50c1tldmVudF0pKSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdLnVuc2hpZnQoZm4pO2Vsc2UgZW1pdHRlci5fZXZlbnRzW2V2ZW50XSA9IFtmbiwgZW1pdHRlci5fZXZlbnRzW2V2ZW50XV07XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0uXG4gIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLlxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnLiBVc2VkIHRvIG1ha2UgcmVhZChuKSBpZ25vcmUgbiBhbmQgdG9cbiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXlcbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggaXQgc3RvcHMgY2FsbGluZyBfcmVhZCgpIHRvIGZpbGwgdGhlIGJ1ZmZlclxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIFwiZG9uJ3QgY2FsbCBfcmVhZCBwcmVlbXB0aXZlbHkgZXZlclwiXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciByZWFkYWJsZUh3bSA9IG9wdGlvbnMucmVhZGFibGVIaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuXG4gIGlmIChod20gfHwgaHdtID09PSAwKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod207ZWxzZSBpZiAoaXNEdXBsZXggJiYgKHJlYWRhYmxlSHdtIHx8IHJlYWRhYmxlSHdtID09PSAwKSkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gcmVhZGFibGVId207ZWxzZSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIEEgbGlua2VkIGxpc3QgaXMgdXNlZCB0byBzdG9yZSBkYXRhIGNodW5rcyBpbnN0ZWFkIG9mIGFuIGFycmF5IGJlY2F1c2UgdGhlXG4gIC8vIGxpbmtlZCBsaXN0IGNhbiByZW1vdmUgZWxlbWVudHMgZnJvbSB0aGUgYmVnaW5uaW5nIGZhc3RlciB0aGFuXG4gIC8vIGFycmF5LnNoaWZ0KClcbiAgdGhpcy5idWZmZXIgPSBuZXcgQnVmZmVyTGlzdCgpO1xuICB0aGlzLmxlbmd0aCA9IDA7XG4gIHRoaXMucGlwZXMgPSBudWxsO1xuICB0aGlzLnBpcGVzQ291bnQgPSAwO1xuICB0aGlzLmZsb3dpbmcgPSBudWxsO1xuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIHRoaXMuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB0aGlzLnJlYWRpbmcgPSBmYWxzZTtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBldmVudCAncmVhZGFibGUnLydkYXRhJyBpcyBlbWl0dGVkXG4gIC8vIGltbWVkaWF0ZWx5LCBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlXG4gIC8vIGFueSBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCByZWFkIGNhbGwuXG4gIHRoaXMuc3luYyA9IHRydWU7XG5cbiAgLy8gd2hlbmV2ZXIgd2UgcmV0dXJuIG51bGwsIHRoZW4gd2Ugc2V0IGEgZmxhZyB0byBzYXlcbiAgLy8gdGhhdCB3ZSdyZSBhd2FpdGluZyBhICdyZWFkYWJsZScgZXZlbnQgZW1pc3Npb24uXG4gIHRoaXMubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMucmVhZGFibGVMaXN0ZW5pbmcgPSBmYWxzZTtcbiAgdGhpcy5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcblxuICAvLyBoYXMgaXQgYmVlbiBkZXN0cm95ZWRcbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyB0aGUgbnVtYmVyIG9mIHdyaXRlcnMgdGhhdCBhcmUgYXdhaXRpbmcgYSBkcmFpbiBldmVudCBpbiAucGlwZSgpc1xuICB0aGlzLmF3YWl0RHJhaW4gPSAwO1xuXG4gIC8vIGlmIHRydWUsIGEgbWF5YmVSZWFkTW9yZSBoYXMgYmVlbiBzY2hlZHVsZWRcbiAgdGhpcy5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuXG4gIHRoaXMuZGVjb2RlciA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBudWxsO1xuICBpZiAob3B0aW9ucy5lbmNvZGluZykge1xuICAgIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gICAgdGhpcy5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIob3B0aW9ucy5lbmNvZGluZyk7XG4gICAgdGhpcy5lbmNvZGluZyA9IG9wdGlvbnMuZW5jb2Rpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkYWJsZSkpIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZSA9IG5ldyBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeVxuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZWFkID09PSAnZnVuY3Rpb24nKSB0aGlzLl9yZWFkID0gb3B0aW9ucy5yZWFkO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuUmVhZGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIGNiKGVycik7XG59O1xuXG4vLyBNYW51YWxseSBzaG92ZSBzb21ldGhpbmcgaW50byB0aGUgcmVhZCgpIGJ1ZmZlci5cbi8vIFRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBoaWdoV2F0ZXJNYXJrIGhhcyBub3QgYmVlbiBoaXQgeWV0LFxuLy8gc2ltaWxhciB0byBob3cgV3JpdGFibGUud3JpdGUoKSByZXR1cm5zIHRydWUgaWYgeW91IHNob3VsZFxuLy8gd3JpdGUoKSBzb21lIG1vcmUuXG5SZWFkYWJsZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHNraXBDaHVua0NoZWNrO1xuXG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuY29kaW5nIHx8IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcbiAgICAgIGlmIChlbmNvZGluZyAhPT0gc3RhdGUuZW5jb2RpbmcpIHtcbiAgICAgICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgICBlbmNvZGluZyA9ICcnO1xuICAgICAgfVxuICAgICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgZW5jb2RpbmcsIGZhbHNlLCBza2lwQ2h1bmtDaGVjayk7XG59O1xuXG4vLyBVbnNoaWZ0IHNob3VsZCAqYWx3YXlzKiBiZSBzb21ldGhpbmcgZGlyZWN0bHkgb3V0IG9mIHJlYWQoKVxuUmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIG51bGwsIHRydWUsIGZhbHNlKTtcbn07XG5cbmZ1bmN0aW9uIHJlYWRhYmxlQWRkQ2h1bmsoc3RyZWFtLCBjaHVuaywgZW5jb2RpbmcsIGFkZFRvRnJvbnQsIHNraXBDaHVua0NoZWNrKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVyO1xuICAgIGlmICghc2tpcENodW5rQ2hlY2spIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuayk7XG4gICAgaWYgKGVyKSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rICYmIGNodW5rLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmICFzdGF0ZS5vYmplY3RNb2RlICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihjaHVuaykgIT09IEJ1ZmZlci5wcm90b3R5cGUpIHtcbiAgICAgICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFkZFRvRnJvbnQpIHtcbiAgICAgICAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQnKSk7ZWxzZSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmVuZGVkKSB7XG4gICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc3RyZWFtLnB1c2goKSBhZnRlciBFT0YnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFlbmNvZGluZykge1xuICAgICAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG4gICAgICAgICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsubGVuZ3RoICE9PSAwKSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO2Vsc2UgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghYWRkVG9Gcm9udCkge1xuICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZWVkTW9yZURhdGEoc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgYWRkVG9Gcm9udCkge1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgIXN0YXRlLnN5bmMpIHtcbiAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGNodW5rKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB1cGRhdGUgdGhlIGJ1ZmZlciBpbmZvLlxuICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICBpZiAoYWRkVG9Gcm9udCkgc3RhdGUuYnVmZmVyLnVuc2hpZnQoY2h1bmspO2Vsc2Ugc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuXG4gICAgaWYgKHN0YXRlLm5lZWRSZWFkYWJsZSkgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG4gIH1cbiAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuaykge1xuICB2YXIgZXI7XG4gIGlmICghX2lzVWludDhBcnJheShjaHVuaykgJiYgdHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgcmV0dXJuIGVyO1xufVxuXG4vLyBpZiBpdCdzIHBhc3QgdGhlIGhpZ2ggd2F0ZXIgbWFyaywgd2UgY2FuIHB1c2ggaW4gc29tZSBtb3JlLlxuLy8gQWxzbywgaWYgd2UgaGF2ZSBubyBkYXRhIHlldCwgd2UgY2FuIHN0YW5kIHNvbWVcbi8vIG1vcmUgYnl0ZXMuICBUaGlzIGlzIHRvIHdvcmsgYXJvdW5kIGNhc2VzIHdoZXJlIGh3bT0wLFxuLy8gc3VjaCBhcyB0aGUgcmVwbC4gIEFsc28sIGlmIHRoZSBwdXNoKCkgdHJpZ2dlcmVkIGFcbi8vIHJlYWRhYmxlIGV2ZW50LCBhbmQgdGhlIHVzZXIgY2FsbGVkIHJlYWQobGFyZ2VOdW1iZXIpIHN1Y2ggdGhhdFxuLy8gbmVlZFJlYWRhYmxlIHdhcyBzZXQsIHRoZW4gd2Ugb3VnaHQgdG8gcHVzaCBtb3JlLCBzbyB0aGF0IGFub3RoZXJcbi8vICdyZWFkYWJsZScgZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQuXG5mdW5jdGlvbiBuZWVkTW9yZURhdGEoc3RhdGUpIHtcbiAgcmV0dXJuICFzdGF0ZS5lbmRlZCAmJiAoc3RhdGUubmVlZFJlYWRhYmxlIHx8IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUubGVuZ3RoID09PSAwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLmlzUGF1c2VkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID09PSBmYWxzZTtcbn07XG5cbi8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24gKGVuYykge1xuICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nID0gZW5jO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIERvbid0IHJhaXNlIHRoZSBod20gPiA4TUJcbnZhciBNQVhfSFdNID0gMHg4MDAwMDA7XG5mdW5jdGlvbiBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKSB7XG4gIGlmIChuID49IE1BWF9IV00pIHtcbiAgICBuID0gTUFYX0hXTTtcbiAgfSBlbHNlIHtcbiAgICAvLyBHZXQgdGhlIG5leHQgaGlnaGVzdCBwb3dlciBvZiAyIHRvIHByZXZlbnQgaW5jcmVhc2luZyBod20gZXhjZXNzaXZlbHkgaW5cbiAgICAvLyB0aW55IGFtb3VudHNcbiAgICBuLS07XG4gICAgbiB8PSBuID4+PiAxO1xuICAgIG4gfD0gbiA+Pj4gMjtcbiAgICBuIHw9IG4gPj4+IDQ7XG4gICAgbiB8PSBuID4+PiA4O1xuICAgIG4gfD0gbiA+Pj4gMTY7XG4gICAgbisrO1xuICB9XG4gIHJldHVybiBuO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGhvd011Y2hUb1JlYWQobiwgc3RhdGUpIHtcbiAgaWYgKG4gPD0gMCB8fCBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIHJldHVybiAwO1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0dXJuIDE7XG4gIGlmIChuICE9PSBuKSB7XG4gICAgLy8gT25seSBmbG93IG9uZSBidWZmZXIgYXQgYSB0aW1lXG4gICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoKSByZXR1cm4gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YS5sZW5ndGg7ZWxzZSByZXR1cm4gc3RhdGUubGVuZ3RoO1xuICB9XG4gIC8vIElmIHdlJ3JlIGFza2luZyBmb3IgbW9yZSB0aGFuIHRoZSBjdXJyZW50IGh3bSwgdGhlbiByYWlzZSB0aGUgaHdtLlxuICBpZiAobiA+IHN0YXRlLmhpZ2hXYXRlck1hcmspIHN0YXRlLmhpZ2hXYXRlck1hcmsgPSBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKTtcbiAgaWYgKG4gPD0gc3RhdGUubGVuZ3RoKSByZXR1cm4gbjtcbiAgLy8gRG9uJ3QgaGF2ZSBlbm91Z2hcbiAgaWYgKCFzdGF0ZS5lbmRlZCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbn1cblxuLy8geW91IGNhbiBvdmVycmlkZSBlaXRoZXIgdGhpcyBtZXRob2QsIG9yIHRoZSBhc3luYyBfcmVhZChuKSBiZWxvdy5cblJlYWRhYmxlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgZGVidWcoJ3JlYWQnLCBuKTtcbiAgbiA9IHBhcnNlSW50KG4sIDEwKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIG5PcmlnID0gbjtcblxuICBpZiAobiAhPT0gMCkgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG5cbiAgLy8gaWYgd2UncmUgZG9pbmcgcmVhZCgwKSB0byB0cmlnZ2VyIGEgcmVhZGFibGUgZXZlbnQsIGJ1dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYSBidW5jaCBvZiBkYXRhIGluIHRoZSBidWZmZXIsIHRoZW4ganVzdCB0cmlnZ2VyXG4gIC8vIHRoZSAncmVhZGFibGUnIGV2ZW50IGFuZCBtb3ZlIG9uLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5uZWVkUmVhZGFibGUgJiYgKHN0YXRlLmxlbmd0aCA+PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmVuZGVkKSkge1xuICAgIGRlYnVnKCdyZWFkOiBlbWl0UmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtlbHNlIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG4gPSBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKTtcblxuICAvLyBpZiB3ZSd2ZSBlbmRlZCwgYW5kIHdlJ3JlIG5vdyBjbGVhciwgdGhlbiBmaW5pc2ggaXQgdXAuXG4gIGlmIChuID09PSAwICYmIHN0YXRlLmVuZGVkKSB7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgZW5kUmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlXG4gIC8vICpiZWxvdyogdGhlIGNhbGwgdG8gX3JlYWQuICBUaGUgcmVhc29uIGlzIHRoYXQgaW4gY2VydGFpblxuICAvLyBzeW50aGV0aWMgc3RyZWFtIGNhc2VzLCBzdWNoIGFzIHBhc3N0aHJvdWdoIHN0cmVhbXMsIF9yZWFkXG4gIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2VcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSByZWFkIGJ1ZmZlciwgcHJvdmlkaW5nIGVub3VnaCBkYXRhIHdoZW5cbiAgLy8gYmVmb3JlIHRoZXJlIHdhcyAqbm90KiBlbm91Z2guXG4gIC8vXG4gIC8vIFNvLCB0aGUgc3RlcHMgYXJlOlxuICAvLyAxLiBGaWd1cmUgb3V0IHdoYXQgdGhlIHN0YXRlIG9mIHRoaW5ncyB3aWxsIGJlIGFmdGVyIHdlIGRvXG4gIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuXG4gIC8vXG4gIC8vIDIuIElmIHRoYXQgcmVzdWx0aW5nIHN0YXRlIHdpbGwgdHJpZ2dlciBhIF9yZWFkLCB0aGVuIGNhbGwgX3JlYWQuXG4gIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpc1xuICAvLyBkZWVwbHkgdWdseSB0byB3cml0ZSBBUElzIHRoaXMgd2F5LCBidXQgdGhhdCBzdGlsbCBkb2Vzbid0IG1lYW5cbiAgLy8gdGhhdCB0aGUgUmVhZGFibGUgY2xhc3Mgc2hvdWxkIGJlaGF2ZSBpbXByb3Blcmx5LCBhcyBzdHJlYW1zIGFyZVxuICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLlxuICAvLyBUYWtlIG5vdGUgaWYgdGhlIF9yZWFkIGNhbGwgaXMgc3luYyBvciBhc3luYyAoaWUsIGlmIHRoZSByZWFkIGNhbGxcbiAgLy8gaGFzIHJldHVybmVkIHlldCksIHNvIHRoYXQgd2Uga25vdyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNhZmUgdG8gZW1pdFxuICAvLyAncmVhZGFibGUnIGV0Yy5cbiAgLy9cbiAgLy8gMy4gQWN0dWFsbHkgcHVsbCB0aGUgcmVxdWVzdGVkIGNodW5rcyBvdXQgb2YgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuLlxuXG4gIC8vIGlmIHdlIG5lZWQgYSByZWFkYWJsZSBldmVudCwgdGhlbiB3ZSBuZWVkIHRvIGRvIHNvbWUgcmVhZGluZy5cbiAgdmFyIGRvUmVhZCA9IHN0YXRlLm5lZWRSZWFkYWJsZTtcbiAgZGVidWcoJ25lZWQgcmVhZGFibGUnLCBkb1JlYWQpO1xuXG4gIC8vIGlmIHdlIGN1cnJlbnRseSBoYXZlIGxlc3MgdGhhbiB0aGUgaGlnaFdhdGVyTWFyaywgdGhlbiBhbHNvIHJlYWQgc29tZVxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwIHx8IHN0YXRlLmxlbmd0aCAtIG4gPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZG9SZWFkID0gdHJ1ZTtcbiAgICBkZWJ1ZygnbGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmsnLCBkb1JlYWQpO1xuICB9XG5cbiAgLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHlcbiAgLy8gcmVhZGluZywgdGhlbiBpdCdzIHVubmVjZXNzYXJ5LlxuICBpZiAoc3RhdGUuZW5kZWQgfHwgc3RhdGUucmVhZGluZykge1xuICAgIGRvUmVhZCA9IGZhbHNlO1xuICAgIGRlYnVnKCdyZWFkaW5nIG9yIGVuZGVkJywgZG9SZWFkKTtcbiAgfSBlbHNlIGlmIChkb1JlYWQpIHtcbiAgICBkZWJ1ZygnZG8gcmVhZCcpO1xuICAgIHN0YXRlLnJlYWRpbmcgPSB0cnVlO1xuICAgIHN0YXRlLnN5bmMgPSB0cnVlO1xuICAgIC8vIGlmIHRoZSBsZW5ndGggaXMgY3VycmVudGx5IHplcm8sIHRoZW4gd2UgKm5lZWQqIGEgcmVhZGFibGUgZXZlbnQuXG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAvLyBjYWxsIGludGVybmFsIHJlYWQgbWV0aG9kXG4gICAgdGhpcy5fcmVhZChzdGF0ZS5oaWdoV2F0ZXJNYXJrKTtcbiAgICBzdGF0ZS5zeW5jID0gZmFsc2U7XG4gICAgLy8gSWYgX3JlYWQgcHVzaGVkIGRhdGEgc3luY2hyb25vdXNseSwgdGhlbiBgcmVhZGluZ2Agd2lsbCBiZSBmYWxzZSxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byByZS1ldmFsdWF0ZSBob3cgbXVjaCBkYXRhIHdlIGNhbiByZXR1cm4gdG8gdGhlIHVzZXIuXG4gICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSBuID0gaG93TXVjaFRvUmVhZChuT3JpZywgc3RhdGUpO1xuICB9XG5cbiAgdmFyIHJldDtcbiAgaWYgKG4gPiAwKSByZXQgPSBmcm9tTGlzdChuLCBzdGF0ZSk7ZWxzZSByZXQgPSBudWxsO1xuXG4gIGlmIChyZXQgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIG4gPSAwO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmxlbmd0aCAtPSBuO1xuICB9XG5cbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIElmIHdlIGhhdmUgbm90aGluZyBpbiB0aGUgYnVmZmVyLCB0aGVuIHdlIHdhbnQgdG8ga25vd1xuICAgIC8vIGFzIHNvb24gYXMgd2UgKmRvKiBnZXQgc29tZXRoaW5nIGludG8gdGhlIGJ1ZmZlci5cbiAgICBpZiAoIXN0YXRlLmVuZGVkKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gICAgLy8gSWYgd2UgdHJpZWQgdG8gcmVhZCgpIHBhc3QgdGhlIEVPRiwgdGhlbiBlbWl0IGVuZCBvbiB0aGUgbmV4dCB0aWNrLlxuICAgIGlmIChuT3JpZyAhPT0gbiAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7XG4gIH1cblxuICBpZiAocmV0ICE9PSBudWxsKSB0aGlzLmVtaXQoJ2RhdGEnLCByZXQpO1xuXG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmVuZGVkKSByZXR1cm47XG4gIGlmIChzdGF0ZS5kZWNvZGVyKSB7XG4gICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSB7XG4gICAgICBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG4gICAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgfVxuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcblxuICAvLyBlbWl0ICdyZWFkYWJsZScgbm93IHRvIG1ha2Ugc3VyZSBpdCBnZXRzIHBpY2tlZCB1cC5cbiAgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG59XG5cbi8vIERvbid0IGVtaXQgcmVhZGFibGUgcmlnaHQgYXdheSBpbiBzeW5jIG1vZGUsIGJlY2F1c2UgdGhpcyBjYW4gdHJpZ2dlclxuLy8gYW5vdGhlciByZWFkKCkgY2FsbCA9PiBzdGFjayBvdmVyZmxvdy4gIFRoaXMgd2F5LCBpdCBtaWdodCB0cmlnZ2VyXG4vLyBhIG5leHRUaWNrIHJlY3Vyc2lvbiB3YXJuaW5nLCBidXQgdGhhdCdzIG5vdCBzbyBiYWQuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIGlmICghc3RhdGUuZW1pdHRlZFJlYWRhYmxlKSB7XG4gICAgZGVidWcoJ2VtaXRSZWFkYWJsZScsIHN0YXRlLmZsb3dpbmcpO1xuICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgaWYgKHN0YXRlLnN5bmMpIHBuYS5uZXh0VGljayhlbWl0UmVhZGFibGVfLCBzdHJlYW0pO2Vsc2UgZW1pdFJlYWRhYmxlXyhzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZV8oc3RyZWFtKSB7XG4gIGRlYnVnKCdlbWl0IHJlYWRhYmxlJyk7XG4gIHN0cmVhbS5lbWl0KCdyZWFkYWJsZScpO1xuICBmbG93KHN0cmVhbSk7XG59XG5cbi8vIGF0IHRoaXMgcG9pbnQsIHRoZSB1c2VyIGhhcyBwcmVzdW1hYmx5IHNlZW4gdGhlICdyZWFkYWJsZScgZXZlbnQsXG4vLyBhbmQgY2FsbGVkIHJlYWQoKSB0byBjb25zdW1lIHNvbWUgZGF0YS4gIHRoYXQgbWF5IGhhdmUgdHJpZ2dlcmVkXG4vLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZlxuLy8gaXQncyBpbiBwcm9ncmVzcy5cbi8vIEhvd2V2ZXIsIGlmIHdlJ3JlIG5vdCBlbmRlZCwgb3IgcmVhZGluZywgYW5kIHRoZSBsZW5ndGggPCBod20sXG4vLyB0aGVuIGdvIGFoZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LlxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZ01vcmUpIHtcbiAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKG1heWJlUmVhZE1vcmVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlXyhzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIHdoaWxlICghc3RhdGUucmVhZGluZyAmJiAhc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUuZW5kZWQgJiYgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRlYnVnKCdtYXliZVJlYWRNb3JlIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICAgIGlmIChsZW4gPT09IHN0YXRlLmxlbmd0aClcbiAgICAgIC8vIGRpZG4ndCBnZXQgYW55IGRhdGEsIHN0b3Agc3Bpbm5pbmcuXG4gICAgICBicmVhaztlbHNlIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgfVxuICBzdGF0ZS5yZWFkaW5nTW9yZSA9IGZhbHNlO1xufVxuXG4vLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyBjYWxsIGNiKGVyLCBkYXRhKSB3aGVyZSBkYXRhIGlzIDw9IG4gaW4gbGVuZ3RoLlxuLy8gZm9yIHZpcnR1YWwgKG5vbi1zdHJpbmcsIG5vbi1idWZmZXIpIHN0cmVhbXMsIFwibGVuZ3RoXCIgaXMgc29tZXdoYXRcbi8vIGFyYml0cmFyeSwgYW5kIHBlcmhhcHMgbm90IHZlcnkgbWVhbmluZ2Z1bC5cblJlYWRhYmxlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ19yZWFkKCkgaXMgbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoZGVzdCwgcGlwZU9wdHMpIHtcbiAgdmFyIHNyYyA9IHRoaXM7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgc3dpdGNoIChzdGF0ZS5waXBlc0NvdW50KSB7XG4gICAgY2FzZSAwOlxuICAgICAgc3RhdGUucGlwZXMgPSBkZXN0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7XG4gICAgICBicmVhaztcbiAgfVxuICBzdGF0ZS5waXBlc0NvdW50ICs9IDE7XG4gIGRlYnVnKCdwaXBlIGNvdW50PSVkIG9wdHM9JWonLCBzdGF0ZS5waXBlc0NvdW50LCBwaXBlT3B0cyk7XG5cbiAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZG91dCAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZGVycjtcblxuICB2YXIgZW5kRm4gPSBkb0VuZCA/IG9uZW5kIDogdW5waXBlO1xuICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgcG5hLm5leHRUaWNrKGVuZEZuKTtlbHNlIHNyYy5vbmNlKCdlbmQnLCBlbmRGbik7XG5cbiAgZGVzdC5vbigndW5waXBlJywgb251bnBpcGUpO1xuICBmdW5jdGlvbiBvbnVucGlwZShyZWFkYWJsZSwgdW5waXBlSW5mbykge1xuICAgIGRlYnVnKCdvbnVucGlwZScpO1xuICAgIGlmIChyZWFkYWJsZSA9PT0gc3JjKSB7XG4gICAgICBpZiAodW5waXBlSW5mbyAmJiB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHVucGlwZUluZm8uaGFzVW5waXBlZCA9IHRydWU7XG4gICAgICAgIGNsZWFudXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBkZWJ1Zygnb25lbmQnKTtcbiAgICBkZXN0LmVuZCgpO1xuICB9XG5cbiAgLy8gd2hlbiB0aGUgZGVzdCBkcmFpbnMsIGl0IHJlZHVjZXMgdGhlIGF3YWl0RHJhaW4gY291bnRlclxuICAvLyBvbiB0aGUgc291cmNlLiAgVGhpcyB3b3VsZCBiZSBtb3JlIGVsZWdhbnQgd2l0aCBhIC5vbmNlKClcbiAgLy8gaGFuZGxlciBpbiBmbG93KCksIGJ1dCBhZGRpbmcgYW5kIHJlbW92aW5nIHJlcGVhdGVkbHkgaXNcbiAgLy8gdG9vIHNsb3cuXG4gIHZhciBvbmRyYWluID0gcGlwZU9uRHJhaW4oc3JjKTtcbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICB2YXIgY2xlYW5lZFVwID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgZGVidWcoJ2NsZWFudXAnKTtcbiAgICAvLyBjbGVhbnVwIGV2ZW50IGhhbmRsZXJzIG9uY2UgdGhlIHBpcGUgaXMgYnJva2VuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZScsIG9udW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIHVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcblxuICAgIGNsZWFuZWRVcCA9IHRydWU7XG5cbiAgICAvLyBpZiB0aGUgcmVhZGVyIGlzIHdhaXRpbmcgZm9yIGEgZHJhaW4gZXZlbnQgZnJvbSB0aGlzXG4gICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0XG4gICAgLy8gZmxvd2luZyBhZ2Fpbi5cbiAgICAvLyBTbywgaWYgdGhpcyBpcyBhd2FpdGluZyBhIGRyYWluLCB0aGVuIHdlIGp1c3QgY2FsbCBpdCBub3cuXG4gICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLlxuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluICYmICghZGVzdC5fd3JpdGFibGVTdGF0ZSB8fCBkZXN0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbikpIG9uZHJhaW4oKTtcbiAgfVxuXG4gIC8vIElmIHRoZSB1c2VyIHB1c2hlcyBtb3JlIGRhdGEgd2hpbGUgd2UncmUgd3JpdGluZyB0byBkZXN0IHRoZW4gd2UnbGwgZW5kIHVwXG4gIC8vIGluIG9uZGF0YSBhZ2Fpbi4gSG93ZXZlciwgd2Ugb25seSB3YW50IHRvIGluY3JlYXNlIGF3YWl0RHJhaW4gb25jZSBiZWNhdXNlXG4gIC8vIGRlc3Qgd2lsbCBvbmx5IGVtaXQgb25lICdkcmFpbicgZXZlbnQgZm9yIHRoZSBtdWx0aXBsZSB3cml0ZXMuXG4gIC8vID0+IEludHJvZHVjZSBhIGd1YXJkIG9uIGluY3JlYXNpbmcgYXdhaXREcmFpbi5cbiAgdmFyIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcbiAgc3JjLm9uKCdkYXRhJywgb25kYXRhKTtcbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgZGVidWcoJ29uZGF0YScpO1xuICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcbiAgICB2YXIgcmV0ID0gZGVzdC53cml0ZShjaHVuayk7XG4gICAgaWYgKGZhbHNlID09PSByZXQgJiYgIWluY3JlYXNlZEF3YWl0RHJhaW4pIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHVucGlwZWQgZHVyaW5nIGBkZXN0LndyaXRlKClgLCBpdCBpcyBwb3NzaWJsZVxuICAgICAgLy8gdG8gZ2V0IHN0dWNrIGluIGEgcGVybWFuZW50bHkgcGF1c2VkIHN0YXRlIGlmIHRoYXQgd3JpdGVcbiAgICAgIC8vIGFsc28gcmV0dXJuZWQgZmFsc2UuXG4gICAgICAvLyA9PiBDaGVjayB3aGV0aGVyIGBkZXN0YCBpcyBzdGlsbCBhIHBpcGluZyBkZXN0aW5hdGlvbi5cbiAgICAgIGlmICgoc3RhdGUucGlwZXNDb3VudCA9PT0gMSAmJiBzdGF0ZS5waXBlcyA9PT0gZGVzdCB8fCBzdGF0ZS5waXBlc0NvdW50ID4gMSAmJiBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KSAhPT0gLTEpICYmICFjbGVhbmVkVXApIHtcbiAgICAgICAgZGVidWcoJ2ZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZScsIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKTtcbiAgICAgICAgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4rKztcbiAgICAgICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IHRydWU7XG4gICAgICB9XG4gICAgICBzcmMucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgZGVzdCBoYXMgYW4gZXJyb3IsIHRoZW4gc3RvcCBwaXBpbmcgaW50byBpdC5cbiAgLy8gaG93ZXZlciwgZG9uJ3Qgc3VwcHJlc3MgdGhlIHRocm93aW5nIGJlaGF2aW9yIGZvciB0aGlzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgZGVidWcoJ29uZXJyb3InLCBlcik7XG4gICAgdW5waXBlKCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBpZiAoRUVsaXN0ZW5lckNvdW50KGRlc3QsICdlcnJvcicpID09PSAwKSBkZXN0LmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9XG5cbiAgLy8gTWFrZSBzdXJlIG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSB1c2VybGFuZCBvbmVzLlxuICBwcmVwZW5kTGlzdGVuZXIoZGVzdCwgJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgLy8gQm90aCBjbG9zZSBhbmQgZmluaXNoIHNob3VsZCB0cmlnZ2VyIHVucGlwZSwgYnV0IG9ubHkgb25jZS5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdjbG9zZScsIG9uY2xvc2UpO1xuICBmdW5jdGlvbiBvbmZpbmlzaCgpIHtcbiAgICBkZWJ1Zygnb25maW5pc2gnKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnZmluaXNoJywgb25maW5pc2gpO1xuXG4gIGZ1bmN0aW9uIHVucGlwZSgpIHtcbiAgICBkZWJ1ZygndW5waXBlJyk7XG4gICAgc3JjLnVucGlwZShkZXN0KTtcbiAgfVxuXG4gIC8vIHRlbGwgdGhlIGRlc3QgdGhhdCBpdCdzIGJlaW5nIHBpcGVkIHRvXG4gIGRlc3QuZW1pdCgncGlwZScsIHNyYyk7XG5cbiAgLy8gc3RhcnQgdGhlIGZsb3cgaWYgaXQgaGFzbid0IGJlZW4gc3RhcnRlZCBhbHJlYWR5LlxuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGlwZSByZXN1bWUnKTtcbiAgICBzcmMucmVzdW1lKCk7XG4gIH1cblxuICByZXR1cm4gZGVzdDtcbn07XG5cbmZ1bmN0aW9uIHBpcGVPbkRyYWluKHNyYykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdGF0ZSA9IHNyYy5fcmVhZGFibGVTdGF0ZTtcbiAgICBkZWJ1ZygncGlwZU9uRHJhaW4nLCBzdGF0ZS5hd2FpdERyYWluKTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbikgc3RhdGUuYXdhaXREcmFpbi0tO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluID09PSAwICYmIEVFbGlzdGVuZXJDb3VudChzcmMsICdkYXRhJykpIHtcbiAgICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgICAgZmxvdyhzcmMpO1xuICAgIH1cbiAgfTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnVucGlwZSA9IGZ1bmN0aW9uIChkZXN0KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciB1bnBpcGVJbmZvID0geyBoYXNVbnBpcGVkOiBmYWxzZSB9O1xuXG4gIC8vIGlmIHdlJ3JlIG5vdCBwaXBpbmcgYW55d2hlcmUsIHRoZW4gZG8gbm90aGluZy5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDApIHJldHVybiB0aGlzO1xuXG4gIC8vIGp1c3Qgb25lIGRlc3RpbmF0aW9uLiAgbW9zdCBjb21tb24gY2FzZS5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHtcbiAgICAvLyBwYXNzZWQgaW4gb25lLCBidXQgaXQncyBub3QgdGhlIHJpZ2h0IG9uZS5cbiAgICBpZiAoZGVzdCAmJiBkZXN0ICE9PSBzdGF0ZS5waXBlcykgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAoIWRlc3QpIGRlc3QgPSBzdGF0ZS5waXBlcztcblxuICAgIC8vIGdvdCBhIG1hdGNoLlxuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgaWYgKGRlc3QpIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBzbG93IGNhc2UuIG11bHRpcGxlIHBpcGUgZGVzdGluYXRpb25zLlxuXG4gIGlmICghZGVzdCkge1xuICAgIC8vIHJlbW92ZSBhbGwuXG4gICAgdmFyIGRlc3RzID0gc3RhdGUucGlwZXM7XG4gICAgdmFyIGxlbiA9IHN0YXRlLnBpcGVzQ291bnQ7XG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRlc3RzW2ldLmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIH1yZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHRyeSB0byBmaW5kIHRoZSByaWdodCBvbmUuXG4gIHZhciBpbmRleCA9IGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpO1xuICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gdGhpcztcblxuICBzdGF0ZS5waXBlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICBzdGF0ZS5waXBlc0NvdW50IC09IDE7XG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSBzdGF0ZS5waXBlcyA9IHN0YXRlLnBpcGVzWzBdO1xuXG4gIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBzZXQgdXAgZGF0YSBldmVudHMgaWYgdGhleSBhcmUgYXNrZWQgZm9yXG4vLyBFbnN1cmUgcmVhZGFibGUgbGlzdGVuZXJzIGV2ZW50dWFsbHkgZ2V0IHNvbWV0aGluZ1xuUmVhZGFibGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2LCBmbikge1xuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbik7XG5cbiAgaWYgKGV2ID09PSAnZGF0YScpIHtcbiAgICAvLyBTdGFydCBmbG93aW5nIG9uIG5leHQgdGljayBpZiBzdHJlYW0gaXNuJ3QgZXhwbGljaXRseSBwYXVzZWRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nICE9PSBmYWxzZSkgdGhpcy5yZXN1bWUoKTtcbiAgfSBlbHNlIGlmIChldiA9PT0gJ3JlYWRhYmxlJykge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmICFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZykge1xuICAgICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICAgICAgcG5hLm5leHRUaWNrKG5SZWFkaW5nTmV4dFRpY2ssIHRoaXMpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5sZW5ndGgpIHtcbiAgICAgICAgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuUmVhZGFibGUucHJvdG90eXBlLmFkZExpc3RlbmVyID0gUmVhZGFibGUucHJvdG90eXBlLm9uO1xuXG5mdW5jdGlvbiBuUmVhZGluZ05leHRUaWNrKHNlbGYpIHtcbiAgZGVidWcoJ3JlYWRhYmxlIG5leHR0aWNrIHJlYWQgMCcpO1xuICBzZWxmLnJlYWQoMCk7XG59XG5cbi8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUElcbi8vIElmIHRoZSB1c2VyIHVzZXMgdGhlbSwgdGhlbiBzd2l0Y2ggaW50byBvbGQgbW9kZS5cblJlYWRhYmxlLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdyZXN1bWUnKTtcbiAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICByZXN1bWUodGhpcywgc3RhdGUpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gcmVzdW1lKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZXN1bWVTY2hlZHVsZWQpIHtcbiAgICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhyZXN1bWVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN1bWVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfVxuXG4gIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuICBzdGF0ZS5hd2FpdERyYWluID0gMDtcbiAgc3RyZWFtLmVtaXQoJ3Jlc3VtZScpO1xuICBmbG93KHN0cmVhbSk7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5yZWFkaW5nKSBzdHJlYW0ucmVhZCgwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2FsbCBwYXVzZSBmbG93aW5nPSVqJywgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTtcbiAgaWYgKGZhbHNlICE9PSB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGF1c2UnKTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BhdXNlJyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmbG93KHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGRlYnVnKCdmbG93Jywgc3RhdGUuZmxvd2luZyk7XG4gIHdoaWxlIChzdGF0ZS5mbG93aW5nICYmIHN0cmVhbS5yZWFkKCkgIT09IG51bGwpIHt9XG59XG5cbi8vIHdyYXAgYW4gb2xkLXN0eWxlIHN0cmVhbSBhcyB0aGUgYXN5bmMgZGF0YSBzb3VyY2UuXG4vLyBUaGlzIGlzICpub3QqIHBhcnQgb2YgdGhlIHJlYWRhYmxlIHN0cmVhbSBpbnRlcmZhY2UuXG4vLyBJdCBpcyBhbiB1Z2x5IHVuZm9ydHVuYXRlIG1lc3Mgb2YgaGlzdG9yeS5cblJlYWRhYmxlLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKHN0cmVhbSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBwYXVzZWQgPSBmYWxzZTtcblxuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBlbmQnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhc3RhdGUuZW5kZWQpIHtcbiAgICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICB9XG5cbiAgICBfdGhpcy5wdXNoKG51bGwpO1xuICB9KTtcblxuICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBkYXRhJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG5cbiAgICAvLyBkb24ndCBza2lwIG92ZXIgZmFsc3kgdmFsdWVzIGluIG9iamVjdE1vZGVcbiAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSAmJiAoY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IHVuZGVmaW5lZCkpIHJldHVybjtlbHNlIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiAoIWNodW5rIHx8ICFjaHVuay5sZW5ndGgpKSByZXR1cm47XG5cbiAgICB2YXIgcmV0ID0gX3RoaXMucHVzaChjaHVuayk7XG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIHBhdXNlZCA9IHRydWU7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHByb3h5IGFsbCB0aGUgb3RoZXIgbWV0aG9kcy5cbiAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuXG4gIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7XG4gICAgaWYgKHRoaXNbaV0gPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc3RyZWFtW2ldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzW2ldID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBzdHJlYW1bbWV0aG9kXS5hcHBseShzdHJlYW0sIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KGkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHByb3h5IGNlcnRhaW4gaW1wb3J0YW50IGV2ZW50cy5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCBrUHJveHlFdmVudHMubGVuZ3RoOyBuKyspIHtcbiAgICBzdHJlYW0ub24oa1Byb3h5RXZlbnRzW25dLCB0aGlzLmVtaXQuYmluZCh0aGlzLCBrUHJveHlFdmVudHNbbl0pKTtcbiAgfVxuXG4gIC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBtb3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGVcbiAgLy8gdW5kZXJseWluZyBzdHJlYW0uXG4gIHRoaXMuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICAgIGRlYnVnKCd3cmFwcGVkIF9yZWFkJywgbik7XG4gICAgaWYgKHBhdXNlZCkge1xuICAgICAgcGF1c2VkID0gZmFsc2U7XG4gICAgICBzdHJlYW0ucmVzdW1lKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIGV4cG9zZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seS5cblJlYWRhYmxlLl9mcm9tTGlzdCA9IGZyb21MaXN0O1xuXG4vLyBQbHVjayBvZmYgbiBieXRlcyBmcm9tIGFuIGFycmF5IG9mIGJ1ZmZlcnMuXG4vLyBMZW5ndGggaXMgdGhlIGNvbWJpbmVkIGxlbmd0aHMgb2YgYWxsIHRoZSBidWZmZXJzIGluIHRoZSBsaXN0LlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdChuLCBzdGF0ZSkge1xuICAvLyBub3RoaW5nIGJ1ZmZlcmVkXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuXG4gIHZhciByZXQ7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXQgPSBzdGF0ZS5idWZmZXIuc2hpZnQoKTtlbHNlIGlmICghbiB8fCBuID49IHN0YXRlLmxlbmd0aCkge1xuICAgIC8vIHJlYWQgaXQgYWxsLCB0cnVuY2F0ZSB0aGUgbGlzdFxuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSByZXQgPSBzdGF0ZS5idWZmZXIuam9pbignJyk7ZWxzZSBpZiAoc3RhdGUuYnVmZmVyLmxlbmd0aCA9PT0gMSkgcmV0ID0gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YTtlbHNlIHJldCA9IHN0YXRlLmJ1ZmZlci5jb25jYXQoc3RhdGUubGVuZ3RoKTtcbiAgICBzdGF0ZS5idWZmZXIuY2xlYXIoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZWFkIHBhcnQgb2YgbGlzdFxuICAgIHJldCA9IGZyb21MaXN0UGFydGlhbChuLCBzdGF0ZS5idWZmZXIsIHN0YXRlLmRlY29kZXIpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gRXh0cmFjdHMgb25seSBlbm91Z2ggYnVmZmVyZWQgZGF0YSB0byBzYXRpc2Z5IHRoZSBhbW91bnQgcmVxdWVzdGVkLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdFBhcnRpYWwobiwgbGlzdCwgaGFzU3RyaW5ncykge1xuICB2YXIgcmV0O1xuICBpZiAobiA8IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIHNsaWNlIGlzIHRoZSBzYW1lIGZvciBidWZmZXJzIGFuZCBzdHJpbmdzXG4gICAgcmV0ID0gbGlzdC5oZWFkLmRhdGEuc2xpY2UoMCwgbik7XG4gICAgbGlzdC5oZWFkLmRhdGEgPSBsaXN0LmhlYWQuZGF0YS5zbGljZShuKTtcbiAgfSBlbHNlIGlmIChuID09PSBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBmaXJzdCBjaHVuayBpcyBhIHBlcmZlY3QgbWF0Y2hcbiAgICByZXQgPSBsaXN0LnNoaWZ0KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVzdWx0IHNwYW5zIG1vcmUgdGhhbiBvbmUgYnVmZmVyXG4gICAgcmV0ID0gaGFzU3RyaW5ncyA/IGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIDogY29weUZyb21CdWZmZXIobiwgbGlzdCk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBjaGFyYWN0ZXJzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YVxuLy8gY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSB7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHZhciByZXQgPSBwLmRhdGE7XG4gIG4gLT0gcmV0Lmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgc3RyID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBzdHIubGVuZ3RoID8gc3RyLmxlbmd0aCA6IG47XG4gICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSByZXQgKz0gc3RyO2Vsc2UgcmV0ICs9IHN0ci5zbGljZSgwLCBuKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gc3RyLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBieXRlcyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGEgY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KSB7XG4gIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobik7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHAuZGF0YS5jb3B5KHJldCk7XG4gIG4gLT0gcC5kYXRhLmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgYnVmID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBidWYubGVuZ3RoID8gYnVmLmxlbmd0aCA6IG47XG4gICAgYnVmLmNvcHkocmV0LCByZXQubGVuZ3RoIC0gbiwgMCwgbmIpO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gYnVmLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBidWYuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXG4gIC8vIElmIHdlIGdldCBoZXJlIGJlZm9yZSBjb25zdW1pbmcgYWxsIHRoZSBieXRlcywgdGhlbiB0aGF0IGlzIGFcbiAgLy8gYnVnIGluIG5vZGUuICBTaG91bGQgbmV2ZXIgaGFwcGVuLlxuICBpZiAoc3RhdGUubGVuZ3RoID4gMCkgdGhyb3cgbmV3IEVycm9yKCdcImVuZFJlYWRhYmxlKClcIiBjYWxsZWQgb24gbm9uLWVtcHR5IHN0cmVhbScpO1xuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCkge1xuICAgIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2soZW5kUmVhZGFibGVOVCwgc3RhdGUsIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7XG4gIC8vIENoZWNrIHRoYXQgd2UgZGlkbid0IGdldCBvbmUgbGFzdCB1bnNoaWZ0LlxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoeHNbaV0gPT09IHgpIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn0iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSB0cmFuc2Zvcm0gc3RyZWFtIGlzIGEgcmVhZGFibGUvd3JpdGFibGUgc3RyZWFtIHdoZXJlIHlvdSBkb1xuLy8gc29tZXRoaW5nIHdpdGggdGhlIGRhdGEuICBTb21ldGltZXMgaXQncyBjYWxsZWQgYSBcImZpbHRlclwiLFxuLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcbi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGRcbi8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLilcbi8vXG4vLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhXG4vLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSxcbi8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxuLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLlxuLy9cbi8vIEhlcmUncyBob3cgdGhpcyB3b3Jrczpcbi8vXG4vLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGVcbi8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcbi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXNcbi8vIGJ1ZmZlcmVkIHVwLiAgV2hlbiB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWxcbi8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cbi8vXG4vLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlblxuLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcbi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZVxuLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3Rcbi8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xuLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcbi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsXG4vLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nXG4vLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xuLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueVxuLy8gYnl0ZXMgb2Ygb3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpblxuLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXG4vLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluXG4vLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGxcbi8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXG4vLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LlxuLy9cbi8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcbi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWxcbi8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG52YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5mdW5jdGlvbiBhZnRlclRyYW5zZm9ybShlciwgZGF0YSkge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3dyaXRlIGNhbGxiYWNrIGNhbGxlZCBtdWx0aXBsZSB0aW1lcycpKTtcbiAgfVxuXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcblxuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICB0aGlzLnB1c2goZGF0YSk7XG5cbiAgY2IoZXIpO1xuXG4gIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcbiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNmb3JtKSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG5cbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSB7XG4gICAgYWZ0ZXJUcmFuc2Zvcm06IGFmdGVyVHJhbnNmb3JtLmJpbmQodGhpcyksXG4gICAgbmVlZFRyYW5zZm9ybTogZmFsc2UsXG4gICAgdHJhbnNmb3JtaW5nOiBmYWxzZSxcbiAgICB3cml0ZWNiOiBudWxsLFxuICAgIHdyaXRlY2h1bms6IG51bGwsXG4gICAgd3JpdGVlbmNvZGluZzogbnVsbFxuICB9O1xuXG4gIC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgLy8gd2UgaGF2ZSBpbXBsZW1lbnRlZCB0aGUgX3JlYWQgbWV0aG9kLCBhbmQgZG9uZSB0aGUgb3RoZXIgdGhpbmdzXG4gIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGVcbiAgLy8gc3luYyBndWFyZCBmbGFnLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaCA9IG9wdGlvbnMuZmx1c2g7XG4gIH1cblxuICAvLyBXaGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuXG4gIHRoaXMub24oJ3ByZWZpbmlzaCcsIHByZWZpbmlzaCk7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaCgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5fZmx1c2goZnVuY3Rpb24gKGVyLCBkYXRhKSB7XG4gICAgICBkb25lKF90aGlzLCBlciwgZGF0YSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZG9uZSh0aGlzLCBudWxsLCBudWxsKTtcbiAgfVxufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgcmV0dXJuIER1cGxleC5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7XG59O1xuXG4vLyBUaGlzIGlzIHRoZSBwYXJ0IHdoZXJlIHlvdSBkbyBzdHVmZiFcbi8vIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gaW4gaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vICdjaHVuaycgaXMgYW4gaW5wdXQgY2h1bmsuXG4vL1xuLy8gQ2FsbCBgcHVzaChuZXdDaHVuaylgIHRvIHBhc3MgYWxvbmcgdHJhbnNmb3JtZWQgb3V0cHV0XG4vLyB0byB0aGUgcmVhZGFibGUgc2lkZS4gIFlvdSBtYXkgY2FsbCAncHVzaCcgemVybyBvciBtb3JlIHRpbWVzLlxuLy9cbi8vIENhbGwgYGNiKGVycilgIHdoZW4geW91IGFyZSBkb25lIHdpdGggdGhpcyBjaHVuay4gIElmIHlvdSBwYXNzXG4vLyBhbiBlcnJvciwgdGhlbiB0aGF0J2xsIHB1dCB0aGUgaHVydCBvbiB0aGUgd2hvbGUgb3BlcmF0aW9uLiAgSWYgeW91XG4vLyBuZXZlciBjYWxsIGNiKCksIHRoZW4geW91J2xsIG5ldmVyIGdldCBhbm90aGVyIGNodW5rLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdHJhbnNmb3JtKCkgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy53cml0ZWNiID0gY2I7XG4gIHRzLndyaXRlY2h1bmsgPSBjaHVuaztcbiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuICBpZiAoIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcblxuICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiB0cy53cml0ZWNiICYmICF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuICAgIHRoaXMuX3RyYW5zZm9ybSh0cy53cml0ZWNodW5rLCB0cy53cml0ZWVuY29kaW5nLCB0cy5hZnRlclRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpblxuICAgIC8vIHdpbGwgZ2V0IHByb2Nlc3NlZCwgbm93IHRoYXQgd2UndmUgYXNrZWQgZm9yIGl0LlxuICAgIHRzLm5lZWRUcmFuc2Zvcm0gPSB0cnVlO1xuICB9XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveS5jYWxsKHRoaXMsIGVyciwgZnVuY3Rpb24gKGVycjIpIHtcbiAgICBjYihlcnIyKTtcbiAgICBfdGhpczIuZW1pdCgnY2xvc2UnKTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHN0cmVhbS5wdXNoKGRhdGEpO1xuXG4gIC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnNcbiAgLy8gdGhhdCBub3RoaW5nIG1vcmUgd2lsbCBldmVyIGJlIHByb3ZpZGVkXG4gIGlmIChzdHJlYW0uX3dyaXRhYmxlU3RhdGUubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cy5sZW5ndGggIT0gMCcpO1xuXG4gIGlmIChzdHJlYW0uX3RyYW5zZm9ybVN0YXRlLnRyYW5zZm9ybWluZykgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nJyk7XG5cbiAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cbi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbFxuLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBXcml0YWJsZTtcblxuLyogPHJlcGxhY2VtZW50PiAqL1xuZnVuY3Rpb24gV3JpdGVSZXEoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aGlzLmNodW5rID0gY2h1bms7XG4gIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgdGhpcy5jYWxsYmFjayA9IGNiO1xuICB0aGlzLm5leHQgPSBudWxsO1xufVxuXG4vLyBJdCBzZWVtcyBhIGxpbmtlZCBsaXN0IGJ1dCBpdCBpcyBub3Rcbi8vIHRoZXJlIHdpbGwgYmUgb25seSAyIG9mIHRoZXNlIGZvciBlYWNoIHN0cmVhbVxuZnVuY3Rpb24gQ29ya2VkUmVxdWVzdChzdGF0ZSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMuZW50cnkgPSBudWxsO1xuICB0aGlzLmZpbmlzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBvbkNvcmtlZEZpbmlzaChfdGhpcywgc3RhdGUpO1xuICB9O1xufVxuLyogPC9yZXBsYWNlbWVudD4gKi9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBhc3luY1dyaXRlID0gIXByb2Nlc3MuYnJvd3NlciAmJiBbJ3YwLjEwJywgJ3YwLjkuJ10uaW5kZXhPZihwcm9jZXNzLnZlcnNpb24uc2xpY2UoMCwgNSkpID4gLTEgPyBzZXRJbW1lZGlhdGUgOiBwbmEubmV4dFRpY2s7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpbnRlcm5hbFV0aWwgPSB7XG4gIGRlcHJlY2F0ZTogcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKVxufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xuXG51dGlsLmluaGVyaXRzKFdyaXRhYmxlLCBTdHJlYW0pO1xuXG5mdW5jdGlvbiBub3AoKSB7fVxuXG5mdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbVxuICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuXG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy53cml0YWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZVxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIHRoYXQgd2UgYWx3YXlzIHJldHVybiBmYWxzZSBpZlxuICAvLyB0aGUgZW50aXJlIGJ1ZmZlciBpcyBub3QgZmx1c2hlZCBpbW1lZGlhdGVseSBvbiB3cml0ZSgpXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciB3cml0YWJsZUh3bSA9IG9wdGlvbnMud3JpdGFibGVIaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuXG4gIGlmIChod20gfHwgaHdtID09PSAwKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod207ZWxzZSBpZiAoaXNEdXBsZXggJiYgKHdyaXRhYmxlSHdtIHx8IHdyaXRhYmxlSHdtID09PSAwKSkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gd3JpdGFibGVId207ZWxzZSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIGlmIF9maW5hbCBoYXMgYmVlbiBjYWxsZWRcbiAgdGhpcy5maW5hbENhbGxlZCA9IGZhbHNlO1xuXG4gIC8vIGRyYWluIGV2ZW50IGZsYWcuXG4gIHRoaXMubmVlZERyYWluID0gZmFsc2U7XG4gIC8vIGF0IHRoZSBzdGFydCBvZiBjYWxsaW5nIGVuZCgpXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7XG4gIC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWRcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWRcbiAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlP1xuICAvLyB0aGlzIGlzIGhlcmUgc28gdGhhdCBzb21lIG5vZGUtY29yZSBzdHJlYW1zIGNhbiBvcHRpbWl6ZSBzdHJpbmdcbiAgLy8gaGFuZGxpbmcgYXQgYSBsb3dlciBsZXZlbC5cbiAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTtcbiAgdGhpcy5kZWNvZGVTdHJpbmdzID0gIW5vRGVjb2RlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50XG4gIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmdcbiAgLy8gc29ja2V0IG9yIGZpbGUuXG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICAvLyBhIGZsYWcgdG8gc2VlIHdoZW4gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHdyaXRlLlxuICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcblxuICAvLyB3aGVuIHRydWUgYWxsIHdyaXRlcyB3aWxsIGJlIGJ1ZmZlcmVkIHVudGlsIC51bmNvcmsoKSBjYWxsXG4gIHRoaXMuY29ya2VkID0gMDtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoXG4gIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0XG4gIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLlxuICB0aGlzLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpXG4gIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uIChlcikge1xuICAgIG9ud3JpdGUoc3RyZWFtLCBlcik7XG4gIH07XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQgdGhlIHVzZXIgc3VwcGxpZXMgdG8gd3JpdGUoY2h1bmssZW5jb2RpbmcsY2IpXG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG5cbiAgLy8gdGhlIGFtb3VudCB0aGF0IGlzIGJlaW5nIHdyaXR0ZW4gd2hlbiBfd3JpdGUgaXMgY2FsbGVkLlxuICB0aGlzLndyaXRlbGVuID0gMDtcblxuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG5cbiAgLy8gbnVtYmVyIG9mIHBlbmRpbmcgdXNlci1zdXBwbGllZCB3cml0ZSBjYWxsYmFja3NcbiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXG4gIHRoaXMucGVuZGluZ2NiID0gMDtcblxuICAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXG4gIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zXG4gIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpblxuICB0aGlzLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuXG4gIC8vIGNvdW50IGJ1ZmZlcmVkIHJlcXVlc3RzXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuXG4gIC8vIGFsbG9jYXRlIHRoZSBmaXJzdCBDb3JrZWRSZXF1ZXN0LCB0aGVyZSBpcyBhbHdheXNcbiAgLy8gb25lIGFsbG9jYXRlZCBhbmQgZnJlZSB0byB1c2UsIGFuZCB3ZSBtYWludGFpbiBhdCBtb3N0IHR3b1xuICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpO1xufVxuXG5Xcml0YWJsZVN0YXRlLnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbiBnZXRCdWZmZXIoKSB7XG4gIHZhciBjdXJyZW50ID0gdGhpcy5idWZmZXJlZFJlcXVlc3Q7XG4gIHZhciBvdXQgPSBbXTtcbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBvdXQucHVzaChjdXJyZW50KTtcbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0YXRlLnByb3RvdHlwZSwgJ2J1ZmZlcicsIHtcbiAgICAgIGdldDogaW50ZXJuYWxVdGlsLmRlcHJlY2F0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nLCAnREVQMDAwMycpXG4gICAgfSk7XG4gIH0gY2F0Y2ggKF8pIHt9XG59KSgpO1xuXG4vLyBUZXN0IF93cml0YWJsZVN0YXRlIGZvciBpbmhlcml0YW5jZSB0byBhY2NvdW50IGZvciBEdXBsZXggc3RyZWFtcyxcbi8vIHdob3NlIHByb3RvdHlwZSBjaGFpbiBvbmx5IHBvaW50cyB0byBSZWFkYWJsZS5cbnZhciByZWFsSGFzSW5zdGFuY2U7XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaGFzSW5zdGFuY2UgJiYgdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdID09PSAnZnVuY3Rpb24nKSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICBpZiAocmVhbEhhc0luc3RhbmNlLmNhbGwodGhpcywgb2JqZWN0KSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAodGhpcyAhPT0gV3JpdGFibGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICByZWFsSGFzSW5zdGFuY2UgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIHRoaXM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICAvLyBXcml0YWJsZSBjdG9yIGlzIGFwcGxpZWQgdG8gRHVwbGV4ZXMsIHRvby5cbiAgLy8gYHJlYWxIYXNJbnN0YW5jZWAgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdXNpbmcgcGxhaW4gYGluc3RhbmNlb2ZgXG4gIC8vIHdvdWxkIHJldHVybiBmYWxzZSwgYXMgbm8gYF93cml0YWJsZVN0YXRlYCBwcm9wZXJ0eSBpcyBhdHRhY2hlZC5cblxuICAvLyBUcnlpbmcgdG8gdXNlIHRoZSBjdXN0b20gYGluc3RhbmNlb2ZgIGZvciBXcml0YWJsZSBoZXJlIHdpbGwgYWxzbyBicmVhayB0aGVcbiAgLy8gTm9kZS5qcyBMYXp5VHJhbnNmb3JtIGltcGxlbWVudGF0aW9uLCB3aGljaCBoYXMgYSBub24tdHJpdmlhbCBnZXR0ZXIgZm9yXG4gIC8vIGBfd3JpdGFibGVTdGF0ZWAgdGhhdCB3b3VsZCBsZWFkIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgaWYgKCFyZWFsSGFzSW5zdGFuY2UuY2FsbChXcml0YWJsZSwgdGhpcykgJiYgISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkge1xuICAgIHJldHVybiBuZXcgV3JpdGFibGUob3B0aW9ucyk7XG4gIH1cblxuICB0aGlzLl93cml0YWJsZVN0YXRlID0gbmV3IFdyaXRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5LlxuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGUgPSBvcHRpb25zLndyaXRlO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5maW5hbCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmluYWwgPSBvcHRpb25zLmZpbmFsO1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbi8vIE90aGVyd2lzZSBwZW9wbGUgY2FuIHBpcGUgV3JpdGFibGUgc3RyZWFtcywgd2hpY2ggaXMganVzdCB3cm9uZy5cbldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdDYW5ub3QgcGlwZSwgbm90IHJlYWRhYmxlJykpO1xufTtcblxuZnVuY3Rpb24gd3JpdGVBZnRlckVuZChzdHJlYW0sIGNiKSB7XG4gIHZhciBlciA9IG5ldyBFcnJvcignd3JpdGUgYWZ0ZXIgZW5kJyk7XG4gIC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiXG4gIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG59XG5cbi8vIENoZWNrcyB0aGF0IGEgdXNlci1zdXBwbGllZCBjaHVuayBpcyB2YWxpZCwgZXNwZWNpYWxseSBmb3IgdGhlIHBhcnRpY3VsYXJcbi8vIG1vZGUgdGhlIHN0cmVhbSBpcyBpbi4gQ3VycmVudGx5IHRoaXMgbWVhbnMgdGhhdCBgbnVsbGAgaXMgbmV2ZXIgYWNjZXB0ZWRcbi8vIGFuZCB1bmRlZmluZWQvbm9uLXN0cmluZyB2YWx1ZXMgYXJlIG9ubHkgYWxsb3dlZCBpbiBvYmplY3QgbW9kZS5cbmZ1bmN0aW9uIHZhbGlkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGNiKSB7XG4gIHZhciB2YWxpZCA9IHRydWU7XG4gIHZhciBlciA9IGZhbHNlO1xuXG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignTWF5IG5vdCB3cml0ZSBudWxsIHZhbHVlcyB0byBzdHJlYW0nKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICBpZiAoZXIpIHtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG4gICAgdmFsaWQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gdmFsaWQ7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG4gIHZhciByZXQgPSBmYWxzZTtcbiAgdmFyIGlzQnVmID0gIXN0YXRlLm9iamVjdE1vZGUgJiYgX2lzVWludDhBcnJheShjaHVuayk7XG5cbiAgaWYgKGlzQnVmICYmICFCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSB7XG4gICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChpc0J1ZikgZW5jb2RpbmcgPSAnYnVmZmVyJztlbHNlIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuXG4gIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIGNiID0gbm9wO1xuXG4gIGlmIChzdGF0ZS5lbmRlZCkgd3JpdGVBZnRlckVuZCh0aGlzLCBjYik7ZWxzZSBpZiAoaXNCdWYgfHwgdmFsaWRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGNiKSkge1xuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHJldCA9IHdyaXRlT3JCdWZmZXIodGhpcywgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBzdGF0ZS5jb3JrZWQrKztcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS51bmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZC0tO1xuXG4gICAgaWYgKCFzdGF0ZS53cml0aW5nICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkgY2xlYXJCdWZmZXIodGhpcywgc3RhdGUpO1xuICB9XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nID0gZnVuY3Rpb24gc2V0RGVmYXVsdEVuY29kaW5nKGVuY29kaW5nKSB7XG4gIC8vIG5vZGU6OlBhcnNlRW5jb2RpbmcoKSByZXF1aXJlcyBsb3dlciBjYXNlLlxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykgZW5jb2RpbmcgPSBlbmNvZGluZy50b0xvd2VyQ2FzZSgpO1xuICBpZiAoIShbJ2hleCcsICd1dGY4JywgJ3V0Zi04JywgJ2FzY2lpJywgJ2JpbmFyeScsICdiYXNlNjQnLCAndWNzMicsICd1Y3MtMicsICd1dGYxNmxlJywgJ3V0Zi0xNmxlJywgJ3JhdyddLmluZGV4T2YoKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCkpID4gLTEpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpO1xuICB0aGlzLl93cml0YWJsZVN0YXRlLmRlZmF1bHRFbmNvZGluZyA9IGVuY29kaW5nO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpIHtcbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmIHN0YXRlLmRlY29kZVN0cmluZ3MgIT09IGZhbHNlICYmIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gIH1cbiAgcmV0dXJuIGNodW5rO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gaWYgd2UncmUgYWxyZWFkeSB3cml0aW5nIHNvbWV0aGluZywgdGhlbiBqdXN0IHB1dCB0aGlzXG4vLyBpbiB0aGUgcXVldWUsIGFuZCB3YWl0IG91ciB0dXJuLiAgT3RoZXJ3aXNlLCBjYWxsIF93cml0ZVxuLy8gSWYgd2UgcmV0dXJuIGZhbHNlLCB0aGVuIHdlIG5lZWQgYSBkcmFpbiBldmVudCwgc28gc2V0IHRoYXQgZmxhZy5cbmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgaWYgKCFpc0J1Zikge1xuICAgIHZhciBuZXdDaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuICAgIGlmIChjaHVuayAhPT0gbmV3Q2h1bmspIHtcbiAgICAgIGlzQnVmID0gdHJ1ZTtcbiAgICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG4gICAgICBjaHVuayA9IG5ld0NodW5rO1xuICAgIH1cbiAgfVxuICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgc3RhdGUubGVuZ3RoICs9IGxlbjtcblxuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG4gIGlmICghcmV0KSBzdGF0ZS5uZWVkRHJhaW4gPSB0cnVlO1xuXG4gIGlmIChzdGF0ZS53cml0aW5nIHx8IHN0YXRlLmNvcmtlZCkge1xuICAgIHZhciBsYXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0ge1xuICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLFxuICAgICAgaXNCdWY6IGlzQnVmLFxuICAgICAgY2FsbGJhY2s6IGNiLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG4gICAgaWYgKGxhc3QpIHtcbiAgICAgIGxhc3QubmV4dCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ICs9IDE7XG4gIH0gZWxzZSB7XG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XG4gIHN0YXRlLndyaXRlY2IgPSBjYjtcbiAgc3RhdGUud3JpdGluZyA9IHRydWU7XG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xuICBpZiAod3JpdGV2KSBzdHJlYW0uX3dyaXRldihjaHVuaywgc3RhdGUub253cml0ZSk7ZWxzZSBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUub253cml0ZSk7XG4gIHN0YXRlLnN5bmMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYikge1xuICAtLXN0YXRlLnBlbmRpbmdjYjtcblxuICBpZiAoc3luYykge1xuICAgIC8vIGRlZmVyIHRoZSBjYWxsYmFjayBpZiB3ZSBhcmUgYmVpbmcgY2FsbGVkIHN5bmNocm9ub3VzbHlcbiAgICAvLyB0byBhdm9pZCBwaWxpbmcgdXAgdGhpbmdzIG9uIHRoZSBzdGFja1xuICAgIHBuYS5uZXh0VGljayhjYiwgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBhbmQgaXQgd2lsbCBhbHdheXMgaGFwcGVuXG4gICAgLy8gYWZ0ZXIgZXJyb3JcbiAgICBwbmEubmV4dFRpY2soZmluaXNoTWF5YmUsIHN0cmVhbSwgc3RhdGUpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY2FsbGVyIGV4cGVjdCB0aGlzIHRvIGhhcHBlbiBiZWZvcmUgaWZcbiAgICAvLyBpdCBpcyBhc3luY1xuICAgIGNiKGVyKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGJ1dCBmaW5pc2ggbXVzdFxuICAgIC8vIGFsd2F5cyBmb2xsb3cgZXJyb3JcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xuICBzdGF0ZS53cml0ZWNiID0gbnVsbDtcbiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuICBzdGF0ZS53cml0ZWxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcblxuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuXG4gIGlmIChlcikgb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYik7ZWxzZSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXRcbiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcblxuICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICAvKjxyZXBsYWNlbWVudD4qL1xuICAgICAgYXN5bmNXcml0ZShhZnRlcldyaXRlLCBzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgLyo8L3JlcGxhY2VtZW50PiovXG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpO1xuICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgY2IoKTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbi8vIE11c3QgZm9yY2UgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIG5leHRUaWNrLCBzbyB0aGF0IHdlIGRvbid0XG4vLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXG4vLyB2YWx1ZSwgYW5kIGhhcyBhIGNoYW5jZSB0byBhdHRhY2ggYSAnZHJhaW4nIGxpc3RlbmVyLlxuZnVuY3Rpb24gb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5uZWVkRHJhaW4pIHtcbiAgICBzdGF0ZS5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZHJhaW4nKTtcbiAgfVxufVxuXG4vLyBpZiB0aGVyZSdzIHNvbWV0aGluZyBpbiB0aGUgYnVmZmVyIHdhaXRpbmcsIHRoZW4gcHJvY2VzcyBpdFxuZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSkge1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0O1xuXG4gIGlmIChzdHJlYW0uX3dyaXRldiAmJiBlbnRyeSAmJiBlbnRyeS5uZXh0KSB7XG4gICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKVxuICAgIHZhciBsID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQ7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShsKTtcbiAgICB2YXIgaG9sZGVyID0gc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlO1xuICAgIGhvbGRlci5lbnRyeSA9IGVudHJ5O1xuXG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgYWxsQnVmZmVycyA9IHRydWU7XG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICBidWZmZXJbY291bnRdID0gZW50cnk7XG4gICAgICBpZiAoIWVudHJ5LmlzQnVmKSBhbGxCdWZmZXJzID0gZmFsc2U7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBjb3VudCArPSAxO1xuICAgIH1cbiAgICBidWZmZXIuYWxsQnVmZmVycyA9IGFsbEJ1ZmZlcnM7XG5cbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHRydWUsIHN0YXRlLmxlbmd0aCwgYnVmZmVyLCAnJywgaG9sZGVyLmZpbmlzaCk7XG5cbiAgICAvLyBkb1dyaXRlIGlzIGFsbW9zdCBhbHdheXMgYXN5bmMsIGRlZmVyIHRoZXNlIHRvIHNhdmUgYSBiaXQgb2YgdGltZVxuICAgIC8vIGFzIHRoZSBob3QgcGF0aCBlbmRzIHdpdGggZG9Xcml0ZVxuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICAgIGlmIChob2xkZXIubmV4dCkge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gaG9sZGVyLm5leHQ7XG4gICAgICBob2xkZXIubmV4dCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHN0YXRlKTtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFNsb3cgY2FzZSwgd3JpdGUgY2h1bmtzIG9uZS1ieS1vbmVcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIHZhciBjaHVuayA9IGVudHJ5LmNodW5rO1xuICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7XG4gICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICAgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50LS07XG4gICAgICAvLyBpZiB3ZSBkaWRuJ3QgY2FsbCB0aGUgb253cml0ZSBpbW1lZGlhdGVseSwgdGhlblxuICAgICAgLy8gaXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHdhaXQgdW50aWwgaXQgZG9lcy5cbiAgICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUgY2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHlcbiAgICAgIC8vIGJlaW5nIHByb2Nlc3NlZCwgc28gbW92ZSB0aGUgYnVmZmVyIGNvdW50ZXIgcGFzdCB0aGVtLlxuICAgICAgaWYgKHN0YXRlLndyaXRpbmcpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVudHJ5ID09PSBudWxsKSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5O1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRXJyb3IoJ193cml0ZSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGV2ID0gbnVsbDtcblxuV3JpdGFibGUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gY2h1bms7XG4gICAgY2h1bmsgPSBudWxsO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChjaHVuayAhPT0gbnVsbCAmJiBjaHVuayAhPT0gdW5kZWZpbmVkKSB0aGlzLndyaXRlKGNodW5rLCBlbmNvZGluZyk7XG5cbiAgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3NcbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZCA9IDE7XG4gICAgdGhpcy51bmNvcmsoKTtcbiAgfVxuXG4gIC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy5cbiAgaWYgKCFzdGF0ZS5lbmRpbmcgJiYgIXN0YXRlLmZpbmlzaGVkKSBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpO1xufTtcblxuZnVuY3Rpb24gbmVlZEZpbmlzaChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuZW5kaW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPT09IG51bGwgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS53cml0aW5nO1xufVxuZnVuY3Rpb24gY2FsbEZpbmFsKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RyZWFtLl9maW5hbChmdW5jdGlvbiAoZXJyKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgaWYgKGVycikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9XG4gICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnByZWZpbmlzaGVkICYmICFzdGF0ZS5maW5hbENhbGxlZCkge1xuICAgIGlmICh0eXBlb2Ygc3RyZWFtLl9maW5hbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgICBzdGF0ZS5maW5hbENhbGxlZCA9IHRydWU7XG4gICAgICBwbmEubmV4dFRpY2soY2FsbEZpbmFsLCBzdHJlYW0sIHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBuZWVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG4gIGlmIChuZWVkKSB7XG4gICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHtcbiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5lZWQ7XG59XG5cbmZ1bmN0aW9uIGVuZFdyaXRhYmxlKHN0cmVhbSwgc3RhdGUsIGNiKSB7XG4gIHN0YXRlLmVuZGluZyA9IHRydWU7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICBpZiAoY2IpIHtcbiAgICBpZiAoc3RhdGUuZmluaXNoZWQpIHBuYS5uZXh0VGljayhjYik7ZWxzZSBzdHJlYW0ub25jZSgnZmluaXNoJywgY2IpO1xuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgc3RyZWFtLndyaXRhYmxlID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9uQ29ya2VkRmluaXNoKGNvcmtSZXEsIHN0YXRlLCBlcnIpIHtcbiAgdmFyIGVudHJ5ID0gY29ya1JlcS5lbnRyeTtcbiAgY29ya1JlcS5lbnRyeSA9IG51bGw7XG4gIHdoaWxlIChlbnRyeSkge1xuICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGNiKGVycik7XG4gICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICB9XG4gIGlmIChzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUpIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IGNvcmtSZXE7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gY29ya1JlcTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMuZW5kKCk7XG4gIGNiKGVycik7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmZ1bmN0aW9uIGNvcHlCdWZmZXIoc3JjLCB0YXJnZXQsIG9mZnNldCkge1xuICBzcmMuY29weSh0YXJnZXQsIG9mZnNldCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCdWZmZXJMaXN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWZmZXJMaXN0KTtcblxuICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogdGhpcy5oZWFkIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gc2hpZnQoKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgIC0tdGhpcy5sZW5ndGg7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKHMpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7XG4gICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgIHJldCArPSBzICsgcC5kYXRhO1xuICAgIH1yZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdChuKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChwKSB7XG4gICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgIGkgKz0gcC5kYXRhLmxlbmd0aDtcbiAgICAgIHAgPSBwLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgcmV0dXJuIEJ1ZmZlckxpc3Q7XG59KCk7XG5cbmlmICh1dGlsICYmIHV0aWwuaW5zcGVjdCAmJiB1dGlsLmluc3BlY3QuY3VzdG9tKSB7XG4gIG1vZHVsZS5leHBvcnRzLnByb3RvdHlwZVt1dGlsLmluc3BlY3QuY3VzdG9tXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2JqID0gdXRpbC5pbnNwZWN0KHsgbGVuZ3RoOiB0aGlzLmxlbmd0aCB9KTtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJyAnICsgb2JqO1xuICB9O1xufSIsIid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLy8gdW5kb2N1bWVudGVkIGNiKCkgQVBJLCBuZWVkZWQgZm9yIGNvcmUsIG5vdCBmb3IgcHVibGljIEFQSVxuZnVuY3Rpb24gZGVzdHJveShlcnIsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHJlYWRhYmxlRGVzdHJveWVkID0gdGhpcy5fcmVhZGFibGVTdGF0ZSAmJiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgdmFyIHdyaXRhYmxlRGVzdHJveWVkID0gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcblxuICBpZiAocmVhZGFibGVEZXN0cm95ZWQgfHwgd3JpdGFibGVEZXN0cm95ZWQpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfSBlbHNlIGlmIChlcnIgJiYgKCF0aGlzLl93cml0YWJsZVN0YXRlIHx8ICF0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkpIHtcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB3ZSBzZXQgZGVzdHJveWVkIHRvIHRydWUgYmVmb3JlIGZpcmluZyBlcnJvciBjYWxsYmFja3MgaW4gb3JkZXJcbiAgLy8gdG8gbWFrZSBpdCByZS1lbnRyYW5jZSBzYWZlIGluIGNhc2UgZGVzdHJveSgpIGlzIGNhbGxlZCB3aXRoaW4gY2FsbGJhY2tzXG5cbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICAvLyBpZiB0aGlzIGlzIGEgZHVwbGV4IHN0cmVhbSBtYXJrIHRoZSB3cml0YWJsZSBwYXJ0IGFzIGRlc3Ryb3llZCBhcyB3ZWxsXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgdGhpcy5fZGVzdHJveShlcnIgfHwgbnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmICghY2IgJiYgZXJyKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIF90aGlzLCBlcnIpO1xuICAgICAgaWYgKF90aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgIF90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB1bmRlc3Ryb3koKSB7XG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdEVycm9yTlQoc2VsZiwgZXJyKSB7XG4gIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVzdHJveTogZGVzdHJveSxcbiAgdW5kZXN0cm95OiB1bmRlc3Ryb3lcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAhcHJvY2Vzcy52ZXJzaW9uIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YwLicpID09PSAwIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLicpID09PSAwICYmIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS44LicpICE9PSAwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0geyBuZXh0VGljazogbmV4dFRpY2sgfTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcHJvY2Vzc1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayhmbiwgYXJnMSwgYXJnMiwgYXJnMykge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJjYWxsYmFja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgYXJncywgaTtcbiAgc3dpdGNoIChsZW4pIHtcbiAgY2FzZSAwOlxuICBjYXNlIDE6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZm4pO1xuICBjYXNlIDI6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrT25lKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxKTtcbiAgICB9KTtcbiAgY2FzZSAzOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1R3bygpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMik7XG4gICAgfSk7XG4gIGNhc2UgNDpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUaHJlZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgfSk7XG4gIGRlZmF1bHQ6XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGFyZ3MubGVuZ3RoKSB7XG4gICAgICBhcmdzW2krK10gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGljaygpIHtcbiAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG59XG5cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIGlzRW5jb2RpbmcgPSBCdWZmZXIuaXNFbmNvZGluZyB8fCBmdW5jdGlvbiAoZW5jb2RpbmcpIHtcbiAgZW5jb2RpbmcgPSAnJyArIGVuY29kaW5nO1xuICBzd2l0Y2ggKGVuY29kaW5nICYmIGVuY29kaW5nLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOmNhc2UgJ3V0ZjgnOmNhc2UgJ3V0Zi04JzpjYXNlICdhc2NpaSc6Y2FzZSAnYmluYXJ5JzpjYXNlICdiYXNlNjQnOmNhc2UgJ3VjczInOmNhc2UgJ3Vjcy0yJzpjYXNlICd1dGYxNmxlJzpjYXNlICd1dGYtMTZsZSc6Y2FzZSAncmF3JzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9ub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgaWYgKCFlbmMpIHJldHVybiAndXRmOCc7XG4gIHZhciByZXRyaWVkO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jKSB7XG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuICd1dGY4JztcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiAndXRmMTZsZSc7XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuICdsYXRpbjEnO1xuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBlbmM7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAocmV0cmllZCkgcmV0dXJuOyAvLyB1bmRlZmluZWRcbiAgICAgICAgZW5jID0gKCcnICsgZW5jKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXRyaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIERvIG5vdCBjYWNoZSBgQnVmZmVyLmlzRW5jb2RpbmdgIHdoZW4gY2hlY2tpbmcgZW5jb2RpbmcgbmFtZXMgYXMgc29tZVxuLy8gbW9kdWxlcyBtb25rZXktcGF0Y2ggaXQgdG8gc3VwcG9ydCBhZGRpdGlvbmFsIGVuY29kaW5nc1xuZnVuY3Rpb24gbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIHZhciBuZW5jID0gX25vcm1hbGl6ZUVuY29kaW5nKGVuYyk7XG4gIGlmICh0eXBlb2YgbmVuYyAhPT0gJ3N0cmluZycgJiYgKEJ1ZmZlci5pc0VuY29kaW5nID09PSBpc0VuY29kaW5nIHx8ICFpc0VuY29kaW5nKGVuYykpKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmMpO1xuICByZXR1cm4gbmVuYyB8fCBlbmM7XG59XG5cbi8vIFN0cmluZ0RlY29kZXIgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGZvciBlZmZpY2llbnRseSBzcGxpdHRpbmcgYSBzZXJpZXMgb2Zcbi8vIGJ1ZmZlcnMgaW50byBhIHNlcmllcyBvZiBKUyBzdHJpbmdzIHdpdGhvdXQgYnJlYWtpbmcgYXBhcnQgbXVsdGktYnl0ZVxuLy8gY2hhcmFjdGVycy5cbmV4cG9ydHMuU3RyaW5nRGVjb2RlciA9IFN0cmluZ0RlY29kZXI7XG5mdW5jdGlvbiBTdHJpbmdEZWNvZGVyKGVuY29kaW5nKSB7XG4gIHRoaXMuZW5jb2RpbmcgPSBub3JtYWxpemVFbmNvZGluZyhlbmNvZGluZyk7XG4gIHZhciBuYjtcbiAgc3dpdGNoICh0aGlzLmVuY29kaW5nKSB7XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICB0aGlzLnRleHQgPSB1dGYxNlRleHQ7XG4gICAgICB0aGlzLmVuZCA9IHV0ZjE2RW5kO1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndXRmOCc6XG4gICAgICB0aGlzLmZpbGxMYXN0ID0gdXRmOEZpbGxMYXN0O1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHRoaXMudGV4dCA9IGJhc2U2NFRleHQ7XG4gICAgICB0aGlzLmVuZCA9IGJhc2U2NEVuZDtcbiAgICAgIG5iID0gMztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aGlzLndyaXRlID0gc2ltcGxlV3JpdGU7XG4gICAgICB0aGlzLmVuZCA9IHNpbXBsZUVuZDtcbiAgICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgdGhpcy5sYXN0VG90YWwgPSAwO1xuICB0aGlzLmxhc3RDaGFyID0gQnVmZmVyLmFsbG9jVW5zYWZlKG5iKTtcbn1cblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmIChidWYubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gIHZhciByO1xuICB2YXIgaTtcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICByID0gdGhpcy5maWxsTGFzdChidWYpO1xuICAgIGlmIChyID09PSB1bmRlZmluZWQpIHJldHVybiAnJztcbiAgICBpID0gdGhpcy5sYXN0TmVlZDtcbiAgICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgfSBlbHNlIHtcbiAgICBpID0gMDtcbiAgfVxuICBpZiAoaSA8IGJ1Zi5sZW5ndGgpIHJldHVybiByID8gciArIHRoaXMudGV4dChidWYsIGkpIDogdGhpcy50ZXh0KGJ1ZiwgaSk7XG4gIHJldHVybiByIHx8ICcnO1xufTtcblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gdXRmOEVuZDtcblxuLy8gUmV0dXJucyBvbmx5IGNvbXBsZXRlIGNoYXJhY3RlcnMgaW4gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLnRleHQgPSB1dGY4VGV4dDtcblxuLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBwYXJ0aWFsIG5vbi1VVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZmlsbExhc3QgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG59O1xuXG4vLyBDaGVja3MgdGhlIHR5cGUgb2YgYSBVVEYtOCBieXRlLCB3aGV0aGVyIGl0J3MgQVNDSUksIGEgbGVhZGluZyBieXRlLCBvciBhXG4vLyBjb250aW51YXRpb24gYnl0ZS4gSWYgYW4gaW52YWxpZCBieXRlIGlzIGRldGVjdGVkLCAtMiBpcyByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0J5dGUoYnl0ZSkge1xuICBpZiAoYnl0ZSA8PSAweDdGKSByZXR1cm4gMDtlbHNlIGlmIChieXRlID4+IDUgPT09IDB4MDYpIHJldHVybiAyO2Vsc2UgaWYgKGJ5dGUgPj4gNCA9PT0gMHgwRSkgcmV0dXJuIDM7ZWxzZSBpZiAoYnl0ZSA+PiAzID09PSAweDFFKSByZXR1cm4gNDtcbiAgcmV0dXJuIGJ5dGUgPj4gNiA9PT0gMHgwMiA/IC0xIDogLTI7XG59XG5cbi8vIENoZWNrcyBhdCBtb3N0IDMgYnl0ZXMgYXQgdGhlIGVuZCBvZiBhIEJ1ZmZlciBpbiBvcmRlciB0byBkZXRlY3QgYW5cbi8vIGluY29tcGxldGUgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIuIFRoZSB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgKDIsIDMsIG9yIDQpXG4vLyBuZWVkZWQgdG8gY29tcGxldGUgdGhlIFVURi04IGNoYXJhY3RlciAoaWYgYXBwbGljYWJsZSkgYXJlIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrSW5jb21wbGV0ZShzZWxmLCBidWYsIGkpIHtcbiAgdmFyIGogPSBidWYubGVuZ3RoIC0gMTtcbiAgaWYgKGogPCBpKSByZXR1cm4gMDtcbiAgdmFyIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDE7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpIHx8IG5iID09PSAtMikgcmV0dXJuIDA7XG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDI7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpIHx8IG5iID09PSAtMikgcmV0dXJuIDA7XG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHtcbiAgICAgIGlmIChuYiA9PT0gMikgbmIgPSAwO2Vsc2Ugc2VsZi5sYXN0TmVlZCA9IG5iIC0gMztcbiAgICB9XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIHJldHVybiAwO1xufVxuXG4vLyBWYWxpZGF0ZXMgYXMgbWFueSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgYXNcbi8vIG5lZWRlZCBvciBhcmUgYXZhaWxhYmxlLiBJZiB3ZSBzZWUgYSBub24tY29udGludWF0aW9uIGJ5dGUgd2hlcmUgd2UgZXhwZWN0XG4vLyBvbmUsIHdlIFwicmVwbGFjZVwiIHRoZSB2YWxpZGF0ZWQgY29udGludWF0aW9uIGJ5dGVzIHdlJ3ZlIHNlZW4gc28gZmFyIHdpdGhcbi8vIGEgc2luZ2xlIFVURi04IHJlcGxhY2VtZW50IGNoYXJhY3RlciAoJ1xcdWZmZmQnKSwgdG8gbWF0Y2ggdjgncyBVVEYtOCBkZWNvZGluZ1xuLy8gYmVoYXZpb3IuIFRoZSBjb250aW51YXRpb24gYnl0ZSBjaGVjayBpcyBpbmNsdWRlZCB0aHJlZSB0aW1lcyBpbiB0aGUgY2FzZVxuLy8gd2hlcmUgYWxsIG9mIHRoZSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgY2hhcmFjdGVyIGV4aXN0IGluIHRoZSBzYW1lIGJ1ZmZlci5cbi8vIEl0IGlzIGFsc28gZG9uZSB0aGlzIHdheSBhcyBhIHNsaWdodCBwZXJmb3JtYW5jZSBpbmNyZWFzZSBpbnN0ZWFkIG9mIHVzaW5nIGFcbi8vIGxvb3AuXG5mdW5jdGlvbiB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHNlbGYsIGJ1ZiwgcCkge1xuICBpZiAoKGJ1ZlswXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgc2VsZi5sYXN0TmVlZCA9IDA7XG4gICAgcmV0dXJuICdcXHVmZmZkJztcbiAgfVxuICBpZiAoc2VsZi5sYXN0TmVlZCA+IDEgJiYgYnVmLmxlbmd0aCA+IDEpIHtcbiAgICBpZiAoKGJ1ZlsxXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICBzZWxmLmxhc3ROZWVkID0gMTtcbiAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgfVxuICAgIGlmIChzZWxmLmxhc3ROZWVkID4gMiAmJiBidWYubGVuZ3RoID4gMikge1xuICAgICAgaWYgKChidWZbMl0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgICBzZWxmLmxhc3ROZWVkID0gMjtcbiAgICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyLlxuZnVuY3Rpb24gdXRmOEZpbGxMYXN0KGJ1Zikge1xuICB2YXIgcCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgdmFyIHIgPSB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHRoaXMsIGJ1ZiwgcCk7XG4gIGlmIChyICE9PSB1bmRlZmluZWQpIHJldHVybiByO1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG59XG5cbi8vIFJldHVybnMgYWxsIGNvbXBsZXRlIFVURi04IGNoYXJhY3RlcnMgaW4gYSBCdWZmZXIuIElmIHRoZSBCdWZmZXIgZW5kZWQgb24gYVxuLy8gcGFydGlhbCBjaGFyYWN0ZXIsIHRoZSBjaGFyYWN0ZXIncyBieXRlcyBhcmUgYnVmZmVyZWQgdW50aWwgdGhlIHJlcXVpcmVkXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXJlIGF2YWlsYWJsZS5cbmZ1bmN0aW9uIHV0ZjhUZXh0KGJ1ZiwgaSkge1xuICB2YXIgdG90YWwgPSB1dGY4Q2hlY2tJbmNvbXBsZXRlKHRoaXMsIGJ1ZiwgaSk7XG4gIGlmICghdGhpcy5sYXN0TmVlZCkgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGkpO1xuICB0aGlzLmxhc3RUb3RhbCA9IHRvdGFsO1xuICB2YXIgZW5kID0gYnVmLmxlbmd0aCAtICh0b3RhbCAtIHRoaXMubGFzdE5lZWQpO1xuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCAwLCBlbmQpO1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSwgZW5kKTtcbn1cblxuLy8gRm9yIFVURi04LCBhIHJlcGxhY2VtZW50IGNoYXJhY3RlciBpcyBhZGRlZCB3aGVuIGVuZGluZyBvbiBhIHBhcnRpYWxcbi8vIGNoYXJhY3Rlci5cbmZ1bmN0aW9uIHV0ZjhFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgJ1xcdWZmZmQnO1xuICByZXR1cm4gcjtcbn1cblxuLy8gVVRGLTE2TEUgdHlwaWNhbGx5IG5lZWRzIHR3byBieXRlcyBwZXIgY2hhcmFjdGVyLCBidXQgZXZlbiBpZiB3ZSBoYXZlIGFuIGV2ZW5cbi8vIG51bWJlciBvZiBieXRlcyBhdmFpbGFibGUsIHdlIG5lZWQgdG8gY2hlY2sgaWYgd2UgZW5kIG9uIGEgbGVhZGluZy9oaWdoXG4vLyBzdXJyb2dhdGUuIEluIHRoYXQgY2FzZSwgd2UgbmVlZCB0byB3YWl0IGZvciB0aGUgbmV4dCB0d28gYnl0ZXMgaW4gb3JkZXIgdG9cbi8vIGRlY29kZSB0aGUgbGFzdCBjaGFyYWN0ZXIgcHJvcGVybHkuXG5mdW5jdGlvbiB1dGYxNlRleHQoYnVmLCBpKSB7XG4gIGlmICgoYnVmLmxlbmd0aCAtIGkpICUgMiA9PT0gMCkge1xuICAgIHZhciByID0gYnVmLnRvU3RyaW5nKCd1dGYxNmxlJywgaSk7XG4gICAgaWYgKHIpIHtcbiAgICAgIHZhciBjID0gci5jaGFyQ29kZUF0KHIubGVuZ3RoIC0gMSk7XG4gICAgICBpZiAoYyA+PSAweEQ4MDAgJiYgYyA8PSAweERCRkYpIHtcbiAgICAgICAgdGhpcy5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHRoaXMubGFzdFRvdGFsID0gNDtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICAgICAgICByZXR1cm4gci5zbGljZSgwLCAtMSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAxO1xuICB0aGlzLmxhc3RUb3RhbCA9IDI7XG4gIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGYxNmxlJywgaSwgYnVmLmxlbmd0aCAtIDEpO1xufVxuXG4vLyBGb3IgVVRGLTE2TEUgd2UgZG8gbm90IGV4cGxpY2l0bHkgYXBwZW5kIHNwZWNpYWwgcmVwbGFjZW1lbnQgY2hhcmFjdGVycyBpZiB3ZVxuLy8gZW5kIG9uIGEgcGFydGlhbCBjaGFyYWN0ZXIsIHdlIHNpbXBseSBsZXQgdjggaGFuZGxlIHRoYXQuXG5mdW5jdGlvbiB1dGYxNkVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHZhciBlbmQgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gICAgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCd1dGYxNmxlJywgMCwgZW5kKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gYmFzZTY0VGV4dChidWYsIGkpIHtcbiAgdmFyIG4gPSAoYnVmLmxlbmd0aCAtIGkpICUgMztcbiAgaWYgKG4gPT09IDApIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGkpO1xuICB0aGlzLmxhc3ROZWVkID0gMyAtIG47XG4gIHRoaXMubGFzdFRvdGFsID0gMztcbiAgaWYgKG4gPT09IDEpIHtcbiAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgfVxuICByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpLCBidWYubGVuZ3RoIC0gbik7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCdiYXNlNjQnLCAwLCAzIC0gdGhpcy5sYXN0TmVlZCk7XG4gIHJldHVybiByO1xufVxuXG4vLyBQYXNzIGJ5dGVzIG9uIHRocm91Z2ggZm9yIHNpbmdsZS1ieXRlIGVuY29kaW5ncyAoZS5nLiBhc2NpaSwgbGF0aW4xLCBoZXgpXG5mdW5jdGlvbiBzaW1wbGVXcml0ZShidWYpIHtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZyh0aGlzLmVuY29kaW5nKTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlRW5kKGJ1Zikge1xuICByZXR1cm4gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcmVhZGFibGUnKS5QYXNzVGhyb3VnaFxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpLlRyYW5zZm9ybVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG5cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmluaGVyaXRzKFN0cmVhbSwgRUUpO1xuU3RyZWFtLlJlYWRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzJyk7XG5TdHJlYW0uV3JpdGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUuanMnKTtcblN0cmVhbS5EdXBsZXggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vZHVwbGV4LmpzJyk7XG5TdHJlYW0uVHJhbnNmb3JtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcycpO1xuU3RyZWFtLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzJyk7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuNC54XG5TdHJlYW0uU3RyZWFtID0gU3RyZWFtO1xuXG5cblxuLy8gb2xkLXN0eWxlIHN0cmVhbXMuICBOb3RlIHRoYXQgdGhlIHBpcGUgbWV0aG9kICh0aGUgb25seSByZWxldmFudFxuLy8gcGFydCBvZiB0aGlzIGNsYXNzKSBpcyBvdmVycmlkZGVuIGluIHRoZSBSZWFkYWJsZSBjbGFzcy5cblxuZnVuY3Rpb24gU3RyZWFtKCkge1xuICBFRS5jYWxsKHRoaXMpO1xufVxuXG5TdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0LCBvcHRpb25zKSB7XG4gIHZhciBzb3VyY2UgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGlmIChkZXN0LndyaXRhYmxlKSB7XG4gICAgICBpZiAoZmFsc2UgPT09IGRlc3Qud3JpdGUoY2h1bmspICYmIHNvdXJjZS5wYXVzZSkge1xuICAgICAgICBzb3VyY2UucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2RhdGEnLCBvbmRhdGEpO1xuXG4gIGZ1bmN0aW9uIG9uZHJhaW4oKSB7XG4gICAgaWYgKHNvdXJjZS5yZWFkYWJsZSAmJiBzb3VyY2UucmVzdW1lKSB7XG4gICAgICBzb3VyY2UucmVzdW1lKCk7XG4gICAgfVxuICB9XG5cbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICAvLyBJZiB0aGUgJ2VuZCcgb3B0aW9uIGlzIG5vdCBzdXBwbGllZCwgZGVzdC5lbmQoKSB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gIC8vIHNvdXJjZSBnZXRzIHRoZSAnZW5kJyBvciAnY2xvc2UnIGV2ZW50cy4gIE9ubHkgZGVzdC5lbmQoKSBvbmNlLlxuICBpZiAoIWRlc3QuX2lzU3RkaW8gJiYgKCFvcHRpb25zIHx8IG9wdGlvbnMuZW5kICE9PSBmYWxzZSkpIHtcbiAgICBzb3VyY2Uub24oJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2Uub24oJ2Nsb3NlJywgb25jbG9zZSk7XG4gIH1cblxuICB2YXIgZGlkT25FbmQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBpZiAodHlwZW9mIGRlc3QuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgZGVzdC5kZXN0cm95KCk7XG4gIH1cblxuICAvLyBkb24ndCBsZWF2ZSBkYW5nbGluZyBwaXBlcyB3aGVuIHRoZXJlIGFyZSBlcnJvcnMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBjbGVhbnVwKCk7XG4gICAgaWYgKEVFLmxpc3RlbmVyQ291bnQodGhpcywgJ2Vycm9yJykgPT09IDApIHtcbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgc3RyZWFtIGVycm9yIGluIHBpcGUuXG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICBkZXN0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIHJlbW92ZSBhbGwgdGhlIGV2ZW50IGxpc3RlbmVycyB0aGF0IHdlcmUgYWRkZWQuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG4gIH1cblxuICBzb3VyY2Uub24oJ2VuZCcsIGNsZWFudXApO1xuICBzb3VyY2Uub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5vbignY2xvc2UnLCBjbGVhbnVwKTtcblxuICBkZXN0LmVtaXQoJ3BpcGUnLCBzb3VyY2UpO1xuXG4gIC8vIEFsbG93IGZvciB1bml4LWxpa2UgdXNhZ2U6IEEucGlwZShCKS5waXBlKEMpXG4gIHJldHVybiBkZXN0O1xufTtcbiIsInZhciBuZXh0VGljayA9IHJlcXVpcmUoJ3Byb2Nlc3MvYnJvd3Nlci5qcycpLm5leHRUaWNrO1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIGltbWVkaWF0ZUlkcyA9IHt9O1xudmFyIG5leHRJbW1lZGlhdGVJZCA9IDA7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7IHRpbWVvdXQuY2xvc2UoKTsgfTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbCh3aW5kb3csIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBUaGF0J3Mgbm90IGhvdyBub2RlLmpzIGltcGxlbWVudHMgaXQgYnV0IHRoZSBleHBvc2VkIGFwaSBpcyB0aGUgc2FtZS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gXCJmdW5jdGlvblwiID8gc2V0SW1tZWRpYXRlIDogZnVuY3Rpb24oZm4pIHtcbiAgdmFyIGlkID0gbmV4dEltbWVkaWF0ZUlkKys7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBmYWxzZSA6IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICBpbW1lZGlhdGVJZHNbaWRdID0gdHJ1ZTtcblxuICBuZXh0VGljayhmdW5jdGlvbiBvbk5leHRUaWNrKCkge1xuICAgIGlmIChpbW1lZGlhdGVJZHNbaWRdKSB7XG4gICAgICAvLyBmbi5jYWxsKCkgaXMgZmFzdGVyIHNvIHdlIG9wdGltaXplIGZvciB0aGUgY29tbW9uIHVzZS1jYXNlXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2NhbGwtYXBwbHktc2VndVxuICAgICAgaWYgKGFyZ3MpIHtcbiAgICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmbi5jYWxsKG51bGwpO1xuICAgICAgfVxuICAgICAgLy8gUHJldmVudCBpZHMgZnJvbSBsZWFraW5nXG4gICAgICBleHBvcnRzLmNsZWFySW1tZWRpYXRlKGlkKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBpZDtcbn07XG5cbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSB0eXBlb2YgY2xlYXJJbW1lZGlhdGUgPT09IFwiZnVuY3Rpb25cIiA/IGNsZWFySW1tZWRpYXRlIDogZnVuY3Rpb24oaWQpIHtcbiAgZGVsZXRlIGltbWVkaWF0ZUlkc1tpZF07XG59OyIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZTtcblxuLyoqXG4gKiBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICogUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLm5vRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRocm93RGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgdGhyb3cgYW4gRXJyb3Igd2hlbiBpbnZva2VkLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudHJhY2VEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCBpbnZva2UgYGNvbnNvbGUudHJhY2UoKWAgaW5zdGVhZCBvZiBgY29uc29sZS5lcnJvcigpYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIHRoZSBmdW5jdGlvbiB0byBkZXByZWNhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgLSB0aGUgc3RyaW5nIHRvIHByaW50IHRvIHRoZSBjb25zb2xlIHdoZW4gYGZuYCBpcyBpbnZva2VkXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IGEgbmV3IFwiZGVwcmVjYXRlZFwiIHZlcnNpb24gb2YgYGZuYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkZXByZWNhdGUgKGZuLCBtc2cpIHtcbiAgaWYgKGNvbmZpZygnbm9EZXByZWNhdGlvbicpKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAoY29uZmlnKCd0aHJvd0RlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKGNvbmZpZygndHJhY2VEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgYGxvY2FsU3RvcmFnZWAgZm9yIGJvb2xlYW4gdmFsdWVzIGZvciB0aGUgZ2l2ZW4gYG5hbWVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbmZpZyAobmFtZSkge1xuICAvLyBhY2Nlc3NpbmcgZ2xvYmFsLmxvY2FsU3RvcmFnZSBjYW4gdHJpZ2dlciBhIERPTUV4Y2VwdGlvbiBpbiBzYW5kYm94ZWQgaWZyYW1lc1xuICB0cnkge1xuICAgIGlmICghZ2xvYmFsLmxvY2FsU3RvcmFnZSkgcmV0dXJuIGZhbHNlO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB2YWwgPSBnbG9iYWwubG9jYWxTdG9yYWdlW25hbWVdO1xuICBpZiAobnVsbCA9PSB2YWwpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIFN0cmluZyh2YWwpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbn1cbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZztcbmV4cG9ydHMuZm9ybWF0ID0gZnVuY3Rpb24oZikge1xuICBpZiAoIWlzU3RyaW5nKGYpKSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgb2JqZWN0cy5wdXNoKGluc3BlY3QoYXJndW1lbnRzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHZhciBpID0gMTtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgdmFyIHN0ciA9IFN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24oeCkge1xuICAgIGlmICh4ID09PSAnJSUnKSByZXR1cm4gJyUnO1xuICAgIGlmIChpID49IGxlbikgcmV0dXJuIHg7XG4gICAgc3dpdGNoICh4KSB7XG4gICAgICBjYXNlICclcyc6IHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVkJzogcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWonOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmdzW2krK10pO1xuICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICB9KTtcbiAgZm9yICh2YXIgeCA9IGFyZ3NbaV07IGkgPCBsZW47IHggPSBhcmdzWysraV0pIHtcbiAgICBpZiAoaXNOdWxsKHgpIHx8ICFpc09iamVjdCh4KSkge1xuICAgICAgc3RyICs9ICcgJyArIHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnICcgKyBpbnNwZWN0KHgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuXG4vLyBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuLy8gUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbi8vIElmIC0tbm8tZGVwcmVjYXRpb24gaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG5leHBvcnRzLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKGZuLCBtc2cpIHtcbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKGlzVW5kZWZpbmVkKGdsb2JhbC5wcm9jZXNzKSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn07XG5cblxudmFyIGRlYnVncyA9IHt9O1xudmFyIGRlYnVnRW52aXJvbjtcbmV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpXG4gICAgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJztcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAobmV3IFJlZ0V4cCgnXFxcXGInICsgc2V0ICsgJ1xcXFxiJywgJ2knKS50ZXN0KGRlYnVnRW52aXJvbikpIHtcbiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtc2cgPSBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZnVuY3Rpb24gaXNBcnJheShhcikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gaXNPYmplY3QoZSkgJiZcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IHJlcXVpcmUoJy4vc3VwcG9ydC9pc0J1ZmZlcicpO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cblxuZnVuY3Rpb24gcGFkKG4pIHtcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XG59XG5cblxudmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLFxuICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTtcblxuLy8gMjYgRmViIDE2OjE5OjM0XG5mdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG4gIHZhciBkID0gbmV3IERhdGUoKTtcbiAgdmFyIHRpbWUgPSBbcGFkKGQuZ2V0SG91cnMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcbiAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTtcbn1cblxuXG4vLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCgpLCBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpKTtcbn07XG5cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXG4gKlxuICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZVxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXG4gKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZVxuICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlXG4gKiAgICAgcHJvdG90eXBlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uXG4gKi9cbmV4cG9ydHMuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5leHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luO1xufTtcblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cbiIsIi8vIFJldHVybnMgYSB3cmFwcGVyIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHdyYXBwZWQgY2FsbGJhY2tcbi8vIFRoZSB3cmFwcGVyIGZ1bmN0aW9uIHNob3VsZCBkbyBzb21lIHN0dWZmLCBhbmQgcmV0dXJuIGFcbi8vIHByZXN1bWFibHkgZGlmZmVyZW50IGNhbGxiYWNrIGZ1bmN0aW9uLlxuLy8gVGhpcyBtYWtlcyBzdXJlIHRoYXQgb3duIHByb3BlcnRpZXMgYXJlIHJldGFpbmVkLCBzbyB0aGF0XG4vLyBkZWNvcmF0aW9ucyBhbmQgc3VjaCBhcmUgbm90IGxvc3QgYWxvbmcgdGhlIHdheS5cbm1vZHVsZS5leHBvcnRzID0gd3JhcHB5XG5mdW5jdGlvbiB3cmFwcHkgKGZuLCBjYikge1xuICBpZiAoZm4gJiYgY2IpIHJldHVybiB3cmFwcHkoZm4pKGNiKVxuXG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbmVlZCB3cmFwcGVyIGZ1bmN0aW9uJylcblxuICBPYmplY3Qua2V5cyhmbikuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgIHdyYXBwZXJba10gPSBmbltrXVxuICB9KVxuXG4gIHJldHVybiB3cmFwcGVyXG5cbiAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXVxuICAgIH1cbiAgICB2YXIgcmV0ID0gZm4uYXBwbHkodGhpcywgYXJncylcbiAgICB2YXIgY2IgPSBhcmdzW2FyZ3MubGVuZ3RoLTFdXG4gICAgaWYgKHR5cGVvZiByZXQgPT09ICdmdW5jdGlvbicgJiYgcmV0ICE9PSBjYikge1xuICAgICAgT2JqZWN0LmtleXMoY2IpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgICAgcmV0W2tdID0gY2Jba11cbiAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiByZXRcbiAgfVxufVxuIl0sInByZUV4aXN0aW5nQ29tbWVudCI6Ii8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEJoWTJzdlgzQnlaV3gxWkdVdWFuTWlMQ0poY0hBdmMyTnlhWEIwY3k5cGJuQmhaMlV1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12UUdKaFltVnNMM0oxYm5ScGJXVXZhR1ZzY0dWeWN5OXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12UUcxbGRHRnRZWE5yTDI5aWFtVmpkQzF0ZFd4MGFYQnNaWGd2WkdsemRDOVBZbXBsWTNSTmRXeDBhWEJzWlhndWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlFHMWxkR0Z0WVhOckwyOWlhbVZqZEMxdGRXeDBhWEJzWlhndlpHbHpkQzlUZFdKemRISmxZVzB1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12UUcxbGRHRnRZWE5yTDI5aWFtVmpkQzF0ZFd4MGFYQnNaWGd2WkdsemRDOXBibVJsZUM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5QWJXVjBZVzFoYzJzdmMyRm1aUzFsZG1WdWRDMWxiV2wwZEdWeUwybHVaR1Y0TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDBCemRHRnlZMjlwYmk5emRHTXRhVzV3WVdkbExYQnliM1pwWkdWeUwyUnBjM1F2UW1GelpWQnliM1pwWkdWeUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwwQnpkR0Z5WTI5cGJpOXpkR010YVc1d1lXZGxMWEJ5YjNacFpHVnlMMlJwYzNRdlRXVjBZVTFoYzJ0SmJuQmhaMlZRY205MmFXUmxjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlBYzNSaGNtTnZhVzR2YzNSakxXbHVjR0ZuWlMxd2NtOTJhV1JsY2k5a2FYTjBMMlY0ZEdWdWMybHZiaTF3Y205MmFXUmxjaTlqY21WaGRHVkZlSFJsY201aGJFVjRkR1Z1YzJsdmJsQnliM1pwWkdWeUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwwQnpkR0Z5WTI5cGJpOXpkR010YVc1d1lXZGxMWEJ5YjNacFpHVnlMMlJwYzNRdlpYaDBaVzV6YVc5dUxYQnliM1pwWkdWeUwyVjRkR1Z5Ym1Gc0xXVjRkR1Z1YzJsdmJpMWpiMjVtYVdjdWFuTnZiaUlzSW01dlpHVmZiVzlrZFd4bGN5OUFjM1JoY21OdmFXNHZjM1JqTFdsdWNHRm5aUzF3Y205MmFXUmxjaTlrYVhOMEwybHVaR1Y0TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDBCemRHRnlZMjlwYmk5emRHTXRhVzV3WVdkbExYQnliM1pwWkdWeUwyUnBjM1F2YVc1cGRHbGhiR2w2WlVsdWNHRm5aVkJ5YjNacFpHVnlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMEJ6ZEdGeVkyOXBiaTl6ZEdNdGFXNXdZV2RsTFhCeWIzWnBaR1Z5TDJScGMzUXZiV1Z6YzJGblpYTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZRSE4wWVhKamIybHVMM04wWXkxcGJuQmhaMlV0Y0hKdmRtbGtaWEl2WkdsemRDOXphWFJsVFdWMFlXUmhkR0V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12UUhOMFlYSmpiMmx1TDNOMFl5MXBibkJoWjJVdGNISnZkbWxrWlhJdlpHbHpkQzkxZEdsc2N5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OUFjM1JoY21OdmFXNHZjM1JqTFdsdWNHRm5aUzF3Y205MmFXUmxjaTl1YjJSbFgyMXZaSFZzWlhNdlpYaDBaVzV6YVc5dUxYQnZjblF0YzNSeVpXRnRMMlJwYzNRdmFXNWtaWGd1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12UUhOMFlYSmpiMmx1TDNOMFl5MXBibkJoWjJVdGNISnZkbWxrWlhJdmJtOWtaVjl0YjJSMWJHVnpMMlpoYzNRdFpHVmxjQzFsY1hWaGJDOXBibVJsZUM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5QWMzUmhjbU52YVc0dmMzUmpMV2x1Y0dGblpTMXdjbTkyYVdSbGNpOXViMlJsWDIxdlpIVnNaWE12YVhNdGMzUnlaV0Z0TDJsdVpHVjRMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMEJ6ZEdGeVkyOXBiaTl6ZEdNdGFXNXdZV2RsTFhCeWIzWnBaR1Z5TDI1dlpHVmZiVzlrZFd4bGN5OXFjMjl1TFhKd1l5MXRhV1JrYkdWM1lYSmxMWE4wY21WaGJTOWthWE4wTDJOeVpXRjBaVVZ1WjJsdVpWTjBjbVZoYlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5QWMzUmhjbU52YVc0dmMzUmpMV2x1Y0dGblpTMXdjbTkyYVdSbGNpOXViMlJsWDIxdlpIVnNaWE12YW5OdmJpMXljR010Yldsa1pHeGxkMkZ5WlMxemRISmxZVzB2WkdsemRDOWpjbVZoZEdWVGRISmxZVzFOYVdSa2JHVjNZWEpsTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDBCemRHRnlZMjlwYmk5emRHTXRhVzV3WVdkbExYQnliM1pwWkdWeUwyNXZaR1ZmYlc5a2RXeGxjeTlxYzI5dUxYSndZeTF0YVdSa2JHVjNZWEpsTFhOMGNtVmhiUzlrYVhOMEwybHVaR1Y0TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaGMyVTJOQzFxY3k5cGJtUmxlQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEpsYzI5c2RtVXZaVzF3ZEhrdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlluSnZkM05sY21sbWVTOXViMlJsWDIxdlpIVnNaWE12WW5WbVptVnlMMmx1WkdWNExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3ZibTlrWlY5dGIyUjFiR1Z6TDJWMlpXNTBjeTlsZG1WdWRITXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxMWRHbHNMV2x6TDJ4cFlpOTFkR2xzTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJSbGRHVmpkQzFpY205M2MyVnlMMmx1WkdWNExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyVnVaQzF2WmkxemRISmxZVzB2YVc1a1pYZ3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZaWFJvTFhKd1l5MWxjbkp2Y25NdlpHbHpkQzlqYkdGemMyVnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMlYwYUMxeWNHTXRaWEp5YjNKekwyUnBjM1F2WlhKeWIzSXRZMjl1YzNSaGJuUnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMlYwYUMxeWNHTXRaWEp5YjNKekwyUnBjM1F2WlhKeWIzSnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMlYwYUMxeWNHTXRaWEp5YjNKekwyUnBjM1F2YVc1a1pYZ3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZaWFJvTFhKd1l5MWxjbkp2Y25NdlpHbHpkQzkxZEdsc2N5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OW1ZWE4wTFhOaFptVXRjM1J5YVc1bmFXWjVMMmx1WkdWNExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwybGxaV1UzTlRRdmFXNWtaWGd1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12YVc1b1pYSnBkSE12YVc1b1pYSnBkSE5mWW5KdmQzTmxjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlwY3kxaWRXWm1aWEl2YVc1a1pYZ3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZhWE5oY25KaGVTOXBibVJsZUM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5cWMyOXVMWEp3WXkxbGJtZHBibVV2WkdsemRDOUtjMjl1VW5CalJXNW5hVzVsTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJwemIyNHRjbkJqTFdWdVoybHVaUzlrYVhOMEwyTnlaV0YwWlVGemVXNWpUV2xrWkd4bGQyRnlaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlxYzI5dUxYSndZeTFsYm1kcGJtVXZaR2x6ZEM5amNtVmhkR1ZUWTJGbVptOXNaRTFwWkdSc1pYZGhjbVV1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12YW5OdmJpMXljR010Wlc1bmFXNWxMMlJwYzNRdloyVjBWVzVwY1hWbFNXUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZhbk52YmkxeWNHTXRaVzVuYVc1bEwyUnBjM1F2YVdSU1pXMWhjRTFwWkdSc1pYZGhjbVV1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12YW5OdmJpMXljR010Wlc1bmFXNWxMMlJwYzNRdmFXNWtaWGd1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12YW5OdmJpMXljR010Wlc1bmFXNWxMMlJwYzNRdmJXVnlaMlZOYVdSa2JHVjNZWEpsTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJ4dloyeGxkbVZzTDJ4cFlpOXNiMmRzWlhabGJDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OXZibU5sTDI5dVkyVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZjRzl6ZEMxdFpYTnpZV2RsTFhOMGNtVmhiUzlwYm1SbGVDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OXdjbTlqWlhOekwySnliM2R6WlhJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdmNIVnRjQzlwYm1SbGVDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZrWVdKc1pTMXpkSEpsWVcwdlpIVndiR1Y0TFdKeWIzZHpaWEl1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12Y21WaFpHRmliR1V0YzNSeVpXRnRMMnhwWWk5ZmMzUnlaV0Z0WDJSMWNHeGxlQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTl5WldGa1lXSnNaUzF6ZEhKbFlXMHZiR2xpTDE5emRISmxZVzFmY0dGemMzUm9jbTkxWjJndWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdmNtVmhaR0ZpYkdVdGMzUnlaV0Z0TDJ4cFlpOWZjM1J5WldGdFgzSmxZV1JoWW14bExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwzSmxZV1JoWW14bExYTjBjbVZoYlM5c2FXSXZYM04wY21WaGJWOTBjbUZ1YzJadmNtMHVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZjbVZoWkdGaWJHVXRjM1J5WldGdEwyeHBZaTlmYzNSeVpXRnRYM2R5YVhSaFlteGxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMM0psWVdSaFlteGxMWE4wY21WaGJTOXNhV0l2YVc1MFpYSnVZV3d2YzNSeVpXRnRjeTlDZFdabVpYSk1hWE4wTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDNKbFlXUmhZbXhsTFhOMGNtVmhiUzlzYVdJdmFXNTBaWEp1WVd3dmMzUnlaV0Z0Y3k5a1pYTjBjbTk1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDNKbFlXUmhZbXhsTFhOMGNtVmhiUzlzYVdJdmFXNTBaWEp1WVd3dmMzUnlaV0Z0Y3k5emRISmxZVzB0WW5KdmQzTmxjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTl5WldGa1lXSnNaUzF6ZEhKbFlXMHZibTlrWlY5dGIyUjFiR1Z6TDNCeWIyTmxjM010Ym1WNGRHbGpheTFoY21kekwybHVaR1Y0TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDNKbFlXUmhZbXhsTFhOMGNtVmhiUzl1YjJSbFgyMXZaSFZzWlhNdmMyRm1aUzFpZFdabVpYSXZhVzVrWlhndWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdmNtVmhaR0ZpYkdVdGMzUnlaV0Z0TDI1dlpHVmZiVzlrZFd4bGN5OXpkSEpwYm1kZlpHVmpiMlJsY2k5c2FXSXZjM1J5YVc1blgyUmxZMjlrWlhJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdmNtVmhaR0ZpYkdVdGMzUnlaV0Z0TDNCaGMzTjBhSEp2ZFdkb0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwzSmxZV1JoWW14bExYTjBjbVZoYlM5eVpXRmtZV0pzWlMxaWNtOTNjMlZ5TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDNKbFlXUmhZbXhsTFhOMGNtVmhiUzkwY21GdWMyWnZjbTB1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12Y21WaFpHRmliR1V0YzNSeVpXRnRMM2R5YVhSaFlteGxMV0p5YjNkelpYSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZjM1J5WldGdExXSnliM2R6WlhKcFpua3ZhVzVrWlhndWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdmRHbHRaWEp6TFdKeWIzZHpaWEpwWm5rdmJXRnBiaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTkxZEdsc0xXUmxjSEpsWTJGMFpTOWljbTkzYzJWeUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwzVjBhV3d2Ym05a1pWOXRiMlIxYkdWekwybHVhR1Z5YVhSekwybHVhR1Z5YVhSelgySnliM2R6WlhJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdmRYUnBiQzl6ZFhCd2IzSjBMMmx6UW5WbVptVnlRbkp2ZDNObGNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OTFkR2xzTDNWMGFXd3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZkM0poY0hCNUwzZHlZWEJ3ZVM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHM3T3pzN08wRkRhVU5CT3p0QlFVTkJPenRCUVVOQk96dEJRVzVEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hKUVVGSkxGRkJRVW83UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3UVVGRFFTeE5RVUZOTEhOQ1FVRnpRaXhIUVVGSExFMUJRVTA3UVVGRGJrTXNSVUZCUVN4UlFVRlJMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRV3hDT3p0QlFVTkJMRTFCUVVrN1FVRkRSaXhKUVVGQkxFMUJRVTBzUTBGQlF5eE5RVUZRTEVkQlFXZENMRk5CUVdoQ08wRkJRMFFzUjBGR1JDeERRVVZGTEU5QlFVOHNRMEZCVUN4RlFVRlZPMEZCUTFZc1NVRkJRU3hQUVVGUExFTkJRVU1zU1VGQlVpeERRVUZoTEdkRVFVRmlPMEZCUTBRN1FVRkRSaXhEUVZCRU8wRkJVMEU3UVVGRFFUdEJRVU5CT3pzN1FVRkRRU3hOUVVGTkxEQkNRVUV3UWl4SFFVRkhMRTFCUVUwN1FVRkRka01zVFVGQlNUdEJRVU5HTEVsQlFVRXNUVUZCVFN4RFFVRkRMRTFCUVZBc1IwRkJaMElzVVVGQmFFSTdRVUZEUkN4SFFVWkVMRU5CUlVVc1QwRkJUeXhEUVVGUUxFVkJRVlU3UVVGRFZpeEpRVUZCTEU5QlFVOHNRMEZCUXl4SlFVRlNMRU5CUVdFc2IwUkJRV0k3UVVGRFJEdEJRVU5HTEVOQlRrUTdPMEZCVVVFc2MwSkJRWE5DTzBGQlJYUkNPenRCUVV0QkxEQkNRVUV3UWpzN1FVRkZNVUlzYTBKQlFVa3NaVUZCU2l4RFFVRnZRaXhQUVVGUExFTkJRVU1zUjBGQlVpeERRVUZaTEdOQlFWb3NSMEZCTmtJc1QwRkJOMElzUjBGQmRVTXNUVUZCTTBRc1JTeERRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPenM3UVVGRFFTeE5RVUZOTEdOQlFXTXNSMEZCUnl4SlFVRkpMREJDUVVGS0xFTkJRVFpDTzBGQlEyeEVMRVZCUVVFc1NVRkJTU3hGUVVGRkxHbENRVVEwUXp0QlFVVnNSQ3hGUVVGQkxFMUJRVTBzUlVGQlJUdEJRVVl3UXl4RFFVRTNRaXhEUVVGMlFqdEJRVXRCTERKRFFVRnRRanRCUVVOcVFpeEZRVUZCTEdkQ1FVRm5RaXhGUVVGRkxHTkJSRVE3UVVGRmFrSXNSVUZCUVN4cFFrRkJhVUlzUlVGQlJTeHRRa0ZHUmp0QlFVZHFRaXhGUVVGQkxFMUJRVTBzUlVGQlJTeHBRa0ZJVXp0QlFVbHFRaXhGUVVGQkxHdENRVUZyUWl4RlFVRkZPMEZCU2tnc1EwRkJia0k3T3pzN08wRkRia1JCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMDVCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYkVaQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTm9RMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGJFVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM3BXUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVNeFVrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyNURRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRPVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGJFTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVNMVJrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPMEZEZEVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUTJwRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzWkVRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRE4wSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYkVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYmtWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFZrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGRFcEJPenRCUTBGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYW5aRVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN1FVTXpaMEpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenM3UVVNelIwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN08wRkRjazVCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdRVU01UmtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRE0wVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRNMFpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUXpGSlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU01UjBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJwTFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNKR1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU16UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGNrSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5NUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU42VUVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMnBGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRjRUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFwQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMnhDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTnNRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5XUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6RlFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTXhRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6RkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN1FVTjRURUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUTJ4R1FUdEJRVU5CT3p0QlEwUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGJFbEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096dEJRemxEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzBGRE1TOUNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN08wRkRjazVCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dEJRemx4UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZET1VWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGVrVkJPMEZCUTBFN096dEJRMFJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkROME5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU01UkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTjJVMEU3UVVGRFFUczdRVU5FUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExQkJPMEZCUTBFN08wRkRSRUU3UVVGRFFUczdRVU5FUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3UVVNdlNFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdPMEZETTBWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3UVVOdVJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM1pDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3p0QlEweEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdRVU14YTBKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0b0tYdG1kVzVqZEdsdmJpQnlLR1VzYml4MEtYdG1kVzVqZEdsdmJpQnZLR2tzWmlsN2FXWW9JVzViYVYwcGUybG1LQ0ZsVzJsZEtYdDJZWElnWXoxY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQnlaWEYxYVhKbEppWnlaWEYxYVhKbE8ybG1LQ0ZtSmlaaktYSmxkSFZ5YmlCaktHa3NJVEFwTzJsbUtIVXBjbVYwZFhKdUlIVW9hU3doTUNrN2RtRnlJR0U5Ym1WM0lFVnljbTl5S0Z3aVEyRnVibTkwSUdacGJtUWdiVzlrZFd4bElDZGNJaXRwSzF3aUoxd2lLVHQwYUhKdmR5QmhMbU52WkdVOVhDSk5UMFJWVEVWZlRrOVVYMFpQVlU1RVhDSXNZWDEyWVhJZ2NEMXVXMmxkUFh0bGVIQnZjblJ6T250OWZUdGxXMmxkV3pCZExtTmhiR3dvY0M1bGVIQnZjblJ6TEdaMWJtTjBhVzl1S0hJcGUzWmhjaUJ1UFdWYmFWMWJNVjFiY2wwN2NtVjBkWEp1SUc4b2JueDhjaWw5TEhBc2NDNWxlSEJ2Y25SekxISXNaU3h1TEhRcGZYSmxkSFZ5YmlCdVcybGRMbVY0Y0c5eWRITjlabTl5S0haaGNpQjFQVndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUhKbGNYVnBjbVVtSm5KbGNYVnBjbVVzYVQwd08yazhkQzVzWlc1bmRHZzdhU3NyS1c4b2RGdHBYU2s3Y21WMGRYSnVJRzk5Y21WMGRYSnVJSEo5S1NncElpd2lMeThnYm1WbFpDQjBieUJ0WVd0bElITjFjbVVnZDJVZ1lYSmxiaWQwSUdGbVptVmpkR1ZrSUdKNUlHOTJaWEpzWVhCd2FXNW5JRzVoYldWemNHRmpaWE5jYmk4dklHRnVaQ0IwYUdGMElIZGxJR1J2Ym5RZ1lXWm1aV04wSUhSb1pTQmhjSEFnZDJsMGFDQnZkWElnYm1GdFpYTndZV05sWEc0dkx5QnRiM04wYkhrZ1lTQm1hWGdnWm05eUlIZGxZak1uY3lCQ2FXZE9kVzFpWlhJZ2FXWWdRVTFFSjNNZ1hDSmtaV1pwYm1WY0lpQnBjeUJrWldacGJtVmtMaTR1WEc1c1pYUWdYMTlrWldacGJtVTdYRzVjYmk4cUtseHVJQ29nUTJGamFHVnpJSEpsWm1WeVpXNWpaU0IwYnlCbmJHOWlZV3dnWkdWbWFXNWxJRzlpYW1WamRDQmhibVFnWkdWc1pYUmxjeUJwZENCMGIxeHVJQ29nWVhadmFXUWdZMjl1Wm14cFkzUnpJSGRwZEdnZ2IzUm9aWElnWjJ4dlltRnNJR1JsWm1sdVpTQnZZbXBsWTNSekxDQnpkV05vSUdGelhHNGdLaUJCVFVRbmN5QmtaV1pwYm1VZ1puVnVZM1JwYjI1Y2JpQXFMMXh1WTI5dWMzUWdZMnhsWVc1RGIyNTBaWGgwUm05eVNXMXdiM0owY3lBOUlDZ3BJRDArSUh0Y2JpQWdYMTlrWldacGJtVWdQU0JuYkc5aVlXd3VaR1ZtYVc1bE8xeHVJQ0IwY25rZ2UxeHVJQ0FnSUdkc2IySmhiQzVrWldacGJtVWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lIMGdZMkYwWTJnZ0tGOHBJSHRjYmlBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSjFOMFlYSk5ZWE5ySUMwZ1oyeHZZbUZzTG1SbFptbHVaU0JqYjNWc1pDQnViM1FnWW1VZ1pHVnNaWFJsWkM0bktUdGNiaUFnZlZ4dWZUdGNibHh1THlvcVhHNGdLaUJTWlhOMGIzSmxjeUJuYkc5aVlXd2daR1ZtYVc1bElHOWlhbVZqZENCbWNtOXRJR05oWTJobFpDQnlaV1psY21WdVkyVmNiaUFxTDF4dVkyOXVjM1FnY21WemRHOXlaVU52Ym5SbGVIUkJablJsY2tsdGNHOXlkSE1nUFNBb0tTQTlQaUI3WEc0Z0lIUnllU0I3WEc0Z0lDQWdaMnh2WW1Gc0xtUmxabWx1WlNBOUlGOWZaR1ZtYVc1bE8xeHVJQ0I5SUdOaGRHTm9JQ2hmS1NCN1hHNGdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDZFRkR0Z5VFdGemF5QXRJR2RzYjJKaGJDNWtaV1pwYm1VZ1kyOTFiR1FnYm05MElHSmxJRzkyWlhKM2NtbDBkR1Z1TGljcE8xeHVJQ0I5WEc1OU8xeHVYRzVqYkdWaGJrTnZiblJsZUhSR2IzSkpiWEJ2Y25SektDazdYRzVjYmk4cUlHVnpiR2x1ZEMxa2FYTmhZbXhsSUdsdGNHOXlkQzltYVhKemRDQXFMMXh1YVcxd2IzSjBJR3h2WnlCbWNtOXRJQ2RzYjJkc1pYWmxiQ2M3WEc1cGJYQnZjblFnVEc5allXeE5aWE56WVdkbFJIVndiR1Y0VTNSeVpXRnRJR1p5YjIwZ0ozQnZjM1F0YldWemMyRm5aUzF6ZEhKbFlXMG5PMXh1YVcxd2IzSjBJSHNnYVc1cGRHbGhiR2w2WlZCeWIzWnBaR1Z5SUgwZ1puSnZiU0FuUUhOMFlYSmpiMmx1TDNOMFl5MXBibkJoWjJVdGNISnZkbWxrWlhJbk8xeHVYRzV5WlhOMGIzSmxRMjl1ZEdWNGRFRm1kR1Z5U1cxd2IzSjBjeWdwTzF4dVhHNXNiMmN1YzJWMFJHVm1ZWFZzZEV4bGRtVnNLSEJ5YjJObGMzTXVaVzUyTGxOVVFWSk5RVk5MWDBSRlFsVkhJRDhnSjJSbFluVm5KeUE2SUNkM1lYSnVKeWs3WEc1Y2JpOHZYRzR2THlCelpYUjFjQ0J3YkhWbmFXNGdZMjl0YlhWdWFXTmhkR2x2Ymx4dUx5OWNibHh1THk4Z2MyVjBkWEFnWW1GamEyZHliM1Z1WkNCamIyNXVaV04wYVc5dVhHNWpiMjV6ZENCemRHRnliV0Z6YTFOMGNtVmhiU0E5SUc1bGR5Qk1iMk5oYkUxbGMzTmhaMlZFZFhCc1pYaFRkSEpsWVcwb2UxeHVJQ0J1WVcxbE9pQW5jM1JoY20xaGMyc3RhVzV3WVdkbEp5eGNiaUFnZEdGeVoyVjBPaUFuYzNSaGNtMWhjMnN0WTI5dWRHVnVkSE5qY21sd2RDY3NYRzU5S1R0Y2JseHVhVzVwZEdsaGJHbDZaVkJ5YjNacFpHVnlLSHRjYmlBZ1kyOXVibVZqZEdsdmJsTjBjbVZoYlRvZ2MzUmhjbTFoYzJ0VGRISmxZVzBzWEc0Z0lHcHpiMjVTY0dOVGRISmxZVzFPWVcxbE9pQW5jM1JoY20xaGMyc3RjSEp2ZG1sa1pYSW5MRnh1SUNCc2IyZG5aWEk2SUd4dlp5eGNiaUFnYzJodmRXeGtVMlZ1WkUxbGRHRmtZWFJoT2lCbVlXeHpaU3hjYm4wcE8xeHVJaXdpWm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHZZbW9wSUh0Y2JpQWdjbVYwZFhKdUlHOWlhaUFtSmlCdlltb3VYMTlsYzAxdlpIVnNaU0EvSUc5aWFpQTZJSHRjYmlBZ0lDQmNJbVJsWm1GMWJIUmNJam9nYjJKcVhHNGdJSDA3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZERzaUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JuWmhjaUJmWDJsdGNHOXlkRVJsWm1GMWJIUWdQU0FvZEdocGN5QW1KaUIwYUdsekxsOWZhVzF3YjNKMFJHVm1ZWFZzZENrZ2ZId2dablZ1WTNScGIyNGdLRzF2WkNrZ2UxeHVJQ0FnSUhKbGRIVnliaUFvYlc5a0lDWW1JRzF2WkM1ZlgyVnpUVzlrZFd4bEtTQS9JRzF2WkNBNklIc2dYQ0prWldaaGRXeDBYQ0k2SUcxdlpDQjlPMXh1ZlR0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dleUIyWVd4MVpUb2dkSEoxWlNCOUtUdGNibVY0Y0c5eWRITXVUMkpxWldOMFRYVnNkR2x3YkdWNElEMGdkbTlwWkNBd08xeHVZMjl1YzNRZ2NtVmhaR0ZpYkdWZmMzUnlaV0Z0WHpFZ1BTQnlaWEYxYVhKbEtGd2ljbVZoWkdGaWJHVXRjM1J5WldGdFhDSXBPMXh1WTI5dWMzUWdaVzVrWDI5bVgzTjBjbVZoYlY4eElEMGdYMTlwYlhCdmNuUkVaV1poZFd4MEtISmxjWFZwY21Vb1hDSmxibVF0YjJZdGMzUnlaV0Z0WENJcEtUdGNibU52Ym5OMElHOXVZMlZmTVNBOUlGOWZhVzF3YjNKMFJHVm1ZWFZzZENoeVpYRjFhWEpsS0Z3aWIyNWpaVndpS1NrN1hHNWpiMjV6ZENCVGRXSnpkSEpsWVcxZk1TQTlJSEpsY1hWcGNtVW9YQ0l1TDFOMVluTjBjbVZoYlZ3aUtUdGNibU52Ym5OMElFbEhUazlTUlY5VFZVSlRWRkpGUVUwZ1BTQlRlVzFpYjJ3b0owbEhUazlTUlY5VFZVSlRWRkpGUVUwbktUdGNibU5zWVhOeklFOWlhbVZqZEUxMWJIUnBjR3hsZUNCbGVIUmxibVJ6SUhKbFlXUmhZbXhsWDNOMGNtVmhiVjh4TGtSMWNHeGxlQ0I3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYjNCMGN5QTlJSHQ5S1NCN1hHNGdJQ0FnSUNBZ0lITjFjR1Z5S0U5aWFtVmpkQzVoYzNOcFoyNG9UMkpxWldOMExtRnpjMmxuYmloN2ZTd2diM0IwY3lrc0lIc2diMkpxWldOMFRXOWtaVG9nZEhKMVpTQjlLU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM04xWW5OMGNtVmhiWE1nUFNCN2ZUdGNiaUFnSUNCOVhHNGdJQ0FnWTNKbFlYUmxVM1J5WldGdEtHNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdaM1ZoY21RZ2MzUnlaV0Z0SUdGbllXbHVjM1FnWkdWemRISnZlV1ZrSUdGc2NtVmhaSGxjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WkdWemRISnZlV1ZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRTlpYW1WamRFMTFiSFJwY0d4bGVDQXRJSEJoY21WdWRDQnpkSEpsWVcwZ1ptOXlJRzVoYldVZ1hDSWtlMjVoYldWOVhDSWdZV3h5WldGa2VTQmtaWE4wY205NVpXUmdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBdkx5Qm5kV0Z5WkNCemRISmxZVzBnWVdkaGFXNXpkQ0JsYm1SbFpDQmhiSEpsWVdSNVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXlaV0ZrWVdKc1pWTjBZWFJsTG1WdVpHVmtJSHg4SUhSb2FYTXVYM2R5YVhSaFlteGxVM1JoZEdVdVpXNWtaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdUMkpxWldOMFRYVnNkR2x3YkdWNElDMGdjR0Z5Wlc1MElITjBjbVZoYlNCbWIzSWdibUZ0WlNCY0lpUjdibUZ0WlgxY0lpQmhiSEpsWVdSNUlHVnVaR1ZrWUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdMeThnZG1Gc2FXUmhkR1VnYm1GdFpWeHVJQ0FnSUNBZ0lDQnBaaUFvSVc1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblQySnFaV04wVFhWc2RHbHdiR1Y0SUMwZ2JtRnRaU0J0ZFhOMElHNXZkQ0JpWlNCbGJYQjBlU2NwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXpkV0p6ZEhKbFlXMXpXMjVoYldWZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUU5aWFtVmpkRTExYkhScGNHeGxlQ0F0SUZOMVluTjBjbVZoYlNCbWIzSWdibUZ0WlNCY0lpUjdibUZ0WlgxY0lpQmhiSEpsWVdSNUlHVjRhWE4wYzJBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQzh2SUdOeVpXRjBaU0J6ZFdKemRISmxZVzFjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjM1ZpYzNSeVpXRnRJRDBnYm1WM0lGTjFZbk4wY21WaGJWOHhMbE4xWW5OMGNtVmhiU2g3SUhCaGNtVnVkRG9nZEdocGN5d2dibUZ0WlNCOUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMzVmljM1J5WldGdGMxdHVZVzFsWFNBOUlITjFZbk4wY21WaGJUdGNiaUFnSUNBZ0lDQWdMeThnYkdsemRHVnVJR1p2Y2lCd1lYSmxiblFnYzNSeVpXRnRJSFJ2SUdWdVpGeHVJQ0FnSUNBZ0lDQmhibmxUZEhKbFlXMUZibVFvZEdocGN5d2dLRjlsY25KdmNpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlITjFZbk4wY21WaGJTNWtaWE4wY205NUtGOWxjbkp2Y2lCOGZDQjFibVJsWm1sdVpXUXBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMVluTjBjbVZoYlR0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnYVdkdWIzSmxJSE4wY21WaGJYTWdLR1J2Ym5RZ1pHbHpjR3hoZVNCdmNuQm9ZVzVsWkNCa1lYUmhJSGRoY201cGJtY3BYRzRnSUNBZ2FXZHViM0psVTNSeVpXRnRLRzVoYldVcElIdGNiaUFnSUNBZ0lDQWdMeThnZG1Gc2FXUmhkR1VnYm1GdFpWeHVJQ0FnSUNBZ0lDQnBaaUFvSVc1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblQySnFaV04wVFhWc2RHbHdiR1Y0SUMwZ2JtRnRaU0J0ZFhOMElHNXZkQ0JpWlNCbGJYQjBlU2NwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXpkV0p6ZEhKbFlXMXpXMjVoYldWZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUU5aWFtVmpkRTExYkhScGNHeGxlQ0F0SUZOMVluTjBjbVZoYlNCbWIzSWdibUZ0WlNCY0lpUjdibUZ0WlgxY0lpQmhiSEpsWVdSNUlHVjRhWE4wYzJBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQzh2SUhObGRGeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emRXSnpkSEpsWVcxelcyNWhiV1ZkSUQwZ1NVZE9UMUpGWDFOVlFsTlVVa1ZCVFR0Y2JpQWdJQ0I5WEc0Z0lDQWdYM0psWVdRb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjFibVJsWm1sdVpXUTdYRzRnSUNBZ2ZWeHVJQ0FnSUY5M2NtbDBaU2hqYUhWdWF5d2dYMlZ1WTI5a2FXNW5MQ0JqWVd4c1ltRmpheWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0I3SUc1aGJXVXNJR1JoZEdFZ2ZTQTlJR05vZFc1ck8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVc1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWQyRnliaWhnVDJKcVpXTjBUWFZzZEdsd2JHVjRJQzBnYldGc1ptOXliV1ZrSUdOb2RXNXJJSGRwZEdodmRYUWdibUZ0WlNCY0lpUjdZMmgxYm10OVhDSmdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXeHNZbUZqYXlncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQzh2SUdkbGRDQmpiM0p5WlhOd2IyNWthVzVuSUhOMVluTjBjbVZoYlZ4dUlDQWdJQ0FnSUNCamIyNXpkQ0J6ZFdKemRISmxZVzBnUFNCMGFHbHpMbDl6ZFdKemRISmxZVzF6VzI1aGJXVmRPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYTjFZbk4wY21WaGJTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLR0JQWW1wbFkzUk5kV3gwYVhCc1pYZ2dMU0J2Y25Cb1lXNWxaQ0JrWVhSaElHWnZjaUJ6ZEhKbFlXMGdYQ0lrZTI1aGJXVjlYQ0pnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZV3hzWW1GamF5Z3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklIQjFjMmdnWkdGMFlTQnBiblJ2SUhOMVluTjBjbVZoYlZ4dUlDQWdJQ0FnSUNCcFppQW9jM1ZpYzNSeVpXRnRJQ0U5UFNCSlIwNVBVa1ZmVTFWQ1UxUlNSVUZOS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZFdKemRISmxZVzB1Y0hWemFDaGtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRnNiR0poWTJzb0tUdGNiaUFnSUNCOVhHNTlYRzVsZUhCdmNuUnpMazlpYW1WamRFMTFiSFJwY0d4bGVDQTlJRTlpYW1WamRFMTFiSFJwY0d4bGVEdGNiaTh2SUhWMGFXeGNibVoxYm1OMGFXOXVJR0Z1ZVZOMGNtVmhiVVZ1WkNoemRISmxZVzBzSUY5allpa2dlMXh1SUNBZ0lHTnZibk4wSUdOaUlEMGdiMjVqWlY4eExtUmxabUYxYkhRb1gyTmlLVHRjYmlBZ0lDQmxibVJmYjJaZmMzUnlaV0Z0WHpFdVpHVm1ZWFZzZENoemRISmxZVzBzSUhzZ2NtVmhaR0ZpYkdVNklHWmhiSE5sSUgwc0lHTmlLVHRjYmlBZ0lDQmxibVJmYjJaZmMzUnlaV0Z0WHpFdVpHVm1ZWFZzZENoemRISmxZVzBzSUhzZ2QzSnBkR0ZpYkdVNklHWmhiSE5sSUgwc0lHTmlLVHRjYm4xY2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QVTlpYW1WamRFMTFiSFJwY0d4bGVDNXFjeTV0WVhBaUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dleUIyWVd4MVpUb2dkSEoxWlNCOUtUdGNibVY0Y0c5eWRITXVVM1ZpYzNSeVpXRnRJRDBnZG05cFpDQXdPMXh1WTI5dWMzUWdjbVZoWkdGaWJHVmZjM1J5WldGdFh6RWdQU0J5WlhGMWFYSmxLRndpY21WaFpHRmliR1V0YzNSeVpXRnRYQ0lwTzF4dVkyeGhjM01nVTNWaWMzUnlaV0Z0SUdWNGRHVnVaSE1nY21WaFpHRmliR1ZmYzNSeVpXRnRYekV1UkhWd2JHVjRJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWg3SUhCaGNtVnVkQ3dnYm1GdFpTQjlLU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLSHNnYjJKcVpXTjBUVzlrWlRvZ2RISjFaU0I5S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY0dGeVpXNTBJRDBnY0dGeVpXNTBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXVZVzFsSUQwZ2JtRnRaVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSWGh3YkdsamFYUnNlU0J6WlhSeklISmxZV1FnYjNCbGNtRjBhVzl1Y3lCMGJ5QmhJRzV2TFc5d0xseHVJQ0FnSUNBcUwxeHVJQ0FnSUY5eVpXRmtLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZFc1a1pXWnBibVZrTzF4dUlDQWdJSDFjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEWVd4c1pXUWdkMmhsYmlCa1lYUmhJSE5vYjNWc1pDQmlaU0IzY21sMGRHVnVJSFJ2SUhSb2FYTWdkM0pwZEdGaWJHVWdjM1J5WldGdExseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdOb2RXNXJJQzBnUVhKaWFYUnlZWEo1SUc5aWFtVmpkQ0IwYnlCM2NtbDBaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmxibU52WkdsdVp5QXRJRVZ1WTI5a2FXNW5JSFJ2SUhWelpTQjNhR1Z1SUhkeWFYUnBibWNnY0dGNWJHOWhaRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmpZV3hzWW1GamF5QXRJRU5oYkd4bFpDQjNhR1Z1SUhkeWFYUnBibWNnYVhNZ1kyOXRjR3hsZEdVZ2IzSWdZVzRnWlhKeWIzSWdiMk5qZFhKelhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDNkeWFYUmxLR05vZFc1ckxDQmZaVzVqYjJScGJtY3NJR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0JoY21WdWRDNXdkWE5vS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVoYldVNklIUm9hWE11WDI1aGJXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhPaUJqYUhWdWF5eGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUdOaGJHeGlZV05yS0NrN1hHNGdJQ0FnZlZ4dWZWeHVaWGh3YjNKMGN5NVRkV0p6ZEhKbFlXMGdQU0JUZFdKemRISmxZVzA3WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMVRkV0p6ZEhKbFlXMHVhbk11YldGd0lpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNWpiMjV6ZENCUFltcGxZM1JOZFd4MGFYQnNaWGhmTVNBOUlISmxjWFZwY21Vb1hDSXVMMDlpYW1WamRFMTFiSFJwY0d4bGVGd2lLVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVDJKcVpXTjBUWFZzZEdsd2JHVjRYekV1VDJKcVpXTjBUWFZzZEdsd2JHVjRPMXh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OWFXNWtaWGd1YW5NdWJXRndJaXdpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUhzZ2RtRnNkV1U2SUhSeWRXVWdmU2s3WEc1amIyNXpkQ0JsZG1WdWRITmZNU0E5SUhKbGNYVnBjbVVvWENKbGRtVnVkSE5jSWlrN1hHNW1kVzVqZEdsdmJpQnpZV1psUVhCd2JIa29hR0Z1Wkd4bGNpd2dZMjl1ZEdWNGRDd2dZWEpuY3lrZ2UxeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJRkpsWm14bFkzUXVZWEJ3Ykhrb2FHRnVaR3hsY2l3Z1kyOXVkR1Y0ZEN3Z1lYSm5jeWs3WEc0Z0lDQWdmVnh1SUNBZ0lHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1ZHaHliM2NnWlhKeWIzSWdZV1owWlhJZ2RHbHRaVzkxZENCemJ5QmhjeUJ1YjNRZ2RHOGdhVzUwWlhKeWRYQjBJSFJvWlNCemRHRmphMXh1SUNBZ0lDQWdJQ0J6WlhSVWFXMWxiM1YwS0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUdWeWNqdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1ZlZ4dVpuVnVZM1JwYjI0Z1lYSnlZWGxEYkc5dVpTaGhjbklwSUh0Y2JpQWdJQ0JqYjI1emRDQnVJRDBnWVhKeUxteGxibWQwYUR0Y2JpQWdJQ0JqYjI1emRDQmpiM0I1SUQwZ2JtVjNJRUZ5Y21GNUtHNHBPMXh1SUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dianNnYVNBclBTQXhLU0I3WEc0Z0lDQWdJQ0FnSUdOdmNIbGJhVjBnUFNCaGNuSmJhVjA3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCamIzQjVPMXh1ZlZ4dVkyeGhjM01nVTJGbVpVVjJaVzUwUlcxcGRIUmxjaUJsZUhSbGJtUnpJR1YyWlc1MGMxOHhMa1YyWlc1MFJXMXBkSFJsY2lCN1hHNGdJQ0FnWlcxcGRDaDBlWEJsTENBdUxpNWhjbWR6S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JrYjBWeWNtOXlJRDBnZEhsd1pTQTlQVDBnSjJWeWNtOXlKenRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaWFpsYm5SeklEMGdkR2hwY3k1ZlpYWmxiblJ6TzF4dUlDQWdJQ0FnSUNCcFppQW9aWFpsYm5SeklDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1J2UlhKeWIzSWdQU0JrYjBWeWNtOXlJQ1ltSUdWMlpXNTBjeTVsY25KdmNpQTlQVDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tDRmtiMFZ5Y205eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnTHk4Z1NXWWdkR2hsY21VZ2FYTWdibThnSjJWeWNtOXlKeUJsZG1WdWRDQnNhWE4wWlc1bGNpQjBhR1Z1SUhSb2NtOTNMbHh1SUNBZ0lDQWdJQ0JwWmlBb1pHOUZjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHVnlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR0Z5WjNNdWJHVnVaM1JvSUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRnRsY2wwZ1BTQmhjbWR6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1Z5SUdsdWMzUmhibU5sYjJZZ1JYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5Qk9iM1JsT2lCVWFHVWdZMjl0YldWdWRITWdiMjRnZEdobElHQjBhSEp2ZDJBZ2JHbHVaWE1nWVhKbElHbHVkR1Z1ZEdsdmJtRnNMQ0IwYUdWNUlITm9iM2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCMWNDQnBiaUJPYjJSbEozTWdiM1YwY0hWMElHbG1JSFJvYVhNZ2NtVnpkV3gwY3lCcGJpQmhiaUIxYm1oaGJtUnNaV1FnWlhoalpYQjBhVzl1TGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJR1Z5T3lBdkx5QlZibWhoYm1Sc1pXUWdKMlZ5Y205eUp5QmxkbVZ1ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRWFFnYkdWaGMzUWdaMmwyWlNCemIyMWxJR3RwYm1RZ2IyWWdZMjl1ZEdWNGRDQjBieUIwYUdVZ2RYTmxjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWlhKeUlEMGdibVYzSUVWeWNtOXlLR0JWYm1oaGJtUnNaV1FnWlhKeWIzSXVKSHRsY2lBL0lHQWdLQ1I3WlhJdWJXVnpjMkZuWlgwcFlDQTZJQ2NuZldBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhKeUxtTnZiblJsZUhRZ1BTQmxjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUdWeWNqc2dMeThnVlc1b1lXNWtiR1ZrSUNkbGNuSnZjaWNnWlhabGJuUmNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQm9ZVzVrYkdWeUlEMGdaWFpsYm5SelczUjVjR1ZkTzF4dUlDQWdJQ0FnSUNCcFppQW9hR0Z1Wkd4bGNpQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJvWVc1a2JHVnlJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCellXWmxRWEJ3Ykhrb2FHRnVaR3hsY2l3Z2RHaHBjeXdnWVhKbmN5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JzWlc0Z1BTQm9ZVzVrYkdWeUxteGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHeHBjM1JsYm1WeWN5QTlJR0Z5Y21GNVEyeHZibVVvYUdGdVpHeGxjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJR3hsYmpzZ2FTQXJQU0F4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyRm1aVUZ3Y0d4NUtHeHBjM1JsYm1WeWMxdHBYU3dnZEdocGN5d2dZWEpuY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZWeHVmVnh1Wlhod2IzSjBjeTVrWldaaGRXeDBJRDBnVTJGbVpVVjJaVzUwUlcxcGRIUmxjanRjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXbHVaR1Y0TG1wekxtMWhjQ0lzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1ZG1GeUlGOWZhVzF3YjNKMFJHVm1ZWFZzZENBOUlDaDBhR2x6SUNZbUlIUm9hWE11WDE5cGJYQnZjblJFWldaaGRXeDBLU0I4ZkNCbWRXNWpkR2x2YmlBb2JXOWtLU0I3WEc0Z0lDQWdjbVYwZFhKdUlDaHRiMlFnSmlZZ2JXOWtMbDlmWlhOTmIyUjFiR1VwSUQ4Z2JXOWtJRG9nZXlCY0ltUmxabUYxYkhSY0lqb2diVzlrSUgwN1hHNTlPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN0lIWmhiSFZsT2lCMGNuVmxJSDBwTzF4dVkyOXVjM1FnY0hWdGNGOHhJRDBnWDE5cGJYQnZjblJFWldaaGRXeDBLSEpsY1hWcGNtVW9YQ0p3ZFcxd1hDSXBLVHRjYm1OdmJuTjBJR3B6YjI1ZmNuQmpYMlZ1WjJsdVpWOHhJRDBnY21WeGRXbHlaU2hjSW1wemIyNHRjbkJqTFdWdVoybHVaVndpS1R0Y2JtTnZibk4wSUdwemIyNWZjbkJqWDIxcFpHUnNaWGRoY21WZmMzUnlaV0Z0WHpFZ1BTQnlaWEYxYVhKbEtGd2lhbk52YmkxeWNHTXRiV2xrWkd4bGQyRnlaUzF6ZEhKbFlXMWNJaWs3WEc1amIyNXpkQ0J2WW1wbFkzUmZiWFZzZEdsd2JHVjRYekVnUFNCZlgybHRjRzl5ZEVSbFptRjFiSFFvY21WeGRXbHlaU2hjSWtCdFpYUmhiV0Z6YXk5dlltcGxZM1F0YlhWc2RHbHdiR1Y0WENJcEtUdGNibU52Ym5OMElITmhabVZmWlhabGJuUmZaVzFwZEhSbGNsOHhJRDBnWDE5cGJYQnZjblJFWldaaGRXeDBLSEpsY1hWcGNtVW9YQ0pBYldWMFlXMWhjMnN2YzJGbVpTMWxkbVZ1ZEMxbGJXbDBkR1Z5WENJcEtUdGNibU52Ym5OMElHWmhjM1JmWkdWbGNGOWxjWFZoYkY4eElEMGdYMTlwYlhCdmNuUkVaV1poZFd4MEtISmxjWFZwY21Vb1hDSm1ZWE4wTFdSbFpYQXRaWEYxWVd4Y0lpa3BPMXh1WTI5dWMzUWdaWFJvWDNKd1kxOWxjbkp2Y25OZk1TQTlJSEpsY1hWcGNtVW9YQ0psZEdndGNuQmpMV1Z5Y205eWMxd2lLVHRjYm1OdmJuTjBJR2x6WDNOMGNtVmhiVjh4SUQwZ2NtVnhkV2x5WlNoY0ltbHpMWE4wY21WaGJWd2lLVHRjYm1OdmJuTjBJRzFsYzNOaFoyVnpYekVnUFNCZlgybHRjRzl5ZEVSbFptRjFiSFFvY21WeGRXbHlaU2hjSWk0dmJXVnpjMkZuWlhOY0lpa3BPMXh1WTI5dWMzUWdkWFJwYkhOZk1TQTlJSEpsY1hWcGNtVW9YQ0l1TDNWMGFXeHpYQ0lwTzF4dVkyeGhjM01nUW1GelpWQnliM1pwWkdWeUlHVjRkR1Z1WkhNZ2MyRm1aVjlsZG1WdWRGOWxiV2wwZEdWeVh6RXVaR1ZtWVhWc2RDQjdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJoY21GdElHTnZibTVsWTNScGIyNVRkSEpsWVcwZ0xTQkJJRTV2WkdVdWFuTWdaSFZ3YkdWNElITjBjbVZoYlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J2Y0hScGIyNXpJQzBnUVc0Z2IzQjBhVzl1Y3lCaVlXZGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2IzQjBhVzl1Y3k1cWMyOXVVbkJqVTNSeVpXRnRUbUZ0WlNBdElGUm9aU0J1WVcxbElHOW1JSFJvWlNCcGJuUmxjbTVoYkNCS1UwOU9MVkpRUXlCemRISmxZVzB1WEc0Z0lDQWdJQ29nUkdWbVlYVnNkRG9nYldWMFlXMWhjMnN0Y0hKdmRtbGtaWEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiM0IwYVc5dWN5NXNiMmRuWlhJZ0xTQlVhR1VnYkc5bloybHVaeUJCVUVrZ2RHOGdkWE5sTGlCRVpXWmhkV3gwT2lCamIyNXpiMnhsWEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzl3ZEdsdmJuTXViV0Y0UlhabGJuUk1hWE4wWlc1bGNuTWdMU0JVYUdVZ2JXRjRhVzExYlNCdWRXMWlaWElnYjJZZ1pYWmxiblJjYmlBZ0lDQWdLaUJzYVhOMFpXNWxjbk11SUVSbFptRjFiSFE2SURFd01GeHVJQ0FnSUNBcUwxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHTnZibTVsWTNScGIyNVRkSEpsWVcwc0lIc2dhbk52YmxKd1kxTjBjbVZoYlU1aGJXVWdQU0FuYzNSaGNtMWhjMnN0Y0hKdmRtbGtaWEluTENCc2IyZG5aWElnUFNCamIyNXpiMnhsTENCdFlYaEZkbVZ1ZEV4cGMzUmxibVZ5Y3lBOUlERXdNQ3dnZlNBOUlIdDlLU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hhWE5mYzNSeVpXRnRYekV1WkhWd2JHVjRLR052Ym01bFkzUnBiMjVUZEhKbFlXMHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb2JXVnpjMkZuWlhOZk1TNWtaV1poZFd4MExtVnljbTl5Y3k1cGJuWmhiR2xrUkhWd2JHVjRVM1J5WldGdEtDa3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMnh2WnlBOUlHeHZaMmRsY2p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSTllYaE1hWE4wWlc1bGNuTW9iV0Y0UlhabGJuUk1hWE4wWlc1bGNuTXBPMXh1SUNBZ0lDQWdJQ0F2THlCd2NtbDJZWFJsSUhOMFlYUmxYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTjBZWFJsSUQwZ1QySnFaV04wTG1GemMybG5iaWg3ZlN3Z1FtRnpaVkJ5YjNacFpHVnlMbDlrWldaaGRXeDBVM1JoZEdVcE8xeHVJQ0FnSUNBZ0lDQXZMeUJ3ZFdKc2FXTWdjM1JoZEdWY2JpQWdJQ0FnSUNBZ2RHaHBjeTV6Wld4bFkzUmxaRUZrWkhKbGMzTWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Ob1lXbHVTV1FnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0F2THlCaWFXNWtJR1oxYm1OMGFXOXVjeUFvZEc4Z2NISmxkbVZ1ZENCamIyNXpkVzFsY25NZ1puSnZiU0J0WVd0cGJtY2dkVzVpYjNWdVpDQmpZV3hzY3lsY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYUdGdVpHeGxRV05qYjNWdWRITkRhR0Z1WjJWa0lEMGdkR2hwY3k1ZmFHRnVaR3hsUVdOamIzVnVkSE5EYUdGdVoyVmtMbUpwYm1Rb2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmhoYm1Sc1pVTnZibTVsWTNRZ1BTQjBhR2x6TGw5b1lXNWtiR1ZEYjI1dVpXTjBMbUpwYm1Rb2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmhoYm1Sc1pVTm9ZV2x1UTJoaGJtZGxaQ0E5SUhSb2FYTXVYMmhoYm1Sc1pVTm9ZV2x1UTJoaGJtZGxaQzVpYVc1a0tIUm9hWE1wTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlvWVc1a2JHVkVhWE5qYjI1dVpXTjBJRDBnZEdocGN5NWZhR0Z1Wkd4bFJHbHpZMjl1Ym1WamRDNWlhVzVrS0hSb2FYTXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOW9ZVzVrYkdWVGRISmxZVzFFYVhOamIyNXVaV04wSUQwZ2RHaHBjeTVmYUdGdVpHeGxVM1J5WldGdFJHbHpZMjl1Ym1WamRDNWlhVzVrS0hSb2FYTXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOW9ZVzVrYkdWVmJteHZZMnRUZEdGMFpVTm9ZVzVuWldRZ1BTQjBhR2x6TGw5b1lXNWtiR1ZWYm14dlkydFRkR0YwWlVOb1lXNW5aV1F1WW1sdVpDaDBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY25CalVtVnhkV1Z6ZENBOUlIUm9hWE11WDNKd1kxSmxjWFZsYzNRdVltbHVaQ2gwYUdsektUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpYRjFaWE4wSUQwZ2RHaHBjeTV5WlhGMVpYTjBMbUpwYm1Rb2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUM4dklITmxkSFZ3SUdOdmJtNWxZM1JwYjI1VGRISmxZVzBnYlhWc2RHbHdiR1Y0YVc1blhHNGdJQ0FnSUNBZ0lHTnZibk4wSUcxMWVDQTlJRzVsZHlCdlltcGxZM1JmYlhWc2RHbHdiR1Y0WHpFdVpHVm1ZWFZzZENncE8xeHVJQ0FnSUNBZ0lDQndkVzF3WHpFdVpHVm1ZWFZzZENoamIyNXVaV04wYVc5dVUzUnlaV0Z0TENCdGRYZ3NJR052Ym01bFkzUnBiMjVUZEhKbFlXMHNJSFJvYVhNdVgyaGhibVJzWlZOMGNtVmhiVVJwYzJOdmJtNWxZM1F1WW1sdVpDaDBhR2x6TENBblUzUmhjazFoYzJzbktTazdYRzRnSUNBZ0lDQWdJQzh2SUhObGRIVndJRzkzYmlCbGRtVnVkQ0JzYVhOMFpXNWxjbk5jYmlBZ0lDQWdJQ0FnTHk4Z1JVbFFMVEV4T1RNZ1kyOXVibVZqZEZ4dUlDQWdJQ0FnSUNCMGFHbHpMbTl1S0NkamIyNXVaV04wSnl3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMzUmhkR1V1YVhORGIyNXVaV04wWldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdMeThnYzJWMGRYQWdVbEJESUdOdmJtNWxZM1JwYjI1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYW5OdmJsSndZME52Ym01bFkzUnBiMjRnUFNCcWMyOXVYM0p3WTE5dGFXUmtiR1YzWVhKbFgzTjBjbVZoYlY4eExtTnlaV0YwWlZOMGNtVmhiVTFwWkdSc1pYZGhjbVVvS1R0Y2JpQWdJQ0FnSUNBZ2NIVnRjRjh4TG1SbFptRjFiSFFvZEdocGN5NWZhbk52YmxKd1kwTnZibTVsWTNScGIyNHVjM1J5WldGdExDQnRkWGd1WTNKbFlYUmxVM1J5WldGdEtHcHpiMjVTY0dOVGRISmxZVzFPWVcxbEtTd2dkR2hwY3k1ZmFuTnZibEp3WTBOdmJtNWxZM1JwYjI0dWMzUnlaV0Z0TENCMGFHbHpMbDlvWVc1a2JHVlRkSEpsWVcxRWFYTmpiMjV1WldOMExtSnBibVFvZEdocGN5d2dKMU4wWVhKTllYTnJJRkp3WTFCeWIzWnBaR1Z5SnlrcE8xeHVJQ0FnSUNBZ0lDQXZMeUJvWVc1a2JHVWdVbEJESUhKbGNYVmxjM1J6SUhacFlTQmtZWEJ3TFhOcFpHVWdjbkJqSUdWdVoybHVaVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQnljR05GYm1kcGJtVWdQU0J1WlhjZ2FuTnZibDl5Y0dOZlpXNW5hVzVsWHpFdVNuTnZibEp3WTBWdVoybHVaU2dwTzF4dUlDQWdJQ0FnSUNCeWNHTkZibWRwYm1VdWNIVnphQ2hxYzI5dVgzSndZMTlsYm1kcGJtVmZNUzVqY21WaGRHVkpaRkpsYldGd1RXbGtaR3hsZDJGeVpTZ3BLVHRjYmlBZ0lDQWdJQ0FnY25CalJXNW5hVzVsTG5CMWMyZ29kWFJwYkhOZk1TNWpjbVZoZEdWRmNuSnZjazFwWkdSc1pYZGhjbVVvZEdocGN5NWZiRzluS1NrN1hHNGdJQ0FnSUNBZ0lISndZMFZ1WjJsdVpTNXdkWE5vS0hSb2FYTXVYMnB6YjI1U2NHTkRiMjV1WldOMGFXOXVMbTFwWkdSc1pYZGhjbVVwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl5Y0dORmJtZHBibVVnUFNCeWNHTkZibWRwYm1VN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJsdWFYUnBZV3hwZW1WVGRHRjBaU2dwTzF4dUlDQWdJQ0FnSUNBdkx5Qm9ZVzVrYkdVZ1NsTlBUaTFTVUVNZ2JtOTBhV1pwWTJGMGFXOXVjMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXFjMjl1VW5CalEyOXVibVZqZEdsdmJpNWxkbVZ1ZEhNdWIyNG9KMjV2ZEdsbWFXTmhkR2x2Ymljc0lDaHdZWGxzYjJGa0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHMWxkR2h2WkN3Z2NHRnlZVzF6SUgwZ1BTQndZWGxzYjJGa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMWxkR2h2WkNBOVBUMGdKM04wWVhKdFlYTnJYMkZqWTI5MWJuUnpRMmhoYm1kbFpDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOW9ZVzVrYkdWQlkyTnZkVzUwYzBOb1lXNW5aV1FvY0dGeVlXMXpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0cxbGRHaHZaQ0E5UFQwZ0ozTjBZWEp0WVhOclgzVnViRzlqYTFOMFlYUmxRMmhoYm1kbFpDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOW9ZVzVrYkdWVmJteHZZMnRUZEdGMFpVTm9ZVzVuWldRb2NHRnlZVzF6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tHMWxkR2h2WkNBOVBUMGdKM04wWVhKdFlYTnJYMk5vWVdsdVEyaGhibWRsWkNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5b1lXNWtiR1ZEYUdGcGJrTm9ZVzVuWldRb2NHRnlZVzF6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tIVjBhV3h6WHpFdVJVMUpWRlJGUkY5T1QxUkpSa2xEUVZSSlQwNVRMbWx1WTJ4MVpHVnpLRzFsZEdodlpDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnRhWFFvSjIxbGMzTmhaMlVuTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklHMWxkR2h2WkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVRvZ2NHRnlZVzF6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9iV1YwYUc5a0lEMDlQU0FuVTFSQlVrMUJVMHRmVTFSU1JVRk5YMFpCU1V4VlVrVW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWJtVmpkR2x2YmxOMGNtVmhiUzVrWlhOMGNtOTVLRzVsZHlCRmNuSnZjaWh0WlhOellXZGxjMTh4TG1SbFptRjFiSFF1WlhKeWIzSnpMbkJsY20xaGJtVnVkR3g1UkdselkyOXVibVZqZEdWa0tDa3BLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDFjYmlBZ0lDQXZMeUJRZFdKc2FXTWdUV1YwYUc5a2MxeHVJQ0FnSUM4dlBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaWFIxY201eklIZG9aWFJvWlhJZ2RHaGxJSEJ5YjNacFpHVnlJR05oYmlCd2NtOWpaWE56SUZKUVF5QnlaWEYxWlhOMGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCcGMwTnZibTVsWTNSbFpDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTjBZWFJsTG1selEyOXVibVZqZEdWa08xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVGRXSnRhWFJ6SUdGdUlGSlFReUJ5WlhGMVpYTjBJR1p2Y2lCMGFHVWdaMmwyWlc0Z2JXVjBhRzlrTENCM2FYUm9JSFJvWlNCbmFYWmxiaUJ3WVhKaGJYTXVYRzRnSUNBZ0lDb2dVbVZ6YjJ4MlpYTWdkMmwwYUNCMGFHVWdjbVZ6ZFd4MElHOW1JSFJvWlNCdFpYUm9iMlFnWTJGc2JDd2diM0lnY21WcVpXTjBjeUJ2YmlCbGNuSnZjaTVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmhjbWR6SUMwZ1ZHaGxJRkpRUXlCeVpYRjFaWE4wSUdGeVozVnRaVzUwY3k1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnWVhKbmN5NXRaWFJvYjJRZ0xTQlVhR1VnVWxCRElHMWxkR2h2WkNCdVlXMWxMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmhjbWR6TG5CaGNtRnRjeUF0SUZSb1pTQndZWEpoYldWMFpYSnpJR1p2Y2lCMGFHVWdVbEJESUcxbGRHaHZaQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJCSUZCeWIyMXBjMlVnZEdoaGRDQnlaWE52YkhabGN5QjNhWFJvSUhSb1pTQnlaWE4xYkhRZ2IyWWdkR2hsSUZKUVF5QnRaWFJvYjJRc1hHNGdJQ0FnSUNvZ2IzSWdjbVZxWldOMGN5QnBaaUJoYmlCbGNuSnZjaUJwY3lCbGJtTnZkVzUwWlhKbFpDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCaGMzbHVZeUJ5WlhGMVpYTjBLR0Z5WjNNcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGaGNtZHpJSHg4SUhSNWNHVnZaaUJoY21keklDRTlQU0FuYjJKcVpXTjBKeUI4ZkNCQmNuSmhlUzVwYzBGeWNtRjVLR0Z5WjNNcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJsZEdoZmNuQmpYMlZ5Y205eWMxOHhMbVYwYUVWeWNtOXljeTV5Y0dNdWFXNTJZV3hwWkZKbGNYVmxjM1FvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlU2SUcxbGMzTmhaMlZ6WHpFdVpHVm1ZWFZzZEM1bGNuSnZjbk11YVc1MllXeHBaRkpsY1hWbGMzUkJjbWR6S0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVG9nWVhKbmN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR052Ym5OMElIc2diV1YwYUc5a0xDQndZWEpoYlhNZ2ZTQTlJR0Z5WjNNN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdiV1YwYUc5a0lDRTlQU0FuYzNSeWFXNW5KeUI4ZkNCdFpYUm9iMlF1YkdWdVozUm9JRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJsZEdoZmNuQmpYMlZ5Y205eWMxOHhMbVYwYUVWeWNtOXljeTV5Y0dNdWFXNTJZV3hwWkZKbGNYVmxjM1FvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlU2SUcxbGMzTmhaMlZ6WHpFdVpHVm1ZWFZzZEM1bGNuSnZjbk11YVc1MllXeHBaRkpsY1hWbGMzUk5aWFJvYjJRb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoT2lCaGNtZHpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tIQmhjbUZ0Y3lBaFBUMGdkVzVrWldacGJtVmtJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWhRWEp5WVhrdWFYTkJjbkpoZVNod1lYSmhiWE1wSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FvZEhsd1pXOW1JSEJoY21GdGN5QWhQVDBnSjI5aWFtVmpkQ2NnZkh3Z2NHRnlZVzF6SUQwOVBTQnVkV3hzS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2daWFJvWDNKd1kxOWxjbkp2Y25OZk1TNWxkR2hGY25KdmNuTXVjbkJqTG1sdWRtRnNhV1JTWlhGMVpYTjBLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxPaUJ0WlhOellXZGxjMTh4TG1SbFptRjFiSFF1WlhKeWIzSnpMbWx1ZG1Gc2FXUlNaWEYxWlhOMFVHRnlZVzF6S0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVG9nWVhKbmN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU3dnY21WcVpXTjBLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXljR05TWlhGMVpYTjBLSHNnYldWMGFHOWtMQ0J3WVhKaGJYTWdmU3dnZFhScGJITmZNUzVuWlhSU2NHTlFjbTl0YVhObFEyRnNiR0poWTJzb2NtVnpiMngyWlN3Z2NtVnFaV04wS1NrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNiaUFnSUNBdkx6MDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlYRzRnSUNBZ0x5OGdVSEpwZG1GMFpTQk5aWFJvYjJSelhHNGdJQ0FnTHk4OVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTnZibk4wY25WamRHOXlJR2hsYkhCbGNpNWNiaUFnSUNBZ0tpQlFiM0IxYkdGMFpYTWdhVzVwZEdsaGJDQnpkR0YwWlNCaWVTQmpZV3hzYVc1bklDZHpkR0Z5YldGemExOW5aWFJRY205MmFXUmxjbE4wWVhSbEp5QmhibVFnWlcxcGRITmNiaUFnSUNBZ0tpQnVaV05sYzNOaGNua2daWFpsYm5SekxseHVJQ0FnSUNBcUwxeHVJQ0FnSUdGemVXNWpJRjlwYm1sMGFXRnNhWHBsVTNSaGRHVW9LU0I3WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0I3SUdGalkyOTFiblJ6TENCamFHRnBia2xrTENCcGMxVnViRzlqYTJWa0xDQnVaWFIzYjNKclZtVnljMmx2Yml3Z2ZTQTlJQ2hoZDJGcGRDQjBhR2x6TG5KbGNYVmxjM1FvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGRHaHZaRG9nSjNOMFlYSnRZWE5yWDJkbGRGQnliM1pwWkdWeVUzUmhkR1VuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYVc1a2FXTmhkR1VnZEdoaGRDQjNaU2QyWlNCamIyNXVaV04wWldRc0lHWnZjaUJGU1ZBdE1URTVNeUJqYjIxd2JHbGhibU5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WdGFYUW9KMk52Ym01bFkzUW5MQ0I3SUdOb1lXbHVTV1FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOW9ZVzVrYkdWRGFHRnBia05vWVc1blpXUW9leUJqYUdGcGJrbGtMQ0J1WlhSM2IzSnJWbVZ5YzJsdmJpQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJoaGJtUnNaVlZ1Ykc5amExTjBZWFJsUTJoaGJtZGxaQ2g3SUdGalkyOTFiblJ6TENCcGMxVnViRzlqYTJWa0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYUdGdVpHeGxRV05qYjNWdWRITkRhR0Z1WjJWa0tHRmpZMjkxYm5SektUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JqWVhSamFDQW9aWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1bGNuSnZjaWduVTNSaGNrMWhjMnM2SUVaaGFXeGxaQ0IwYnlCblpYUWdhVzVwZEdsaGJDQnpkR0YwWlM0Z1VHeGxZWE5sSUhKbGNHOXlkQ0IwYUdseklHSjFaeTRuTENCbGNuSnZjaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1ptbHVZV3hzZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpkR0YwWlM1cGJtbDBhV0ZzYVhwbFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnRhWFFvSjE5cGJtbDBhV0ZzYVhwbFpDY3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1ZEdWeWJtRnNJRkpRUXlCdFpYUm9iMlF1SUVadmNuZGhjbVJ6SUhKbGNYVmxjM1J6SUhSdklHSmhZMnRuY205MWJtUWdkbWxoSUhSb1pTQlNVRU1nWlc1bmFXNWxMbHh1SUNBZ0lDQXFJRUZzYzI4Z2NtVnRZWEFnYVdSeklHbHVZbTkxYm1RZ1lXNWtJRzkxZEdKdmRXNWtMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElIQmhlV3h2WVdRZ0xTQlVhR1VnVWxCRElISmxjWFZsYzNRZ2IySnFaV04wTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JqWVd4c1ltRmpheUF0SUZSb1pTQmpiMjV6ZFcxbGNpZHpJR05oYkd4aVlXTnJMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lGOXljR05TWlhGMVpYTjBLSEJoZVd4dllXUXNJR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQmpZaUE5SUdOaGJHeGlZV05yTzF4dUlDQWdJQ0FnSUNCcFppQW9JVUZ5Y21GNUxtbHpRWEp5WVhrb2NHRjViRzloWkNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjR0Y1Ykc5aFpDNXFjMjl1Y25CaktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0Y1Ykc5aFpDNXFjMjl1Y25CaklEMGdKekl1TUNjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0dGNWJHOWhaQzV0WlhSb2IyUWdQVDA5SUNkemRHTmZZV05qYjNWdWRITW5JSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGNWJHOWhaQzV0WlhSb2IyUWdQVDA5SUNkemRHTmZjbVZ4ZFdWemRFRmpZMjkxYm5Sekp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdoaGJtUnNaU0JoWTJOdmRXNTBjeUJqYUdGdVoybHVaMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05pSUQwZ0tHVnljaXdnY21WektTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJoaGJtUnNaVUZqWTI5MWJuUnpRMmhoYm1kbFpDaHlaWE11Y21WemRXeDBJSHg4SUZ0ZExDQndZWGxzYjJGa0xtMWxkR2h2WkNBOVBUMGdKM04wWTE5aFkyTnZkVzUwY3ljcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVd4c1ltRmpheWhsY25Jc0lISmxjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5Y0dORmJtZHBibVV1YUdGdVpHeGxLSEJoZVd4dllXUXNJR05pS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY25CalJXNW5hVzVsTG1oaGJtUnNaU2h3WVhsc2IyRmtMQ0JqWWlrN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZkb1pXNGdkR2hsSUhCeWIzWnBaR1Z5SUdKbFkyOXRaWE1nWTI5dWJtVmpkR1ZrTENCMWNHUmhkR1Z6SUdsdWRHVnlibUZzSUhOMFlYUmxJR0Z1WkNCbGJXbDBjMXh1SUNBZ0lDQXFJSEpsY1hWcGNtVmtJR1YyWlc1MGN5NGdTV1JsYlhCdmRHVnVkQzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmphR0ZwYmtsa0lDMGdWR2hsSUVsRUlHOW1JSFJvWlNCdVpYZHNlU0JqYjI1dVpXTjBaV1FnWTJoaGFXNHVYRzRnSUNBZ0lDb2dRR1Z0YVhSeklFMWxkR0ZOWVhOclNXNXdZV2RsVUhKdmRtbGtaWElqWTI5dWJtVmpkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lGOW9ZVzVrYkdWRGIyNXVaV04wS0dOb1lXbHVTV1FwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxsOXpkR0YwWlM1cGMwTnZibTVsWTNSbFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYzNSaGRHVXVhWE5EYjI1dVpXTjBaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsYldsMEtDZGpiMjV1WldOMEp5d2dleUJqYUdGcGJrbGtJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbVJsWW5WbktHMWxjM05oWjJWelh6RXVaR1ZtWVhWc2RDNXBibVp2TG1OdmJtNWxZM1JsWkNoamFHRnBia2xrS1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1YyaGxiaUIwYUdVZ2NISnZkbWxrWlhJZ1ltVmpiMjFsY3lCa2FYTmpiMjV1WldOMFpXUXNJSFZ3WkdGMFpYTWdhVzUwWlhKdVlXd2djM1JoZEdVZ1lXNWtJR1Z0YVhSelhHNGdJQ0FnSUNvZ2NtVnhkV2x5WldRZ1pYWmxiblJ6TGlCSlpHVnRjRzkwWlc1MElIZHBkR2dnY21WemNHVmpkQ0IwYnlCMGFHVWdhWE5TWldOdmRtVnlZV0pzWlNCd1lYSmhiV1YwWlhJdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCRmNuSnZjaUJqYjJSbGN5QndaWElnZEdobElFTnNiM05sUlhabGJuUWdjM1JoZEhWeklHTnZaR1Z6SUdGeklISmxjWFZwY21Wa0lHSjVJRVZKVUMweE1Ua3pPbHh1SUNBZ0lDQXFJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbTF2ZW1sc2JHRXViM0puTDJWdUxWVlRMMlJ2WTNNdlYyVmlMMEZRU1M5RGJHOXpaVVYyWlc1MEkxTjBZWFIxYzE5amIyUmxjMXh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElHbHpVbVZqYjNabGNtRmliR1VnTFNCWGFHVjBhR1Z5SUhSb1pTQmthWE5qYjI1dVpXTjBhVzl1SUdseklISmxZMjkyWlhKaFlteGxMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmxjbkp2Y2sxbGMzTmhaMlVnTFNCQklHTjFjM1J2YlNCbGNuSnZjaUJ0WlhOellXZGxMbHh1SUNBZ0lDQXFJRUJsYldsMGN5Qk5aWFJoVFdGemEwbHVjR0ZuWlZCeWIzWnBaR1Z5STJScGMyTnZibTVsWTNSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmYUdGdVpHeGxSR2x6WTI5dWJtVmpkQ2hwYzFKbFkyOTJaWEpoWW14bExDQmxjbkp2Y2sxbGMzTmhaMlVwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzTjBZWFJsTG1selEyOXVibVZqZEdWa0lIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNBb0lYUm9hWE11WDNOMFlYUmxMbWx6VUdWeWJXRnVaVzUwYkhsRWFYTmpiMjV1WldOMFpXUWdKaVlnSVdselVtVmpiM1psY21GaWJHVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emRHRjBaUzVwYzBOdmJtNWxZM1JsWkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdWeWNtOXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x6VW1WamIzWmxjbUZpYkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y2lBOUlHNWxkeUJsZEdoZmNuQmpYMlZ5Y205eWMxOHhMa1YwYUdWeVpYVnRVbkJqUlhKeWIzSW9NVEF4TXl3Z0x5OGdWSEo1SUdGbllXbHVJR3hoZEdWeVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYSnliM0pOWlhOellXZGxJSHg4SUcxbGMzTmhaMlZ6WHpFdVpHVm1ZWFZzZEM1bGNuSnZjbk11WkdselkyOXVibVZqZEdWa0tDa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTVrWldKMVp5aGxjbkp2Y2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGNuSnZjaUE5SUc1bGR5QmxkR2hmY25CalgyVnljbTl5YzE4eExrVjBhR1Z5WlhWdFVuQmpSWEp5YjNJb01UQXhNU3dnTHk4Z1NXNTBaWEp1WVd3Z1pYSnliM0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsY25KdmNrMWxjM05oWjJVZ2ZId2diV1Z6YzJGblpYTmZNUzVrWldaaGRXeDBMbVZ5Y205eWN5NXdaWEp0WVc1bGJuUnNlVVJwYzJOdmJtNWxZM1JsWkNncEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VaWEp5YjNJb1pYSnliM0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMmhoYVc1SlpDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYzNSaGRHVXVZV05qYjNWdWRITWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWc1pXTjBaV1JCWkdSeVpYTnpJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emRHRjBaUzVwYzFWdWJHOWphMlZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjM1JoZEdVdWFYTlFaWEp0WVc1bGJuUnNlVVJwYzJOdmJtNWxZM1JsWkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ0YVhRb0oyUnBjMk52Ym01bFkzUW5MQ0JsY25KdmNpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRMkZzYkdWa0lIZG9aVzRnWTI5dWJtVmpkR2x2YmlCcGN5QnNiM04wSUhSdklHTnlhWFJwWTJGc0lITjBjbVZoYlhNdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQVpXMXBkSE1nVFdWMFlXMWhjMnRKYm5CaFoyVlFjbTkyYVdSbGNpTmthWE5qYjI1dVpXTjBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gyaGhibVJzWlZOMGNtVmhiVVJwYzJOdmJtNWxZM1FvYzNSeVpXRnRUbUZ0WlN3Z1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ2RYUnBiSE5mTVM1c2IyZFRkSEpsWVcxRWFYTmpiMjV1WldOMFYyRnlibWx1WnloMGFHbHpMbDlzYjJjc0lITjBjbVZoYlU1aGJXVXNJR1Z5Y205eUxDQjBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYUdGdVpHeGxSR2x6WTI5dWJtVmpkQ2htWVd4elpTd2daWEp5YjNJZ1B5Qmxjbkp2Y2k1dFpYTnpZV2RsSURvZ2RXNWtaV1pwYm1Wa0tUdGNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZYQnZiaUJ5WldObGFYQjBJRzltSUdFZ2JtVjNJR05vWVdsdVNXUWdZVzVrSUc1bGRIZHZjbXRXWlhKemFXOXVMQ0JsYldsMGN5QmpiM0p5WlhOd2IyNWthVzVuWEc0Z0lDQWdJQ29nWlhabGJuUnpJR0Z1WkNCelpYUnpJSEpsYkdWMllXNTBJSEIxWW14cFl5QnpkR0YwWlM1Y2JpQWdJQ0FnS2lCRWIyVnpJRzV2ZEdocGJtY2dhV1lnYm1WcGRHaGxjaUIwYUdVZ1kyaGhhVzVKWkNCdWIzSWdkR2hsSUc1bGRIZHZjbXRXWlhKemFXOXVJR0Z5WlNCa2FXWm1aWEpsYm5SY2JpQWdJQ0FnS2lCbWNtOXRJR1Y0YVhOMGFXNW5JSFpoYkhWbGN5NWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQmxiV2wwY3lCTlpYUmhiV0Z6YTBsdWNHRm5aVkJ5YjNacFpHVnlJMk5vWVdsdVEyaGhibWRsWkZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J1WlhSM2IzSnJTVzVtYnlBdElFRnVJRzlpYW1WamRDQjNhWFJvSUc1bGRIZHZjbXNnYVc1bWJ5NWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2JtVjBkMjl5YTBsdVptOHVZMmhoYVc1SlpDQXRJRlJvWlNCc1lYUmxjM1FnWTJoaGFXNGdTVVF1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzVsZEhkdmNtdEpibVp2TG01bGRIZHZjbXRXWlhKemFXOXVJQzBnVkdobElHeGhkR1Z6ZENCdVpYUjNiM0pySUVsRUxseHVJQ0FnSUNBcUwxeHVJQ0FnSUY5b1lXNWtiR1ZEYUdGcGJrTm9ZVzVuWldRb2V5QmphR0ZwYmtsa0xDQnVaWFIzYjNKclZtVnljMmx2Yml3Z2ZTQTlJSHQ5S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doWTJoaGFXNUpaQ0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdkSGx3Wlc5bUlHTm9ZV2x1U1dRZ0lUMDlJQ2R6ZEhKcGJtY25JSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWhZMmhoYVc1SlpDNXpkR0Z5ZEhOWGFYUm9LQ2N3ZUNjcElIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNBaGJtVjBkMjl5YTFabGNuTnBiMjRnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dWdlppQnVaWFIzYjNKclZtVnljMmx2YmlBaFBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NWxjbkp2Y2lnblUzUmhjazFoYzJzNklGSmxZMlZwZG1Wa0lHbHVkbUZzYVdRZ2JtVjBkMjl5YXlCd1lYSmhiV1YwWlhKekxpQlFiR1ZoYzJVZ2NtVndiM0owSUhSb2FYTWdZblZuTGljc0lIc2dZMmhoYVc1SlpDd2dibVYwZDI5eWExWmxjbk5wYjI0Z2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLRzVsZEhkdmNtdFdaWEp6YVc5dUlEMDlQU0FuYkc5aFpHbHVaeWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyaGhibVJzWlVScGMyTnZibTVsWTNRb2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5b1lXNWtiR1ZEYjI1dVpXTjBLR05vWVdsdVNXUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR05vWVdsdVNXUWdJVDA5SUhSb2FYTXVZMmhoYVc1SlpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyaGhhVzVKWkNBOUlHTm9ZV2x1U1dRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzTjBZWFJsTG1sdWFYUnBZV3hwZW1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaVzFwZENnblkyaGhhVzVEYUdGdVoyVmtKeXdnZEdocGN5NWphR0ZwYmtsa0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1EyRnNiR1ZrSUhkb1pXNGdZV05qYjNWdWRITWdiV0Y1SUdoaGRtVWdZMmhoYm1kbFpDNGdSR2xtWm5NZ2RHaGxJRzVsZHlCaFkyTnZkVzUwY3lCMllXeDFaU0IzYVhSb1hHNGdJQ0FnSUNvZ2RHaGxJR04xY25KbGJuUWdiMjVsTENCMWNHUmhkR1Z6SUdGc2JDQnpkR0YwWlNCaGN5QnVaV05sYzNOaGNua3NJR0Z1WkNCbGJXbDBjeUIwYUdWY2JpQWdJQ0FnS2lCaFkyTnZkVzUwYzBOb1lXNW5aV1FnWlhabGJuUXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1lXTmpiM1Z1ZEhNZ0xTQlVhR1VnYm1WM0lHRmpZMjkxYm5SeklIWmhiSFZsTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JwYzBWMGFFRmpZMjkxYm5SeklDMGdWMmhsZEdobGNpQjBhR1VnWVdOamIzVnVkSE1nZG1Gc2RXVWdkMkZ6SUhKbGRIVnlibVZrSUdKNVhHNGdJQ0FnSUNvZ1lTQmpZV3hzSUhSdklITjBZMTloWTJOdmRXNTBjeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQmZhR0Z1Wkd4bFFXTmpiM1Z1ZEhORGFHRnVaMlZrS0dGalkyOTFiblJ6TENCcGMwVjBhRUZqWTI5MWJuUnpJRDBnWm1Gc2MyVXBJSHRjYmlBZ0lDQWdJQ0FnYkdWMElGOWhZMk52ZFc1MGN5QTlJR0ZqWTI5MWJuUnpPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lVRnljbUY1TG1selFYSnlZWGtvWVdOamIzVnVkSE1wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1WlhKeWIzSW9KMU4wWVhKTllYTnJPaUJTWldObGFYWmxaQ0JwYm5aaGJHbGtJR0ZqWTI5MWJuUnpJSEJoY21GdFpYUmxjaTRnVUd4bFlYTmxJSEpsY0c5eWRDQjBhR2x6SUdKMVp5NG5MQ0JoWTJOdmRXNTBjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZZV05qYjNWdWRITWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQm1iM0lnS0dOdmJuTjBJR0ZqWTI5MWJuUWdiMllnWVdOamIzVnVkSE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWVdOamIzVnVkQ0FoUFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VaWEp5YjNJb0oxTjBZWEpOWVhOck9pQlNaV05sYVhabFpDQnViMjR0YzNSeWFXNW5JR0ZqWTI5MWJuUXVJRkJzWldGelpTQnlaWEJ2Y25RZ2RHaHBjeUJpZFdjdUp5d2dZV05qYjNWdWRITXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjloWTJOdmRXNTBjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklHVnRhWFFnWVdOamIzVnVkSE5EYUdGdVoyVmtJR2xtSUdGdWVYUm9hVzVuSUdGaWIzVjBJSFJvWlNCaFkyTnZkVzUwY3lCaGNuSmhlU0JvWVhNZ1kyaGhibWRsWkZ4dUlDQWdJQ0FnSUNCcFppQW9JV1poYzNSZlpHVmxjRjlsY1hWaGJGOHhMbVJsWm1GMWJIUW9kR2hwY3k1ZmMzUmhkR1V1WVdOamIzVnVkSE1zSUY5aFkyTnZkVzUwY3lrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklIZGxJSE5vYjNWc1pDQmhiSGRoZVhNZ2FHRjJaU0IwYUdVZ1kyOXljbVZqZENCaFkyTnZkVzUwY3lCbGRtVnVJR0psWm05eVpTQnpkR05mWVdOamIzVnVkSE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSEpsZEhWeWJuTmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBjMFYwYUVGalkyOTFiblJ6SUNZbUlIUm9hWE11WDNOMFlYUmxMbUZqWTI5MWJuUnpJQ0U5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG1WeWNtOXlLR0JUZEdGeVRXRnphem9nSjNOMFkxOWhZMk52ZFc1MGN5Y2dkVzVsZUhCbFkzUmxaR3g1SUhWd1pHRjBaV1FnWVdOamIzVnVkSE11SUZCc1pXRnpaU0J5WlhCdmNuUWdkR2hwY3lCaWRXY3VZQ3dnWDJGalkyOTFiblJ6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNOMFlYUmxMbUZqWTI5MWJuUnpJRDBnWDJGalkyOTFiblJ6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYUdGdVpHeGxJSE5sYkdWamRHVmtRV1JrY21WemMxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YzJWc1pXTjBaV1JCWkdSeVpYTnpJQ0U5UFNCZllXTmpiM1Z1ZEhOYk1GMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxiR1ZqZEdWa1FXUmtjbVZ6Y3lBOUlGOWhZMk52ZFc1MGMxc3dYU0I4ZkNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ptbHVZV3hzZVN3Z1lXWjBaWElnWVd4c0lITjBZWFJsSUdoaGN5QmlaV1Z1SUhWd1pHRjBaV1FzSUdWdGFYUWdkR2hsSUdWMlpXNTBYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZmMzUmhkR1V1YVc1cGRHbGhiR2w2WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WdGFYUW9KMkZqWTI5MWJuUnpRMmhoYm1kbFpDY3NJRjloWTJOdmRXNTBjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWWEJ2YmlCeVpXTmxhWEIwSUc5bUlHRWdibVYzSUdselZXNXNiMk5yWldRZ2MzUmhkR1VzSUhObGRITWdjbVZzWlhaaGJuUWdjSFZpYkdsaklITjBZWFJsTGx4dUlDQWdJQ0FxSUVOaGJHeHpJSFJvWlNCaFkyTnZkVzUwY3lCamFHRnVaMlZrSUdoaGJtUnNaWElnZDJsMGFDQjBhR1VnY21WalpXbDJaV1FnWVdOamIzVnVkSE1zSUc5eUlHRnVJR1Z0Y0hSNVhHNGdJQ0FnSUNvZ1lYSnlZWGt1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJFYjJWeklHNXZkR2hwYm1jZ2FXWWdkR2hsSUhKbFkyVnBkbVZrSUhaaGJIVmxJR2x6SUdWeGRXRnNJSFJ2SUhSb1pTQmxlR2x6ZEdsdVp5QjJZV3gxWlM1Y2JpQWdJQ0FnS2lCVWFHVnlaU0JoY21VZ2JtOGdiRzlqYXk5MWJteHZZMnNnWlhabGJuUnpMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElHOXdkSE1nTFNCUGNIUnBiMjV6SUdKaFp5NWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2IzQjBjeTVoWTJOdmRXNTBjeUF0SUZSb1pTQmxlSEJ2YzJWa0lHRmpZMjkxYm5SekxDQnBaaUJoYm5rdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUc5d2RITXVhWE5WYm14dlkydGxaQ0F0SUZSb1pTQnNZWFJsYzNRZ2FYTlZibXh2WTJ0bFpDQjJZV3gxWlM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmYUdGdVpHeGxWVzVzYjJOclUzUmhkR1ZEYUdGdVoyVmtLSHNnWVdOamIzVnVkSE1zSUdselZXNXNiMk5yWldRc0lIMGdQU0I3ZlNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR2x6Vlc1c2IyTnJaV1FnSVQwOUlDZGliMjlzWldGdUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkc5bkxtVnljbTl5S0NkVGRHRnlUV0Z6YXpvZ1VtVmpaV2wyWldRZ2FXNTJZV3hwWkNCcGMxVnViRzlqYTJWa0lIQmhjbUZ0WlhSbGNpNGdVR3hsWVhObElISmxjRzl5ZENCMGFHbHpJR0oxWnk0bktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9hWE5WYm14dlkydGxaQ0FoUFQwZ2RHaHBjeTVmYzNSaGRHVXVhWE5WYm14dlkydGxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMzUmhkR1V1YVhOVmJteHZZMnRsWkNBOUlHbHpWVzVzYjJOclpXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlvWVc1a2JHVkJZMk52ZFc1MGMwTm9ZVzVuWldRb1lXTmpiM1Z1ZEhNZ2ZId2dXMTBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dWZWeHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdRbUZ6WlZCeWIzWnBaR1Z5TzF4dVFtRnpaVkJ5YjNacFpHVnlMbDlrWldaaGRXeDBVM1JoZEdVZ1BTQjdYRzRnSUNBZ1lXTmpiM1Z1ZEhNNklHNTFiR3dzWEc0Z0lDQWdhWE5EYjI1dVpXTjBaV1E2SUdaaGJITmxMRnh1SUNBZ0lHbHpWVzVzYjJOclpXUTZJR1poYkhObExGeHVJQ0FnSUdsdWFYUnBZV3hwZW1Wa09pQm1ZV3h6WlN4Y2JpQWdJQ0JwYzFCbGNtMWhibVZ1ZEd4NVJHbHpZMjl1Ym1WamRHVmtPaUJtWVd4elpTeGNibjA3WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMUNZWE5sVUhKdmRtbGtaWEl1YW5NdWJXRndJaXdpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzUyWVhJZ1gxOXBiWEJ2Y25SRVpXWmhkV3gwSUQwZ0tIUm9hWE1nSmlZZ2RHaHBjeTVmWDJsdGNHOXlkRVJsWm1GMWJIUXBJSHg4SUdaMWJtTjBhVzl1SUNodGIyUXBJSHRjYmlBZ0lDQnlaWFIxY200Z0tHMXZaQ0FtSmlCdGIyUXVYMTlsYzAxdlpIVnNaU2tnUHlCdGIyUWdPaUI3SUZ3aVpHVm1ZWFZzZEZ3aU9pQnRiMlFnZlR0Y2JuMDdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUhzZ2RtRnNkV1U2SUhSeWRXVWdmU2s3WEc1amIyNXpkQ0JsZEdoZmNuQmpYMlZ5Y205eWMxOHhJRDBnY21WeGRXbHlaU2hjSW1WMGFDMXljR010WlhKeWIzSnpYQ0lwTzF4dVkyOXVjM1FnYzJsMFpVMWxkR0ZrWVhSaFh6RWdQU0JmWDJsdGNHOXlkRVJsWm1GMWJIUW9jbVZ4ZFdseVpTaGNJaTR2YzJsMFpVMWxkR0ZrWVhSaFhDSXBLVHRjYm1OdmJuTjBJRzFsYzNOaFoyVnpYekVnUFNCZlgybHRjRzl5ZEVSbFptRjFiSFFvY21WeGRXbHlaU2hjSWk0dmJXVnpjMkZuWlhOY0lpa3BPMXh1WTI5dWMzUWdkWFJwYkhOZk1TQTlJSEpsY1hWcGNtVW9YQ0l1TDNWMGFXeHpYQ0lwTzF4dVkyOXVjM1FnUW1GelpWQnliM1pwWkdWeVh6RWdQU0JmWDJsdGNHOXlkRVJsWm1GMWJIUW9jbVZ4ZFdseVpTaGNJaTR2UW1GelpWQnliM1pwWkdWeVhDSXBLVHRjYm1Oc1lYTnpJRTFsZEdGTllYTnJTVzV3WVdkbFVISnZkbWxrWlhJZ1pYaDBaVzVrY3lCQ1lYTmxVSEp2ZG1sa1pYSmZNUzVrWldaaGRXeDBJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJBY0dGeVlXMGdZMjl1Ym1WamRHbHZibE4wY21WaGJTQXRJRUVnVG05a1pTNXFjeUJrZFhCc1pYZ2djM1J5WldGdFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUc5d2RHbHZibk1nTFNCQmJpQnZjSFJwYjI1eklHSmhaMXh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnZjSFJwYjI1ekxtcHpiMjVTY0dOVGRISmxZVzFPWVcxbElDMGdWR2hsSUc1aGJXVWdiMllnZEdobElHbHVkR1Z5Ym1Gc0lFcFRUMDR0VWxCRElITjBjbVZoYlM1Y2JpQWdJQ0FnS2lCRVpXWmhkV3gwT2lCdFpYUmhiV0Z6YXkxd2NtOTJhV1JsY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0J2Y0hScGIyNXpMbXh2WjJkbGNpQXRJRlJvWlNCc2IyZG5hVzVuSUVGUVNTQjBieUIxYzJVdUlFUmxabUYxYkhRNklHTnZibk52YkdWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYjNCMGFXOXVjeTV0WVhoRmRtVnVkRXhwYzNSbGJtVnljeUF0SUZSb1pTQnRZWGhwYlhWdElHNTFiV0psY2lCdlppQmxkbVZ1ZEZ4dUlDQWdJQ0FxSUd4cGMzUmxibVZ5Y3k0Z1JHVm1ZWFZzZERvZ01UQXdYRzRnSUNBZ0lDb2dRSEJoY21GdElHOXdkR2x2Ym5NdWMyaHZkV3hrVTJWdVpFMWxkR0ZrWVhSaElDMGdWMmhsZEdobGNpQjBhR1VnY0hKdmRtbGtaWElnYzJodmRXeGtYRzRnSUNBZ0lDb2djMlZ1WkNCd1lXZGxJRzFsZEdGa1lYUmhMaUJFWldaaGRXeDBPaUIwY25WbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb1kyOXVibVZqZEdsdmJsTjBjbVZoYlN3Z2V5QnFjMjl1VW5CalUzUnlaV0Z0VG1GdFpTQTlJQ2R6ZEdGeWJXRnpheTF3Y205MmFXUmxjaWNzSUd4dloyZGxjaUE5SUdOdmJuTnZiR1VzSUcxaGVFVjJaVzUwVEdsemRHVnVaWEp6SUQwZ01UQXdMQ0J6YUc5MWJHUlRaVzVrVFdWMFlXUmhkR0VnUFNCMGNuVmxMQ0I5SUQwZ2UzMHBJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9ZMjl1Ym1WamRHbHZibE4wY21WaGJTd2dleUJxYzI5dVVuQmpVM1J5WldGdFRtRnRaU3dnYkc5bloyVnlMQ0J0WVhoRmRtVnVkRXhwYzNSbGJtVnljeUI5S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzJWdWRGZGhjbTVwYm1keklEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdiV1YwYUc5a2MxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlc1aFlteGxPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdWNGNHVnlhVzFsYm5SaGJFMWxkR2h2WkhNNklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZ1WkRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJsZG1WdWRITmNiaUFnSUNBZ0lDQWdJQ0FnSUdWMlpXNTBjem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc2IzTmxPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhSM2IzSnJRMmhoYm1kbFpEb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOTBhV1pwWTJGMGFXOXVPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtVjBkMjl5YTFabGNuTnBiMjRnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtbHpVM1JoY2sxaGMyc2dQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5elpXNWtVM2x1WXlBOUlIUm9hWE11WDNObGJtUlRlVzVqTG1KcGJtUW9kR2hwY3lrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wlc1aFlteGxJRDBnZEdocGN5NWxibUZpYkdVdVltbHVaQ2gwYUdsektUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpXNWtJRDBnZEdocGN5NXpaVzVrTG1KcGJtUW9kR2hwY3lrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWdVpFRnplVzVqSUQwZ2RHaHBjeTV6Wlc1a1FYTjVibU11WW1sdVpDaDBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZDJGeWJrOW1SR1Z3Y21WallYUnBiMjRnUFNCMGFHbHpMbDkzWVhKdVQyWkVaWEJ5WldOaGRHbHZiaTVpYVc1a0tIUm9hWE1wTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6ZEdGeWJXRnpheUE5SUhSb2FYTXVYMmRsZEVWNGNHVnlhVzFsYm5SaGJFRndhU2dwTzF4dUlDQWdJQ0FnSUNBdkx5Qm9ZVzVrYkdVZ1NsTlBUaTFTVUVNZ2JtOTBhV1pwWTJGMGFXOXVjMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXFjMjl1VW5CalEyOXVibVZqZEdsdmJpNWxkbVZ1ZEhNdWIyNG9KMjV2ZEdsbWFXTmhkR2x2Ymljc0lDaHdZWGxzYjJGa0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHMWxkR2h2WkNCOUlEMGdjR0Y1Ykc5aFpEdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDFkR2xzYzE4eExrVk5TVlJVUlVSZlRrOVVTVVpKUTBGVVNVOU9VeTVwYm1Oc2RXUmxjeWh0WlhSb2IyUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1pHVndjbVZqWVhSbFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1Z0YVhSMFpXUWdhR1Z5WlNCaVpXTmhkWE5sSUhSb1lYUWdkMkZ6SUhSb1pTQnZjbWxuYVc1aGJDQnZjbVJsY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaVzFwZENnblpHRjBZU2NzSUhCaGVXeHZZV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHUmxjSEpsWTJGMFpXUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WdGFYUW9KMjV2ZEdsbWFXTmhkR2x2Ymljc0lIQmhlV3h2WVdRdWNHRnlZVzF6TG5KbGMzVnNkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBdkx5QnpaVzVrSUhkbFluTnBkR1VnYldWMFlXUmhkR0ZjYmlBZ0lDQWdJQ0FnYVdZZ0tITm9iM1ZzWkZObGJtUk5aWFJoWkdGMFlTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1J2WTNWdFpXNTBMbkpsWVdSNVUzUmhkR1VnUFQwOUlDZGpiMjF3YkdWMFpTY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YVhSbFRXVjBZV1JoZEdGZk1TNWtaV1poZFd4MEtIUm9hWE11WDNKd1kwVnVaMmx1WlN3Z2RHaHBjeTVmYkc5bktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdSdmJVTnZiblJsYm5STWIyRmtaV1JJWVc1a2JHVnlJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFYUmxUV1YwWVdSaGRHRmZNUzVrWldaaGRXeDBLSFJvYVhNdVgzSndZMFZ1WjJsdVpTd2dkR2hwY3k1ZmJHOW5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QybHVaRzkzTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0owUlBUVU52Ym5SbGJuUk1iMkZrWldRbkxDQmtiMjFEYjI1MFpXNTBURzloWkdWa1NHRnVaR3hsY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhVzVrYjNjdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblJFOU5RMjl1ZEdWdWRFeHZZV1JsWkNjc0lHUnZiVU52Ym5SbGJuUk1iMkZrWldSSVlXNWtiR1Z5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQXZMejA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5WEc0Z0lDQWdMeThnVUhWaWJHbGpJRTFsZEdodlpITmNiaUFnSUNBdkx6MDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVM1ZpYldsMGN5QmhiaUJTVUVNZ2NtVnhkV1Z6ZENCd1pYSWdkR2hsSUdkcGRtVnVJRXBUVDA0dFVsQkRJSEpsY1hWbGMzUWdiMkpxWldOMExseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhCaGVXeHZZV1FnTFNCVWFHVWdVbEJESUhKbGNYVmxjM1FnYjJKcVpXTjBMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmpZaUF0SUZSb1pTQmpZV3hzWW1GamF5Qm1kVzVqZEdsdmJpNWNiaUFnSUNBZ0tpOWNiaUFnSUNCelpXNWtRWE41Ym1Nb2NHRjViRzloWkN3Z1kyRnNiR0poWTJzcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNuQmpVbVZ4ZFdWemRDaHdZWGxzYjJGa0xDQmpZV3hzWW1GamF5azdYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGZGxJRzkyWlhKeWFXUmxJSFJvWlNCbWIyeHNiM2RwYm1jZ1pYWmxiblFnYldWMGFHOWtjeUJ6YnlCMGFHRjBJSGRsSUdOaGJpQjNZWEp1SUdOdmJuTjFiV1Z5YzF4dUlDQWdJQ0FxSUdGaWIzVjBJR1JsY0hKbFkyRjBaV1FnWlhabGJuUnpPbHh1SUNBZ0lDQXFJQ0FnWVdSa1RHbHpkR1Z1WlhJc0lHOXVMQ0J2Ym1ObExDQndjbVZ3Wlc1a1RHbHpkR1Z1WlhJc0lIQnlaWEJsYm1SUGJtTmxUR2x6ZEdWdVpYSmNiaUFnSUNBZ0tpOWNiaUFnSUNCaFpHUk1hWE4wWlc1bGNpaGxkbVZ1ZEU1aGJXVXNJR3hwYzNSbGJtVnlLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM2RoY201UFprUmxjSEpsWTJGMGFXOXVLR1YyWlc1MFRtRnRaU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWhaR1JNYVhOMFpXNWxjaWhsZG1WdWRFNWhiV1VzSUd4cGMzUmxibVZ5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdiMjRvWlhabGJuUk9ZVzFsTENCc2FYTjBaVzVsY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5M1lYSnVUMlpFWlhCeVpXTmhkR2x2YmlobGRtVnVkRTVoYldVcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1YjI0b1pYWmxiblJPWVcxbExDQnNhWE4wWlc1bGNpazdYRzRnSUNBZ2ZWeHVJQ0FnSUc5dVkyVW9aWFpsYm5ST1lXMWxMQ0JzYVhOMFpXNWxjaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkzWVhKdVQyWkVaWEJ5WldOaGRHbHZiaWhsZG1WdWRFNWhiV1VwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXViMjVqWlNobGRtVnVkRTVoYldVc0lHeHBjM1JsYm1WeUtUdGNiaUFnSUNCOVhHNGdJQ0FnY0hKbGNHVnVaRXhwYzNSbGJtVnlLR1YyWlc1MFRtRnRaU3dnYkdsemRHVnVaWElwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZDJGeWJrOW1SR1Z3Y21WallYUnBiMjRvWlhabGJuUk9ZVzFsS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbkJ5WlhCbGJtUk1hWE4wWlc1bGNpaGxkbVZ1ZEU1aGJXVXNJR3hwYzNSbGJtVnlLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NISmxjR1Z1WkU5dVkyVk1hWE4wWlc1bGNpaGxkbVZ1ZEU1aGJXVXNJR3hwYzNSbGJtVnlLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM2RoY201UFprUmxjSEpsWTJGMGFXOXVLR1YyWlc1MFRtRnRaU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNXdjbVZ3Wlc1a1QyNWpaVXhwYzNSbGJtVnlLR1YyWlc1MFRtRnRaU3dnYkdsemRHVnVaWElwTzF4dUlDQWdJSDFjYmlBZ0lDQXZMejA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5WEc0Z0lDQWdMeThnVUhKcGRtRjBaU0JOWlhSb2IyUnpYRzRnSUNBZ0x5ODlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRmRvWlc0Z2RHaGxJSEJ5YjNacFpHVnlJR0psWTI5dFpYTWdaR2x6WTI5dWJtVmpkR1ZrTENCMWNHUmhkR1Z6SUdsdWRHVnlibUZzSUhOMFlYUmxJR0Z1WkNCbGJXbDBjMXh1SUNBZ0lDQXFJSEpsY1hWcGNtVmtJR1YyWlc1MGN5NGdTV1JsYlhCdmRHVnVkQ0IzYVhSb0lISmxjM0JsWTNRZ2RHOGdkR2hsSUdselVtVmpiM1psY21GaWJHVWdjR0Z5WVcxbGRHVnlMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dSWEp5YjNJZ1kyOWtaWE1nY0dWeUlIUm9aU0JEYkc5elpVVjJaVzUwSUhOMFlYUjFjeUJqYjJSbGN5QmhjeUJ5WlhGMWFYSmxaQ0JpZVNCRlNWQXRNVEU1TXpwY2JpQWdJQ0FnS2lCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1dGIzcHBiR3hoTG05eVp5OWxiaTFWVXk5a2IyTnpMMWRsWWk5QlVFa3ZRMnh2YzJWRmRtVnVkQ05UZEdGMGRYTmZZMjlrWlhOY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0JwYzFKbFkyOTJaWEpoWW14bElDMGdWMmhsZEdobGNpQjBhR1VnWkdselkyOXVibVZqZEdsdmJpQnBjeUJ5WldOdmRtVnlZV0pzWlM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnWlhKeWIzSk5aWE56WVdkbElDMGdRU0JqZFhOMGIyMGdaWEp5YjNJZ2JXVnpjMkZuWlM1Y2JpQWdJQ0FnS2lCQVpXMXBkSE1nVFdWMFlVMWhjMnRKYm5CaFoyVlFjbTkyYVdSbGNpTmthWE5qYjI1dVpXTjBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gyaGhibVJzWlVScGMyTnZibTVsWTNRb2FYTlNaV052ZG1WeVlXSnNaU3dnWlhKeWIzSk5aWE56WVdkbEtTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUxsOW9ZVzVrYkdWRWFYTmpiMjV1WldOMEtHbHpVbVZqYjNabGNtRmliR1VzSUdWeWNtOXlUV1Z6YzJGblpTazdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbTVsZEhkdmNtdFdaWEp6YVc5dUlDWW1JQ0ZwYzFKbFkyOTJaWEpoWW14bEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTVsZEhkdmNtdFdaWEp6YVc5dUlEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCWFlYSnVjeUJ2WmlCa1pYQnlaV05oZEdsdmJpQm1iM0lnZEdobElHZHBkbVZ1SUdWMlpXNTBMQ0JwWmlCaGNIQnNhV05oWW14bExseHVJQ0FnSUNBcUwxeHVJQ0FnSUY5M1lYSnVUMlpFWlhCeVpXTmhkR2x2YmlobGRtVnVkRTVoYldVcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5aE8xeHVJQ0FnSUNBZ0lDQnBaaUFvS0NoZllTQTlJSFJvYVhNdVgzTmxiblJYWVhKdWFXNW5jeWtnUFQwOUlHNTFiR3dnZkh3Z1gyRWdQVDA5SUhadmFXUWdNQ0EvSUhadmFXUWdNQ0E2SUY5aExtVjJaVzUwYzF0bGRtVnVkRTVoYldWZEtTQTlQVDBnWm1Gc2MyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NTNZWEp1S0cxbGMzTmhaMlZ6WHpFdVpHVm1ZWFZzZEM1M1lYSnVhVzVuY3k1bGRtVnVkSE5iWlhabGJuUk9ZVzFsWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpaVzUwVjJGeWJtbHVaM011WlhabGJuUnpXMlYyWlc1MFRtRnRaVjBnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lDOHZQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDFjYmlBZ0lDQXZMeUJFWlhCeVpXTmhkR1ZrSUUxbGRHaHZaSE5jYmlBZ0lDQXZMejA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUlhGMWFYWmhiR1Z1ZENCMGJ6b2daWFJvWlhKbGRXMHVjbVZ4ZFdWemRDZ25jM1JqWDNKbGNYVmxjM1JCWTJOdmRXNTBjeWNwWEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBWkdWd2NtVmpZWFJsWkNCVmMyVWdjbVZ4ZFdWemRDaDdJRzFsZEdodlpEb2dKM04wWTE5eVpYRjFaWE4wUVdOamIzVnVkSE1uSUgwcElHbHVjM1JsWVdRdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1FTQndjbTl0YVhObElIUm9ZWFFnY21WemIyeDJaWE1nZEc4Z1lXNGdZWEp5WVhrZ2IyWWdZV1JrY21WemMyVnpMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHVnVZV0pzWlNncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbDl6Wlc1MFYyRnlibWx1WjNNdVpXNWhZbXhsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1ZDJGeWJpaHRaWE56WVdkbGMxOHhMbVJsWm1GMWJIUXVkMkZ5Ym1sdVozTXVaVzVoWW14bFJHVndjbVZqWVhScGIyNHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYzJWdWRGZGhjbTVwYm1kekxtVnVZV0pzWlNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabExDQnlaV3BsWTNRcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjbkJqVW1WeGRXVnpkQ2g3SUcxbGRHaHZaRG9nSjNOMFkxOXlaWEYxWlhOMFFXTmpiM1Z1ZEhNbkxDQndZWEpoYlhNNklGdGRJSDBzSUhWMGFXeHpYekV1WjJWMFVuQmpVSEp2YldselpVTmhiR3hpWVdOcktISmxjMjlzZG1Vc0lISmxhbVZqZENrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMkYwWTJnZ0tHVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNtOXlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1SUNBZ0lITmxibVFvYldWMGFHOWtUM0pRWVhsc2IyRmtMQ0JqWVd4c1ltRmphMDl5UVhKbmN5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDNObGJuUlhZWEp1YVc1bmN5NXpaVzVrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1ZDJGeWJpaHRaWE56WVdkbGMxOHhMbVJsWm1GMWJIUXVkMkZ5Ym1sdVozTXVjMlZ1WkVSbGNISmxZMkYwYVc5dUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM05sYm5SWFlYSnVhVzVuY3k1elpXNWtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUcxbGRHaHZaRTl5VUdGNWJHOWhaQ0E5UFQwZ0ozTjBjbWx1WnljZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNnaFkyRnNiR0poWTJ0UGNrRnlaM01nZkh3Z1FYSnlZWGt1YVhOQmNuSmhlU2hqWVd4c1ltRmphMDl5UVhKbmN5a3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0p3WTFKbGNYVmxjM1FvZXlCdFpYUm9iMlE2SUcxbGRHaHZaRTl5VUdGNWJHOWhaQ3dnY0dGeVlXMXpPaUJqWVd4c1ltRmphMDl5UVhKbmN5QjlMQ0IxZEdsc2MxOHhMbWRsZEZKd1kxQnliMjFwYzJWRFlXeHNZbUZqYXloeVpYTnZiSFpsTENCeVpXcGxZM1FzSUdaaGJITmxLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGRHTm9JQ2hsY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0cxbGRHaHZaRTl5VUdGNWJHOWhaQ0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdkSGx3Wlc5bUlHMWxkR2h2WkU5eVVHRjViRzloWkNBOVBUMGdKMjlpYW1WamRDY2dKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1Z2WmlCallXeHNZbUZqYTA5eVFYSm5jeUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0p3WTFKbGNYVmxjM1FvYldWMGFHOWtUM0pRWVhsc2IyRmtMQ0JqWVd4c1ltRmphMDl5UVhKbmN5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTmxibVJUZVc1aktHMWxkR2h2WkU5eVVHRjViRzloWkNrN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVsdWRHVnlibUZzSUdKaFkydDNZWEprY3lCamIyMXdZWFJwWW1sc2FYUjVJRzFsZEdodlpDd2dkWE5sWkNCcGJpQnpaVzVrTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUdSbGNISmxZMkYwWldSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmYzJWdVpGTjVibU1vY0dGNWJHOWhaQ2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdjbVZ6ZFd4ME8xeHVJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tIQmhlV3h2WVdRdWJXVjBhRzlrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZHpkR05mWVdOamIzVnVkSE1uT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUhSb2FYTXVjMlZzWldOMFpXUkJaR1J5WlhOeklEOGdXM1JvYVhNdWMyVnNaV04wWldSQlpHUnlaWE56WFNBNklGdGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5jM1JqWDJOdmFXNWlZWE5sSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFFnUFNCMGFHbHpMbk5sYkdWamRHVmtRV1JrY21WemN5QjhmQ0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmMzUmpYM1Z1YVc1emRHRnNiRVpwYkhSbGNpYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmNuQmpVbVZ4ZFdWemRDaHdZWGxzYjJGa0xDQjFkR2xzYzE4eExrNVBUMUFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZHVaWFJmZG1WeWMybHZiaWM2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBJRDBnZEdocGN5NXVaWFIzYjNKclZtVnljMmx2YmlCOGZDQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvYldWemMyRm5aWE5mTVM1a1pXWmhkV3gwTG1WeWNtOXljeTUxYm5OMWNIQnZjblJsWkZONWJtTW9jR0Y1Ykc5aFpDNXRaWFJvYjJRcEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJSEJoZVd4dllXUXVhV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnFjMjl1Y25Cak9pQndZWGxzYjJGa0xtcHpiMjV5Y0dNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUXNYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU52Ym5OMGNuVmpkRzl5SUdobGJIQmxjaTVjYmlBZ0lDQWdLaUJIWlhSeklHVjRjR1Z5YVcxbGJuUmhiQ0JmYzNSaGNtMWhjMnNnUVZCSklHRnpJRkJ5YjNoNUxDQnpieUIwYUdGMElIZGxJR05oYmlCM1lYSnVJR052Ym5OMWJXVnljMXh1SUNBZ0lDQXFJR0ZpYjNWMElHbDBjeUJsZUhCbGNtbHRaVzUwSUc1aGRIVnlaUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQmZaMlYwUlhod1pYSnBiV1Z1ZEdGc1FYQnBLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGQnliM2g1S0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ29nUkdWMFpYSnRhVzVsY3lCcFppQk5aWFJoVFdGemF5QnBjeUIxYm14dlkydGxaQ0JpZVNCMGFHVWdkWE5sY2k1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FxWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdLaUJBY21WMGRYSnVjeUJRY205dGFYTmxJSEpsYzI5c2RtbHVaeUIwYnlCMGNuVmxJR2xtSUUxbGRHRk5ZWE5ySUdseklHTjFjbkpsYm5Sc2VTQjFibXh2WTJ0bFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNBZ0lDQWdJQ0JwYzFWdWJHOWphMlZrT2lCaGMzbHVZeUFvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbDl6ZEdGMFpTNXBibWwwYVdGc2FYcGxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhkMkZwZENCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXZiaWduWDJsdWFYUnBZV3hwZW1Wa0p5d2dLQ2tnUFQ0Z2NtVnpiMngyWlNncEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl6ZEdGMFpTNXBjMVZ1Ykc5amEyVmtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNvZ1RXRnJaU0JoSUdKaGRHTm9JRkpRUXlCeVpYRjFaWE4wTGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWEYxWlhOMFFtRjBZMmc2SUdGemVXNWpJQ2h5WlhGMVpYTjBjeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doUVhKeVlYa3VhWE5CY25KaGVTaHlaWEYxWlhOMGN5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnWlhSb1gzSndZMTlsY25KdmNuTmZNUzVsZEdoRmNuSnZjbk11Y25CakxtbHVkbUZzYVdSU1pYRjFaWE4wS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlU2SUNkQ1lYUmphQ0J5WlhGMVpYTjBjeUJ0ZFhOMElHSmxJRzFoWkdVZ2QybDBhQ0JoYmlCaGNuSmhlU0J2WmlCeVpYRjFaWE4wSUc5aWFtVmpkSE11Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRTZJSEpsY1hWbGMzUnpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmNuQmpVbVZ4ZFdWemRDaHlaWEYxWlhOMGN5d2dkWFJwYkhOZk1TNW5aWFJTY0dOUWNtOXRhWE5sUTJGc2JHSmhZMnNvY21WemIyeDJaU3dnY21WcVpXTjBLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCOUxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCblpYUTZJQ2h2WW1vc0lIQnliM0FzSUM0dUxtRnlaM01wSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVYM05sYm5SWFlYSnVhVzVuY3k1bGVIQmxjbWx0Wlc1MFlXeE5aWFJvYjJSektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1M1lYSnVLRzFsYzNOaFoyVnpYekV1WkdWbVlYVnNkQzUzWVhKdWFXNW5jeTVsZUhCbGNtbHRaVzUwWVd4TlpYUm9iMlJ6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMyVnVkRmRoY201cGJtZHpMbVY0Y0dWeWFXMWxiblJoYkUxbGRHaHZaSE1nUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVbVZtYkdWamRDNW5aWFFvYjJKcUxDQndjbTl3TENBdUxpNWhjbWR6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVmNHOXVJSEpsWTJWcGNIUWdiMllnWVNCdVpYY2dZMmhoYVc1SlpDQmhibVFnYm1WMGQyOXlhMVpsY25OcGIyNHNJR1Z0YVhSeklHTnZjbkpsYzNCdmJtUnBibWRjYmlBZ0lDQWdLaUJsZG1WdWRITWdZVzVrSUhObGRITWdjbVZzWlhaaGJuUWdjSFZpYkdsaklITjBZWFJsTGx4dUlDQWdJQ0FxSUVSdlpYTWdibTkwYUdsdVp5QnBaaUJ1WldsMGFHVnlJSFJvWlNCamFHRnBia2xrSUc1dmNpQjBhR1VnYm1WMGQyOXlhMVpsY25OcGIyNGdZWEpsSUdScFptWmxjbVZ1ZEZ4dUlDQWdJQ0FxSUdaeWIyMGdaWGhwYzNScGJtY2dkbUZzZFdWekxseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FHVnRhWFJ6SUUxbGRHRnRZWE5yU1c1d1lXZGxVSEp2ZG1sa1pYSWpZMmhoYVc1RGFHRnVaMlZrWEc0Z0lDQWdJQ29nUUdWdGFYUnpJRTFsZEdGdFlYTnJTVzV3WVdkbFVISnZkbWxrWlhJamJtVjBkMjl5YTBOb1lXNW5aV1JjYmlBZ0lDQWdLaUJBY0dGeVlXMGdibVYwZDI5eWEwbHVabThnTFNCQmJpQnZZbXBsWTNRZ2QybDBhQ0J1WlhSM2IzSnJJR2x1Wm04dVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUc1bGRIZHZjbXRKYm1adkxtTm9ZV2x1U1dRZ0xTQlVhR1VnYkdGMFpYTjBJR05vWVdsdUlFbEVMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnVaWFIzYjNKclNXNW1ieTV1WlhSM2IzSnJWbVZ5YzJsdmJpQXRJRlJvWlNCc1lYUmxjM1FnYm1WMGQyOXlheUJKUkM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmYUdGdVpHeGxRMmhoYVc1RGFHRnVaMlZrS0hzZ1kyaGhhVzVKWkN3Z2JtVjBkMjl5YTFabGNuTnBiMjRzSUgwZ1BTQjdmU2tnZTF4dUlDQWdJQ0FnSUNCemRYQmxjaTVmYUdGdVpHeGxRMmhoYVc1RGFHRnVaMlZrS0hzZ1kyaGhhVzVKWkN3Z2JtVjBkMjl5YTFabGNuTnBiMjRnZlNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h1WlhSM2IzSnJWbVZ5YzJsdmJpQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjBkMjl5YTFabGNuTnBiMjRnSVQwOUlDZHNiMkZrYVc1bkp5QW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjBkMjl5YTFabGNuTnBiMjRnSVQwOUlIUm9hWE11Ym1WMGQyOXlhMVpsY25OcGIyNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ym1WMGQyOXlhMVpsY25OcGIyNGdQU0J1WlhSM2IzSnJWbVZ5YzJsdmJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5emRHRjBaUzVwYm1sMGFXRnNhWHBsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WlcxcGRDZ25ibVYwZDI5eWEwTm9ZVzVuWldRbkxDQjBhR2x6TG01bGRIZHZjbXRXWlhKemFXOXVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibjFjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUUxbGRHRk5ZWE5yU1c1d1lXZGxVSEp2ZG1sa1pYSTdYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxTlpYUmhUV0Z6YTBsdWNHRm5aVkJ5YjNacFpHVnlMbXB6TG0xaGNDSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVkbUZ5SUY5ZmFXMXdiM0owUkdWbVlYVnNkQ0E5SUNoMGFHbHpJQ1ltSUhSb2FYTXVYMTlwYlhCdmNuUkVaV1poZFd4MEtTQjhmQ0JtZFc1amRHbHZiaUFvYlc5a0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUNodGIyUWdKaVlnYlc5a0xsOWZaWE5OYjJSMWJHVXBJRDhnYlc5a0lEb2dleUJjSW1SbFptRjFiSFJjSWpvZ2JXOWtJSDA3WEc1OU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1WTI5dWMzUWdaWGgwWlc1emFXOXVYM0J2Y25SZmMzUnlaV0Z0WHpFZ1BTQmZYMmx0Y0c5eWRFUmxabUYxYkhRb2NtVnhkV2x5WlNoY0ltVjRkR1Z1YzJsdmJpMXdiM0owTFhOMGNtVmhiVndpS1NrN1hHNWpiMjV6ZENCa1pYUmxZM1JmWW5KdmQzTmxjbDh4SUQwZ2NtVnhkV2x5WlNoY0ltUmxkR1ZqZEMxaWNtOTNjMlZ5WENJcE8xeHVZMjl1YzNRZ1FtRnpaVkJ5YjNacFpHVnlYekVnUFNCZlgybHRjRzl5ZEVSbFptRjFiSFFvY21WeGRXbHlaU2hjSWk0dUwwSmhjMlZRY205MmFXUmxjbHdpS1NrN1hHNWpiMjV6ZENCbGVIUmxjbTVoYkY5bGVIUmxibk5wYjI1ZlkyOXVabWxuWDJwemIyNWZNU0E5SUY5ZmFXMXdiM0owUkdWbVlYVnNkQ2h5WlhGMWFYSmxLRndpTGk5bGVIUmxjbTVoYkMxbGVIUmxibk5wYjI0dFkyOXVabWxuTG1wemIyNWNJaWtwTzF4dVkyOXVjM1FnWW5KdmQzTmxjaUE5SUdSbGRHVmpkRjlpY205M2MyVnlYekV1WkdWMFpXTjBLQ2s3WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZOWlhSaFRXRnphMFY0ZEdWeWJtRnNSWGgwWlc1emFXOXVVSEp2ZG1sa1pYSW9LU0I3WEc0Z0lDQWdiR1YwSUhCeWIzWnBaR1Z5TzF4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdOMWNuSmxiblJOWlhSaFRXRnphMGxrSUQwZ1oyVjBUV1YwWVUxaGMydEpaQ2dwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J0WlhSaGJXRnphMUJ2Y25RZ1BTQmphSEp2YldVdWNuVnVkR2x0WlM1amIyNXVaV04wS0dOMWNuSmxiblJOWlhSaFRXRnphMGxrS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0d4MVoybHVVM1J5WldGdElEMGdibVYzSUdWNGRHVnVjMmx2Ymw5d2IzSjBYM04wY21WaGJWOHhMbVJsWm1GMWJIUW9iV1YwWVcxaGMydFFiM0owS1R0Y2JpQWdJQ0FnSUNBZ2NISnZkbWxrWlhJZ1BTQnVaWGNnUW1GelpWQnliM1pwWkdWeVh6RXVaR1ZtWVhWc2RDaHdiSFZuYVc1VGRISmxZVzBwTzF4dUlDQWdJSDFjYmlBZ0lDQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVJwY2loZ1UzUmhjbTFoYzJzZ1kyOXVibVZqZENCbGNuSnZjaUJnTENCbEtUdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ1pUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSEJ5YjNacFpHVnlPMXh1ZlZ4dVpYaHdiM0owY3k1a1pXWmhkV3gwSUQwZ1kzSmxZWFJsVFdWMFlVMWhjMnRGZUhSbGNtNWhiRVY0ZEdWdWMybHZibEJ5YjNacFpHVnlPMXh1Wm5WdVkzUnBiMjRnWjJWMFRXVjBZVTFoYzJ0SlpDZ3BJSHRjYmlBZ0lDQnpkMmwwWTJnZ0tHSnliM2R6WlhJZ1BUMDlJRzUxYkd3Z2ZId2dZbkp2ZDNObGNpQTlQVDBnZG05cFpDQXdJRDhnZG05cFpDQXdJRG9nWW5KdmQzTmxjaTV1WVcxbEtTQjdYRzRnSUNBZ0lDQWdJR05oYzJVZ0oyTm9jbTl0WlNjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWGgwWlhKdVlXeGZaWGgwWlc1emFXOXVYMk52Ym1acFoxOXFjMjl1WHpFdVpHVm1ZWFZzZEM1RFNGSlBUVVZmU1VRN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnSjJacGNtVm1iM2duT2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVjRkR1Z5Ym1Gc1gyVjRkR1Z1YzJsdmJsOWpiMjVtYVdkZmFuTnZibDh4TG1SbFptRjFiSFF1UmtsU1JVWlBXRjlKUkR0Y2JpQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxlSFJsY201aGJGOWxlSFJsYm5OcGIyNWZZMjl1Wm1sblgycHpiMjVmTVM1a1pXWmhkV3gwTGtOSVVrOU5SVjlKUkR0Y2JpQWdJQ0I5WEc1OVhHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFqY21WaGRHVkZlSFJsY201aGJFVjRkR1Z1YzJsdmJsQnliM1pwWkdWeUxtcHpMbTFoY0NJc0ltMXZaSFZzWlM1bGVIQnZjblJ6UFh0Y2JpQWdJQ0JjSWtOSVVrOU5SVjlKUkZ3aU9pQmNJbTFtYUdKbFltZHZZMnhyWjJobFltWm1aR3hrY0c5aVpXRnFiV0psWTJaclhDSXNYRzRnSUNBZ1hDSkdTVkpGUms5WVgwbEVYQ0k2SUZ3aWQyVmlaWGgwWlc1emFXOXVRSGRsYzNSaGNpNXBiMXdpWEc1OVhHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiblpoY2lCZlgybHRjRzl5ZEVSbFptRjFiSFFnUFNBb2RHaHBjeUFtSmlCMGFHbHpMbDlmYVcxd2IzSjBSR1ZtWVhWc2RDa2dmSHdnWm5WdVkzUnBiMjRnS0cxdlpDa2dlMXh1SUNBZ0lISmxkSFZ5YmlBb2JXOWtJQ1ltSUcxdlpDNWZYMlZ6VFc5a2RXeGxLU0EvSUcxdlpDQTZJSHNnWENKa1pXWmhkV3gwWENJNklHMXZaQ0I5TzF4dWZUdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZXlCMllXeDFaVG9nZEhKMVpTQjlLVHRjYm1WNGNHOXlkSE11WTNKbFlYUmxSWGgwWlhKdVlXeEZlSFJsYm5OcGIyNVFjbTkyYVdSbGNpQTlJR1Y0Y0c5eWRITXVjMlYwUjJ4dlltRnNVSEp2ZG1sa1pYSWdQU0JsZUhCdmNuUnpMa0poYzJWUWNtOTJhV1JsY2lBOUlHVjRjRzl5ZEhNdVRXVjBZVTFoYzJ0SmJuQmhaMlZRY205MmFXUmxjaUE5SUdWNGNHOXlkSE11YVc1cGRHbGhiR2w2WlZCeWIzWnBaR1Z5SUQwZ2RtOXBaQ0F3TzF4dVkyOXVjM1FnVFdWMFlVMWhjMnRKYm5CaFoyVlFjbTkyYVdSbGNsOHhJRDBnWDE5cGJYQnZjblJFWldaaGRXeDBLSEpsY1hWcGNtVW9YQ0l1TDAxbGRHRk5ZWE5yU1c1d1lXZGxVSEp2ZG1sa1pYSmNJaWtwTzF4dVpYaHdiM0owY3k1TlpYUmhUV0Z6YTBsdWNHRm5aVkJ5YjNacFpHVnlJRDBnVFdWMFlVMWhjMnRKYm5CaFoyVlFjbTkyYVdSbGNsOHhMbVJsWm1GMWJIUTdYRzVqYjI1emRDQmpjbVZoZEdWRmVIUmxjbTVoYkVWNGRHVnVjMmx2YmxCeWIzWnBaR1Z5WHpFZ1BTQmZYMmx0Y0c5eWRFUmxabUYxYkhRb2NtVnhkV2x5WlNoY0lpNHZaWGgwWlc1emFXOXVMWEJ5YjNacFpHVnlMMk55WldGMFpVVjRkR1Z5Ym1Gc1JYaDBaVzV6YVc5dVVISnZkbWxrWlhKY0lpa3BPMXh1Wlhod2IzSjBjeTVqY21WaGRHVkZlSFJsY201aGJFVjRkR1Z1YzJsdmJsQnliM1pwWkdWeUlEMGdZM0psWVhSbFJYaDBaWEp1WVd4RmVIUmxibk5wYjI1UWNtOTJhV1JsY2w4eExtUmxabUYxYkhRN1hHNWpiMjV6ZENCQ1lYTmxVSEp2ZG1sa1pYSmZNU0E5SUY5ZmFXMXdiM0owUkdWbVlYVnNkQ2h5WlhGMWFYSmxLRndpTGk5Q1lYTmxVSEp2ZG1sa1pYSmNJaWtwTzF4dVpYaHdiM0owY3k1Q1lYTmxVSEp2ZG1sa1pYSWdQU0JDWVhObFVISnZkbWxrWlhKZk1TNWtaV1poZFd4ME8xeHVZMjl1YzNRZ2FXNXBkR2xoYkdsNlpVbHVjR0ZuWlZCeWIzWnBaR1Z5WHpFZ1BTQnlaWEYxYVhKbEtGd2lMaTlwYm1sMGFXRnNhWHBsU1c1d1lXZGxVSEp2ZG1sa1pYSmNJaWs3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pwYm1sMGFXRnNhWHBsVUhKdmRtbGtaWEpjSWl3Z2V5QmxiblZ0WlhKaFlteGxPaUIwY25WbExDQm5aWFE2SUdaMWJtTjBhVzl1SUNncElIc2djbVYwZFhKdUlHbHVhWFJwWVd4cGVtVkpibkJoWjJWUWNtOTJhV1JsY2w4eExtbHVhWFJwWVd4cGVtVlFjbTkyYVdSbGNqc2dmU0I5S1R0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSW5ObGRFZHNiMkpoYkZCeWIzWnBaR1Z5WENJc0lIc2daVzUxYldWeVlXSnNaVG9nZEhKMVpTd2daMlYwT2lCbWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQnBibWwwYVdGc2FYcGxTVzV3WVdkbFVISnZkbWxrWlhKZk1TNXpaWFJIYkc5aVlXeFFjbTkyYVdSbGNqc2dmU0I5S1R0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV2x1WkdWNExtcHpMbTFoY0NJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dWRtRnlJRjlmYVcxd2IzSjBSR1ZtWVhWc2RDQTlJQ2gwYUdseklDWW1JSFJvYVhNdVgxOXBiWEJ2Y25SRVpXWmhkV3gwS1NCOGZDQm1kVzVqZEdsdmJpQW9iVzlrS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2h0YjJRZ0ppWWdiVzlrTGw5ZlpYTk5iMlIxYkdVcElEOGdiVzlrSURvZ2V5QmNJbVJsWm1GMWJIUmNJam9nYlc5a0lIMDdYRzU5TzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVaWGh3YjNKMGN5NXpaWFJIYkc5aVlXeFFjbTkyYVdSbGNpQTlJR1Y0Y0c5eWRITXVhVzVwZEdsaGJHbDZaVkJ5YjNacFpHVnlJRDBnZG05cFpDQXdPMXh1WTI5dWMzUWdUV1YwWVUxaGMydEpibkJoWjJWUWNtOTJhV1JsY2w4eElEMGdYMTlwYlhCdmNuUkVaV1poZFd4MEtISmxjWFZwY21Vb1hDSXVMMDFsZEdGTllYTnJTVzV3WVdkbFVISnZkbWxrWlhKY0lpa3BPMXh1THlvcVhHNGdLaUJKYm1sMGFXRnNhWHBsY3lCaElFMWxkR0ZOWVhOclNXNXdZV2RsVUhKdmRtbGtaWElnWVc1a0lDaHZjSFJwYjI1aGJHeDVLU0JoYzNOcFoyNXpJR2wwSUdGeklIZHBibVJ2ZHk1bGRHaGxjbVYxYlM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnYjNCMGFXOXVjeUF0SUVGdUlHOXdkR2x2Ym5NZ1ltRm5MbHh1SUNvZ1FIQmhjbUZ0SUc5d2RHbHZibk11WTI5dWJtVmpkR2x2YmxOMGNtVmhiU0F0SUVFZ1RtOWtaUzVxY3lCemRISmxZVzB1WEc0Z0tpQkFjR0Z5WVcwZ2IzQjBhVzl1Y3k1cWMyOXVVbkJqVTNSeVpXRnRUbUZ0WlNBdElGUm9aU0J1WVcxbElHOW1JSFJvWlNCcGJuUmxjbTVoYkNCS1UwOU9MVkpRUXlCemRISmxZVzB1WEc0Z0tpQkFjR0Z5WVcwZ2IzQjBhVzl1Y3k1dFlYaEZkbVZ1ZEV4cGMzUmxibVZ5Y3lBdElGUm9aU0J0WVhocGJYVnRJRzUxYldKbGNpQnZaaUJsZG1WdWRDQnNhWE4wWlc1bGNuTXVYRzRnS2lCQWNHRnlZVzBnYjNCMGFXOXVjeTV6YUc5MWJHUlRaVzVrVFdWMFlXUmhkR0VnTFNCWGFHVjBhR1Z5SUhSb1pTQndjbTkyYVdSbGNpQnphRzkxYkdRZ2MyVnVaQ0J3WVdkbElHMWxkR0ZrWVhSaExseHVJQ29nUUhCaGNtRnRJRzl3ZEdsdmJuTXVjMmh2ZFd4a1UyVjBUMjVYYVc1a2IzY2dMU0JYYUdWMGFHVnlJSFJvWlNCd2NtOTJhV1JsY2lCemFHOTFiR1FnWW1VZ2MyVjBJR0Z6SUhkcGJtUnZkeTVsZEdobGNtVjFiUzVjYmlBcUlFQnlaWFIxY201eklGUm9aU0JwYm1sMGFXRnNhWHBsWkNCd2NtOTJhV1JsY2lBb2QyaGxkR2hsY2lCelpYUWdiM0lnYm05MEtTNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2FXNXBkR2xoYkdsNlpWQnliM1pwWkdWeUtIc2dZMjl1Ym1WamRHbHZibE4wY21WaGJTd2dhbk52YmxKd1kxTjBjbVZoYlU1aGJXVXNJR3h2WjJkbGNpQTlJR052Ym5OdmJHVXNJRzFoZUVWMlpXNTBUR2x6ZEdWdVpYSnpJRDBnTVRBd0xDQnphRzkxYkdSVFpXNWtUV1YwWVdSaGRHRWdQU0IwY25WbExDQnphRzkxYkdSVFpYUlBibGRwYm1SdmR5QTlJSFJ5ZFdVc0lIMHBJSHRjYmlBZ0lDQnNaWFFnY0hKdmRtbGtaWElnUFNCdVpYY2dUV1YwWVUxaGMydEpibkJoWjJWUWNtOTJhV1JsY2w4eExtUmxabUYxYkhRb1kyOXVibVZqZEdsdmJsTjBjbVZoYlN3Z2UxeHVJQ0FnSUNBZ0lDQnFjMjl1VW5CalUzUnlaV0Z0VG1GdFpTeGNiaUFnSUNBZ0lDQWdiRzluWjJWeUxGeHVJQ0FnSUNBZ0lDQnRZWGhGZG1WdWRFeHBjM1JsYm1WeWN5eGNiaUFnSUNBZ0lDQWdjMmh2ZFd4a1UyVnVaRTFsZEdGa1lYUmhMRnh1SUNBZ0lIMHBPMXh1SUNBZ0lIQnliM1pwWkdWeUlEMGdibVYzSUZCeWIzaDVLSEJ5YjNacFpHVnlMQ0I3WEc0Z0lDQWdJQ0FnSUM4dklITnZiV1VnWTI5dGJXOXVJR3hwWW5KaGNtbGxjeXdnWlM1bkxpQjNaV0l6UURFdWVDd2diV1Z6Y3lCM2FYUm9JRzkxY2lCQlVFbGNiaUFnSUNBZ0lDQWdaR1ZzWlhSbFVISnZjR1Z5ZEhrNklDZ3BJRDArSUhSeWRXVXNYRzRnSUNBZ2ZTazdYRzRnSUNBZ2FXWWdLSE5vYjNWc1pGTmxkRTl1VjJsdVpHOTNLU0I3WEc0Z0lDQWdJQ0FnSUhObGRFZHNiMkpoYkZCeWIzWnBaR1Z5S0hCeWIzWnBaR1Z5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIQnliM1pwWkdWeU8xeHVmVnh1Wlhod2IzSjBjeTVwYm1sMGFXRnNhWHBsVUhKdmRtbGtaWElnUFNCcGJtbDBhV0ZzYVhwbFVISnZkbWxrWlhJN1hHNHZLaXBjYmlBcUlGTmxkSE1nZEdobElHZHBkbVZ1SUhCeWIzWnBaR1Z5SUdsdWMzUmhibU5sSUdGeklIZHBibVJ2ZHk1emRHRnlZMjlwYmlCaGJtUWdaR2x6Y0dGMFkyaGxjeUIwYUdWY2JpQXFJQ2R6ZEdGeVkyOXBiaU5wYm1sMGFXRnNhWHBsWkNjZ1pYWmxiblFnYjI0Z2QybHVaRzkzTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0J3Y205MmFXUmxja2x1YzNSaGJtTmxJQzBnVkdobElIQnliM1pwWkdWeUlHbHVjM1JoYm1ObExseHVJQ292WEc1bWRXNWpkR2x2YmlCelpYUkhiRzlpWVd4UWNtOTJhV1JsY2lod2NtOTJhV1JsY2tsdWMzUmhibU5sS1NCN1hHNGdJQ0FnZDJsdVpHOTNMbk4wWVhKamIybHVJRDBnY0hKdmRtbGtaWEpKYm5OMFlXNWpaVHRjYmlBZ0lDQjNhVzVrYjNjdVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1JYWmxiblFvSjNOMFlYSmpiMmx1STJsdWFYUnBZV3hwZW1Wa0p5a3BPMXh1ZlZ4dVpYaHdiM0owY3k1elpYUkhiRzlpWVd4UWNtOTJhV1JsY2lBOUlITmxkRWRzYjJKaGJGQnliM1pwWkdWeU8xeHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5YVc1cGRHbGhiR2w2WlVsdWNHRm5aVkJ5YjNacFpHVnlMbXB6TG0xaGNDSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1WTI5dWMzUWdiV1Z6YzJGblpYTWdQU0I3WEc0Z0lDQWdaWEp5YjNKek9pQjdYRzRnSUNBZ0lDQWdJR1JwYzJOdmJtNWxZM1JsWkRvZ0tDa2dQVDRnSjFOMFlYSk5ZWE5yT2lCRWFYTmpiMjV1WldOMFpXUWdabkp2YlNCamFHRnBiaTRnUVhSMFpXMXdkR2x1WnlCMGJ5QmpiMjV1WldOMExpY3NYRzRnSUNBZ0lDQWdJSEJsY20xaGJtVnVkR3g1UkdselkyOXVibVZqZEdWa09pQW9LU0E5UGlBblUzUmhjazFoYzJzNklFUnBjMk52Ym01bFkzUmxaQ0JtY205dElGTjBZWEpOWVhOcklHSmhZMnRuY205MWJtUXVJRkJoWjJVZ2NtVnNiMkZrSUhKbGNYVnBjbVZrTGljc1hHNGdJQ0FnSUNBZ0lITmxibVJUYVhSbFRXVjBZV1JoZEdFNklDZ3BJRDArSUdCVGRHRnlUV0Z6YXpvZ1JtRnBiR1ZrSUhSdklITmxibVFnYzJsMFpTQnRaWFJoWkdGMFlTNGdWR2hwY3lCcGN5QmhiaUJwYm5SbGNtNWhiQ0JsY25KdmNpd2djR3hsWVhObElISmxjRzl5ZENCMGFHbHpJR0oxWnk1Z0xGeHVJQ0FnSUNBZ0lDQjFibk4xY0hCdmNuUmxaRk41Ym1NNklDaHRaWFJvYjJRcElEMCtJR0JUZEdGeVRXRnphem9nVkdobElGTjBZWEpOWVhOcklGTjBZWEpqYjJsdUlIQnliM1pwWkdWeUlHUnZaWE1nYm05MElITjFjSEJ2Y25RZ2MzbHVZMmh5YjI1dmRYTWdiV1YwYUc5a2N5QnNhV3RsSUNSN2JXVjBhRzlrZlNCM2FYUm9iM1YwSUdFZ1kyRnNiR0poWTJzZ2NHRnlZVzFsZEdWeUxtQXNYRzRnSUNBZ0lDQWdJR2x1ZG1Gc2FXUkVkWEJzWlhoVGRISmxZVzA2SUNncElEMCtJQ2ROZFhOMElIQnliM1pwWkdVZ1lTQk9iMlJsTG1wekxYTjBlV3hsSUdSMWNHeGxlQ0J6ZEhKbFlXMHVKeXhjYmlBZ0lDQWdJQ0FnYVc1MllXeHBaRkpsY1hWbGMzUkJjbWR6T2lBb0tTQTlQaUJnUlhod1pXTjBaV1FnWVNCemFXNW5iR1VzSUc1dmJpMWhjbkpoZVN3Z2IySnFaV04wSUdGeVozVnRaVzUwTG1Bc1hHNGdJQ0FnSUNBZ0lHbHVkbUZzYVdSU1pYRjFaWE4wVFdWMGFHOWtPaUFvS1NBOVBpQmdKMkZ5WjNNdWJXVjBhRzlrSnlCdGRYTjBJR0psSUdFZ2JtOXVMV1Z0Y0hSNUlITjBjbWx1Wnk1Z0xGeHVJQ0FnSUNBZ0lDQnBiblpoYkdsa1VtVnhkV1Z6ZEZCaGNtRnRjem9nS0NrZ1BUNGdZQ2RoY21kekxuQmhjbUZ0Y3ljZ2JYVnpkQ0JpWlNCaGJpQnZZbXBsWTNRZ2IzSWdZWEp5WVhrZ2FXWWdjSEp2ZG1sa1pXUXVZQ3hjYmlBZ0lDQWdJQ0FnYVc1MllXeHBaRXh2WjJkbGNrOWlhbVZqZERvZ0tDa2dQVDRnWUNkaGNtZHpMbXh2WjJkbGNpY2diWFZ6ZENCaVpTQmhiaUJ2WW1wbFkzUWdhV1lnY0hKdmRtbGtaV1F1WUN4Y2JpQWdJQ0FnSUNBZ2FXNTJZV3hwWkV4dloyZGxjazFsZEdodlpEb2dLRzFsZEdodlpDa2dQVDRnWUNkaGNtZHpMbXh2WjJkbGNpY2diWFZ6ZENCcGJtTnNkV1JsSUhKbGNYVnBjbVZrSUcxbGRHaHZaQ0FuSkh0dFpYUm9iMlI5Snk1Z0xGeHVJQ0FnSUgwc1hHNGdJQ0FnYVc1bWJ6b2dlMXh1SUNBZ0lDQWdJQ0JqYjI1dVpXTjBaV1E2SUNoamFHRnBia2xrS1NBOVBpQmdVM1JoY2sxaGMyczZJRU52Ym01bFkzUmxaQ0IwYnlCamFHRnBiaUIzYVhSb0lFbEVJRndpSkh0amFHRnBia2xrZlZ3aUxtQXNYRzRnSUNBZ2ZTeGNiaUFnSUNCM1lYSnVhVzVuY3pvZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJrWlhCeVpXTmhkR1ZrSUcxbGRHaHZaSE5jYmlBZ0lDQWdJQ0FnWlc1aFlteGxSR1Z3Y21WallYUnBiMjQ2SUdCVGRHRnlUV0Z6YXpvZ0ozTjBZWEpqYjJsdUxtVnVZV0pzWlNncEp5QnBjeUJrWlhCeVpXTmhkR1ZrSUdGdVpDQnRZWGtnWW1VZ2NtVnRiM1psWkNCcGJpQjBhR1VnWm5WMGRYSmxMaUJRYkdWaGMyVWdkWE5sSUhSb1pTQW5jM1JqWDNKbGNYVmxjM1JCWTJOdmRXNTBjeWNnVWxCRElHMWxkR2h2WkNCcGJuTjBaV0ZrTGx4Y2JrWnZjaUJ0YjNKbElHbHVabTl5YldGMGFXOXVMQ0J6WldVNklHaDBkSEJ6T2k4dlpXbHdjeTVsZEdobGNtVjFiUzV2Y21jdlJVbFFVeTlsYVhBdE1URXdNbUFzWEc0Z0lDQWdJQ0FnSUhObGJtUkVaWEJ5WldOaGRHbHZiam9nWUZOMFlYSk5ZWE5yT2lBbmMzUmhjbU52YVc0dWMyVnVaQ2d1TGk0cEp5QnBjeUJrWlhCeVpXTmhkR1ZrSUdGdVpDQnRZWGtnWW1VZ2NtVnRiM1psWkNCcGJpQjBhR1VnWm5WMGRYSmxMaUJRYkdWaGMyVWdkWE5sSUNkemRHRnlZMjlwYmk1elpXNWtRWE41Ym1Nb0xpNHVLU2NnYjNJZ0ozTjBZWEpqYjJsdUxuSmxjWFZsYzNRb0xpNHVLU2NnYVc1emRHVmhaQzVjWEc1R2IzSWdiVzl5WlNCcGJtWnZjbTFoZEdsdmJpd2djMlZsT2lCb2RIUndjem92TDJWcGNITXVaWFJvWlhKbGRXMHViM0puTDBWSlVGTXZaV2x3TFRFeE9UTmdMRnh1SUNBZ0lDQWdJQ0F2THlCa1pYQnlaV05oZEdWa0lHVjJaVzUwYzF4dUlDQWdJQ0FnSUNCbGRtVnVkSE02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05zYjNObE9pQmdVM1JoY2sxaGMyczZJRlJvWlNCbGRtVnVkQ0FuWTJ4dmMyVW5JR2x6SUdSbGNISmxZMkYwWldRZ1lXNWtJRzFoZVNCaVpTQnlaVzF2ZG1Wa0lHbHVJSFJvWlNCbWRYUjFjbVV1SUZCc1pXRnpaU0IxYzJVZ0oyUnBjMk52Ym01bFkzUW5JR2x1YzNSbFlXUXVYRnh1Um05eUlHMXZjbVVnYVc1bWIzSnRZWFJwYjI0c0lITmxaVG9nYUhSMGNITTZMeTlsYVhCekxtVjBhR1Z5WlhWdExtOXlaeTlGU1ZCVEwyVnBjQzB4TVRrekkyUnBjMk52Ym01bFkzUmdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVG9nWUZOMFlYSk5ZWE5yT2lCVWFHVWdaWFpsYm5RZ0oyUmhkR0VuSUdseklHUmxjSEpsWTJGMFpXUWdZVzVrSUhkcGJHd2dZbVVnY21WdGIzWmxaQ0JwYmlCMGFHVWdablYwZFhKbExpQlZjMlVnSjIxbGMzTmhaMlVuSUdsdWMzUmxZV1F1WEZ4dVJtOXlJRzF2Y21VZ2FXNW1iM0p0WVhScGIyNHNJSE5sWlRvZ2FIUjBjSE02THk5bGFYQnpMbVYwYUdWeVpYVnRMbTl5Wnk5RlNWQlRMMlZwY0MweE1Ua3pJMjFsYzNOaFoyVmdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjBkMjl5YTBOb1lXNW5aV1E2SUdCVGRHRnlUV0Z6YXpvZ1ZHaGxJR1YyWlc1MElDZHVaWFIzYjNKclEyaGhibWRsWkNjZ2FYTWdaR1Z3Y21WallYUmxaQ0JoYm1RZ2JXRjVJR0psSUhKbGJXOTJaV1FnYVc0Z2RHaGxJR1oxZEhWeVpTNGdWWE5sSUNkamFHRnBia05vWVc1blpXUW5JR2x1YzNSbFlXUXVYRnh1Um05eUlHMXZjbVVnYVc1bWIzSnRZWFJwYjI0c0lITmxaVG9nYUhSMGNITTZMeTlsYVhCekxtVjBhR1Z5WlhWdExtOXlaeTlGU1ZCVEwyVnBjQzB4TVRrekkyTm9ZV2x1WTJoaGJtZGxaR0FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnViM1JwWm1sallYUnBiMjQ2SUdCVGRHRnlUV0Z6YXpvZ1ZHaGxJR1YyWlc1MElDZHViM1JwWm1sallYUnBiMjRuSUdseklHUmxjSEpsWTJGMFpXUWdZVzVrSUcxaGVTQmlaU0J5WlcxdmRtVmtJR2x1SUhSb1pTQm1kWFIxY21VdUlGVnpaU0FuYldWemMyRm5aU2NnYVc1emRHVmhaQzVjWEc1R2IzSWdiVzl5WlNCcGJtWnZjbTFoZEdsdmJpd2djMlZsT2lCb2RIUndjem92TDJWcGNITXVaWFJvWlhKbGRXMHViM0puTDBWSlVGTXZaV2x3TFRFeE9UTWpiV1Z6YzJGblpXQXNYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUM4dklHMXBjMk5jYmlBZ0lDQWdJQ0FnWlhod1pYSnBiV1Z1ZEdGc1RXVjBhRzlrY3pvZ1lGTjBZWEpOWVhOck9pQW5jM1JoY21OdmFXNHVYMjFsZEdGdFlYTnJKeUJsZUhCdmMyVnpJRzV2YmkxemRHRnVaR0Z5WkN3Z1pYaHdaWEpwYldWdWRHRnNJRzFsZEdodlpITXVJRlJvWlhrZ2JXRjVJR0psSUhKbGJXOTJaV1FnYjNJZ1kyaGhibWRsWkNCM2FYUm9iM1YwSUhkaGNtNXBibWN1WUN4Y2JpQWdJQ0I5TEZ4dWZUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJRzFsYzNOaFoyVnpPMXh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OWJXVnpjMkZuWlhNdWFuTXViV0Z3SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1MllYSWdYMTlwYlhCdmNuUkVaV1poZFd4MElEMGdLSFJvYVhNZ0ppWWdkR2hwY3k1ZlgybHRjRzl5ZEVSbFptRjFiSFFwSUh4OElHWjFibU4wYVc5dUlDaHRiMlFwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdLRzF2WkNBbUppQnRiMlF1WDE5bGMwMXZaSFZzWlNrZ1B5QnRiMlFnT2lCN0lGd2laR1ZtWVhWc2RGd2lPaUJ0YjJRZ2ZUdGNibjA3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIc2dkbUZzZFdVNklIUnlkV1VnZlNrN1hHNWpiMjV6ZENCdFpYTnpZV2RsYzE4eElEMGdYMTlwYlhCdmNuUkVaV1poZFd4MEtISmxjWFZwY21Vb1hDSXVMMjFsYzNOaFoyVnpYQ0lwS1R0Y2JtTnZibk4wSUhWMGFXeHpYekVnUFNCeVpYRjFhWEpsS0Z3aUxpOTFkR2xzYzF3aUtUdGNiaThxS2x4dUlDb2dVMlZ1WkhNZ2MybDBaU0J0WlhSaFpHRjBZU0J2ZG1WeUlHRnVJRkpRUXlCeVpYRjFaWE4wTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0JsYm1kcGJtVWdMU0JVYUdVZ1NsTlBUaUJTVUVNZ1JXNW5hVzVsSUhSdklITmxibVFnYldWMFlXUmhkR0VnYjNabGNpNWNiaUFxSUVCd1lYSmhiU0JzYjJjZ0xTQlVhR1VnYkc5bloybHVaeUJCVUVrZ2RHOGdkWE5sTGx4dUlDb3ZYRzVoYzNsdVl5Qm1kVzVqZEdsdmJpQnpaVzVrVTJsMFpVMWxkR0ZrWVhSaEtHVnVaMmx1WlN3Z2JHOW5LU0I3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWkc5dFlXbHVUV1YwWVdSaGRHRWdQU0JoZDJGcGRDQm5aWFJUYVhSbFRXVjBZV1JoZEdFb0tUdGNiaUFnSUNBZ0lDQWdMeThnWTJGc2JDQmxibWRwYm1VdWFHRnVaR3hsSUdScGNtVmpkR3g1SUhSdklHRjJiMmxrSUc1dmNtMWhiQ0JTVUVNZ2NtVnhkV1Z6ZENCb1lXNWtiR2x1WjF4dUlDQWdJQ0FnSUNCbGJtZHBibVV1YUdGdVpHeGxLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHcHpiMjV5Y0dNNklDY3lMakFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1E2SURFc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhSb2IyUTZJQ2R0WlhSaGJXRnphMTl6Wlc1a1JHOXRZV2x1VFdWMFlXUmhkR0VuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjR0Z5WVcxek9pQmtiMjFoYVc1TlpYUmhaR0YwWVN4Y2JpQWdJQ0FnSUNBZ2ZTd2dkWFJwYkhOZk1TNU9UMDlRS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdZMkYwWTJnZ0tHVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lHeHZaeTVsY25KdmNpaDdYRzRnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsT2lCdFpYTnpZV2RsYzE4eExtUmxabUYxYkhRdVpYSnliM0p6TG5ObGJtUlRhWFJsVFdWMFlXUmhkR0VvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzl5YVdkcGJtRnNSWEp5YjNJNklHVnljbTl5TEZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNTlYRzVsZUhCdmNuUnpMbVJsWm1GMWJIUWdQU0J6Wlc1a1UybDBaVTFsZEdGa1lYUmhPMXh1THlvcVhHNGdLaUJIWlhSeklITnBkR1VnYldWMFlXUmhkR0VnWVc1a0lISmxkSFZ5Ym5NZ2FYUmNiaUFxWEc0Z0tpOWNibUZ6ZVc1aklHWjFibU4wYVc5dUlHZGxkRk5wZEdWTlpYUmhaR0YwWVNncElIdGNiaUFnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCdVlXMWxPaUJuWlhSVGFYUmxUbUZ0WlNoM2FXNWtiM2NwTEZ4dUlDQWdJQ0FnSUNCcFkyOXVPaUJoZDJGcGRDQm5aWFJUYVhSbFNXTnZiaWgzYVc1a2IzY3BMRnh1SUNBZ0lIMDdYRzU5WEc0dktpcGNiaUFxSUVWNGRISmhZM1J6SUdFZ2JtRnRaU0JtYjNJZ2RHaGxJSE5wZEdVZ1puSnZiU0IwYUdVZ1JFOU5YRzRnS2k5Y2JtWjFibU4wYVc5dUlHZGxkRk5wZEdWT1lXMWxLSGRwYm1SdmQwOWlhbVZqZENrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnWkc5amRXMWxiblFnZlNBOUlIZHBibVJ2ZDA5aWFtVmpkRHRjYmlBZ0lDQmpiMjV6ZENCemFYUmxUbUZ0WlNBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSjJobFlXUWdQaUJ0WlhSaFczQnliM0JsY25SNVBWd2liMmM2YzJsMFpWOXVZVzFsWENKZEp5azdYRzRnSUNBZ2FXWWdLSE5wZEdWT1lXMWxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ6YVhSbFRtRnRaUzVqYjI1MFpXNTBPMXh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0J0WlhSaFZHbDBiR1VnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2RvWldGa0lENGdiV1YwWVZ0dVlXMWxQVndpZEdsMGJHVmNJbDBuS1R0Y2JpQWdJQ0JwWmlBb2JXVjBZVlJwZEd4bEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnRaWFJoVkdsMGJHVXVZMjl1ZEdWdWREdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHUnZZM1Z0Wlc1MExuUnBkR3hsSUNZbUlHUnZZM1Z0Wlc1MExuUnBkR3hsTG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHUnZZM1Z0Wlc1MExuUnBkR3hsTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2QybHVaRzkzTG14dlkyRjBhVzl1TG1odmMzUnVZVzFsTzF4dWZWeHVMeW9xWEc0Z0tpQkZlSFJ5WVdOMGN5QmhiaUJwWTI5dUlHWnZjaUIwYUdVZ2MybDBaU0JtY205dElIUm9aU0JFVDAxY2JpQXFJRUJ5WlhSMWNtNXpJR0Z1SUdsamIyNGdWVkpNWEc0Z0tpOWNibUZ6ZVc1aklHWjFibU4wYVc5dUlHZGxkRk5wZEdWSlkyOXVLSGRwYm1SdmQwOWlhbVZqZENrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnWkc5amRXMWxiblFnZlNBOUlIZHBibVJ2ZDA5aWFtVmpkRHRjYmlBZ0lDQmpiMjV6ZENCcFkyOXVjeUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSjJobFlXUWdQaUJzYVc1clczSmxiSDQ5WENKcFkyOXVYQ0pkSnlrN1hHNGdJQ0FnWm05eUlDaGpiMjV6ZENCcFkyOXVJRzltSUdsamIyNXpLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBZMjl1SUNZbUlDaGhkMkZwZENCcGJXZEZlR2x6ZEhNb2FXTnZiaTVvY21WbUtTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCcFkyOXVMbWh5WldZN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNTlYRzR2S2lwY2JpQXFJRkpsZEhWeWJuTWdkMmhsZEdobGNpQjBhR1VnWjJsMlpXNGdhVzFoWjJVZ1ZWSk1JR1Y0YVhOMGMxeHVJQ29nUUhCaGNtRnRJSFZ5YkNBdElIUm9aU0IxY213Z2IyWWdkR2hsSUdsdFlXZGxYRzRnS2lCQWNtVjBkWEp1Y3lCWGFHVjBhR1Z5SUhSb1pTQnBiV0ZuWlNCbGVHbHpkSE11WEc0Z0tpOWNibVoxYm1OMGFXOXVJR2x0WjBWNGFYTjBjeWgxY213cElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdhVzFuSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duYVcxbkp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJXY3ViMjVzYjJGa0lEMGdLQ2tnUFQ0Z2NtVnpiMngyWlNoMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHRaeTV2Ym1WeWNtOXlJRDBnS0NrZ1BUNGdjbVZ6YjJ4MlpTaG1ZV3h6WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYldjdWMzSmpJRDBnZFhKc08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYm4xY2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QWE5wZEdWTlpYUmhaR0YwWVM1cWN5NXRZWEFpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2V5QjJZV3gxWlRvZ2RISjFaU0I5S1R0Y2JtVjRjRzl5ZEhNdVJVMUpWRlJGUkY5T1QxUkpSa2xEUVZSSlQwNVRJRDBnWlhod2IzSjBjeTVPVDA5UUlEMGdaWGh3YjNKMGN5NXNiMmRUZEhKbFlXMUVhWE5qYjI1dVpXTjBWMkZ5Ym1sdVp5QTlJR1Y0Y0c5eWRITXVaMlYwVW5CalVISnZiV2x6WlVOaGJHeGlZV05ySUQwZ1pYaHdiM0owY3k1amNtVmhkR1ZGY25KdmNrMXBaR1JzWlhkaGNtVWdQU0IyYjJsa0lEQTdYRzVqYjI1emRDQmxkR2hmY25CalgyVnljbTl5YzE4eElEMGdjbVZ4ZFdseVpTaGNJbVYwYUMxeWNHTXRaWEp5YjNKelhDSXBPMXh1THk4Z2RYUnBiR2wwZVNCbWRXNWpkR2x2Ym5OY2JpOHFLbHh1SUNvZ2FuTnZiaTF5Y0dNdFpXNW5hVzVsSUcxcFpHUnNaWGRoY21VZ2RHaGhkQ0JzYjJkeklGSlFReUJsY25KdmNuTWdZVzVrSUdGdVpDQjJZV3hwWkdGMFpYTWdjbVZ4TG0xbGRHaHZaQzVjYmlBcVhHNGdLaUJBY0dGeVlXMGdiRzluSUMwZ1ZHaGxJR3h2WjJkcGJtY2dRVkJKSUhSdklIVnpaUzVjYmlBcUlFQnlaWFIxY201eklDQnFjMjl1TFhKd1l5MWxibWRwYm1VZ2JXbGtaR3hsZDJGeVpTQm1kVzVqZEdsdmJseHVJQ292WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZGY25KdmNrMXBaR1JzWlhkaGNtVW9iRzluS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2h5WlhFc0lISmxjeXdnYm1WNGRDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBdkx5QnFjMjl1TFhKd1l5MWxibWRwYm1VZ2QybHNiQ0IwWlhKdGFXNWhkR1VnZEdobElISmxjWFZsYzNRZ2QyaGxiaUJwZENCdWIzUnBZMlZ6SUhSb2FYTWdaWEp5YjNKY2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnlaWEV1YldWMGFHOWtJQ0U5UFNBbmMzUnlhVzVuSnlCOGZDQWhjbVZ4TG0xbGRHaHZaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6TG1WeWNtOXlJRDBnWlhSb1gzSndZMTlsY25KdmNuTmZNUzVsZEdoRmNuSnZjbk11Y25CakxtbHVkbUZzYVdSU1pYRjFaWE4wS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsT2lCZ1ZHaGxJSEpsY1hWbGMzUWdKMjFsZEdodlpDY2diWFZ6ZENCaVpTQmhJRzV2YmkxbGJYQjBlU0J6ZEhKcGJtY3VZQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaE9pQnlaWEVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCdVpYaDBLQ2hrYjI1bEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHVnljbTl5SUgwZ1BTQnlaWE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdWeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1J2Ym1Vb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR3h2Wnk1bGNuSnZjaWh5WlhNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkc5bkxtVnljbTl5S0dCVGRHRnlUV0Z6YXlBdElGSlFReUJGY25KdmNqb2dKSHRsY25KdmNpNXRaWE56WVdkbGZXQXNJR1Z5Y205eUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJrYjI1bEtDazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDA3WEc1OVhHNWxlSEJ2Y25SekxtTnlaV0YwWlVWeWNtOXlUV2xrWkd4bGQyRnlaU0E5SUdOeVpXRjBaVVZ5Y205eVRXbGtaR3hsZDJGeVpUdGNiaTh2SUhKbGMyOXNkbVVnY21WemNHOXVjMlV1Y21WemRXeDBJRzl5SUhKbGMzQnZibk5sTENCeVpXcGxZM1FnWlhKeWIzSnpYRzVqYjI1emRDQm5aWFJTY0dOUWNtOXRhWE5sUTJGc2JHSmhZMnNnUFNBb2NtVnpiMngyWlN3Z2NtVnFaV04wTENCMWJuZHlZWEJTWlhOMWJIUWdQU0IwY25WbEtTQTlQaUFvWlhKeWIzSXNJSEpsYzNCdmJuTmxLU0E5UGlCN1hHNGdJQ0FnYVdZZ0tHVnljbTl5SUh4OElISmxjM0J2Ym5ObExtVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lISmxhbVZqZENobGNuSnZjaUI4ZkNCeVpYTndiMjV6WlM1bGNuSnZjaWs3WEc0Z0lDQWdmVnh1SUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBaGRXNTNjbUZ3VW1WemRXeDBJSHg4SUVGeWNtRjVMbWx6UVhKeVlYa29jbVZ6Y0c5dWMyVXBYRzRnSUNBZ0lDQWdJQ0FnSUNBL0lISmxjMjlzZG1Vb2NtVnpjRzl1YzJVcFhHNGdJQ0FnSUNBZ0lDQWdJQ0E2SUhKbGMyOXNkbVVvY21WemNHOXVjMlV1Y21WemRXeDBLVHRjYmlBZ0lDQjlYRzU5TzF4dVpYaHdiM0owY3k1blpYUlNjR05RY205dGFYTmxRMkZzYkdKaFkyc2dQU0JuWlhSU2NHTlFjbTl0YVhObFEyRnNiR0poWTJzN1hHNHZLaXBjYmlBcUlFeHZaM01nWVNCemRISmxZVzBnWkdselkyOXVibVZqZEdsdmJpQmxjbkp2Y2k0Z1JXMXBkSE1nWVc0Z0oyVnljbTl5SnlCcFppQm5hWFpsYmlCaGJseHVJQ29nUlhabGJuUkZiV2wwZEdWeUlIUm9ZWFFnYUdGeklHeHBjM1JsYm1WeWN5Qm1iM0lnZEdobElDZGxjbkp2Y2ljZ1pYWmxiblF1WEc0Z0tseHVJQ29nUUhCaGNtRnRJR3h2WnlBdElGUm9aU0JzYjJkbmFXNW5JRUZRU1NCMGJ5QjFjMlV1WEc0Z0tpQkFjR0Z5WVcwZ2NtVnRiM1JsVEdGaVpXd2dMU0JVYUdVZ2JHRmlaV3dnYjJZZ2RHaGxJR1JwYzJOdmJtNWxZM1JsWkNCemRISmxZVzB1WEc0Z0tpQkFjR0Z5WVcwZ1pYSnliM0lnTFNCVWFHVWdZWE56YjJOcFlYUmxaQ0JsY25KdmNpQjBieUJzYjJjdVhHNGdLaUJBY0dGeVlXMGdaVzFwZEhSbGNpQXRJRlJvWlNCc2IyZG5hVzVuSUVGUVNTQjBieUIxYzJVdVhHNGdLaTljYm1aMWJtTjBhVzl1SUd4dloxTjBjbVZoYlVScGMyTnZibTVsWTNSWFlYSnVhVzVuS0d4dlp5d2djbVZ0YjNSbFRHRmlaV3dzSUdWeWNtOXlMQ0JsYldsMGRHVnlLU0I3WEc0Z0lDQWdiR1YwSUhkaGNtNXBibWROYzJjZ1BTQmdVM1JoY2sxaGMyczZJRXh2YzNRZ1kyOXVibVZqZEdsdmJpQjBieUJjSWlSN2NtVnRiM1JsVEdGaVpXeDlYQ0l1WUR0Y2JpQWdJQ0JwWmlBb1pYSnliM0lnUFQwOUlHNTFiR3dnZkh3Z1pYSnliM0lnUFQwOUlIWnZhV1FnTUNBL0lIWnZhV1FnTUNBNklHVnljbTl5TG5OMFlXTnJLU0I3WEc0Z0lDQWdJQ0FnSUhkaGNtNXBibWROYzJjZ0t6MGdZRnhjYmlSN1pYSnliM0l1YzNSaFkydDlZRHRjYmlBZ0lDQjlYRzRnSUNBZ2JHOW5MbmRoY200b2QyRnlibWx1WjAxelp5azdYRzRnSUNBZ2FXWWdLR1Z0YVhSMFpYSWdKaVlnWlcxcGRIUmxjaTVzYVhOMFpXNWxja052ZFc1MEtDZGxjbkp2Y2ljcElENGdNQ2tnZTF4dUlDQWdJQ0FnSUNCbGJXbDBkR1Z5TG1WdGFYUW9KMlZ5Y205eUp5d2dkMkZ5Ym1sdVowMXpaeWs3WEc0Z0lDQWdmVnh1ZlZ4dVpYaHdiM0owY3k1c2IyZFRkSEpsWVcxRWFYTmpiMjV1WldOMFYyRnlibWx1WnlBOUlHeHZaMU4wY21WaGJVUnBjMk52Ym01bFkzUlhZWEp1YVc1bk8xeHVZMjl1YzNRZ1RrOVBVQ0E5SUNncElEMCtJSFZ1WkdWbWFXNWxaRHRjYm1WNGNHOXlkSE11VGs5UFVDQTlJRTVQVDFBN1hHNHZMeUJqYjI1emRHRnVkSE5jYm1WNGNHOXlkSE11UlUxSlZGUkZSRjlPVDFSSlJrbERRVlJKVDA1VElEMGdXMXh1SUNBZ0lDZHpkR05mYzNWaWMyTnlhWEIwYVc5dUp5d2dMeThnY0dWeUlHVjBhQzFxYzI5dUxYSndZeTFtYVd4MFpYSnpMM04xWW5OamNtbHdkR2x2YmsxaGJtRm5aWEpjYmwwN1hHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDExZEdsc2N5NXFjeTV0WVhBaUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JtTnZibk4wSUhOMGNtVmhiVjh4SUQwZ2NtVnhkV2x5WlNoY0luTjBjbVZoYlZ3aUtUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdZMnhoYzNNZ1VHOXlkRVIxY0d4bGVGTjBjbVZoYlNCbGVIUmxibVJ6SUhOMGNtVmhiVjh4TGtSMWNHeGxlQ0I3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEJ2Y25RZ0xTQkJiaUJwYm5OMFlXNWpaU0J2WmlCWFpXSkZlSFJsYm5OcGIyNXpJRkoxYm5ScGJXVXVVRzl5ZEM0Z1UyVmxPbHh1SUNBZ0lDQXFJSHRBYkdsdWF5Qm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNXRiM3BwYkd4aExtOXlaeTlsYmkxVlV5OWtiMk56TDAxdmVtbHNiR0V2UVdSa0xXOXVjeTlYWldKRmVIUmxibk5wYjI1ekwwRlFTUzl5ZFc1MGFXMWxMMUJ2Y25SOVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2NHOXlkQ2tnZTF4dUlDQWdJQ0FnSUNCemRYQmxjaWg3SUc5aWFtVmpkRTF2WkdVNklIUnlkV1VnZlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNCdmNuUWdQU0J3YjNKME8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5d2IzSjBMbTl1VFdWemMyRm5aUzVoWkdSTWFYTjBaVzVsY2lnb2JYTm5LU0E5UGlCMGFHbHpMbDl2YmsxbGMzTmhaMlVvYlhObktTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzQnZjblF1YjI1RWFYTmpiMjV1WldOMExtRmtaRXhwYzNSbGJtVnlLQ2dwSUQwK0lIUm9hWE11WDI5dVJHbHpZMjl1Ym1WamRDZ3BLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRMkZzYkdKaFkyc2dkSEpwWjJkbGNtVmtJSGRvWlc0Z1lTQnRaWE56WVdkbElHbHpJSEpsWTJWcGRtVmtJR1p5YjIxY2JpQWdJQ0FnS2lCMGFHVWdjbVZ0YjNSbElGQnZjblFnWVhOemIyTnBZWFJsWkNCM2FYUm9JSFJvYVhNZ1UzUnlaV0Z0TGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzF6WnlBdElGQmhlV3h2WVdRZ1puSnZiU0IwYUdVZ2IyNU5aWE56WVdkbElHeHBjM1JsYm1WeUlHOW1JSFJvWlNCd2IzSjBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gyOXVUV1Z6YzJGblpTaHRjMmNwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRUoxWm1abGNpNXBjMEoxWm1abGNpaHRjMmNwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmtZWFJoSUQwZ1FuVm1abVZ5TG1aeWIyMG9iWE5uS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNIVnphQ2hrWVhSaEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSFZ6YUNodGMyY3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU5oYkd4aVlXTnJJSFJ5YVdkblpYSmxaQ0IzYUdWdUlIUm9aU0J5WlcxdmRHVWdVRzl5ZENCaGMzTnZZMmxoZEdWa0lIZHBkR2dnZEdocGN5QlRkSEpsWVcxY2JpQWdJQ0FnS2lCa2FYTmpiMjV1WldOMGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCZmIyNUVhWE5qYjI1dVpXTjBLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVJsYzNSeWIza29LVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSWGh3YkdsamFYUnNlU0J6WlhSeklISmxZV1FnYjNCbGNtRjBhVzl1Y3lCMGJ5QmhJRzV2TFc5d0xseHVJQ0FnSUNBcUwxeHVJQ0FnSUY5eVpXRmtLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZFc1a1pXWnBibVZrTzF4dUlDQWdJSDFjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEWVd4c1pXUWdhVzUwWlhKdVlXeHNlU0IzYUdWdUlHUmhkR0VnYzJodmRXeGtJR0psSUhkeWFYUjBaVzRnZEc4Z2RHaHBjeUIzY21sMFlXSnNaU0J6ZEhKbFlXMHVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2JYTm5JQzBnUVhKaWFYUnlZWEo1SUc5aWFtVmpkQ0IwYnlCM2NtbDBaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmxibU52WkdsdVp5QXRJRVZ1WTI5a2FXNW5JSFJ2SUhWelpTQjNhR1Z1SUhkeWFYUnBibWNnY0dGNWJHOWhaRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmpZaUF0SUVOaGJHeGxaQ0IzYUdWdUlIZHlhWFJwYm1jZ2FYTWdZMjl0Y0d4bGRHVWdiM0lnWVc0Z1pYSnliM0lnYjJOamRYSnpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gzZHlhWFJsS0cxelp5d2dYMlZ1WTI5a2FXNW5MQ0JqWWlrZ2UxeHVJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VKMVptWmxjaTVwYzBKMVptWmxjaWh0YzJjcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1pHRjBZU0E5SUcxelp5NTBiMHBUVDA0b0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoTGw5cGMwSjFabVpsY2lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjRzl5ZEM1d2IzTjBUV1Z6YzJGblpTaGtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0J2Y25RdWNHOXpkRTFsYzNOaFoyVW9iWE5uS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCallYUmphQ0FvWlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCallpaHVaWGNnUlhKeWIzSW9KMUJ2Y25SRWRYQnNaWGhUZEhKbFlXMGdMU0JrYVhOamIyNXVaV04wWldRbktTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR05pS0NrN1hHNGdJQ0FnZlZ4dWZUdGNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFdsdVpHVjRMbXB6TG0xaGNDSXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUdselFYSnlZWGtnUFNCQmNuSmhlUzVwYzBGeWNtRjVPMXh1ZG1GeUlHdGxlVXhwYzNRZ1BTQlBZbXBsWTNRdWEyVjVjenRjYm5aaGNpQm9ZWE5RY205d0lEMGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQmxjWFZoYkNoaExDQmlLU0I3WEc0Z0lHbG1JQ2hoSUQwOVBTQmlLU0J5WlhSMWNtNGdkSEoxWlR0Y2JseHVJQ0JwWmlBb1lTQW1KaUJpSUNZbUlIUjVjR1Z2WmlCaElEMDlJQ2R2WW1wbFkzUW5JQ1ltSUhSNWNHVnZaaUJpSUQwOUlDZHZZbXBsWTNRbktTQjdYRzRnSUNBZ2RtRnlJR0Z5Y2tFZ1BTQnBjMEZ5Y21GNUtHRXBYRzRnSUNBZ0lDQXNJR0Z5Y2tJZ1BTQnBjMEZ5Y21GNUtHSXBYRzRnSUNBZ0lDQXNJR2xjYmlBZ0lDQWdJQ3dnYkdWdVozUm9YRzRnSUNBZ0lDQXNJR3RsZVR0Y2JseHVJQ0FnSUdsbUlDaGhjbkpCSUNZbUlHRnlja0lwSUh0Y2JpQWdJQ0FnSUd4bGJtZDBhQ0E5SUdFdWJHVnVaM1JvTzF4dUlDQWdJQ0FnYVdZZ0tHeGxibWQwYUNBaFBTQmlMbXhsYm1kMGFDa2djbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnWm05eUlDaHBJRDBnYkdWdVozUm9PeUJwTFMwZ0lUMDlJREE3S1Z4dUlDQWdJQ0FnSUNCcFppQW9JV1Z4ZFdGc0tHRmJhVjBzSUdKYmFWMHBLU0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9ZWEp5UVNBaFBTQmhjbkpDS1NCeVpYUjFjbTRnWm1Gc2MyVTdYRzVjYmlBZ0lDQjJZWElnWkdGMFpVRWdQU0JoSUdsdWMzUmhibU5sYjJZZ1JHRjBaVnh1SUNBZ0lDQWdMQ0JrWVhSbFFpQTlJR0lnYVc1emRHRnVZMlZ2WmlCRVlYUmxPMXh1SUNBZ0lHbG1JQ2hrWVhSbFFTQWhQU0JrWVhSbFFpa2djbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJR2xtSUNoa1lYUmxRU0FtSmlCa1lYUmxRaWtnY21WMGRYSnVJR0V1WjJWMFZHbHRaU2dwSUQwOUlHSXVaMlYwVkdsdFpTZ3BPMXh1WEc0Z0lDQWdkbUZ5SUhKbFoyVjRjRUVnUFNCaElHbHVjM1JoYm1ObGIyWWdVbVZuUlhod1hHNGdJQ0FnSUNBc0lISmxaMlY0Y0VJZ1BTQmlJR2x1YzNSaGJtTmxiMllnVW1WblJYaHdPMXh1SUNBZ0lHbG1JQ2h5WldkbGVIQkJJQ0U5SUhKbFoyVjRjRUlwSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCcFppQW9jbVZuWlhod1FTQW1KaUJ5WldkbGVIQkNLU0J5WlhSMWNtNGdZUzUwYjFOMGNtbHVaeWdwSUQwOUlHSXVkRzlUZEhKcGJtY29LVHRjYmx4dUlDQWdJSFpoY2lCclpYbHpJRDBnYTJWNVRHbHpkQ2hoS1R0Y2JpQWdJQ0JzWlc1bmRHZ2dQU0JyWlhsekxteGxibWQwYUR0Y2JseHVJQ0FnSUdsbUlDaHNaVzVuZEdnZ0lUMDlJR3RsZVV4cGMzUW9ZaWt1YkdWdVozUm9LVnh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dVhHNGdJQ0FnWm05eUlDaHBJRDBnYkdWdVozUm9PeUJwTFMwZ0lUMDlJREE3S1Z4dUlDQWdJQ0FnYVdZZ0tDRm9ZWE5RY205d0xtTmhiR3dvWWl3Z2EyVjVjMXRwWFNrcElISmxkSFZ5YmlCbVlXeHpaVHRjYmx4dUlDQWdJR1p2Y2lBb2FTQTlJR3hsYm1kMGFEc2dhUzB0SUNFOVBTQXdPeWtnZTF4dUlDQWdJQ0FnYTJWNUlEMGdhMlY1YzF0cFhUdGNiaUFnSUNBZ0lHbG1JQ2doWlhGMVlXd29ZVnRyWlhsZExDQmlXMnRsZVYwcEtTQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWVNFOVBXRWdKaVlnWWlFOVBXSTdYRzU5TzF4dUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNWpiMjV6ZENCcGMxTjBjbVZoYlNBOUlITjBjbVZoYlNBOVBseHVYSFJ6ZEhKbFlXMGdJVDA5SUc1MWJHd2dKaVpjYmx4MGRIbHdaVzltSUhOMGNtVmhiU0E5UFQwZ0oyOWlhbVZqZENjZ0ppWmNibHgwZEhsd1pXOW1JSE4wY21WaGJTNXdhWEJsSUQwOVBTQW5ablZ1WTNScGIyNG5PMXh1WEc1cGMxTjBjbVZoYlM1M2NtbDBZV0pzWlNBOUlITjBjbVZoYlNBOVBseHVYSFJwYzFOMGNtVmhiU2h6ZEhKbFlXMHBJQ1ltWEc1Y2RITjBjbVZoYlM1M2NtbDBZV0pzWlNBaFBUMGdabUZzYzJVZ0ppWmNibHgwZEhsd1pXOW1JSE4wY21WaGJTNWZkM0pwZEdVZ1BUMDlJQ2RtZFc1amRHbHZiaWNnSmlaY2JseDBkSGx3Wlc5bUlITjBjbVZoYlM1ZmQzSnBkR0ZpYkdWVGRHRjBaU0E5UFQwZ0oyOWlhbVZqZENjN1hHNWNibWx6VTNSeVpXRnRMbkpsWVdSaFlteGxJRDBnYzNSeVpXRnRJRDArWEc1Y2RHbHpVM1J5WldGdEtITjBjbVZoYlNrZ0ppWmNibHgwYzNSeVpXRnRMbkpsWVdSaFlteGxJQ0U5UFNCbVlXeHpaU0FtSmx4dVhIUjBlWEJsYjJZZ2MzUnlaV0Z0TGw5eVpXRmtJRDA5UFNBblpuVnVZM1JwYjI0bklDWW1YRzVjZEhSNWNHVnZaaUJ6ZEhKbFlXMHVYM0psWVdSaFlteGxVM1JoZEdVZ1BUMDlJQ2R2WW1wbFkzUW5PMXh1WEc1cGMxTjBjbVZoYlM1a2RYQnNaWGdnUFNCemRISmxZVzBnUFQ1Y2JseDBhWE5UZEhKbFlXMHVkM0pwZEdGaWJHVW9jM1J5WldGdEtTQW1KbHh1WEhScGMxTjBjbVZoYlM1eVpXRmtZV0pzWlNoemRISmxZVzBwTzF4dVhHNXBjMU4wY21WaGJTNTBjbUZ1YzJadmNtMGdQU0J6ZEhKbFlXMGdQVDVjYmx4MGFYTlRkSEpsWVcwdVpIVndiR1Y0S0hOMGNtVmhiU2tnSmlaY2JseDBkSGx3Wlc5bUlITjBjbVZoYlM1ZmRISmhibk5tYjNKdElEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbVhHNWNkSFI1Y0dWdlppQnpkSEpsWVcwdVgzUnlZVzV6Wm05eWJWTjBZWFJsSUQwOVBTQW5iMkpxWldOMEp6dGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JwYzFOMGNtVmhiVHRjYmlJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVZMjl1YzNRZ2NtVmhaR0ZpYkdWZmMzUnlaV0Z0WHpFZ1BTQnlaWEYxYVhKbEtGd2ljbVZoWkdGaWJHVXRjM1J5WldGdFhDSXBPMXh1THlvcVhHNGdLaUJVWVd0bGN5QmhJRXB6YjI1U2NHTkZibWRwYm1VZ1lXNWtJSEpsZEhWeWJuTWdZU0JFZFhCc1pYZ2djM1J5WldGdElIZHlZWEJ3YVc1bklHbDBMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQnZjSFJ6SUMwZ1QzQjBhVzl1Y3lCaVlXY3VYRzRnS2lCQWNHRnlZVzBnYjNCMGN5NWxibWRwYm1VZ0xTQlVhR1VnU25OdmJsSndZMFZ1WjJsdVpTQjBieUIzY21Gd0lHbHVJR0VnYzNSeVpXRnRMbHh1SUNvZ1FISmxkSFZ5Ym5NZ1ZHaGxJSE4wY21WaGJTQjNjbUZ3Y0dsdVp5QjBhR1VnWlc1bmFXNWxMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWRmJtZHBibVZUZEhKbFlXMG9iM0IwY3lrZ2UxeHVJQ0FnSUdsbUlDZ2hiM0IwY3lCOGZDQWhiM0IwY3k1bGJtZHBibVVwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkTmFYTnphVzVuSUdWdVoybHVaU0J3WVhKaGJXVjBaWEloSnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR052Ym5OMElIc2daVzVuYVc1bElIMGdQU0J2Y0hSek8xeHVJQ0FnSUdOdmJuTjBJSE4wY21WaGJTQTlJRzVsZHlCeVpXRmtZV0pzWlY5emRISmxZVzFmTVM1RWRYQnNaWGdvZXlCdlltcGxZM1JOYjJSbE9pQjBjblZsTENCeVpXRmtMQ0IzY21sMFpTQjlLVHRjYmlBZ0lDQXZMeUJtYjNKM1lYSmtJRzV2ZEdsbWFXTmhkR2x2Ym5OY2JpQWdJQ0JwWmlBb1pXNW5hVzVsTG05dUtTQjdYRzRnSUNBZ0lDQWdJR1Z1WjJsdVpTNXZiaWduYm05MGFXWnBZMkYwYVc5dUp5d2dLRzFsYzNOaFoyVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4wY21WaGJTNXdkWE5vS0cxbGMzTmhaMlVwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSE4wY21WaGJUdGNiaUFnSUNCbWRXNWpkR2x2YmlCeVpXRmtLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZFc1a1pXWnBibVZrTzF4dUlDQWdJSDFjYmlBZ0lDQm1kVzVqZEdsdmJpQjNjbWwwWlNoeVpYRXNJRjlsYm1OdlpHbHVaeXdnWTJJcElIdGNiaUFnSUNBZ0lDQWdaVzVuYVc1bExtaGhibVJzWlNoeVpYRXNJQ2hmWlhKeUxDQnlaWE1wSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMGNtVmhiUzV3ZFhOb0tISmxjeWs3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQmpZaWdwTzF4dUlDQWdJSDFjYm4xY2JtVjRjRzl5ZEhNdVpHVm1ZWFZzZENBOUlHTnlaV0YwWlVWdVoybHVaVk4wY21WaGJUdGNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFdOeVpXRjBaVVZ1WjJsdVpWTjBjbVZoYlM1cWN5NXRZWEFpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYm5aaGNpQmZYMmx0Y0c5eWRFUmxabUYxYkhRZ1BTQW9kR2hwY3lBbUppQjBhR2x6TGw5ZmFXMXdiM0owUkdWbVlYVnNkQ2tnZkh3Z1puVnVZM1JwYjI0Z0tHMXZaQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQW9iVzlrSUNZbUlHMXZaQzVmWDJWelRXOWtkV3hsS1NBL0lHMXZaQ0E2SUhzZ1hDSmtaV1poZFd4MFhDSTZJRzF2WkNCOU8xeHVmVHRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2V5QjJZV3gxWlRvZ2RISjFaU0I5S1R0Y2JtTnZibk4wSUhOaFptVmZaWFpsYm5SZlpXMXBkSFJsY2w4eElEMGdYMTlwYlhCdmNuUkVaV1poZFd4MEtISmxjWFZwY21Vb1hDSkFiV1YwWVcxaGMyc3ZjMkZtWlMxbGRtVnVkQzFsYldsMGRHVnlYQ0lwS1R0Y2JtTnZibk4wSUhKbFlXUmhZbXhsWDNOMGNtVmhiVjh4SUQwZ2NtVnhkV2x5WlNoY0luSmxZV1JoWW14bExYTjBjbVZoYlZ3aUtUdGNiaThxS2x4dUlDb2dRM0psWVhSbGN5QmhJRXB6YjI1U2NHTkZibWRwYm1VZ2JXbGtaR3hsZDJGeVpTQjNhWFJvSUdGdUlHRnpjMjlqYVdGMFpXUWdSSFZ3YkdWNElITjBjbVZoYlNCaGJtUmNiaUFxSUVWMlpXNTBSVzFwZEhSbGNpNGdWR2hsSUcxcFpHUnNaWGRoY21Vc0lHRnVaQ0JpZVNCbGVIUmxibk5wYjI0Z2MzUnlaV0Z0TENCaGMzTjFiV1VnZEdoaGRDQnRhV1JrYkdWM1lYSmxYRzRnS2lCd1lYSmhiV1YwWlhKeklHRnlaU0J3Y205d1pYSnNlU0JtYjNKdFlYUjBaV1F1SUU1dklISjFiblJwYldVZ2RIbHdaU0JqYUdWamEybHVaeUJ2Y2lCMllXeHBaR0YwYVc5dUlHbHpYRzRnS2lCd1pYSm1iM0p0WldRdVhHNGdLbHh1SUNvZ1FISmxkSFZ5Ym5NZ1ZHaGxJR1YyWlc1MElHVnRhWFIwWlhJc0lHMXBaR1JzWlhkaGNtVXNJR0Z1WkNCemRISmxZVzB1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR055WldGMFpWTjBjbVZoYlUxcFpHUnNaWGRoY21Vb0tTQjdYRzRnSUNBZ1kyOXVjM1FnYVdSTllYQWdQU0I3ZlR0Y2JpQWdJQ0JqYjI1emRDQnpkSEpsWVcwZ1BTQnVaWGNnY21WaFpHRmliR1ZmYzNSeVpXRnRYekV1UkhWd2JHVjRLSHRjYmlBZ0lDQWdJQ0FnYjJKcVpXTjBUVzlrWlRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnY21WaFpEb2djbVZoWkU1dmIzQXNYRzRnSUNBZ0lDQWdJSGR5YVhSbE9pQndjbTlqWlhOelRXVnpjMkZuWlN4Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0JqYjI1emRDQmxkbVZ1ZEhNZ1BTQnVaWGNnYzJGbVpWOWxkbVZ1ZEY5bGJXbDBkR1Z5WHpFdVpHVm1ZWFZzZENncE8xeHVJQ0FnSUdOdmJuTjBJRzFwWkdSc1pYZGhjbVVnUFNBb2NtVnhMQ0J5WlhNc0lHNWxlSFFzSUdWdVpDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBdkx5QjNjbWwwWlNCeVpYRWdkRzhnYzNSeVpXRnRYRzRnSUNBZ0lDQWdJSE4wY21WaGJTNXdkWE5vS0hKbGNTazdYRzRnSUNBZ0lDQWdJQzh2SUhKbFoybHpkR1Z5SUhKbGNYVmxjM1FnYjI0Z2FXUWdiV0Z3WEc0Z0lDQWdJQ0FnSUdsa1RXRndXM0psY1M1cFpGMGdQU0I3SUhKbGNTd2djbVZ6TENCdVpYaDBMQ0JsYm1RZ2ZUdGNiaUFnSUNCOU8xeHVJQ0FnSUhKbGRIVnliaUI3SUdWMlpXNTBjeXdnYldsa1pHeGxkMkZ5WlN3Z2MzUnlaV0Z0SUgwN1hHNGdJQ0FnWm5WdVkzUnBiMjRnY21WaFpFNXZiM0FvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQjlYRzRnSUNBZ1puVnVZM1JwYjI0Z2NISnZZMlZ6YzAxbGMzTmhaMlVvY21WekxDQmZaVzVqYjJScGJtY3NJR05pS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JsY25JN1hHNGdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCcGMwNXZkR2xtYVdOaGRHbHZiaUE5SUNGeVpYTXVhV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVhOT2IzUnBabWxqWVhScGIyNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205alpYTnpUbTkwYVdacFkyRjBhVzl1S0hKbGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbTlqWlhOelVtVnpjRzl1YzJVb2NtVnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JqWVhSamFDQW9YMlZ5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhKeUlEMGdYMlZ5Y2p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXZMeUJqYjI1MGFXNTFaU0J3Y205alpYTnphVzVuSUhOMGNtVmhiVnh1SUNBZ0lDQWdJQ0JqWWlobGNuSXBPMXh1SUNBZ0lIMWNiaUFnSUNCbWRXNWpkR2x2YmlCd2NtOWpaWE56VW1WemNHOXVjMlVvY21WektTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHTnZiblJsZUhRZ1BTQnBaRTFoY0Z0eVpYTXVhV1JkTzF4dUlDQWdJQ0FnSUNCcFppQW9JV052Ym5SbGVIUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ1UzUnlaV0Z0VFdsa1pHeGxkMkZ5WlNBdElGVnVhMjV2ZDI0Z2NtVnpjRzl1YzJVZ2FXUWdYQ0lrZTNKbGN5NXBaSDFjSW1BcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1JsYkdWMFpTQnBaRTFoY0Z0eVpYTXVhV1JkTzF4dUlDQWdJQ0FnSUNBdkx5QmpiM0I1SUhkb2IyeGxJSEpsY3lCdmJuUnZJRzl5YVdkcGJtRnNJSEpsYzF4dUlDQWdJQ0FnSUNCUFltcGxZM1F1WVhOemFXZHVLR052Ym5SbGVIUXVjbVZ6TENCeVpYTXBPMXh1SUNBZ0lDQWdJQ0F2THlCeWRXNGdZMkZzYkdKaFkyc2diMjRnWlcxd2RIa2djM1JoWTJzc1hHNGdJQ0FnSUNBZ0lDOHZJSEJ5WlhabGJuUWdhVzUwWlhKdVlXd2djM1J5WldGdExXaGhibVJzWlhJZ1puSnZiU0JqWVhSamFHbHVaeUJsY25KdmNuTmNiaUFnSUNBZ0lDQWdjMlYwVkdsdFpXOTFkQ2hqYjI1MFpYaDBMbVZ1WkNrN1hHNGdJQ0FnZlZ4dUlDQWdJR1oxYm1OMGFXOXVJSEJ5YjJObGMzTk9iM1JwWm1sallYUnBiMjRvY21WektTQjdYRzRnSUNBZ0lDQWdJR1YyWlc1MGN5NWxiV2wwS0NkdWIzUnBabWxqWVhScGIyNG5MQ0J5WlhNcE8xeHVJQ0FnSUgxY2JuMWNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJR055WldGMFpWTjBjbVZoYlUxcFpHUnNaWGRoY21VN1hHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFqY21WaGRHVlRkSEpsWVcxTmFXUmtiR1YzWVhKbExtcHpMbTFoY0NJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dWRtRnlJRjlmYVcxd2IzSjBSR1ZtWVhWc2RDQTlJQ2gwYUdseklDWW1JSFJvYVhNdVgxOXBiWEJ2Y25SRVpXWmhkV3gwS1NCOGZDQm1kVzVqZEdsdmJpQW9iVzlrS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2h0YjJRZ0ppWWdiVzlrTGw5ZlpYTk5iMlIxYkdVcElEOGdiVzlrSURvZ2V5QmNJbVJsWm1GMWJIUmNJam9nYlc5a0lIMDdYRzU5TzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVaWGh3YjNKMGN5NWpjbVZoZEdWVGRISmxZVzFOYVdSa2JHVjNZWEpsSUQwZ1pYaHdiM0owY3k1amNtVmhkR1ZGYm1kcGJtVlRkSEpsWVcwZ1BTQjJiMmxrSURBN1hHNWpiMjV6ZENCamNtVmhkR1ZGYm1kcGJtVlRkSEpsWVcxZk1TQTlJRjlmYVcxd2IzSjBSR1ZtWVhWc2RDaHlaWEYxYVhKbEtGd2lMaTlqY21WaGRHVkZibWRwYm1WVGRISmxZVzFjSWlrcE8xeHVaWGh3YjNKMGN5NWpjbVZoZEdWRmJtZHBibVZUZEhKbFlXMGdQU0JqY21WaGRHVkZibWRwYm1WVGRISmxZVzFmTVM1a1pXWmhkV3gwTzF4dVkyOXVjM1FnWTNKbFlYUmxVM1J5WldGdFRXbGtaR3hsZDJGeVpWOHhJRDBnWDE5cGJYQnZjblJFWldaaGRXeDBLSEpsY1hWcGNtVW9YQ0l1TDJOeVpXRjBaVk4wY21WaGJVMXBaR1JzWlhkaGNtVmNJaWtwTzF4dVpYaHdiM0owY3k1amNtVmhkR1ZUZEhKbFlXMU5hV1JrYkdWM1lYSmxJRDBnWTNKbFlYUmxVM1J5WldGdFRXbGtaR3hsZDJGeVpWOHhMbVJsWm1GMWJIUTdYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxcGJtUmxlQzVxY3k1dFlYQWlMQ0luZFhObElITjBjbWxqZENkY2JseHVaWGh3YjNKMGN5NWllWFJsVEdWdVozUm9JRDBnWW5sMFpVeGxibWQwYUZ4dVpYaHdiM0owY3k1MGIwSjVkR1ZCY25KaGVTQTlJSFJ2UW5sMFpVRnljbUY1WEc1bGVIQnZjblJ6TG1aeWIyMUNlWFJsUVhKeVlYa2dQU0JtY205dFFubDBaVUZ5Y21GNVhHNWNiblpoY2lCc2IyOXJkWEFnUFNCYlhWeHVkbUZ5SUhKbGRreHZiMnQxY0NBOUlGdGRYRzUyWVhJZ1FYSnlJRDBnZEhsd1pXOW1JRlZwYm5RNFFYSnlZWGtnSVQwOUlDZDFibVJsWm1sdVpXUW5JRDhnVldsdWREaEJjbkpoZVNBNklFRnljbUY1WEc1Y2JuWmhjaUJqYjJSbElEMGdKMEZDUTBSRlJrZElTVXBMVEUxT1QxQlJVbE5VVlZaWFdGbGFZV0pqWkdWbVoyaHBhbXRzYlc1dmNIRnljM1IxZG5kNGVYb3dNVEl6TkRVMk56ZzVLeThuWEc1bWIzSWdLSFpoY2lCcElEMGdNQ3dnYkdWdUlEMGdZMjlrWlM1c1pXNW5kR2c3SUdrZ1BDQnNaVzQ3SUNzcmFTa2dlMXh1SUNCc2IyOXJkWEJiYVYwZ1BTQmpiMlJsVzJsZFhHNGdJSEpsZGt4dmIydDFjRnRqYjJSbExtTm9ZWEpEYjJSbFFYUW9hU2xkSUQwZ2FWeHVmVnh1WEc0dkx5QlRkWEJ3YjNKMElHUmxZMjlrYVc1bklGVlNUQzF6WVdabElHSmhjMlUyTkNCemRISnBibWR6TENCaGN5Qk9iMlJsTG1weklHUnZaWE11WEc0dkx5QlRaV1U2SUdoMGRIQnpPaTh2Wlc0dWQybHJhWEJsWkdsaExtOXlaeTkzYVd0cEwwSmhjMlUyTkNOVlVreGZZWEJ3YkdsallYUnBiMjV6WEc1eVpYWk1iMjlyZFhCYkp5MG5MbU5vWVhKRGIyUmxRWFFvTUNsZElEMGdOakpjYm5KbGRreHZiMnQxY0Zzblh5Y3VZMmhoY2tOdlpHVkJkQ2d3S1YwZ1BTQTJNMXh1WEc1bWRXNWpkR2x2YmlCblpYUk1aVzV6SUNoaU5qUXBJSHRjYmlBZ2RtRnlJR3hsYmlBOUlHSTJOQzVzWlc1bmRHaGNibHh1SUNCcFppQW9iR1Z1SUNVZ05DQStJREFwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMGx1ZG1Gc2FXUWdjM1J5YVc1bkxpQk1aVzVuZEdnZ2JYVnpkQ0JpWlNCaElHMTFiSFJwY0d4bElHOW1JRFFuS1Z4dUlDQjlYRzVjYmlBZ0x5OGdWSEpwYlNCdlptWWdaWGgwY21FZ1lubDBaWE1nWVdaMFpYSWdjR3hoWTJWb2IyeGtaWElnWW5sMFpYTWdZWEpsSUdadmRXNWtYRzRnSUM4dklGTmxaVG9nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJKbFlYUm5ZVzF0YVhRdlltRnpaVFkwTFdwekwybHpjM1ZsY3k4ME1seHVJQ0IyWVhJZ2RtRnNhV1JNWlc0Z1BTQmlOalF1YVc1a1pYaFBaaWduUFNjcFhHNGdJR2xtSUNoMllXeHBaRXhsYmlBOVBUMGdMVEVwSUhaaGJHbGtUR1Z1SUQwZ2JHVnVYRzVjYmlBZ2RtRnlJSEJzWVdObFNHOXNaR1Z5YzB4bGJpQTlJSFpoYkdsa1RHVnVJRDA5UFNCc1pXNWNiaUFnSUNBL0lEQmNiaUFnSUNBNklEUWdMU0FvZG1Gc2FXUk1aVzRnSlNBMEtWeHVYRzRnSUhKbGRIVnliaUJiZG1Gc2FXUk1aVzRzSUhCc1lXTmxTRzlzWkdWeWMweGxibDFjYm4xY2JseHVMeThnWW1GelpUWTBJR2x6SURRdk15QXJJSFZ3SUhSdklIUjNieUJqYUdGeVlXTjBaWEp6SUc5bUlIUm9aU0J2Y21sbmFXNWhiQ0JrWVhSaFhHNW1kVzVqZEdsdmJpQmllWFJsVEdWdVozUm9JQ2hpTmpRcElIdGNiaUFnZG1GeUlHeGxibk1nUFNCblpYUk1aVzV6S0dJMk5DbGNiaUFnZG1GeUlIWmhiR2xrVEdWdUlEMGdiR1Z1YzFzd1hWeHVJQ0IyWVhJZ2NHeGhZMlZJYjJ4a1pYSnpUR1Z1SUQwZ2JHVnVjMXN4WFZ4dUlDQnlaWFIxY200Z0tDaDJZV3hwWkV4bGJpQXJJSEJzWVdObFNHOXNaR1Z5YzB4bGJpa2dLaUF6SUM4Z05Da2dMU0J3YkdGalpVaHZiR1JsY25OTVpXNWNibjFjYmx4dVpuVnVZM1JwYjI0Z1gySjVkR1ZNWlc1bmRHZ2dLR0kyTkN3Z2RtRnNhV1JNWlc0c0lIQnNZV05sU0c5c1pHVnljMHhsYmlrZ2UxeHVJQ0J5WlhSMWNtNGdLQ2gyWVd4cFpFeGxiaUFySUhCc1lXTmxTRzlzWkdWeWMweGxiaWtnS2lBeklDOGdOQ2tnTFNCd2JHRmpaVWh2YkdSbGNuTk1aVzVjYm4xY2JseHVablZ1WTNScGIyNGdkRzlDZVhSbFFYSnlZWGtnS0dJMk5Da2dlMXh1SUNCMllYSWdkRzF3WEc0Z0lIWmhjaUJzWlc1eklEMGdaMlYwVEdWdWN5aGlOalFwWEc0Z0lIWmhjaUIyWVd4cFpFeGxiaUE5SUd4bGJuTmJNRjFjYmlBZ2RtRnlJSEJzWVdObFNHOXNaR1Z5YzB4bGJpQTlJR3hsYm5OYk1WMWNibHh1SUNCMllYSWdZWEp5SUQwZ2JtVjNJRUZ5Y2loZllubDBaVXhsYm1kMGFDaGlOalFzSUhaaGJHbGtUR1Z1TENCd2JHRmpaVWh2YkdSbGNuTk1aVzRwS1Z4dVhHNGdJSFpoY2lCamRYSkNlWFJsSUQwZ01GeHVYRzRnSUM4dklHbG1JSFJvWlhKbElHRnlaU0J3YkdGalpXaHZiR1JsY25Nc0lHOXViSGtnWjJWMElIVndJSFJ2SUhSb1pTQnNZWE4wSUdOdmJYQnNaWFJsSURRZ1kyaGhjbk5jYmlBZ2RtRnlJR3hsYmlBOUlIQnNZV05sU0c5c1pHVnljMHhsYmlBK0lEQmNiaUFnSUNBL0lIWmhiR2xrVEdWdUlDMGdORnh1SUNBZ0lEb2dkbUZzYVdSTVpXNWNibHh1SUNCMllYSWdhVnh1SUNCbWIzSWdLR2tnUFNBd095QnBJRHdnYkdWdU95QnBJQ3M5SURRcElIdGNiaUFnSUNCMGJYQWdQVnh1SUNBZ0lDQWdLSEpsZGt4dmIydDFjRnRpTmpRdVkyaGhja052WkdWQmRDaHBLVjBnUER3Z01UZ3BJSHhjYmlBZ0lDQWdJQ2h5WlhaTWIyOXJkWEJiWWpZMExtTm9ZWEpEYjJSbFFYUW9hU0FySURFcFhTQThQQ0F4TWlrZ2ZGeHVJQ0FnSUNBZ0tISmxka3h2YjJ0MWNGdGlOalF1WTJoaGNrTnZaR1ZCZENocElDc2dNaWxkSUR3OElEWXBJSHhjYmlBZ0lDQWdJSEpsZGt4dmIydDFjRnRpTmpRdVkyaGhja052WkdWQmRDaHBJQ3NnTXlsZFhHNGdJQ0FnWVhKeVcyTjFja0o1ZEdVcksxMGdQU0FvZEcxd0lENCtJREUyS1NBbUlEQjRSa1pjYmlBZ0lDQmhjbkpiWTNWeVFubDBaU3NyWFNBOUlDaDBiWEFnUGo0Z09Da2dKaUF3ZUVaR1hHNGdJQ0FnWVhKeVcyTjFja0o1ZEdVcksxMGdQU0IwYlhBZ0ppQXdlRVpHWEc0Z0lIMWNibHh1SUNCcFppQW9jR3hoWTJWSWIyeGtaWEp6VEdWdUlEMDlQU0F5S1NCN1hHNGdJQ0FnZEcxd0lEMWNiaUFnSUNBZ0lDaHlaWFpNYjI5cmRYQmJZalkwTG1Ob1lYSkRiMlJsUVhRb2FTbGRJRHc4SURJcElIeGNiaUFnSUNBZ0lDaHlaWFpNYjI5cmRYQmJZalkwTG1Ob1lYSkRiMlJsUVhRb2FTQXJJREVwWFNBK1BpQTBLVnh1SUNBZ0lHRnljbHRqZFhKQ2VYUmxLeXRkSUQwZ2RHMXdJQ1lnTUhoR1JseHVJQ0I5WEc1Y2JpQWdhV1lnS0hCc1lXTmxTRzlzWkdWeWMweGxiaUE5UFQwZ01Ta2dlMXh1SUNBZ0lIUnRjQ0E5WEc0Z0lDQWdJQ0FvY21WMlRHOXZhM1Z3VzJJMk5DNWphR0Z5UTI5a1pVRjBLR2twWFNBOFBDQXhNQ2tnZkZ4dUlDQWdJQ0FnS0hKbGRreHZiMnQxY0Z0aU5qUXVZMmhoY2tOdlpHVkJkQ2hwSUNzZ01TbGRJRHc4SURRcElIeGNiaUFnSUNBZ0lDaHlaWFpNYjI5cmRYQmJZalkwTG1Ob1lYSkRiMlJsUVhRb2FTQXJJRElwWFNBK1BpQXlLVnh1SUNBZ0lHRnljbHRqZFhKQ2VYUmxLeXRkSUQwZ0tIUnRjQ0ErUGlBNEtTQW1JREI0UmtaY2JpQWdJQ0JoY25KYlkzVnlRbmwwWlNzclhTQTlJSFJ0Y0NBbUlEQjRSa1pjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJoY25KY2JuMWNibHh1Wm5WdVkzUnBiMjRnZEhKcGNHeGxkRlJ2UW1GelpUWTBJQ2h1ZFcwcElIdGNiaUFnY21WMGRYSnVJR3h2YjJ0MWNGdHVkVzBnUGo0Z01UZ2dKaUF3ZUROR1hTQXJYRzRnSUNBZ2JHOXZhM1Z3VzI1MWJTQStQaUF4TWlBbUlEQjRNMFpkSUN0Y2JpQWdJQ0JzYjI5cmRYQmJiblZ0SUQ0K0lEWWdKaUF3ZUROR1hTQXJYRzRnSUNBZ2JHOXZhM1Z3VzI1MWJTQW1JREI0TTBaZFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdWdVkyOWtaVU5vZFc1cklDaDFhVzUwT0N3Z2MzUmhjblFzSUdWdVpDa2dlMXh1SUNCMllYSWdkRzF3WEc0Z0lIWmhjaUJ2ZFhSd2RYUWdQU0JiWFZ4dUlDQm1iM0lnS0haaGNpQnBJRDBnYzNSaGNuUTdJR2tnUENCbGJtUTdJR2tnS3owZ015a2dlMXh1SUNBZ0lIUnRjQ0E5WEc0Z0lDQWdJQ0FvS0hWcGJuUTRXMmxkSUR3OElERTJLU0FtSURCNFJrWXdNREF3S1NBclhHNGdJQ0FnSUNBb0tIVnBiblE0VzJrZ0t5QXhYU0E4UENBNEtTQW1JREI0UmtZd01Da2dLMXh1SUNBZ0lDQWdLSFZwYm5RNFcya2dLeUF5WFNBbUlEQjRSa1lwWEc0Z0lDQWdiM1YwY0hWMExuQjFjMmdvZEhKcGNHeGxkRlJ2UW1GelpUWTBLSFJ0Y0NrcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUc5MWRIQjFkQzVxYjJsdUtDY25LVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm1jbTl0UW5sMFpVRnljbUY1SUNoMWFXNTBPQ2tnZTF4dUlDQjJZWElnZEcxd1hHNGdJSFpoY2lCc1pXNGdQU0IxYVc1ME9DNXNaVzVuZEdoY2JpQWdkbUZ5SUdWNGRISmhRbmwwWlhNZ1BTQnNaVzRnSlNBeklDOHZJR2xtSUhkbElHaGhkbVVnTVNCaWVYUmxJR3hsWm5Rc0lIQmhaQ0F5SUdKNWRHVnpYRzRnSUhaaGNpQndZWEowY3lBOUlGdGRYRzRnSUhaaGNpQnRZWGhEYUhWdWEweGxibWQwYUNBOUlERTJNemd6SUM4dklHMTFjM1FnWW1VZ2JYVnNkR2x3YkdVZ2IyWWdNMXh1WEc0Z0lDOHZJR2R2SUhSb2NtOTFaMmdnZEdobElHRnljbUY1SUdWMlpYSjVJSFJvY21WbElHSjVkR1Z6TENCM1pTZHNiQ0JrWldGc0lIZHBkR2dnZEhKaGFXeHBibWNnYzNSMVptWWdiR0YwWlhKY2JpQWdabTl5SUNoMllYSWdhU0E5SURBc0lHeGxiaklnUFNCc1pXNGdMU0JsZUhSeVlVSjVkR1Z6T3lCcElEd2diR1Z1TWpzZ2FTQXJQU0J0WVhoRGFIVnVhMHhsYm1kMGFDa2dlMXh1SUNBZ0lIQmhjblJ6TG5CMWMyZ29aVzVqYjJSbFEyaDFibXNvZFdsdWREZ3NJR2tzSUNocElDc2diV0Y0UTJoMWJtdE1aVzVuZEdncElENGdiR1Z1TWlBL0lHeGxiaklnT2lBb2FTQXJJRzFoZUVOb2RXNXJUR1Z1WjNSb0tTa3BYRzRnSUgxY2JseHVJQ0F2THlCd1lXUWdkR2hsSUdWdVpDQjNhWFJvSUhwbGNtOXpMQ0JpZFhRZ2JXRnJaU0J6ZFhKbElIUnZJRzV2ZENCbWIzSm5aWFFnZEdobElHVjRkSEpoSUdKNWRHVnpYRzRnSUdsbUlDaGxlSFJ5WVVKNWRHVnpJRDA5UFNBeEtTQjdYRzRnSUNBZ2RHMXdJRDBnZFdsdWREaGJiR1Z1SUMwZ01WMWNiaUFnSUNCd1lYSjBjeTV3ZFhOb0tGeHVJQ0FnSUNBZ2JHOXZhM1Z3VzNSdGNDQStQaUF5WFNBclhHNGdJQ0FnSUNCc2IyOXJkWEJiS0hSdGNDQThQQ0EwS1NBbUlEQjRNMFpkSUN0Y2JpQWdJQ0FnSUNjOVBTZGNiaUFnSUNBcFhHNGdJSDBnWld4elpTQnBaaUFvWlhoMGNtRkNlWFJsY3lBOVBUMGdNaWtnZTF4dUlDQWdJSFJ0Y0NBOUlDaDFhVzUwT0Z0c1pXNGdMU0F5WFNBOFBDQTRLU0FySUhWcGJuUTRXMnhsYmlBdElERmRYRzRnSUNBZ2NHRnlkSE11Y0hWemFDaGNiaUFnSUNBZ0lHeHZiMnQxY0Z0MGJYQWdQajRnTVRCZElDdGNiaUFnSUNBZ0lHeHZiMnQxY0Zzb2RHMXdJRDQrSURRcElDWWdNSGd6UmwwZ0sxeHVJQ0FnSUNBZ2JHOXZhM1Z3V3loMGJYQWdQRHdnTWlrZ0ppQXdlRE5HWFNBclhHNGdJQ0FnSUNBblBTZGNiaUFnSUNBcFhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2NHRnlkSE11YW05cGJpZ25KeWxjYm4xY2JpSXNJaUlzSWk4cUlWeHVJQ29nVkdobElHSjFabVpsY2lCdGIyUjFiR1VnWm5KdmJTQnViMlJsTG1wekxDQm1iM0lnZEdobElHSnliM2R6WlhJdVhHNGdLbHh1SUNvZ1FHRjFkR2h2Y2lBZ0lFWmxjbTl6Y3lCQlltOTFhMmhoWkdscVpXZ2dQR2gwZEhCek9pOHZabVZ5YjNOekxtOXlaejVjYmlBcUlFQnNhV05sYm5ObElDQk5TVlJjYmlBcUwxeHVMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVWdibTh0Y0hKdmRHOGdLaTljYmx4dUozVnpaU0J6ZEhKcFkzUW5YRzVjYm5aaGNpQmlZWE5sTmpRZ1BTQnlaWEYxYVhKbEtDZGlZWE5sTmpRdGFuTW5LVnh1ZG1GeUlHbGxaV1UzTlRRZ1BTQnlaWEYxYVhKbEtDZHBaV1ZsTnpVMEp5bGNibHh1Wlhod2IzSjBjeTVDZFdabVpYSWdQU0JDZFdabVpYSmNibVY0Y0c5eWRITXVVMnh2ZDBKMVptWmxjaUE5SUZOc2IzZENkV1ptWlhKY2JtVjRjRzl5ZEhNdVNVNVRVRVZEVkY5TlFWaGZRbGxVUlZNZ1BTQTFNRnh1WEc1MllYSWdTMTlOUVZoZlRFVk9SMVJJSUQwZ01IZzNabVptWm1abVpseHVaWGh3YjNKMGN5NXJUV0Y0VEdWdVozUm9JRDBnUzE5TlFWaGZURVZPUjFSSVhHNWNiaThxS2x4dUlDb2dTV1lnWUVKMVptWmxjaTVVV1ZCRlJGOUJVbEpCV1Y5VFZWQlFUMUpVWURwY2JpQXFJQ0FnUFQwOUlIUnlkV1VnSUNBZ1ZYTmxJRlZwYm5RNFFYSnlZWGtnYVcxd2JHVnRaVzUwWVhScGIyNGdLR1poYzNSbGMzUXBYRzRnS2lBZ0lEMDlQU0JtWVd4elpTQWdJRkJ5YVc1MElIZGhjbTVwYm1jZ1lXNWtJSEpsWTI5dGJXVnVaQ0IxYzJsdVp5QmdZblZtWm1WeVlDQjJOQzU0SUhkb2FXTm9JR2hoY3lCaGJpQlBZbXBsWTNSY2JpQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXMXdiR1Z0Wlc1MFlYUnBiMjRnS0cxdmMzUWdZMjl0Y0dGMGFXSnNaU3dnWlhabGJpQkpSVFlwWEc0Z0tseHVJQ29nUW5KdmQzTmxjbk1nZEdoaGRDQnpkWEJ3YjNKMElIUjVjR1ZrSUdGeWNtRjVjeUJoY21VZ1NVVWdNVEFyTENCR2FYSmxabTk0SURRckxDQkRhSEp2YldVZ055c3NJRk5oWm1GeWFTQTFMakVyTEZ4dUlDb2dUM0JsY21FZ01URXVOaXNzSUdsUFV5QTBMaklyTGx4dUlDcGNiaUFxSUZkbElISmxjRzl5ZENCMGFHRjBJSFJvWlNCaWNtOTNjMlZ5SUdSdlpYTWdibTkwSUhOMWNIQnZjblFnZEhsd1pXUWdZWEp5WVhseklHbG1JSFJvWlNCaGNtVWdibTkwSUhOMVltTnNZWE56WVdKc1pWeHVJQ29nZFhOcGJtY2dYMTl3Y205MGIxOWZMaUJHYVhKbFptOTRJRFF0TWprZ2JHRmphM01nYzNWd2NHOXlkQ0JtYjNJZ1lXUmthVzVuSUc1bGR5QndjbTl3WlhKMGFXVnpJSFJ2SUdCVmFXNTBPRUZ5Y21GNVlGeHVJQ29nS0ZObFpUb2dhSFIwY0hNNkx5OWlkV2Q2YVd4c1lTNXRiM3BwYkd4aExtOXlaeTl6YUc5M1gySjFaeTVqWjJrL2FXUTlOamsxTkRNNEtTNGdTVVVnTVRBZ2JHRmphM01nYzNWd2NHOXlkRnh1SUNvZ1ptOXlJRjlmY0hKdmRHOWZYeUJoYm1RZ2FHRnpJR0VnWW5Wbloza2dkSGx3WldRZ1lYSnlZWGtnYVcxd2JHVnRaVzUwWVhScGIyNHVYRzRnS2k5Y2JrSjFabVpsY2k1VVdWQkZSRjlCVWxKQldWOVRWVkJRVDFKVUlEMGdkSGx3WldSQmNuSmhlVk4xY0hCdmNuUW9LVnh1WEc1cFppQW9JVUoxWm1abGNpNVVXVkJGUkY5QlVsSkJXVjlUVlZCUVQxSlVJQ1ltSUhSNWNHVnZaaUJqYjI1emIyeGxJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KbHh1SUNBZ0lIUjVjR1Z2WmlCamIyNXpiMnhsTG1WeWNtOXlJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUdOdmJuTnZiR1V1WlhKeWIzSW9YRzRnSUNBZ0oxUm9hWE1nWW5KdmQzTmxjaUJzWVdOcmN5QjBlWEJsWkNCaGNuSmhlU0FvVldsdWREaEJjbkpoZVNrZ2MzVndjRzl5ZENCM2FHbGphQ0JwY3lCeVpYRjFhWEpsWkNCaWVTQW5JQ3RjYmlBZ0lDQW5ZR0oxWm1abGNtQWdkalV1ZUM0Z1ZYTmxJR0JpZFdabVpYSmdJSFkwTG5nZ2FXWWdlVzkxSUhKbGNYVnBjbVVnYjJ4a0lHSnliM2R6WlhJZ2MzVndjRzl5ZEM0blhHNGdJQ2xjYm4xY2JseHVablZ1WTNScGIyNGdkSGx3WldSQmNuSmhlVk4xY0hCdmNuUWdLQ2tnZTF4dUlDQXZMeUJEWVc0Z2RIbHdaV1FnWVhKeVlYa2dhVzV6ZEdGdVkyVnpJR05oYmlCaVpTQmhkV2R0Wlc1MFpXUS9YRzRnSUhSeWVTQjdYRzRnSUNBZ2RtRnlJR0Z5Y2lBOUlHNWxkeUJWYVc1ME9FRnljbUY1S0RFcFhHNGdJQ0FnWVhKeUxsOWZjSEp2ZEc5Zlh5QTlJSHNnWDE5d2NtOTBiMTlmT2lCVmFXNTBPRUZ5Y21GNUxuQnliM1J2ZEhsd1pTd2dabTl2T2lCbWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQTBNaUI5SUgxY2JpQWdJQ0J5WlhSMWNtNGdZWEp5TG1admJ5Z3BJRDA5UFNBME1seHVJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1poYkhObFhHNGdJSDFjYm4xY2JseHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0VKMVptWmxjaTV3Y205MGIzUjVjR1VzSUNkd1lYSmxiblFuTENCN1hHNGdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVXNYRzRnSUdkbGREb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJR2xtSUNnaFFuVm1abVZ5TG1selFuVm1abVZ5S0hSb2FYTXBLU0J5WlhSMWNtNGdkVzVrWldacGJtVmtYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZblZtWm1WeVhHNGdJSDFjYm4wcFhHNWNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoQ2RXWm1aWEl1Y0hKdmRHOTBlWEJsTENBbmIyWm1jMlYwSnl3Z2UxeHVJQ0JsYm5WdFpYSmhZbXhsT2lCMGNuVmxMRnh1SUNCblpYUTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0JwWmlBb0lVSjFabVpsY2k1cGMwSjFabVpsY2loMGFHbHpLU2tnY21WMGRYSnVJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUo1ZEdWUFptWnpaWFJjYmlBZ2ZWeHVmU2xjYmx4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsUW5WbVptVnlJQ2hzWlc1bmRHZ3BJSHRjYmlBZ2FXWWdLR3hsYm1kMGFDQStJRXRmVFVGWVgweEZUa2RVU0NrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCU1lXNW5aVVZ5Y205eUtDZFVhR1VnZG1Gc2RXVWdYQ0luSUNzZ2JHVnVaM1JvSUNzZ0oxd2lJR2x6SUdsdWRtRnNhV1FnWm05eUlHOXdkR2x2YmlCY0luTnBlbVZjSWljcFhHNGdJSDFjYmlBZ0x5OGdVbVYwZFhKdUlHRnVJR0YxWjIxbGJuUmxaQ0JnVldsdWREaEJjbkpoZVdBZ2FXNXpkR0Z1WTJWY2JpQWdkbUZ5SUdKMVppQTlJRzVsZHlCVmFXNTBPRUZ5Y21GNUtHeGxibWQwYUNsY2JpQWdZblZtTGw5ZmNISnZkRzlmWHlBOUlFSjFabVpsY2k1d2NtOTBiM1I1Y0dWY2JpQWdjbVYwZFhKdUlHSjFabHh1ZlZ4dVhHNHZLaXBjYmlBcUlGUm9aU0JDZFdabVpYSWdZMjl1YzNSeWRXTjBiM0lnY21WMGRYSnVjeUJwYm5OMFlXNWpaWE1nYjJZZ1lGVnBiblE0UVhKeVlYbGdJSFJvWVhRZ2FHRjJaU0IwYUdWcGNseHVJQ29nY0hKdmRHOTBlWEJsSUdOb1lXNW5aV1FnZEc4Z1lFSjFabVpsY2k1d2NtOTBiM1I1Y0dWZ0xpQkdkWEowYUdWeWJXOXlaU3dnWUVKMVptWmxjbUFnYVhNZ1lTQnpkV0pqYkdGemN5QnZabHh1SUNvZ1lGVnBiblE0UVhKeVlYbGdMQ0J6YnlCMGFHVWdjbVYwZFhKdVpXUWdhVzV6ZEdGdVkyVnpJSGRwYkd3Z2FHRjJaU0JoYkd3Z2RHaGxJRzV2WkdVZ1lFSjFabVpsY21BZ2JXVjBhRzlrYzF4dUlDb2dZVzVrSUhSb1pTQmdWV2x1ZERoQmNuSmhlV0FnYldWMGFHOWtjeTRnVTNGMVlYSmxJR0p5WVdOclpYUWdibTkwWVhScGIyNGdkMjl5YTNNZ1lYTWdaWGh3WldOMFpXUWdMUzBnYVhSY2JpQXFJSEpsZEhWeWJuTWdZU0J6YVc1bmJHVWdiMk4wWlhRdVhHNGdLbHh1SUNvZ1ZHaGxJR0JWYVc1ME9FRnljbUY1WUNCd2NtOTBiM1I1Y0dVZ2NtVnRZV2x1Y3lCMWJtMXZaR2xtYVdWa0xseHVJQ292WEc1Y2JtWjFibU4wYVc5dUlFSjFabVpsY2lBb1lYSm5MQ0JsYm1OdlpHbHVaMDl5VDJabWMyVjBMQ0JzWlc1bmRHZ3BJSHRjYmlBZ0x5OGdRMjl0Ylc5dUlHTmhjMlV1WEc0Z0lHbG1JQ2gwZVhCbGIyWWdZWEpuSUQwOVBTQW5iblZ0WW1WeUp5a2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdaVzVqYjJScGJtZFBjazltWm5ObGRDQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hHNGdJQ0FnSUNBZ0lDZFVhR1VnWENKemRISnBibWRjSWlCaGNtZDFiV1Z1ZENCdGRYTjBJR0psSUc5bUlIUjVjR1VnYzNSeWFXNW5MaUJTWldObGFYWmxaQ0IwZVhCbElHNTFiV0psY2lkY2JpQWdJQ0FnSUNsY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHRnNiRzlqVlc1ellXWmxLR0Z5WnlsY2JpQWdmVnh1SUNCeVpYUjFjbTRnWm5KdmJTaGhjbWNzSUdWdVkyOWthVzVuVDNKUFptWnpaWFFzSUd4bGJtZDBhQ2xjYm4xY2JseHVMeThnUm1sNElITjFZbUZ5Y21GNUtDa2dhVzRnUlZNeU1ERTJMaUJUWldVNklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOW1aWEp2YzNNdlluVm1abVZ5TDNCMWJHd3ZPVGRjYm1sbUlDaDBlWEJsYjJZZ1UzbHRZbTlzSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlCVGVXMWliMnd1YzNCbFkybGxjeUFoUFNCdWRXeHNJQ1ltWEc0Z0lDQWdRblZtWm1WeVcxTjViV0p2YkM1emNHVmphV1Z6WFNBOVBUMGdRblZtWm1WeUtTQjdYRzRnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaENkV1ptWlhJc0lGTjViV0p2YkM1emNHVmphV1Z6TENCN1hHNGdJQ0FnZG1Gc2RXVTZJRzUxYkd3c1hHNGdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJR1Z1ZFcxbGNtRmliR1U2SUdaaGJITmxMRnh1SUNBZ0lIZHlhWFJoWW14bE9pQm1ZV3h6WlZ4dUlDQjlLVnh1ZlZ4dVhHNUNkV1ptWlhJdWNHOXZiRk5wZW1VZ1BTQTRNVGt5SUM4dklHNXZkQ0IxYzJWa0lHSjVJSFJvYVhNZ2FXMXdiR1Z0Wlc1MFlYUnBiMjVjYmx4dVpuVnVZM1JwYjI0Z1puSnZiU0FvZG1Gc2RXVXNJR1Z1WTI5a2FXNW5UM0pQWm1aelpYUXNJR3hsYm1kMGFDa2dlMXh1SUNCcFppQW9kSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCbWNtOXRVM1J5YVc1bktIWmhiSFZsTENCbGJtTnZaR2x1WjA5eVQyWm1jMlYwS1Z4dUlDQjlYRzVjYmlBZ2FXWWdLRUZ5Y21GNVFuVm1abVZ5TG1selZtbGxkeWgyWVd4MVpTa3BJSHRjYmlBZ0lDQnlaWFIxY200Z1puSnZiVUZ5Y21GNVRHbHJaU2gyWVd4MVpTbGNiaUFnZlZ4dVhHNGdJR2xtSUNoMllXeDFaU0E5UFNCdWRXeHNLU0I3WEc0Z0lDQWdkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtGeHVJQ0FnSUNBZ0oxUm9aU0JtYVhKemRDQmhjbWQxYldWdWRDQnRkWE4wSUdKbElHOXVaU0J2WmlCMGVYQmxJSE4wY21sdVp5d2dRblZtWm1WeUxDQkJjbkpoZVVKMVptWmxjaXdnUVhKeVlYa3NJQ2NnSzF4dUlDQWdJQ0FnSjI5eUlFRnljbUY1TFd4cGEyVWdUMkpxWldOMExpQlNaV05sYVhabFpDQjBlWEJsSUNjZ0t5QW9kSGx3Wlc5bUlIWmhiSFZsS1Z4dUlDQWdJQ2xjYmlBZ2ZWeHVYRzRnSUdsbUlDaHBjMGx1YzNSaGJtTmxLSFpoYkhWbExDQkJjbkpoZVVKMVptWmxjaWtnZkh4Y2JpQWdJQ0FnSUNoMllXeDFaU0FtSmlCcGMwbHVjM1JoYm1ObEtIWmhiSFZsTG1KMVptWmxjaXdnUVhKeVlYbENkV1ptWlhJcEtTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbWNtOXRRWEp5WVhsQ2RXWm1aWElvZG1Gc2RXVXNJR1Z1WTI5a2FXNW5UM0pQWm1aelpYUXNJR3hsYm1kMGFDbGNiaUFnZlZ4dVhHNGdJR2xtSUNoMGVYQmxiMllnZG1Gc2RXVWdQVDA5SUNkdWRXMWlaWEluS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY2JpQWdJQ0FnSUNkVWFHVWdYQ0oyWVd4MVpWd2lJR0Z5WjNWdFpXNTBJRzExYzNRZ2JtOTBJR0psSUc5bUlIUjVjR1VnYm5WdFltVnlMaUJTWldObGFYWmxaQ0IwZVhCbElHNTFiV0psY2lkY2JpQWdJQ0FwWEc0Z0lIMWNibHh1SUNCMllYSWdkbUZzZFdWUFppQTlJSFpoYkhWbExuWmhiSFZsVDJZZ0ppWWdkbUZzZFdVdWRtRnNkV1ZQWmlncFhHNGdJR2xtSUNoMllXeDFaVTltSUNFOUlHNTFiR3dnSmlZZ2RtRnNkV1ZQWmlBaFBUMGdkbUZzZFdVcElIdGNiaUFnSUNCeVpYUjFjbTRnUW5WbVptVnlMbVp5YjIwb2RtRnNkV1ZQWml3Z1pXNWpiMlJwYm1kUGNrOW1abk5sZEN3Z2JHVnVaM1JvS1Z4dUlDQjlYRzVjYmlBZ2RtRnlJR0lnUFNCbWNtOXRUMkpxWldOMEtIWmhiSFZsS1Z4dUlDQnBaaUFvWWlrZ2NtVjBkWEp1SUdKY2JseHVJQ0JwWmlBb2RIbHdaVzltSUZONWJXSnZiQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnVTNsdFltOXNMblJ2VUhKcGJXbDBhWFpsSUNFOUlHNTFiR3dnSmlaY2JpQWdJQ0FnSUhSNWNHVnZaaUIyWVd4MVpWdFRlVzFpYjJ3dWRHOVFjbWx0YVhScGRtVmRJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ2NtVjBkWEp1SUVKMVptWmxjaTVtY205dEtGeHVJQ0FnSUNBZ2RtRnNkV1ZiVTNsdFltOXNMblJ2VUhKcGJXbDBhWFpsWFNnbmMzUnlhVzVuSnlrc0lHVnVZMjlrYVc1blQzSlBabVp6WlhRc0lHeGxibWQwYUZ4dUlDQWdJQ2xjYmlBZ2ZWeHVYRzRnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hHNGdJQ0FnSjFSb1pTQm1hWEp6ZENCaGNtZDFiV1Z1ZENCdGRYTjBJR0psSUc5dVpTQnZaaUIwZVhCbElITjBjbWx1Wnl3Z1FuVm1abVZ5TENCQmNuSmhlVUoxWm1abGNpd2dRWEp5WVhrc0lDY2dLMXh1SUNBZ0lDZHZjaUJCY25KaGVTMXNhV3RsSUU5aWFtVmpkQzRnVW1WalpXbDJaV1FnZEhsd1pTQW5JQ3NnS0hSNWNHVnZaaUIyWVd4MVpTbGNiaUFnS1Z4dWZWeHVYRzR2S2lwY2JpQXFJRVoxYm1OMGFXOXVZV3hzZVNCbGNYVnBkbUZzWlc1MElIUnZJRUoxWm1abGNpaGhjbWNzSUdWdVkyOWthVzVuS1NCaWRYUWdkR2h5YjNkeklHRWdWSGx3WlVWeWNtOXlYRzRnS2lCcFppQjJZV3gxWlNCcGN5QmhJRzUxYldKbGNpNWNiaUFxSUVKMVptWmxjaTVtY205dEtITjBjbHNzSUdWdVkyOWthVzVuWFNsY2JpQXFJRUoxWm1abGNpNW1jbTl0S0dGeWNtRjVLVnh1SUNvZ1FuVm1abVZ5TG1aeWIyMG9ZblZtWm1WeUtWeHVJQ29nUW5WbVptVnlMbVp5YjIwb1lYSnlZWGxDZFdabVpYSmJMQ0JpZVhSbFQyWm1jMlYwV3l3Z2JHVnVaM1JvWFYwcFhHNGdLaW92WEc1Q2RXWm1aWEl1Wm5KdmJTQTlJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTd2daVzVqYjJScGJtZFBjazltWm5ObGRDd2diR1Z1WjNSb0tTQjdYRzRnSUhKbGRIVnliaUJtY205dEtIWmhiSFZsTENCbGJtTnZaR2x1WjA5eVQyWm1jMlYwTENCc1pXNW5kR2dwWEc1OVhHNWNiaTh2SUU1dmRHVTZJRU5vWVc1blpTQndjbTkwYjNSNWNHVWdLbUZtZEdWeUtpQkNkV1ptWlhJdVpuSnZiU0JwY3lCa1pXWnBibVZrSUhSdklIZHZjbXRoY205MWJtUWdRMmh5YjIxbElHSjFaenBjYmk4dklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOW1aWEp2YzNNdlluVm1abVZ5TDNCMWJHd3ZNVFE0WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTGw5ZmNISnZkRzlmWHlBOUlGVnBiblE0UVhKeVlYa3VjSEp2ZEc5MGVYQmxYRzVDZFdabVpYSXVYMTl3Y205MGIxOWZJRDBnVldsdWREaEJjbkpoZVZ4dVhHNW1kVzVqZEdsdmJpQmhjM05sY25SVGFYcGxJQ2h6YVhwbEtTQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ2MybDZaU0FoUFQwZ0oyNTFiV0psY2ljcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZGNJbk5wZW1WY0lpQmhjbWQxYldWdWRDQnRkWE4wSUdKbElHOW1JSFI1Y0dVZ2JuVnRZbVZ5SnlsY2JpQWdmU0JsYkhObElHbG1JQ2h6YVhwbElEd2dNQ2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJTWVc1blpVVnljbTl5S0NkVWFHVWdkbUZzZFdVZ1hDSW5JQ3NnYzJsNlpTQXJJQ2RjSWlCcGN5QnBiblpoYkdsa0lHWnZjaUJ2Y0hScGIyNGdYQ0p6YVhwbFhDSW5LVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdGc2JHOWpJQ2h6YVhwbExDQm1hV3hzTENCbGJtTnZaR2x1WnlrZ2UxeHVJQ0JoYzNObGNuUlRhWHBsS0hOcGVtVXBYRzRnSUdsbUlDaHphWHBsSUR3OUlEQXBJSHRjYmlBZ0lDQnlaWFIxY200Z1kzSmxZWFJsUW5WbVptVnlLSE5wZW1VcFhHNGdJSDFjYmlBZ2FXWWdLR1pwYkd3Z0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQzh2SUU5dWJIa2djR0Y1SUdGMGRHVnVkR2x2YmlCMGJ5QmxibU52WkdsdVp5QnBaaUJwZENkeklHRWdjM1J5YVc1bkxpQlVhR2x6WEc0Z0lDQWdMeThnY0hKbGRtVnVkSE1nWVdOamFXUmxiblJoYkd4NUlITmxibVJwYm1jZ2FXNGdZU0J1ZFcxaVpYSWdkR2hoZENCM2IzVnNaRnh1SUNBZ0lDOHZJR0psSUdsdWRHVnljSEpsZEhSbFpDQmhjeUJoSUhOMFlYSjBJRzltWm5ObGRDNWNiaUFnSUNCeVpYUjFjbTRnZEhsd1pXOW1JR1Z1WTI5a2FXNW5JRDA5UFNBbmMzUnlhVzVuSjF4dUlDQWdJQ0FnUHlCamNtVmhkR1ZDZFdabVpYSW9jMmw2WlNrdVptbHNiQ2htYVd4c0xDQmxibU52WkdsdVp5bGNiaUFnSUNBZ0lEb2dZM0psWVhSbFFuVm1abVZ5S0hOcGVtVXBMbVpwYkd3b1ptbHNiQ2xjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdZM0psWVhSbFFuVm1abVZ5S0hOcGVtVXBYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EzSmxZWFJsY3lCaElHNWxkeUJtYVd4c1pXUWdRblZtWm1WeUlHbHVjM1JoYm1ObExseHVJQ29nWVd4c2IyTW9jMmw2WlZzc0lHWnBiR3hiTENCbGJtTnZaR2x1WjExZEtWeHVJQ29xTDF4dVFuVm1abVZ5TG1Gc2JHOWpJRDBnWm5WdVkzUnBiMjRnS0hOcGVtVXNJR1pwYkd3c0lHVnVZMjlrYVc1bktTQjdYRzRnSUhKbGRIVnliaUJoYkd4dll5aHphWHBsTENCbWFXeHNMQ0JsYm1OdlpHbHVaeWxjYm4xY2JseHVablZ1WTNScGIyNGdZV3hzYjJOVmJuTmhabVVnS0hOcGVtVXBJSHRjYmlBZ1lYTnpaWEowVTJsNlpTaHphWHBsS1Z4dUlDQnlaWFIxY200Z1kzSmxZWFJsUW5WbVptVnlLSE5wZW1VZ1BDQXdJRDhnTUNBNklHTm9aV05yWldRb2MybDZaU2tnZkNBd0tWeHVmVnh1WEc0dktpcGNiaUFxSUVWeGRXbDJZV3hsYm5RZ2RHOGdRblZtWm1WeUtHNTFiU2tzSUdKNUlHUmxabUYxYkhRZ1kzSmxZWFJsY3lCaElHNXZiaTE2WlhKdkxXWnBiR3hsWkNCQ2RXWm1aWElnYVc1emRHRnVZMlV1WEc0Z0tpQXFMMXh1UW5WbVptVnlMbUZzYkc5alZXNXpZV1psSUQwZ1puVnVZM1JwYjI0Z0tITnBlbVVwSUh0Y2JpQWdjbVYwZFhKdUlHRnNiRzlqVlc1ellXWmxLSE5wZW1VcFhHNTlYRzR2S2lwY2JpQXFJRVZ4ZFdsMllXeGxiblFnZEc4Z1UyeHZkMEoxWm1abGNpaHVkVzBwTENCaWVTQmtaV1poZFd4MElHTnlaV0YwWlhNZ1lTQnViMjR0ZW1WeWJ5MW1hV3hzWldRZ1FuVm1abVZ5SUdsdWMzUmhibU5sTGx4dUlDb3ZYRzVDZFdabVpYSXVZV3hzYjJOVmJuTmhabVZUYkc5M0lEMGdablZ1WTNScGIyNGdLSE5wZW1VcElIdGNiaUFnY21WMGRYSnVJR0ZzYkc5alZXNXpZV1psS0hOcGVtVXBYRzU5WEc1Y2JtWjFibU4wYVc5dUlHWnliMjFUZEhKcGJtY2dLSE4wY21sdVp5d2daVzVqYjJScGJtY3BJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQmxibU52WkdsdVp5QWhQVDBnSjNOMGNtbHVaeWNnZkh3Z1pXNWpiMlJwYm1jZ1BUMDlJQ2NuS1NCN1hHNGdJQ0FnWlc1amIyUnBibWNnUFNBbmRYUm1PQ2RjYmlBZ2ZWeHVYRzRnSUdsbUlDZ2hRblZtWm1WeUxtbHpSVzVqYjJScGJtY29aVzVqYjJScGJtY3BLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduVlc1cmJtOTNiaUJsYm1OdlpHbHVaem9nSnlBcklHVnVZMjlrYVc1bktWeHVJQ0I5WEc1Y2JpQWdkbUZ5SUd4bGJtZDBhQ0E5SUdKNWRHVk1aVzVuZEdnb2MzUnlhVzVuTENCbGJtTnZaR2x1WnlrZ2ZDQXdYRzRnSUhaaGNpQmlkV1lnUFNCamNtVmhkR1ZDZFdabVpYSW9iR1Z1WjNSb0tWeHVYRzRnSUhaaGNpQmhZM1IxWVd3Z1BTQmlkV1l1ZDNKcGRHVW9jM1J5YVc1bkxDQmxibU52WkdsdVp5bGNibHh1SUNCcFppQW9ZV04wZFdGc0lDRTlQU0JzWlc1bmRHZ3BJSHRjYmlBZ0lDQXZMeUJYY21sMGFXNW5JR0VnYUdWNElITjBjbWx1Wnl3Z1ptOXlJR1Y0WVcxd2JHVXNJSFJvWVhRZ1kyOXVkR0ZwYm5NZ2FXNTJZV3hwWkNCamFHRnlZV04wWlhKeklIZHBiR3hjYmlBZ0lDQXZMeUJqWVhWelpTQmxkbVZ5ZVhSb2FXNW5JR0ZtZEdWeUlIUm9aU0JtYVhKemRDQnBiblpoYkdsa0lHTm9ZWEpoWTNSbGNpQjBieUJpWlNCcFoyNXZjbVZrTGlBb1pTNW5MbHh1SUNBZ0lDOHZJQ2RoWW5oNFkyUW5JSGRwYkd3Z1ltVWdkSEpsWVhSbFpDQmhjeUFuWVdJbktWeHVJQ0FnSUdKMVppQTlJR0oxWmk1emJHbGpaU2d3TENCaFkzUjFZV3dwWEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWW5WbVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdaeWIyMUJjbkpoZVV4cGEyVWdLR0Z5Y21GNUtTQjdYRzRnSUhaaGNpQnNaVzVuZEdnZ1BTQmhjbkpoZVM1c1pXNW5kR2dnUENBd0lEOGdNQ0E2SUdOb1pXTnJaV1FvWVhKeVlYa3ViR1Z1WjNSb0tTQjhJREJjYmlBZ2RtRnlJR0oxWmlBOUlHTnlaV0YwWlVKMVptWmxjaWhzWlc1bmRHZ3BYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2JHVnVaM1JvT3lCcElDczlJREVwSUh0Y2JpQWdJQ0JpZFdaYmFWMGdQU0JoY25KaGVWdHBYU0FtSURJMU5WeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCaWRXWmNibjFjYmx4dVpuVnVZM1JwYjI0Z1puSnZiVUZ5Y21GNVFuVm1abVZ5SUNoaGNuSmhlU3dnWW5sMFpVOW1abk5sZEN3Z2JHVnVaM1JvS1NCN1hHNGdJR2xtSUNoaWVYUmxUMlptYzJWMElEd2dNQ0I4ZkNCaGNuSmhlUzVpZVhSbFRHVnVaM1JvSUR3Z1lubDBaVTltWm5ObGRDa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QlNZVzVuWlVWeWNtOXlLQ2RjSW05bVpuTmxkRndpSUdseklHOTFkSE5wWkdVZ2IyWWdZblZtWm1WeUlHSnZkVzVrY3ljcFhHNGdJSDFjYmx4dUlDQnBaaUFvWVhKeVlYa3VZbmwwWlV4bGJtZDBhQ0E4SUdKNWRHVlBabVp6WlhRZ0t5QW9iR1Z1WjNSb0lIeDhJREFwS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZKaGJtZGxSWEp5YjNJb0oxd2liR1Z1WjNSb1hDSWdhWE1nYjNWMGMybGtaU0J2WmlCaWRXWm1aWElnWW05MWJtUnpKeWxjYmlBZ2ZWeHVYRzRnSUhaaGNpQmlkV1pjYmlBZ2FXWWdLR0o1ZEdWUFptWnpaWFFnUFQwOUlIVnVaR1ZtYVc1bFpDQW1KaUJzWlc1bmRHZ2dQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUdKMVppQTlJRzVsZHlCVmFXNTBPRUZ5Y21GNUtHRnljbUY1S1Z4dUlDQjlJR1ZzYzJVZ2FXWWdLR3hsYm1kMGFDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnWW5WbUlEMGdibVYzSUZWcGJuUTRRWEp5WVhrb1lYSnlZWGtzSUdKNWRHVlBabVp6WlhRcFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ1luVm1JRDBnYm1WM0lGVnBiblE0UVhKeVlYa29ZWEp5WVhrc0lHSjVkR1ZQWm1aelpYUXNJR3hsYm1kMGFDbGNiaUFnZlZ4dVhHNGdJQzh2SUZKbGRIVnliaUJoYmlCaGRXZHRaVzUwWldRZ1lGVnBiblE0UVhKeVlYbGdJR2x1YzNSaGJtTmxYRzRnSUdKMVppNWZYM0J5YjNSdlgxOGdQU0JDZFdabVpYSXVjSEp2ZEc5MGVYQmxYRzRnSUhKbGRIVnliaUJpZFdaY2JuMWNibHh1Wm5WdVkzUnBiMjRnWm5KdmJVOWlhbVZqZENBb2IySnFLU0I3WEc0Z0lHbG1JQ2hDZFdabVpYSXVhWE5DZFdabVpYSW9iMkpxS1NrZ2UxeHVJQ0FnSUhaaGNpQnNaVzRnUFNCamFHVmphMlZrS0c5aWFpNXNaVzVuZEdncElId2dNRnh1SUNBZ0lIWmhjaUJpZFdZZ1BTQmpjbVZoZEdWQ2RXWm1aWElvYkdWdUtWeHVYRzRnSUNBZ2FXWWdLR0oxWmk1c1pXNW5kR2dnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmlkV1pjYmlBZ0lDQjlYRzVjYmlBZ0lDQnZZbW91WTI5d2VTaGlkV1lzSURBc0lEQXNJR3hsYmlsY2JpQWdJQ0J5WlhSMWNtNGdZblZtWEc0Z0lIMWNibHh1SUNCcFppQW9iMkpxTG14bGJtZDBhQ0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnZZbW91YkdWdVozUm9JQ0U5UFNBbmJuVnRZbVZ5SnlCOGZDQnVkVzFpWlhKSmMwNWhUaWh2WW1vdWJHVnVaM1JvS1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOeVpXRjBaVUoxWm1abGNpZ3dLVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWm5KdmJVRnljbUY1VEdsclpTaHZZbW9wWEc0Z0lIMWNibHh1SUNCcFppQW9iMkpxTG5SNWNHVWdQVDA5SUNkQ2RXWm1aWEluSUNZbUlFRnljbUY1TG1selFYSnlZWGtvYjJKcUxtUmhkR0VwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1p5YjIxQmNuSmhlVXhwYTJVb2IySnFMbVJoZEdFcFhHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdZMmhsWTJ0bFpDQW9iR1Z1WjNSb0tTQjdYRzRnSUM4dklFNXZkR1U2SUdOaGJtNXZkQ0IxYzJVZ1lHeGxibWQwYUNBOElFdGZUVUZZWDB4RlRrZFVTR0FnYUdWeVpTQmlaV05oZFhObElIUm9ZWFFnWm1GcGJITWdkMmhsYmx4dUlDQXZMeUJzWlc1bmRHZ2dhWE1nVG1GT0lDaDNhR2xqYUNCcGN5QnZkR2hsY25kcGMyVWdZMjlsY21ObFpDQjBieUI2WlhKdkxpbGNiaUFnYVdZZ0tHeGxibWQwYUNBK1BTQkxYMDFCV0Y5TVJVNUhWRWdwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVW1GdVoyVkZjbkp2Y2lnblFYUjBaVzF3ZENCMGJ5QmhiR3h2WTJGMFpTQkNkV1ptWlhJZ2JHRnlaMlZ5SUhSb1lXNGdiV0Y0YVcxMWJTQW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuYzJsNlpUb2dNSGduSUNzZ1MxOU5RVmhmVEVWT1IxUklMblJ2VTNSeWFXNW5LREUyS1NBcklDY2dZbmwwWlhNbktWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCc1pXNW5kR2dnZkNBd1hHNTlYRzVjYm1aMWJtTjBhVzl1SUZOc2IzZENkV1ptWlhJZ0tHeGxibWQwYUNrZ2UxeHVJQ0JwWmlBb0syeGxibWQwYUNBaFBTQnNaVzVuZEdncElIc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCbGNXVnhaWEZjYmlBZ0lDQnNaVzVuZEdnZ1BTQXdYRzRnSUgxY2JpQWdjbVYwZFhKdUlFSjFabVpsY2k1aGJHeHZZeWdyYkdWdVozUm9LVnh1ZlZ4dVhHNUNkV1ptWlhJdWFYTkNkV1ptWlhJZ1BTQm1kVzVqZEdsdmJpQnBjMEoxWm1abGNpQW9ZaWtnZTF4dUlDQnlaWFIxY200Z1lpQWhQU0J1ZFd4c0lDWW1JR0l1WDJselFuVm1abVZ5SUQwOVBTQjBjblZsSUNZbVhHNGdJQ0FnWWlBaFBUMGdRblZtWm1WeUxuQnliM1J2ZEhsd1pTQXZMeUJ6YnlCQ2RXWm1aWEl1YVhOQ2RXWm1aWElvUW5WbVptVnlMbkJ5YjNSdmRIbHdaU2tnZDJsc2JDQmlaU0JtWVd4elpWeHVmVnh1WEc1Q2RXWm1aWEl1WTI5dGNHRnlaU0E5SUdaMWJtTjBhVzl1SUdOdmJYQmhjbVVnS0dFc0lHSXBJSHRjYmlBZ2FXWWdLR2x6U1c1emRHRnVZMlVvWVN3Z1ZXbHVkRGhCY25KaGVTa3BJR0VnUFNCQ2RXWm1aWEl1Wm5KdmJTaGhMQ0JoTG05bVpuTmxkQ3dnWVM1aWVYUmxUR1Z1WjNSb0tWeHVJQ0JwWmlBb2FYTkpibk4wWVc1alpTaGlMQ0JWYVc1ME9FRnljbUY1S1NrZ1lpQTlJRUoxWm1abGNpNW1jbTl0S0dJc0lHSXViMlptYzJWMExDQmlMbUo1ZEdWTVpXNW5kR2dwWEc0Z0lHbG1JQ2doUW5WbVptVnlMbWx6UW5WbVptVnlLR0VwSUh4OElDRkNkV1ptWlhJdWFYTkNkV1ptWlhJb1lpa3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRnh1SUNBZ0lDQWdKMVJvWlNCY0ltSjFaakZjSWl3Z1hDSmlkV1l5WENJZ1lYSm5kVzFsYm5SeklHMTFjM1FnWW1VZ2IyNWxJRzltSUhSNWNHVWdRblZtWm1WeUlHOXlJRlZwYm5RNFFYSnlZWGtuWEc0Z0lDQWdLVnh1SUNCOVhHNWNiaUFnYVdZZ0tHRWdQVDA5SUdJcElISmxkSFZ5YmlBd1hHNWNiaUFnZG1GeUlIZ2dQU0JoTG14bGJtZDBhRnh1SUNCMllYSWdlU0E5SUdJdWJHVnVaM1JvWEc1Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBc0lHeGxiaUE5SUUxaGRHZ3ViV2x1S0hnc0lIa3BPeUJwSUR3Z2JHVnVPeUFySzJrcElIdGNiaUFnSUNCcFppQW9ZVnRwWFNBaFBUMGdZbHRwWFNrZ2UxeHVJQ0FnSUNBZ2VDQTlJR0ZiYVYxY2JpQWdJQ0FnSUhrZ1BTQmlXMmxkWEc0Z0lDQWdJQ0JpY21WaGExeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHbG1JQ2g0SUR3Z2VTa2djbVYwZFhKdUlDMHhYRzRnSUdsbUlDaDVJRHdnZUNrZ2NtVjBkWEp1SURGY2JpQWdjbVYwZFhKdUlEQmNibjFjYmx4dVFuVm1abVZ5TG1selJXNWpiMlJwYm1jZ1BTQm1kVzVqZEdsdmJpQnBjMFZ1WTI5a2FXNW5JQ2hsYm1OdlpHbHVaeWtnZTF4dUlDQnpkMmwwWTJnZ0tGTjBjbWx1WnlobGJtTnZaR2x1WnlrdWRHOU1iM2RsY2tOaGMyVW9LU2tnZTF4dUlDQWdJR05oYzJVZ0oyaGxlQ2M2WEc0Z0lDQWdZMkZ6WlNBbmRYUm1PQ2M2WEc0Z0lDQWdZMkZ6WlNBbmRYUm1MVGduT2x4dUlDQWdJR05oYzJVZ0oyRnpZMmxwSnpwY2JpQWdJQ0JqWVhObElDZHNZWFJwYmpFbk9seHVJQ0FnSUdOaGMyVWdKMkpwYm1GeWVTYzZYRzRnSUNBZ1kyRnpaU0FuWW1GelpUWTBKenBjYmlBZ0lDQmpZWE5sSUNkMVkzTXlKenBjYmlBZ0lDQmpZWE5sSUNkMVkzTXRNaWM2WEc0Z0lDQWdZMkZ6WlNBbmRYUm1NVFpzWlNjNlhHNGdJQ0FnWTJGelpTQW5kWFJtTFRFMmJHVW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1ZjYmlBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxYRzRnSUgxY2JuMWNibHh1UW5WbVptVnlMbU52Ym1OaGRDQTlJR1oxYm1OMGFXOXVJR052Ym1OaGRDQW9iR2x6ZEN3Z2JHVnVaM1JvS1NCN1hHNGdJR2xtSUNnaFFYSnlZWGt1YVhOQmNuSmhlU2hzYVhOMEtTa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMXdpYkdsemRGd2lJR0Z5WjNWdFpXNTBJRzExYzNRZ1ltVWdZVzRnUVhKeVlYa2diMllnUW5WbVptVnljeWNwWEc0Z0lIMWNibHh1SUNCcFppQW9iR2x6ZEM1c1pXNW5kR2dnUFQwOUlEQXBJSHRjYmlBZ0lDQnlaWFIxY200Z1FuVm1abVZ5TG1Gc2JHOWpLREFwWEc0Z0lIMWNibHh1SUNCMllYSWdhVnh1SUNCcFppQW9iR1Z1WjNSb0lEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0JzWlc1bmRHZ2dQU0F3WEc0Z0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElHeHBjM1F1YkdWdVozUm9PeUFySzJrcElIdGNiaUFnSUNBZ0lHeGxibWQwYUNBclBTQnNhWE4wVzJsZExteGxibWQwYUZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhaaGNpQmlkV1ptWlhJZ1BTQkNkV1ptWlhJdVlXeHNiMk5WYm5OaFptVW9iR1Z1WjNSb0tWeHVJQ0IyWVhJZ2NHOXpJRDBnTUZ4dUlDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z2JHbHpkQzVzWlc1bmRHZzdJQ3NyYVNrZ2UxeHVJQ0FnSUhaaGNpQmlkV1lnUFNCc2FYTjBXMmxkWEc0Z0lDQWdhV1lnS0dselNXNXpkR0Z1WTJVb1luVm1MQ0JWYVc1ME9FRnljbUY1S1NrZ2UxeHVJQ0FnSUNBZ1luVm1JRDBnUW5WbVptVnlMbVp5YjIwb1luVm1LVnh1SUNBZ0lIMWNiaUFnSUNCcFppQW9JVUoxWm1abGNpNXBjMEoxWm1abGNpaGlkV1lwS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZGNJbXhwYzNSY0lpQmhjbWQxYldWdWRDQnRkWE4wSUdKbElHRnVJRUZ5Y21GNUlHOW1JRUoxWm1abGNuTW5LVnh1SUNBZ0lIMWNiaUFnSUNCaWRXWXVZMjl3ZVNoaWRXWm1aWElzSUhCdmN5bGNiaUFnSUNCd2IzTWdLejBnWW5WbUxteGxibWQwYUZ4dUlDQjlYRzRnSUhKbGRIVnliaUJpZFdabVpYSmNibjFjYmx4dVpuVnVZM1JwYjI0Z1lubDBaVXhsYm1kMGFDQW9jM1J5YVc1bkxDQmxibU52WkdsdVp5a2dlMXh1SUNCcFppQW9RblZtWm1WeUxtbHpRblZtWm1WeUtITjBjbWx1WnlrcElIdGNiaUFnSUNCeVpYUjFjbTRnYzNSeWFXNW5MbXhsYm1kMGFGeHVJQ0I5WEc0Z0lHbG1JQ2hCY25KaGVVSjFabVpsY2k1cGMxWnBaWGNvYzNSeWFXNW5LU0I4ZkNCcGMwbHVjM1JoYm1ObEtITjBjbWx1Wnl3Z1FYSnlZWGxDZFdabVpYSXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlITjBjbWx1Wnk1aWVYUmxUR1Z1WjNSb1hHNGdJSDFjYmlBZ2FXWWdLSFI1Y0dWdlppQnpkSEpwYm1jZ0lUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjYmlBZ0lDQWdJQ2RVYUdVZ1hDSnpkSEpwYm1kY0lpQmhjbWQxYldWdWRDQnRkWE4wSUdKbElHOXVaU0J2WmlCMGVYQmxJSE4wY21sdVp5d2dRblZtWm1WeUxDQnZjaUJCY25KaGVVSjFabVpsY2k0Z0p5QXJYRzRnSUNBZ0lDQW5VbVZqWldsMlpXUWdkSGx3WlNBbklDc2dkSGx3Wlc5bUlITjBjbWx1WjF4dUlDQWdJQ2xjYmlBZ2ZWeHVYRzRnSUhaaGNpQnNaVzRnUFNCemRISnBibWN1YkdWdVozUm9YRzRnSUhaaGNpQnRkWE4wVFdGMFkyZ2dQU0FvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURJZ0ppWWdZWEpuZFcxbGJuUnpXekpkSUQwOVBTQjBjblZsS1Z4dUlDQnBaaUFvSVcxMWMzUk5ZWFJqYUNBbUppQnNaVzRnUFQwOUlEQXBJSEpsZEhWeWJpQXdYRzVjYmlBZ0x5OGdWWE5sSUdFZ1ptOXlJR3h2YjNBZ2RHOGdZWFp2YVdRZ2NtVmpkWEp6YVc5dVhHNGdJSFpoY2lCc2IzZGxjbVZrUTJGelpTQTlJR1poYkhObFhHNGdJR1p2Y2lBb096c3BJSHRjYmlBZ0lDQnpkMmwwWTJnZ0tHVnVZMjlrYVc1bktTQjdYRzRnSUNBZ0lDQmpZWE5sSUNkaGMyTnBhU2M2WEc0Z0lDQWdJQ0JqWVhObElDZHNZWFJwYmpFbk9seHVJQ0FnSUNBZ1kyRnpaU0FuWW1sdVlYSjVKenBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR3hsYmx4dUlDQWdJQ0FnWTJGelpTQW5kWFJtT0NjNlhHNGdJQ0FnSUNCallYTmxJQ2QxZEdZdE9DYzZYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjFkR1k0Vkc5Q2VYUmxjeWh6ZEhKcGJtY3BMbXhsYm1kMGFGeHVJQ0FnSUNBZ1kyRnpaU0FuZFdOek1pYzZYRzRnSUNBZ0lDQmpZWE5sSUNkMVkzTXRNaWM2WEc0Z0lDQWdJQ0JqWVhObElDZDFkR1l4Tm14bEp6cGNiaUFnSUNBZ0lHTmhjMlVnSjNWMFppMHhObXhsSnpwY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUd4bGJpQXFJREpjYmlBZ0lDQWdJR05oYzJVZ0oyaGxlQ2M2WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJzWlc0Z1BqNCtJREZjYmlBZ0lDQWdJR05oYzJVZ0oySmhjMlUyTkNjNlhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaVlYTmxOalJVYjBKNWRHVnpLSE4wY21sdVp5a3ViR1Z1WjNSb1hHNGdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNCcFppQW9iRzkzWlhKbFpFTmhjMlVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JYVnpkRTFoZEdOb0lEOGdMVEVnT2lCMWRHWTRWRzlDZVhSbGN5aHpkSEpwYm1jcExteGxibWQwYUNBdkx5QmhjM04xYldVZ2RYUm1PRnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWdVkyOWthVzVuSUQwZ0tDY25JQ3NnWlc1amIyUnBibWNwTG5SdlRHOTNaWEpEWVhObEtDbGNiaUFnSUNBZ0lDQWdiRzkzWlhKbFpFTmhjMlVnUFNCMGNuVmxYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNUNkV1ptWlhJdVlubDBaVXhsYm1kMGFDQTlJR0o1ZEdWTVpXNW5kR2hjYmx4dVpuVnVZM1JwYjI0Z2MyeHZkMVJ2VTNSeWFXNW5JQ2hsYm1OdlpHbHVaeXdnYzNSaGNuUXNJR1Z1WkNrZ2UxeHVJQ0IyWVhJZ2JHOTNaWEpsWkVOaGMyVWdQU0JtWVd4elpWeHVYRzRnSUM4dklFNXZJRzVsWldRZ2RHOGdkbVZ5YVdaNUlIUm9ZWFFnWENKMGFHbHpMbXhsYm1kMGFDQThQU0JOUVZoZlZVbE9WRE15WENJZ2MybHVZMlVnYVhRbmN5QmhJSEpsWVdRdGIyNXNlVnh1SUNBdkx5QndjbTl3WlhKMGVTQnZaaUJoSUhSNWNHVmtJR0Z5Y21GNUxseHVYRzRnSUM4dklGUm9hWE1nWW1Wb1lYWmxjeUJ1WldsMGFHVnlJR3hwYTJVZ1UzUnlhVzVuSUc1dmNpQlZhVzUwT0VGeWNtRjVJR2x1SUhSb1lYUWdkMlVnYzJWMElITjBZWEowTDJWdVpGeHVJQ0F2THlCMGJ5QjBhR1ZwY2lCMWNIQmxjaTlzYjNkbGNpQmliM1Z1WkhNZ2FXWWdkR2hsSUhaaGJIVmxJSEJoYzNObFpDQnBjeUJ2ZFhRZ2IyWWdjbUZ1WjJVdVhHNGdJQzh2SUhWdVpHVm1hVzVsWkNCcGN5Qm9ZVzVrYkdWa0lITndaV05wWVd4c2VTQmhjeUJ3WlhJZ1JVTk5RUzB5TmpJZ05uUm9JRVZrYVhScGIyNHNYRzRnSUM4dklGTmxZM1JwYjI0Z01UTXVNeTR6TGpjZ1VuVnVkR2x0WlNCVFpXMWhiblJwWTNNNklFdGxlV1ZrUW1sdVpHbHVaMGx1YVhScFlXeHBlbUYwYVc5dUxseHVJQ0JwWmlBb2MzUmhjblFnUFQwOUlIVnVaR1ZtYVc1bFpDQjhmQ0J6ZEdGeWRDQThJREFwSUh0Y2JpQWdJQ0J6ZEdGeWRDQTlJREJjYmlBZ2ZWeHVJQ0F2THlCU1pYUjFjbTRnWldGeWJIa2dhV1lnYzNSaGNuUWdQaUIwYUdsekxteGxibWQwYUM0Z1JHOXVaU0JvWlhKbElIUnZJSEJ5WlhabGJuUWdjRzkwWlc1MGFXRnNJSFZwYm5Rek1seHVJQ0F2THlCamIyVnlZMmx2YmlCbVlXbHNJR0psYkc5M0xseHVJQ0JwWmlBb2MzUmhjblFnUGlCMGFHbHpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lISmxkSFZ5YmlBbkoxeHVJQ0I5WEc1Y2JpQWdhV1lnS0dWdVpDQTlQVDBnZFc1a1pXWnBibVZrSUh4OElHVnVaQ0ErSUhSb2FYTXViR1Z1WjNSb0tTQjdYRzRnSUNBZ1pXNWtJRDBnZEdocGN5NXNaVzVuZEdoY2JpQWdmVnh1WEc0Z0lHbG1JQ2hsYm1RZ1BEMGdNQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQW5KMXh1SUNCOVhHNWNiaUFnTHk4Z1JtOXlZMlVnWTI5bGNuTnBiMjRnZEc4Z2RXbHVkRE15TGlCVWFHbHpJSGRwYkd3Z1lXeHpieUJqYjJWeVkyVWdabUZzYzJWNUwwNWhUaUIyWVd4MVpYTWdkRzhnTUM1Y2JpQWdaVzVrSUQ0K1BqMGdNRnh1SUNCemRHRnlkQ0ErUGo0OUlEQmNibHh1SUNCcFppQW9aVzVrSUR3OUlITjBZWEowS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2NuWEc0Z0lIMWNibHh1SUNCcFppQW9JV1Z1WTI5a2FXNW5LU0JsYm1OdlpHbHVaeUE5SUNkMWRHWTRKMXh1WEc0Z0lIZG9hV3hsSUNoMGNuVmxLU0I3WEc0Z0lDQWdjM2RwZEdOb0lDaGxibU52WkdsdVp5a2dlMXh1SUNBZ0lDQWdZMkZ6WlNBbmFHVjRKenBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2hsZUZOc2FXTmxLSFJvYVhNc0lITjBZWEowTENCbGJtUXBYRzVjYmlBZ0lDQWdJR05oYzJVZ0ozVjBaamduT2x4dUlDQWdJQ0FnWTJGelpTQW5kWFJtTFRnbk9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RYUm1PRk5zYVdObEtIUm9hWE1zSUhOMFlYSjBMQ0JsYm1RcFhHNWNiaUFnSUNBZ0lHTmhjMlVnSjJGelkybHBKenBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0Z6WTJscFUyeHBZMlVvZEdocGN5d2djM1JoY25Rc0lHVnVaQ2xjYmx4dUlDQWdJQ0FnWTJGelpTQW5iR0YwYVc0eEp6cGNiaUFnSUNBZ0lHTmhjMlVnSjJKcGJtRnllU2M2WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJzWVhScGJqRlRiR2xqWlNoMGFHbHpMQ0J6ZEdGeWRDd2daVzVrS1Z4dVhHNGdJQ0FnSUNCallYTmxJQ2RpWVhObE5qUW5PbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZbUZ6WlRZMFUyeHBZMlVvZEdocGN5d2djM1JoY25Rc0lHVnVaQ2xjYmx4dUlDQWdJQ0FnWTJGelpTQW5kV056TWljNlhHNGdJQ0FnSUNCallYTmxJQ2QxWTNNdE1pYzZYRzRnSUNBZ0lDQmpZWE5sSUNkMWRHWXhObXhsSnpwY2JpQWdJQ0FnSUdOaGMyVWdKM1YwWmkweE5teGxKenBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFYwWmpFMmJHVlRiR2xqWlNoMGFHbHpMQ0J6ZEdGeWRDd2daVzVrS1Z4dVhHNGdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNCcFppQW9iRzkzWlhKbFpFTmhjMlVwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oxVnVhMjV2ZDI0Z1pXNWpiMlJwYm1jNklDY2dLeUJsYm1OdlpHbHVaeWxjYmlBZ0lDQWdJQ0FnWlc1amIyUnBibWNnUFNBb1pXNWpiMlJwYm1jZ0t5QW5KeWt1ZEc5TWIzZGxja05oYzJVb0tWeHVJQ0FnSUNBZ0lDQnNiM2RsY21Wa1EyRnpaU0E5SUhSeWRXVmNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVMeThnVkdocGN5QndjbTl3WlhKMGVTQnBjeUIxYzJWa0lHSjVJR0JDZFdabVpYSXVhWE5DZFdabVpYSmdJQ2hoYm1RZ2RHaGxJR0JwY3kxaWRXWm1aWEpnSUc1d2JTQndZV05yWVdkbEtWeHVMeThnZEc4Z1pHVjBaV04wSUdFZ1FuVm1abVZ5SUdsdWMzUmhibU5sTGlCSmRDZHpJRzV2ZENCd2IzTnphV0pzWlNCMGJ5QjFjMlVnWUdsdWMzUmhibU5sYjJZZ1FuVm1abVZ5WUZ4dUx5OGdjbVZzYVdGaWJIa2dhVzRnWVNCaWNtOTNjMlZ5YVdaNUlHTnZiblJsZUhRZ1ltVmpZWFZ6WlNCMGFHVnlaU0JqYjNWc1pDQmlaU0J0ZFd4MGFYQnNaU0JrYVdabVpYSmxiblJjYmk4dklHTnZjR2xsY3lCdlppQjBhR1VnSjJKMVptWmxjaWNnY0dGamEyRm5aU0JwYmlCMWMyVXVJRlJvYVhNZ2JXVjBhRzlrSUhkdmNtdHpJR1YyWlc0Z1ptOXlJRUoxWm1abGNseHVMeThnYVc1emRHRnVZMlZ6SUhSb1lYUWdkMlZ5WlNCamNtVmhkR1ZrSUdaeWIyMGdZVzV2ZEdobGNpQmpiM0I1SUc5bUlIUm9aU0JnWW5WbVptVnlZQ0J3WVdOcllXZGxMbHh1THk4Z1UyVmxPaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Wm1WeWIzTnpMMkoxWm1abGNpOXBjM04xWlhNdk1UVTBYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbDlwYzBKMVptWmxjaUE5SUhSeWRXVmNibHh1Wm5WdVkzUnBiMjRnYzNkaGNDQW9ZaXdnYml3Z2JTa2dlMXh1SUNCMllYSWdhU0E5SUdKYmJsMWNiaUFnWWx0dVhTQTlJR0piYlYxY2JpQWdZbHR0WFNBOUlHbGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1emQyRndNVFlnUFNCbWRXNWpkR2x2YmlCemQyRndNVFlnS0NrZ2UxeHVJQ0IyWVhJZ2JHVnVJRDBnZEdocGN5NXNaVzVuZEdoY2JpQWdhV1lnS0d4bGJpQWxJRElnSVQwOUlEQXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dVbUZ1WjJWRmNuSnZjaWduUW5WbVptVnlJSE5wZW1VZ2JYVnpkQ0JpWlNCaElHMTFiSFJwY0d4bElHOW1JREUyTFdKcGRITW5LVnh1SUNCOVhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYkdWdU95QnBJQ3M5SURJcElIdGNiaUFnSUNCemQyRndLSFJvYVhNc0lHa3NJR2tnS3lBeEtWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCMGFHbHpYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWMzZGhjRE15SUQwZ1puVnVZM1JwYjI0Z2MzZGhjRE15SUNncElIdGNiaUFnZG1GeUlHeGxiaUE5SUhSb2FYTXViR1Z1WjNSb1hHNGdJR2xtSUNoc1pXNGdKU0EwSUNFOVBTQXdLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRkpoYm1kbFJYSnliM0lvSjBKMVptWmxjaUJ6YVhwbElHMTFjM1FnWW1VZ1lTQnRkV3gwYVhCc1pTQnZaaUF6TWkxaWFYUnpKeWxjYmlBZ2ZWeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUd4bGJqc2dhU0FyUFNBMEtTQjdYRzRnSUNBZ2MzZGhjQ2gwYUdsekxDQnBMQ0JwSUNzZ015bGNiaUFnSUNCemQyRndLSFJvYVhNc0lHa2dLeUF4TENCcElDc2dNaWxjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdkR2hwYzF4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbk4zWVhBMk5DQTlJR1oxYm1OMGFXOXVJSE4zWVhBMk5DQW9LU0I3WEc0Z0lIWmhjaUJzWlc0Z1BTQjBhR2x6TG14bGJtZDBhRnh1SUNCcFppQW9iR1Z1SUNVZ09DQWhQVDBnTUNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCU1lXNW5aVVZ5Y205eUtDZENkV1ptWlhJZ2MybDZaU0J0ZFhOMElHSmxJR0VnYlhWc2RHbHdiR1VnYjJZZ05qUXRZbWwwY3ljcFhHNGdJSDFjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnNaVzQ3SUdrZ0t6MGdPQ2tnZTF4dUlDQWdJSE4zWVhBb2RHaHBjeXdnYVN3Z2FTQXJJRGNwWEc0Z0lDQWdjM2RoY0NoMGFHbHpMQ0JwSUNzZ01Td2dhU0FySURZcFhHNGdJQ0FnYzNkaGNDaDBhR2x6TENCcElDc2dNaXdnYVNBcklEVXBYRzRnSUNBZ2MzZGhjQ2gwYUdsekxDQnBJQ3NnTXl3Z2FTQXJJRFFwWEc0Z0lIMWNiaUFnY21WMGRYSnVJSFJvYVhOY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeUE5SUdaMWJtTjBhVzl1SUhSdlUzUnlhVzVuSUNncElIdGNiaUFnZG1GeUlHeGxibWQwYUNBOUlIUm9hWE11YkdWdVozUm9YRzRnSUdsbUlDaHNaVzVuZEdnZ1BUMDlJREFwSUhKbGRIVnliaUFuSjF4dUlDQnBaaUFvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0E5UFQwZ01Da2djbVYwZFhKdUlIVjBaamhUYkdsalpTaDBhR2x6TENBd0xDQnNaVzVuZEdncFhHNGdJSEpsZEhWeWJpQnpiRzkzVkc5VGRISnBibWN1WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektWeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5SdlRHOWpZV3hsVTNSeWFXNW5JRDBnUW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaMXh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG1WeGRXRnNjeUE5SUdaMWJtTjBhVzl1SUdWeGRXRnNjeUFvWWlrZ2UxeHVJQ0JwWmlBb0lVSjFabVpsY2k1cGMwSjFabVpsY2loaUtTa2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduUVhKbmRXMWxiblFnYlhWemRDQmlaU0JoSUVKMVptWmxjaWNwWEc0Z0lHbG1JQ2gwYUdseklEMDlQU0JpS1NCeVpYUjFjbTRnZEhKMVpWeHVJQ0J5WlhSMWNtNGdRblZtWm1WeUxtTnZiWEJoY21Vb2RHaHBjeXdnWWlrZ1BUMDlJREJjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXBibk53WldOMElEMGdablZ1WTNScGIyNGdhVzV6Y0dWamRDQW9LU0I3WEc0Z0lIWmhjaUJ6ZEhJZ1BTQW5KMXh1SUNCMllYSWdiV0Y0SUQwZ1pYaHdiM0owY3k1SlRsTlFSVU5VWDAxQldGOUNXVlJGVTF4dUlDQnpkSElnUFNCMGFHbHpMblJ2VTNSeWFXNW5LQ2RvWlhnbkxDQXdMQ0J0WVhncExuSmxjR3hoWTJVb0x5Z3Vleko5S1M5bkxDQW5KREVnSnlrdWRISnBiU2dwWEc0Z0lHbG1JQ2gwYUdsekxteGxibWQwYUNBK0lHMWhlQ2tnYzNSeUlDczlJQ2NnTGk0dUlDZGNiaUFnY21WMGRYSnVJQ2M4UW5WbVptVnlJQ2NnS3lCemRISWdLeUFuUGlkY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzVqYjIxd1lYSmxJRDBnWm5WdVkzUnBiMjRnWTI5dGNHRnlaU0FvZEdGeVoyVjBMQ0J6ZEdGeWRDd2daVzVrTENCMGFHbHpVM1JoY25Rc0lIUm9hWE5GYm1RcElIdGNiaUFnYVdZZ0tHbHpTVzV6ZEdGdVkyVW9kR0Z5WjJWMExDQlZhVzUwT0VGeWNtRjVLU2tnZTF4dUlDQWdJSFJoY21kbGRDQTlJRUoxWm1abGNpNW1jbTl0S0hSaGNtZGxkQ3dnZEdGeVoyVjBMbTltWm5ObGRDd2dkR0Z5WjJWMExtSjVkR1ZNWlc1bmRHZ3BYRzRnSUgxY2JpQWdhV1lnS0NGQ2RXWm1aWEl1YVhOQ2RXWm1aWElvZEdGeVoyVjBLU2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWEc0Z0lDQWdJQ0FuVkdobElGd2lkR0Z5WjJWMFhDSWdZWEpuZFcxbGJuUWdiWFZ6ZENCaVpTQnZibVVnYjJZZ2RIbHdaU0JDZFdabVpYSWdiM0lnVldsdWREaEJjbkpoZVM0Z0p5QXJYRzRnSUNBZ0lDQW5VbVZqWldsMlpXUWdkSGx3WlNBbklDc2dLSFI1Y0dWdlppQjBZWEpuWlhRcFhHNGdJQ0FnS1Z4dUlDQjlYRzVjYmlBZ2FXWWdLSE4wWVhKMElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0J6ZEdGeWRDQTlJREJjYmlBZ2ZWeHVJQ0JwWmlBb1pXNWtJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNCbGJtUWdQU0IwWVhKblpYUWdQeUIwWVhKblpYUXViR1Z1WjNSb0lEb2dNRnh1SUNCOVhHNGdJR2xtSUNoMGFHbHpVM1JoY25RZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJSFJvYVhOVGRHRnlkQ0E5SURCY2JpQWdmVnh1SUNCcFppQW9kR2hwYzBWdVpDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnZEdocGMwVnVaQ0E5SUhSb2FYTXViR1Z1WjNSb1hHNGdJSDFjYmx4dUlDQnBaaUFvYzNSaGNuUWdQQ0F3SUh4OElHVnVaQ0ErSUhSaGNtZGxkQzVzWlc1bmRHZ2dmSHdnZEdocGMxTjBZWEowSUR3Z01DQjhmQ0IwYUdselJXNWtJRDRnZEdocGN5NXNaVzVuZEdncElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1VtRnVaMlZGY25KdmNpZ25iM1YwSUc5bUlISmhibWRsSUdsdVpHVjRKeWxjYmlBZ2ZWeHVYRzRnSUdsbUlDaDBhR2x6VTNSaGNuUWdQajBnZEdocGMwVnVaQ0FtSmlCemRHRnlkQ0ErUFNCbGJtUXBJSHRjYmlBZ0lDQnlaWFIxY200Z01GeHVJQ0I5WEc0Z0lHbG1JQ2gwYUdselUzUmhjblFnUGowZ2RHaHBjMFZ1WkNrZ2UxeHVJQ0FnSUhKbGRIVnliaUF0TVZ4dUlDQjlYRzRnSUdsbUlDaHpkR0Z5ZENBK1BTQmxibVFwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdNVnh1SUNCOVhHNWNiaUFnYzNSaGNuUWdQajQrUFNBd1hHNGdJR1Z1WkNBK1BqNDlJREJjYmlBZ2RHaHBjMU4wWVhKMElENCtQajBnTUZ4dUlDQjBhR2x6Ulc1a0lENCtQajBnTUZ4dVhHNGdJR2xtSUNoMGFHbHpJRDA5UFNCMFlYSm5aWFFwSUhKbGRIVnliaUF3WEc1Y2JpQWdkbUZ5SUhnZ1BTQjBhR2x6Ulc1a0lDMGdkR2hwYzFOMFlYSjBYRzRnSUhaaGNpQjVJRDBnWlc1a0lDMGdjM1JoY25SY2JpQWdkbUZ5SUd4bGJpQTlJRTFoZEdndWJXbHVLSGdzSUhrcFhHNWNiaUFnZG1GeUlIUm9hWE5EYjNCNUlEMGdkR2hwY3k1emJHbGpaU2gwYUdselUzUmhjblFzSUhSb2FYTkZibVFwWEc0Z0lIWmhjaUIwWVhKblpYUkRiM0I1SUQwZ2RHRnlaMlYwTG5Oc2FXTmxLSE4wWVhKMExDQmxibVFwWEc1Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JzWlc0N0lDc3JhU2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpRMjl3ZVZ0cFhTQWhQVDBnZEdGeVoyVjBRMjl3ZVZ0cFhTa2dlMXh1SUNBZ0lDQWdlQ0E5SUhSb2FYTkRiM0I1VzJsZFhHNGdJQ0FnSUNCNUlEMGdkR0Z5WjJWMFEyOXdlVnRwWFZ4dUlDQWdJQ0FnWW5KbFlXdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnBaaUFvZUNBOElIa3BJSEpsZEhWeWJpQXRNVnh1SUNCcFppQW9lU0E4SUhncElISmxkSFZ5YmlBeFhHNGdJSEpsZEhWeWJpQXdYRzU5WEc1Y2JpOHZJRVpwYm1SeklHVnBkR2hsY2lCMGFHVWdabWx5YzNRZ2FXNWtaWGdnYjJZZ1lIWmhiR0FnYVc0Z1lHSjFabVpsY21BZ1lYUWdiMlptYzJWMElENDlJR0JpZVhSbFQyWm1jMlYwWUN4Y2JpOHZJRTlTSUhSb1pTQnNZWE4wSUdsdVpHVjRJRzltSUdCMllXeGdJR2x1SUdCaWRXWm1aWEpnSUdGMElHOW1abk5sZENBOFBTQmdZbmwwWlU5bVpuTmxkR0F1WEc0dkwxeHVMeThnUVhKbmRXMWxiblJ6T2x4dUx5OGdMU0JpZFdabVpYSWdMU0JoSUVKMVptWmxjaUIwYnlCelpXRnlZMmhjYmk4dklDMGdkbUZzSUMwZ1lTQnpkSEpwYm1jc0lFSjFabVpsY2l3Z2IzSWdiblZ0WW1WeVhHNHZMeUF0SUdKNWRHVlBabVp6WlhRZ0xTQmhiaUJwYm1SbGVDQnBiblJ2SUdCaWRXWm1aWEpnT3lCM2FXeHNJR0psSUdOc1lXMXdaV1FnZEc4Z1lXNGdhVzUwTXpKY2JpOHZJQzBnWlc1amIyUnBibWNnTFNCaGJpQnZjSFJwYjI1aGJDQmxibU52WkdsdVp5d2djbVZzWlhaaGJuUWdhWE1nZG1Gc0lHbHpJR0VnYzNSeWFXNW5YRzR2THlBdElHUnBjaUF0SUhSeWRXVWdabTl5SUdsdVpHVjRUMllzSUdaaGJITmxJR1p2Y2lCc1lYTjBTVzVrWlhoUFpseHVablZ1WTNScGIyNGdZbWxrYVhKbFkzUnBiMjVoYkVsdVpHVjRUMllnS0dKMVptWmxjaXdnZG1Gc0xDQmllWFJsVDJabWMyVjBMQ0JsYm1OdlpHbHVaeXdnWkdseUtTQjdYRzRnSUM4dklFVnRjSFI1SUdKMVptWmxjaUJ0WldGdWN5QnVieUJ0WVhSamFGeHVJQ0JwWmlBb1luVm1abVZ5TG14bGJtZDBhQ0E5UFQwZ01Da2djbVYwZFhKdUlDMHhYRzVjYmlBZ0x5OGdUbTl5YldGc2FYcGxJR0o1ZEdWUFptWnpaWFJjYmlBZ2FXWWdLSFI1Y0dWdlppQmllWFJsVDJabWMyVjBJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUdWdVkyOWthVzVuSUQwZ1lubDBaVTltWm5ObGRGeHVJQ0FnSUdKNWRHVlBabVp6WlhRZ1BTQXdYRzRnSUgwZ1pXeHpaU0JwWmlBb1lubDBaVTltWm5ObGRDQStJREI0TjJabVptWm1abVlwSUh0Y2JpQWdJQ0JpZVhSbFQyWm1jMlYwSUQwZ01IZzNabVptWm1abVpseHVJQ0I5SUdWc2MyVWdhV1lnS0dKNWRHVlBabVp6WlhRZ1BDQXRNSGc0TURBd01EQXdNQ2tnZTF4dUlDQWdJR0o1ZEdWUFptWnpaWFFnUFNBdE1IZzRNREF3TURBd01GeHVJQ0I5WEc0Z0lHSjVkR1ZQWm1aelpYUWdQU0FyWW5sMFpVOW1abk5sZENBdkx5QkRiMlZ5WTJVZ2RHOGdUblZ0WW1WeUxseHVJQ0JwWmlBb2JuVnRZbVZ5U1hOT1lVNG9ZbmwwWlU5bVpuTmxkQ2twSUh0Y2JpQWdJQ0F2THlCaWVYUmxUMlptYzJWME9pQnBkQ0JwZENkeklIVnVaR1ZtYVc1bFpDd2diblZzYkN3Z1RtRk9MQ0JjSW1admIxd2lMQ0JsZEdNc0lITmxZWEpqYUNCM2FHOXNaU0JpZFdabVpYSmNiaUFnSUNCaWVYUmxUMlptYzJWMElEMGdaR2x5SUQ4Z01DQTZJQ2hpZFdabVpYSXViR1Z1WjNSb0lDMGdNU2xjYmlBZ2ZWeHVYRzRnSUM4dklFNXZjbTFoYkdsNlpTQmllWFJsVDJabWMyVjBPaUJ1WldkaGRHbDJaU0J2Wm1aelpYUnpJSE4wWVhKMElHWnliMjBnZEdobElHVnVaQ0J2WmlCMGFHVWdZblZtWm1WeVhHNGdJR2xtSUNoaWVYUmxUMlptYzJWMElEd2dNQ2tnWW5sMFpVOW1abk5sZENBOUlHSjFabVpsY2k1c1pXNW5kR2dnS3lCaWVYUmxUMlptYzJWMFhHNGdJR2xtSUNoaWVYUmxUMlptYzJWMElENDlJR0oxWm1abGNpNXNaVzVuZEdncElIdGNiaUFnSUNCcFppQW9aR2x5S1NCeVpYUjFjbTRnTFRGY2JpQWdJQ0JsYkhObElHSjVkR1ZQWm1aelpYUWdQU0JpZFdabVpYSXViR1Z1WjNSb0lDMGdNVnh1SUNCOUlHVnNjMlVnYVdZZ0tHSjVkR1ZQWm1aelpYUWdQQ0F3S1NCN1hHNGdJQ0FnYVdZZ0tHUnBjaWtnWW5sMFpVOW1abk5sZENBOUlEQmNiaUFnSUNCbGJITmxJSEpsZEhWeWJpQXRNVnh1SUNCOVhHNWNiaUFnTHk4Z1RtOXliV0ZzYVhwbElIWmhiRnh1SUNCcFppQW9kSGx3Wlc5bUlIWmhiQ0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCMllXd2dQU0JDZFdabVpYSXVabkp2YlNoMllXd3NJR1Z1WTI5a2FXNW5LVnh1SUNCOVhHNWNiaUFnTHk4Z1JtbHVZV3hzZVN3Z2MyVmhjbU5vSUdWcGRHaGxjaUJwYm1SbGVFOW1JQ2hwWmlCa2FYSWdhWE1nZEhKMVpTa2diM0lnYkdGemRFbHVaR1Y0VDJaY2JpQWdhV1lnS0VKMVptWmxjaTVwYzBKMVptWmxjaWgyWVd3cEtTQjdYRzRnSUNBZ0x5OGdVM0JsWTJsaGJDQmpZWE5sT2lCc2IyOXJhVzVuSUdadmNpQmxiWEIwZVNCemRISnBibWN2WW5WbVptVnlJR0ZzZDJGNWN5Qm1ZV2xzYzF4dUlDQWdJR2xtSUNoMllXd3ViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnTFRGY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHRnljbUY1U1c1a1pYaFBaaWhpZFdabVpYSXNJSFpoYkN3Z1lubDBaVTltWm5ObGRDd2daVzVqYjJScGJtY3NJR1JwY2lsY2JpQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdkbUZzSUQwOVBTQW5iblZ0WW1WeUp5a2dlMXh1SUNBZ0lIWmhiQ0E5SUhaaGJDQW1JREI0UmtZZ0x5OGdVMlZoY21Ob0lHWnZjaUJoSUdKNWRHVWdkbUZzZFdVZ1d6QXRNalUxWFZ4dUlDQWdJR2xtSUNoMGVYQmxiMllnVldsdWREaEJjbkpoZVM1d2NtOTBiM1I1Y0dVdWFXNWtaWGhQWmlBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnYVdZZ0tHUnBjaWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVldsdWREaEJjbkpoZVM1d2NtOTBiM1I1Y0dVdWFXNWtaWGhQWmk1allXeHNLR0oxWm1abGNpd2dkbUZzTENCaWVYUmxUMlptYzJWMEtWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZWcGJuUTRRWEp5WVhrdWNISnZkRzkwZVhCbExteGhjM1JKYm1SbGVFOW1MbU5oYkd3b1luVm1abVZ5TENCMllXd3NJR0o1ZEdWUFptWnpaWFFwWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCaGNuSmhlVWx1WkdWNFQyWW9ZblZtWm1WeUxDQmJJSFpoYkNCZExDQmllWFJsVDJabWMyVjBMQ0JsYm1OdlpHbHVaeXdnWkdseUtWeHVJQ0I5WEc1Y2JpQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduZG1Gc0lHMTFjM1FnWW1VZ2MzUnlhVzVuTENCdWRXMWlaWElnYjNJZ1FuVm1abVZ5SnlsY2JuMWNibHh1Wm5WdVkzUnBiMjRnWVhKeVlYbEpibVJsZUU5bUlDaGhjbklzSUhaaGJDd2dZbmwwWlU5bVpuTmxkQ3dnWlc1amIyUnBibWNzSUdScGNpa2dlMXh1SUNCMllYSWdhVzVrWlhoVGFYcGxJRDBnTVZ4dUlDQjJZWElnWVhKeVRHVnVaM1JvSUQwZ1lYSnlMbXhsYm1kMGFGeHVJQ0IyWVhJZ2RtRnNUR1Z1WjNSb0lEMGdkbUZzTG14bGJtZDBhRnh1WEc0Z0lHbG1JQ2hsYm1OdlpHbHVaeUFoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ1pXNWpiMlJwYm1jZ1BTQlRkSEpwYm1jb1pXNWpiMlJwYm1jcExuUnZURzkzWlhKRFlYTmxLQ2xjYmlBZ0lDQnBaaUFvWlc1amIyUnBibWNnUFQwOUlDZDFZM015SnlCOGZDQmxibU52WkdsdVp5QTlQVDBnSjNWamN5MHlKeUI4ZkZ4dUlDQWdJQ0FnSUNCbGJtTnZaR2x1WnlBOVBUMGdKM1YwWmpFMmJHVW5JSHg4SUdWdVkyOWthVzVuSUQwOVBTQW5kWFJtTFRFMmJHVW5LU0I3WEc0Z0lDQWdJQ0JwWmlBb1lYSnlMbXhsYm1kMGFDQThJRElnZkh3Z2RtRnNMbXhsYm1kMGFDQThJRElwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUMweFhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcGJtUmxlRk5wZW1VZ1BTQXlYRzRnSUNBZ0lDQmhjbkpNWlc1bmRHZ2dMejBnTWx4dUlDQWdJQ0FnZG1Gc1RHVnVaM1JvSUM4OUlESmNiaUFnSUNBZ0lHSjVkR1ZQWm1aelpYUWdMejBnTWx4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUhKbFlXUWdLR0oxWml3Z2FTa2dlMXh1SUNBZ0lHbG1JQ2hwYm1SbGVGTnBlbVVnUFQwOUlERXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmlkV1piYVYxY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHSjFaaTV5WldGa1ZVbHVkREUyUWtVb2FTQXFJR2x1WkdWNFUybDZaU2xjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0IyWVhJZ2FWeHVJQ0JwWmlBb1pHbHlLU0I3WEc0Z0lDQWdkbUZ5SUdadmRXNWtTVzVrWlhnZ1BTQXRNVnh1SUNBZ0lHWnZjaUFvYVNBOUlHSjVkR1ZQWm1aelpYUTdJR2tnUENCaGNuSk1aVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnYVdZZ0tISmxZV1FvWVhKeUxDQnBLU0E5UFQwZ2NtVmhaQ2gyWVd3c0lHWnZkVzVrU1c1a1pYZ2dQVDA5SUMweElEOGdNQ0E2SUdrZ0xTQm1iM1Z1WkVsdVpHVjRLU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9abTkxYm1SSmJtUmxlQ0E5UFQwZ0xURXBJR1p2ZFc1a1NXNWtaWGdnUFNCcFhHNGdJQ0FnSUNBZ0lHbG1JQ2hwSUMwZ1ptOTFibVJKYm1SbGVDQXJJREVnUFQwOUlIWmhiRXhsYm1kMGFDa2djbVYwZFhKdUlHWnZkVzVrU1c1a1pYZ2dLaUJwYm1SbGVGTnBlbVZjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR2xtSUNobWIzVnVaRWx1WkdWNElDRTlQU0F0TVNrZ2FTQXRQU0JwSUMwZ1ptOTFibVJKYm1SbGVGeHVJQ0FnSUNBZ0lDQm1iM1Z1WkVsdVpHVjRJRDBnTFRGY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnYVdZZ0tHSjVkR1ZQWm1aelpYUWdLeUIyWVd4TVpXNW5kR2dnUGlCaGNuSk1aVzVuZEdncElHSjVkR1ZQWm1aelpYUWdQU0JoY25KTVpXNW5kR2dnTFNCMllXeE1aVzVuZEdoY2JpQWdJQ0JtYjNJZ0tHa2dQU0JpZVhSbFQyWm1jMlYwT3lCcElENDlJREE3SUdrdExTa2dlMXh1SUNBZ0lDQWdkbUZ5SUdadmRXNWtJRDBnZEhKMVpWeHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FpQTlJREE3SUdvZ1BDQjJZV3hNWlc1bmRHZzdJR29yS3lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvY21WaFpDaGhjbklzSUdrZ0t5QnFLU0FoUFQwZ2NtVmhaQ2gyWVd3c0lHb3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1ptOTFibVFnUFNCbVlXeHpaVnh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNobWIzVnVaQ2tnY21WMGRYSnVJR2xjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdMVEZjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXBibU5zZFdSbGN5QTlJR1oxYm1OMGFXOXVJR2x1WTJ4MVpHVnpJQ2gyWVd3c0lHSjVkR1ZQWm1aelpYUXNJR1Z1WTI5a2FXNW5LU0I3WEc0Z0lISmxkSFZ5YmlCMGFHbHpMbWx1WkdWNFQyWW9kbUZzTENCaWVYUmxUMlptYzJWMExDQmxibU52WkdsdVp5a2dJVDA5SUMweFhHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1YVc1a1pYaFBaaUE5SUdaMWJtTjBhVzl1SUdsdVpHVjRUMllnS0haaGJDd2dZbmwwWlU5bVpuTmxkQ3dnWlc1amIyUnBibWNwSUh0Y2JpQWdjbVYwZFhKdUlHSnBaR2x5WldOMGFXOXVZV3hKYm1SbGVFOW1LSFJvYVhNc0lIWmhiQ3dnWW5sMFpVOW1abk5sZEN3Z1pXNWpiMlJwYm1jc0lIUnlkV1VwWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXViR0Z6ZEVsdVpHVjRUMllnUFNCbWRXNWpkR2x2YmlCc1lYTjBTVzVrWlhoUFppQW9kbUZzTENCaWVYUmxUMlptYzJWMExDQmxibU52WkdsdVp5a2dlMXh1SUNCeVpYUjFjbTRnWW1sa2FYSmxZM1JwYjI1aGJFbHVaR1Y0VDJZb2RHaHBjeXdnZG1Gc0xDQmllWFJsVDJabWMyVjBMQ0JsYm1OdlpHbHVaeXdnWm1Gc2MyVXBYRzU5WEc1Y2JtWjFibU4wYVc5dUlHaGxlRmR5YVhSbElDaGlkV1lzSUhOMGNtbHVaeXdnYjJabWMyVjBMQ0JzWlc1bmRHZ3BJSHRjYmlBZ2IyWm1jMlYwSUQwZ1RuVnRZbVZ5S0c5bVpuTmxkQ2tnZkh3Z01GeHVJQ0IyWVhJZ2NtVnRZV2x1YVc1bklEMGdZblZtTG14bGJtZDBhQ0F0SUc5bVpuTmxkRnh1SUNCcFppQW9JV3hsYm1kMGFDa2dlMXh1SUNBZ0lHeGxibWQwYUNBOUlISmxiV0ZwYm1sdVoxeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHeGxibWQwYUNBOUlFNTFiV0psY2loc1pXNW5kR2dwWEc0Z0lDQWdhV1lnS0d4bGJtZDBhQ0ErSUhKbGJXRnBibWx1WnlrZ2UxeHVJQ0FnSUNBZ2JHVnVaM1JvSUQwZ2NtVnRZV2x1YVc1blhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2RtRnlJSE4wY2t4bGJpQTlJSE4wY21sdVp5NXNaVzVuZEdoY2JseHVJQ0JwWmlBb2JHVnVaM1JvSUQ0Z2MzUnlUR1Z1SUM4Z01pa2dlMXh1SUNBZ0lHeGxibWQwYUNBOUlITjBja3hsYmlBdklESmNiaUFnZlZ4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR3hsYm1kMGFEc2dLeXRwS1NCN1hHNGdJQ0FnZG1GeUlIQmhjbk5sWkNBOUlIQmhjbk5sU1c1MEtITjBjbWx1Wnk1emRXSnpkSElvYVNBcUlESXNJRElwTENBeE5pbGNiaUFnSUNCcFppQW9iblZ0WW1WeVNYTk9ZVTRvY0dGeWMyVmtLU2tnY21WMGRYSnVJR2xjYmlBZ0lDQmlkV1piYjJabWMyVjBJQ3NnYVYwZ1BTQndZWEp6WldSY2JpQWdmVnh1SUNCeVpYUjFjbTRnYVZ4dWZWeHVYRzVtZFc1amRHbHZiaUIxZEdZNFYzSnBkR1VnS0dKMVppd2djM1J5YVc1bkxDQnZabVp6WlhRc0lHeGxibWQwYUNrZ2UxeHVJQ0J5WlhSMWNtNGdZbXhwZEVKMVptWmxjaWgxZEdZNFZHOUNlWFJsY3loemRISnBibWNzSUdKMVppNXNaVzVuZEdnZ0xTQnZabVp6WlhRcExDQmlkV1lzSUc5bVpuTmxkQ3dnYkdWdVozUm9LVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmhjMk5wYVZkeWFYUmxJQ2hpZFdZc0lITjBjbWx1Wnl3Z2IyWm1jMlYwTENCc1pXNW5kR2dwSUh0Y2JpQWdjbVYwZFhKdUlHSnNhWFJDZFdabVpYSW9ZWE5qYVdsVWIwSjVkR1Z6S0hOMGNtbHVaeWtzSUdKMVppd2diMlptYzJWMExDQnNaVzVuZEdncFhHNTlYRzVjYm1aMWJtTjBhVzl1SUd4aGRHbHVNVmR5YVhSbElDaGlkV1lzSUhOMGNtbHVaeXdnYjJabWMyVjBMQ0JzWlc1bmRHZ3BJSHRjYmlBZ2NtVjBkWEp1SUdGelkybHBWM0pwZEdVb1luVm1MQ0J6ZEhKcGJtY3NJRzltWm5ObGRDd2diR1Z1WjNSb0tWeHVmVnh1WEc1bWRXNWpkR2x2YmlCaVlYTmxOalJYY21sMFpTQW9ZblZtTENCemRISnBibWNzSUc5bVpuTmxkQ3dnYkdWdVozUm9LU0I3WEc0Z0lISmxkSFZ5YmlCaWJHbDBRblZtWm1WeUtHSmhjMlUyTkZSdlFubDBaWE1vYzNSeWFXNW5LU3dnWW5WbUxDQnZabVp6WlhRc0lHeGxibWQwYUNsY2JuMWNibHh1Wm5WdVkzUnBiMjRnZFdOek1sZHlhWFJsSUNoaWRXWXNJSE4wY21sdVp5d2diMlptYzJWMExDQnNaVzVuZEdncElIdGNiaUFnY21WMGRYSnVJR0pzYVhSQ2RXWm1aWElvZFhSbU1UWnNaVlJ2UW5sMFpYTW9jM1J5YVc1bkxDQmlkV1l1YkdWdVozUm9JQzBnYjJabWMyVjBLU3dnWW5WbUxDQnZabVp6WlhRc0lHeGxibWQwYUNsY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUzY21sMFpTQTlJR1oxYm1OMGFXOXVJSGR5YVhSbElDaHpkSEpwYm1jc0lHOW1abk5sZEN3Z2JHVnVaM1JvTENCbGJtTnZaR2x1WnlrZ2UxeHVJQ0F2THlCQ2RXWm1aWElqZDNKcGRHVW9jM1J5YVc1bktWeHVJQ0JwWmlBb2IyWm1jMlYwSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQmxibU52WkdsdVp5QTlJQ2QxZEdZNEoxeHVJQ0FnSUd4bGJtZDBhQ0E5SUhSb2FYTXViR1Z1WjNSb1hHNGdJQ0FnYjJabWMyVjBJRDBnTUZ4dUlDQXZMeUJDZFdabVpYSWpkM0pwZEdVb2MzUnlhVzVuTENCbGJtTnZaR2x1WnlsY2JpQWdmU0JsYkhObElHbG1JQ2hzWlc1bmRHZ2dQVDA5SUhWdVpHVm1hVzVsWkNBbUppQjBlWEJsYjJZZ2IyWm1jMlYwSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lHVnVZMjlrYVc1bklEMGdiMlptYzJWMFhHNGdJQ0FnYkdWdVozUm9JRDBnZEdocGN5NXNaVzVuZEdoY2JpQWdJQ0J2Wm1aelpYUWdQU0F3WEc0Z0lDOHZJRUoxWm1abGNpTjNjbWwwWlNoemRISnBibWNzSUc5bVpuTmxkRnNzSUd4bGJtZDBhRjFiTENCbGJtTnZaR2x1WjEwcFhHNGdJSDBnWld4elpTQnBaaUFvYVhOR2FXNXBkR1VvYjJabWMyVjBLU2tnZTF4dUlDQWdJRzltWm5ObGRDQTlJRzltWm5ObGRDQStQajRnTUZ4dUlDQWdJR2xtSUNocGMwWnBibWwwWlNoc1pXNW5kR2dwS1NCN1hHNGdJQ0FnSUNCc1pXNW5kR2dnUFNCc1pXNW5kR2dnUGo0K0lEQmNiaUFnSUNBZ0lHbG1JQ2hsYm1OdlpHbHVaeUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQmxibU52WkdsdVp5QTlJQ2QxZEdZNEoxeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JsYm1OdlpHbHVaeUE5SUd4bGJtZDBhRnh1SUNBZ0lDQWdiR1Z1WjNSb0lEMGdkVzVrWldacGJtVmtYRzRnSUNBZ2ZWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY2JpQWdJQ0FnSUNkQ2RXWm1aWEl1ZDNKcGRHVW9jM1J5YVc1bkxDQmxibU52WkdsdVp5d2diMlptYzJWMFd5d2diR1Z1WjNSb1hTa2dhWE1nYm04Z2JHOXVaMlZ5SUhOMWNIQnZjblJsWkNkY2JpQWdJQ0FwWEc0Z0lIMWNibHh1SUNCMllYSWdjbVZ0WVdsdWFXNW5JRDBnZEdocGN5NXNaVzVuZEdnZ0xTQnZabVp6WlhSY2JpQWdhV1lnS0d4bGJtZDBhQ0E5UFQwZ2RXNWtaV1pwYm1Wa0lIeDhJR3hsYm1kMGFDQStJSEpsYldGcGJtbHVaeWtnYkdWdVozUm9JRDBnY21WdFlXbHVhVzVuWEc1Y2JpQWdhV1lnS0NoemRISnBibWN1YkdWdVozUm9JRDRnTUNBbUppQW9iR1Z1WjNSb0lEd2dNQ0I4ZkNCdlptWnpaWFFnUENBd0tTa2dmSHdnYjJabWMyVjBJRDRnZEdocGN5NXNaVzVuZEdncElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1VtRnVaMlZGY25KdmNpZ25RWFIwWlcxd2RDQjBieUIzY21sMFpTQnZkWFJ6YVdSbElHSjFabVpsY2lCaWIzVnVaSE1uS1Z4dUlDQjlYRzVjYmlBZ2FXWWdLQ0ZsYm1OdlpHbHVaeWtnWlc1amIyUnBibWNnUFNBbmRYUm1PQ2RjYmx4dUlDQjJZWElnYkc5M1pYSmxaRU5oYzJVZ1BTQm1ZV3h6WlZ4dUlDQm1iM0lnS0RzN0tTQjdYRzRnSUNBZ2MzZHBkR05vSUNobGJtTnZaR2x1WnlrZ2UxeHVJQ0FnSUNBZ1kyRnpaU0FuYUdWNEp6cGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHaGxlRmR5YVhSbEtIUm9hWE1zSUhOMGNtbHVaeXdnYjJabWMyVjBMQ0JzWlc1bmRHZ3BYRzVjYmlBZ0lDQWdJR05oYzJVZ0ozVjBaamduT2x4dUlDQWdJQ0FnWTJGelpTQW5kWFJtTFRnbk9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RYUm1PRmR5YVhSbEtIUm9hWE1zSUhOMGNtbHVaeXdnYjJabWMyVjBMQ0JzWlc1bmRHZ3BYRzVjYmlBZ0lDQWdJR05oYzJVZ0oyRnpZMmxwSnpwY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGelkybHBWM0pwZEdVb2RHaHBjeXdnYzNSeWFXNW5MQ0J2Wm1aelpYUXNJR3hsYm1kMGFDbGNibHh1SUNBZ0lDQWdZMkZ6WlNBbmJHRjBhVzR4SnpwY2JpQWdJQ0FnSUdOaGMyVWdKMkpwYm1GeWVTYzZYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnNZWFJwYmpGWGNtbDBaU2gwYUdsekxDQnpkSEpwYm1jc0lHOW1abk5sZEN3Z2JHVnVaM1JvS1Z4dVhHNGdJQ0FnSUNCallYTmxJQ2RpWVhObE5qUW5PbHh1SUNBZ0lDQWdJQ0F2THlCWFlYSnVhVzVuT2lCdFlYaE1aVzVuZEdnZ2JtOTBJSFJoYTJWdUlHbHVkRzhnWVdOamIzVnVkQ0JwYmlCaVlYTmxOalJYY21sMFpWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1ltRnpaVFkwVjNKcGRHVW9kR2hwY3l3Z2MzUnlhVzVuTENCdlptWnpaWFFzSUd4bGJtZDBhQ2xjYmx4dUlDQWdJQ0FnWTJGelpTQW5kV056TWljNlhHNGdJQ0FnSUNCallYTmxJQ2QxWTNNdE1pYzZYRzRnSUNBZ0lDQmpZWE5sSUNkMWRHWXhObXhsSnpwY2JpQWdJQ0FnSUdOaGMyVWdKM1YwWmkweE5teGxKenBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFZqY3pKWGNtbDBaU2gwYUdsekxDQnpkSEpwYm1jc0lHOW1abk5sZEN3Z2JHVnVaM1JvS1Z4dVhHNGdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNCcFppQW9iRzkzWlhKbFpFTmhjMlVwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oxVnVhMjV2ZDI0Z1pXNWpiMlJwYm1jNklDY2dLeUJsYm1OdlpHbHVaeWxjYmlBZ0lDQWdJQ0FnWlc1amIyUnBibWNnUFNBb0p5Y2dLeUJsYm1OdlpHbHVaeWt1ZEc5TWIzZGxja05oYzJVb0tWeHVJQ0FnSUNBZ0lDQnNiM2RsY21Wa1EyRnpaU0E5SUhSeWRXVmNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNTBiMHBUVDA0Z1BTQm1kVzVqZEdsdmJpQjBiMHBUVDA0Z0tDa2dlMXh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJSFI1Y0dVNklDZENkV1ptWlhJbkxGeHVJQ0FnSUdSaGRHRTZJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXpiR2xqWlM1allXeHNLSFJvYVhNdVgyRnljaUI4ZkNCMGFHbHpMQ0F3S1Z4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHSmhjMlUyTkZOc2FXTmxJQ2hpZFdZc0lITjBZWEowTENCbGJtUXBJSHRjYmlBZ2FXWWdLSE4wWVhKMElEMDlQU0F3SUNZbUlHVnVaQ0E5UFQwZ1luVm1MbXhsYm1kMGFDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCaVlYTmxOalF1Wm5KdmJVSjVkR1ZCY25KaGVTaGlkV1lwWEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnY21WMGRYSnVJR0poYzJVMk5DNW1jbTl0UW5sMFpVRnljbUY1S0dKMVppNXpiR2xqWlNoemRHRnlkQ3dnWlc1a0tTbGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUIxZEdZNFUyeHBZMlVnS0dKMVppd2djM1JoY25Rc0lHVnVaQ2tnZTF4dUlDQmxibVFnUFNCTllYUm9MbTFwYmloaWRXWXViR1Z1WjNSb0xDQmxibVFwWEc0Z0lIWmhjaUJ5WlhNZ1BTQmJYVnh1WEc0Z0lIWmhjaUJwSUQwZ2MzUmhjblJjYmlBZ2QyaHBiR1VnS0drZ1BDQmxibVFwSUh0Y2JpQWdJQ0IyWVhJZ1ptbHljM1JDZVhSbElEMGdZblZtVzJsZFhHNGdJQ0FnZG1GeUlHTnZaR1ZRYjJsdWRDQTlJRzUxYkd4Y2JpQWdJQ0IyWVhJZ1lubDBaWE5RWlhKVFpYRjFaVzVqWlNBOUlDaG1hWEp6ZEVKNWRHVWdQaUF3ZUVWR0tTQS9JRFJjYmlBZ0lDQWdJRG9nS0dacGNuTjBRbmwwWlNBK0lEQjRSRVlwSUQ4Z00xeHVJQ0FnSUNBZ0lDQTZJQ2htYVhKemRFSjVkR1VnUGlBd2VFSkdLU0EvSURKY2JpQWdJQ0FnSUNBZ0lDQTZJREZjYmx4dUlDQWdJR2xtSUNocElDc2dZbmwwWlhOUVpYSlRaWEYxWlc1alpTQThQU0JsYm1RcElIdGNiaUFnSUNBZ0lIWmhjaUJ6WldOdmJtUkNlWFJsTENCMGFHbHlaRUo1ZEdVc0lHWnZkWEowYUVKNWRHVXNJSFJsYlhCRGIyUmxVRzlwYm5SY2JseHVJQ0FnSUNBZ2MzZHBkR05vSUNoaWVYUmxjMUJsY2xObGNYVmxibU5sS1NCN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnTVRwY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWm1seWMzUkNlWFJsSUR3Z01IZzRNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjlrWlZCdmFXNTBJRDBnWm1seWMzUkNlWFJsWEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lHTmhjMlVnTWpwY2JpQWdJQ0FnSUNBZ0lDQnpaV052Ym1SQ2VYUmxJRDBnWW5WbVcya2dLeUF4WFZ4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2dvYzJWamIyNWtRbmwwWlNBbUlEQjRRekFwSUQwOVBTQXdlRGd3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwWlcxd1EyOWtaVkJ2YVc1MElEMGdLR1pwY25OMFFubDBaU0FtSURCNE1VWXBJRHc4SURCNE5pQjhJQ2h6WldOdmJtUkNlWFJsSUNZZ01IZ3pSaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwWlcxd1EyOWtaVkJ2YVc1MElENGdNSGczUmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyUmxVRzlwYm5RZ1BTQjBaVzF3UTI5a1pWQnZhVzUwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUdOaGMyVWdNenBjYmlBZ0lDQWdJQ0FnSUNCelpXTnZibVJDZVhSbElEMGdZblZtVzJrZ0t5QXhYVnh1SUNBZ0lDQWdJQ0FnSUhSb2FYSmtRbmwwWlNBOUlHSjFabHRwSUNzZ01sMWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0tITmxZMjl1WkVKNWRHVWdKaUF3ZUVNd0tTQTlQVDBnTUhnNE1DQW1KaUFvZEdocGNtUkNlWFJsSUNZZ01IaERNQ2tnUFQwOUlEQjRPREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJsYlhCRGIyUmxVRzlwYm5RZ1BTQW9abWx5YzNSQ2VYUmxJQ1lnTUhoR0tTQThQQ0F3ZUVNZ2ZDQW9jMlZqYjI1a1FubDBaU0FtSURCNE0wWXBJRHc4SURCNE5pQjhJQ2gwYUdseVpFSjVkR1VnSmlBd2VETkdLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJsYlhCRGIyUmxVRzlwYm5RZ1BpQXdlRGRHUmlBbUppQW9kR1Z0Y0VOdlpHVlFiMmx1ZENBOElEQjRSRGd3TUNCOGZDQjBaVzF3UTI5a1pWQnZhVzUwSUQ0Z01IaEVSa1pHS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyUmxVRzlwYm5RZ1BTQjBaVzF3UTI5a1pWQnZhVzUwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUdOaGMyVWdORHBjYmlBZ0lDQWdJQ0FnSUNCelpXTnZibVJDZVhSbElEMGdZblZtVzJrZ0t5QXhYVnh1SUNBZ0lDQWdJQ0FnSUhSb2FYSmtRbmwwWlNBOUlHSjFabHRwSUNzZ01sMWNiaUFnSUNBZ0lDQWdJQ0JtYjNWeWRHaENlWFJsSUQwZ1luVm1XMmtnS3lBelhWeHVJQ0FnSUNBZ0lDQWdJR2xtSUNnb2MyVmpiMjVrUW5sMFpTQW1JREI0UXpBcElEMDlQU0F3ZURnd0lDWW1JQ2gwYUdseVpFSjVkR1VnSmlBd2VFTXdLU0E5UFQwZ01IZzRNQ0FtSmlBb1ptOTFjblJvUW5sMFpTQW1JREI0UXpBcElEMDlQU0F3ZURnd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMFpXMXdRMjlrWlZCdmFXNTBJRDBnS0dacGNuTjBRbmwwWlNBbUlEQjRSaWtnUER3Z01IZ3hNaUI4SUNoelpXTnZibVJDZVhSbElDWWdNSGd6UmlrZ1BEd2dNSGhESUh3Z0tIUm9hWEprUW5sMFpTQW1JREI0TTBZcElEdzhJREI0TmlCOElDaG1iM1Z5ZEdoQ2VYUmxJQ1lnTUhnelJpbGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBaVzF3UTI5a1pWQnZhVzUwSUQ0Z01IaEdSa1pHSUNZbUlIUmxiWEJEYjJSbFVHOXBiblFnUENBd2VERXhNREF3TUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyUmxVRzlwYm5RZ1BTQjBaVzF3UTI5a1pWQnZhVzUwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoamIyUmxVRzlwYm5RZ1BUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDOHZJSGRsSUdScFpDQnViM1FnWjJWdVpYSmhkR1VnWVNCMllXeHBaQ0JqYjJSbFVHOXBiblFnYzI4Z2FXNXpaWEowSUdGY2JpQWdJQ0FnSUM4dklISmxjR3hoWTJWdFpXNTBJR05vWVhJZ0tGVXJSa1pHUkNrZ1lXNWtJR0ZrZG1GdVkyVWdiMjVzZVNBeElHSjVkR1ZjYmlBZ0lDQWdJR052WkdWUWIybHVkQ0E5SURCNFJrWkdSRnh1SUNBZ0lDQWdZbmwwWlhOUVpYSlRaWEYxWlc1alpTQTlJREZjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR052WkdWUWIybHVkQ0ErSURCNFJrWkdSaWtnZTF4dUlDQWdJQ0FnTHk4Z1pXNWpiMlJsSUhSdklIVjBaakUySUNoemRYSnliMmRoZEdVZ2NHRnBjaUJrWVc1alpTbGNiaUFnSUNBZ0lHTnZaR1ZRYjJsdWRDQXRQU0F3ZURFd01EQXdYRzRnSUNBZ0lDQnlaWE11Y0hWemFDaGpiMlJsVUc5cGJuUWdQajQrSURFd0lDWWdNSGd6UmtZZ2ZDQXdlRVE0TURBcFhHNGdJQ0FnSUNCamIyUmxVRzlwYm5RZ1BTQXdlRVJETURBZ2ZDQmpiMlJsVUc5cGJuUWdKaUF3ZUROR1JseHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGN5NXdkWE5vS0dOdlpHVlFiMmx1ZENsY2JpQWdJQ0JwSUNzOUlHSjVkR1Z6VUdWeVUyVnhkV1Z1WTJWY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCa1pXTnZaR1ZEYjJSbFVHOXBiblJ6UVhKeVlYa29jbVZ6S1Z4dWZWeHVYRzR2THlCQ1lYTmxaQ0J2YmlCb2RIUndPaTh2YzNSaFkydHZkbVZ5Wm14dmR5NWpiMjB2WVM4eU1qYzBOekkzTWk4Mk9EQTNORElzSUhSb1pTQmljbTkzYzJWeUlIZHBkR2hjYmk4dklIUm9aU0JzYjNkbGMzUWdiR2x0YVhRZ2FYTWdRMmh5YjIxbExDQjNhWFJvSURCNE1UQXdNREFnWVhKbmN5NWNiaTh2SUZkbElHZHZJREVnYldGbmJtbDBkV1JsSUd4bGMzTXNJR1p2Y2lCellXWmxkSGxjYm5aaGNpQk5RVmhmUVZKSFZVMUZUbFJUWDB4RlRrZFVTQ0E5SURCNE1UQXdNRnh1WEc1bWRXNWpkR2x2YmlCa1pXTnZaR1ZEYjJSbFVHOXBiblJ6UVhKeVlYa2dLR052WkdWUWIybHVkSE1wSUh0Y2JpQWdkbUZ5SUd4bGJpQTlJR052WkdWUWIybHVkSE11YkdWdVozUm9YRzRnSUdsbUlDaHNaVzRnUEQwZ1RVRllYMEZTUjFWTlJVNVVVMTlNUlU1SFZFZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z1UzUnlhVzVuTG1aeWIyMURhR0Z5UTI5a1pTNWhjSEJzZVNoVGRISnBibWNzSUdOdlpHVlFiMmx1ZEhNcElDOHZJR0YyYjJsa0lHVjRkSEpoSUhOc2FXTmxLQ2xjYmlBZ2ZWeHVYRzRnSUM4dklFUmxZMjlrWlNCcGJpQmphSFZ1YTNNZ2RHOGdZWFp2YVdRZ1hDSmpZV3hzSUhOMFlXTnJJSE5wZW1VZ1pYaGpaV1ZrWldSY0lpNWNiaUFnZG1GeUlISmxjeUE5SUNjblhHNGdJSFpoY2lCcElEMGdNRnh1SUNCM2FHbHNaU0FvYVNBOElHeGxiaWtnZTF4dUlDQWdJSEpsY3lBclBTQlRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxMbUZ3Y0d4NUtGeHVJQ0FnSUNBZ1UzUnlhVzVuTEZ4dUlDQWdJQ0FnWTI5a1pWQnZhVzUwY3k1emJHbGpaU2hwTENCcElDczlJRTFCV0Y5QlVrZFZUVVZPVkZOZlRFVk9SMVJJS1Z4dUlDQWdJQ2xjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVZ6WEc1OVhHNWNibVoxYm1OMGFXOXVJR0Z6WTJscFUyeHBZMlVnS0dKMVppd2djM1JoY25Rc0lHVnVaQ2tnZTF4dUlDQjJZWElnY21WMElEMGdKeWRjYmlBZ1pXNWtJRDBnVFdGMGFDNXRhVzRvWW5WbUxteGxibWQwYUN3Z1pXNWtLVnh1WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0J6ZEdGeWREc2dhU0E4SUdWdVpEc2dLeXRwS1NCN1hHNGdJQ0FnY21WMElDczlJRk4wY21sdVp5NW1jbTl0UTJoaGNrTnZaR1VvWW5WbVcybGRJQ1lnTUhnM1JpbGNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVjBYRzU5WEc1Y2JtWjFibU4wYVc5dUlHeGhkR2x1TVZOc2FXTmxJQ2hpZFdZc0lITjBZWEowTENCbGJtUXBJSHRjYmlBZ2RtRnlJSEpsZENBOUlDY25YRzRnSUdWdVpDQTlJRTFoZEdndWJXbHVLR0oxWmk1c1pXNW5kR2dzSUdWdVpDbGNibHh1SUNCbWIzSWdLSFpoY2lCcElEMGdjM1JoY25RN0lHa2dQQ0JsYm1RN0lDc3JhU2tnZTF4dUlDQWdJSEpsZENBclBTQlRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLR0oxWmx0cFhTbGNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVjBYRzU5WEc1Y2JtWjFibU4wYVc5dUlHaGxlRk5zYVdObElDaGlkV1lzSUhOMFlYSjBMQ0JsYm1RcElIdGNiaUFnZG1GeUlHeGxiaUE5SUdKMVppNXNaVzVuZEdoY2JseHVJQ0JwWmlBb0lYTjBZWEowSUh4OElITjBZWEowSUR3Z01Da2djM1JoY25RZ1BTQXdYRzRnSUdsbUlDZ2haVzVrSUh4OElHVnVaQ0E4SURBZ2ZId2daVzVrSUQ0Z2JHVnVLU0JsYm1RZ1BTQnNaVzVjYmx4dUlDQjJZWElnYjNWMElEMGdKeWRjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJSE4wWVhKME95QnBJRHdnWlc1a095QXJLMmtwSUh0Y2JpQWdJQ0J2ZFhRZ0t6MGdkRzlJWlhnb1luVm1XMmxkS1Z4dUlDQjlYRzRnSUhKbGRIVnliaUJ2ZFhSY2JuMWNibHh1Wm5WdVkzUnBiMjRnZFhSbU1UWnNaVk5zYVdObElDaGlkV1lzSUhOMFlYSjBMQ0JsYm1RcElIdGNiaUFnZG1GeUlHSjVkR1Z6SUQwZ1luVm1Mbk5zYVdObEtITjBZWEowTENCbGJtUXBYRzRnSUhaaGNpQnlaWE1nUFNBbkoxeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdKNWRHVnpMbXhsYm1kMGFEc2dhU0FyUFNBeUtTQjdYRzRnSUNBZ2NtVnpJQ3M5SUZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb1lubDBaWE5iYVYwZ0t5QW9ZbmwwWlhOYmFTQXJJREZkSUNvZ01qVTJLU2xjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVZ6WEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVjMnhwWTJVZ1BTQm1kVzVqZEdsdmJpQnpiR2xqWlNBb2MzUmhjblFzSUdWdVpDa2dlMXh1SUNCMllYSWdiR1Z1SUQwZ2RHaHBjeTVzWlc1bmRHaGNiaUFnYzNSaGNuUWdQU0IrZm5OMFlYSjBYRzRnSUdWdVpDQTlJR1Z1WkNBOVBUMGdkVzVrWldacGJtVmtJRDhnYkdWdUlEb2dmbjVsYm1SY2JseHVJQ0JwWmlBb2MzUmhjblFnUENBd0tTQjdYRzRnSUNBZ2MzUmhjblFnS3owZ2JHVnVYRzRnSUNBZ2FXWWdLSE4wWVhKMElEd2dNQ2tnYzNSaGNuUWdQU0F3WEc0Z0lIMGdaV3h6WlNCcFppQW9jM1JoY25RZ1BpQnNaVzRwSUh0Y2JpQWdJQ0J6ZEdGeWRDQTlJR3hsYmx4dUlDQjlYRzVjYmlBZ2FXWWdLR1Z1WkNBOElEQXBJSHRjYmlBZ0lDQmxibVFnS3owZ2JHVnVYRzRnSUNBZ2FXWWdLR1Z1WkNBOElEQXBJR1Z1WkNBOUlEQmNiaUFnZlNCbGJITmxJR2xtSUNobGJtUWdQaUJzWlc0cElIdGNiaUFnSUNCbGJtUWdQU0JzWlc1Y2JpQWdmVnh1WEc0Z0lHbG1JQ2hsYm1RZ1BDQnpkR0Z5ZENrZ1pXNWtJRDBnYzNSaGNuUmNibHh1SUNCMllYSWdibVYzUW5WbUlEMGdkR2hwY3k1emRXSmhjbkpoZVNoemRHRnlkQ3dnWlc1a0tWeHVJQ0F2THlCU1pYUjFjbTRnWVc0Z1lYVm5iV1Z1ZEdWa0lHQlZhVzUwT0VGeWNtRjVZQ0JwYm5OMFlXNWpaVnh1SUNCdVpYZENkV1l1WDE5d2NtOTBiMTlmSUQwZ1FuVm1abVZ5TG5CeWIzUnZkSGx3WlZ4dUlDQnlaWFIxY200Z2JtVjNRblZtWEc1OVhHNWNiaThxWEc0Z0tpQk9aV1ZrSUhSdklHMWhhMlVnYzNWeVpTQjBhR0YwSUdKMVptWmxjaUJwYzI0bmRDQjBjbmxwYm1jZ2RHOGdkM0pwZEdVZ2IzVjBJRzltSUdKdmRXNWtjeTVjYmlBcUwxeHVablZ1WTNScGIyNGdZMmhsWTJ0UFptWnpaWFFnS0c5bVpuTmxkQ3dnWlhoMExDQnNaVzVuZEdncElIdGNiaUFnYVdZZ0tDaHZabVp6WlhRZ0pTQXhLU0FoUFQwZ01DQjhmQ0J2Wm1aelpYUWdQQ0F3S1NCMGFISnZkeUJ1WlhjZ1VtRnVaMlZGY25KdmNpZ25iMlptYzJWMElHbHpJRzV2ZENCMWFXNTBKeWxjYmlBZ2FXWWdLRzltWm5ObGRDQXJJR1Y0ZENBK0lHeGxibWQwYUNrZ2RHaHliM2NnYm1WM0lGSmhibWRsUlhKeWIzSW9KMVJ5ZVdsdVp5QjBieUJoWTJObGMzTWdZbVY1YjI1a0lHSjFabVpsY2lCc1pXNW5kR2duS1Z4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbkpsWVdSVlNXNTBURVVnUFNCbWRXNWpkR2x2YmlCeVpXRmtWVWx1ZEV4RklDaHZabVp6WlhRc0lHSjVkR1ZNWlc1bmRHZ3NJRzV2UVhOelpYSjBLU0I3WEc0Z0lHOW1abk5sZENBOUlHOW1abk5sZENBK1BqNGdNRnh1SUNCaWVYUmxUR1Z1WjNSb0lEMGdZbmwwWlV4bGJtZDBhQ0ErUGo0Z01GeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQmphR1ZqYTA5bVpuTmxkQ2h2Wm1aelpYUXNJR0o1ZEdWTVpXNW5kR2dzSUhSb2FYTXViR1Z1WjNSb0tWeHVYRzRnSUhaaGNpQjJZV3dnUFNCMGFHbHpXMjltWm5ObGRGMWNiaUFnZG1GeUlHMTFiQ0E5SURGY2JpQWdkbUZ5SUdrZ1BTQXdYRzRnSUhkb2FXeGxJQ2dySzJrZ1BDQmllWFJsVEdWdVozUm9JQ1ltSUNodGRXd2dLajBnTUhneE1EQXBLU0I3WEc0Z0lDQWdkbUZzSUNzOUlIUm9hWE5iYjJabWMyVjBJQ3NnYVYwZ0tpQnRkV3hjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUIyWVd4Y2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzV5WldGa1ZVbHVkRUpGSUQwZ1puVnVZM1JwYjI0Z2NtVmhaRlZKYm5SQ1JTQW9iMlptYzJWMExDQmllWFJsVEdWdVozUm9MQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQnZabVp6WlhRZ1BTQnZabVp6WlhRZ1BqNCtJREJjYmlBZ1lubDBaVXhsYm1kMGFDQTlJR0o1ZEdWTVpXNW5kR2dnUGo0K0lEQmNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dlMXh1SUNBZ0lHTm9aV05yVDJabWMyVjBLRzltWm5ObGRDd2dZbmwwWlV4bGJtZDBhQ3dnZEdocGN5NXNaVzVuZEdncFhHNGdJSDFjYmx4dUlDQjJZWElnZG1Gc0lEMGdkR2hwYzF0dlptWnpaWFFnS3lBdExXSjVkR1ZNWlc1bmRHaGRYRzRnSUhaaGNpQnRkV3dnUFNBeFhHNGdJSGRvYVd4bElDaGllWFJsVEdWdVozUm9JRDRnTUNBbUppQW9iWFZzSUNvOUlEQjRNVEF3S1NrZ2UxeHVJQ0FnSUhaaGJDQXJQU0IwYUdselcyOW1abk5sZENBcklDMHRZbmwwWlV4bGJtZDBhRjBnS2lCdGRXeGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQjJZV3hjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXlaV0ZrVlVsdWREZ2dQU0JtZFc1amRHbHZiaUJ5WldGa1ZVbHVkRGdnS0c5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdiMlptYzJWMElEMGdiMlptYzJWMElENCtQaUF3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUdOb1pXTnJUMlptYzJWMEtHOW1abk5sZEN3Z01Td2dkR2hwY3k1c1pXNW5kR2dwWEc0Z0lISmxkSFZ5YmlCMGFHbHpXMjltWm5ObGRGMWNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1eVpXRmtWVWx1ZERFMlRFVWdQU0JtZFc1amRHbHZiaUJ5WldGa1ZVbHVkREUyVEVVZ0tHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnYjJabWMyVjBJRDBnYjJabWMyVjBJRDQrUGlBd1hHNGdJR2xtSUNnaGJtOUJjM05sY25RcElHTm9aV05yVDJabWMyVjBLRzltWm5ObGRDd2dNaXdnZEdocGN5NXNaVzVuZEdncFhHNGdJSEpsZEhWeWJpQjBhR2x6VzI5bVpuTmxkRjBnZkNBb2RHaHBjMXR2Wm1aelpYUWdLeUF4WFNBOFBDQTRLVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuSmxZV1JWU1c1ME1UWkNSU0E5SUdaMWJtTjBhVzl1SUhKbFlXUlZTVzUwTVRaQ1JTQW9iMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCdlptWnpaWFFnUFNCdlptWnpaWFFnUGo0K0lEQmNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dZMmhsWTJ0UFptWnpaWFFvYjJabWMyVjBMQ0F5TENCMGFHbHpMbXhsYm1kMGFDbGNiaUFnY21WMGRYSnVJQ2gwYUdselcyOW1abk5sZEYwZ1BEd2dPQ2tnZkNCMGFHbHpXMjltWm5ObGRDQXJJREZkWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVjbVZoWkZWSmJuUXpNa3hGSUQwZ1puVnVZM1JwYjI0Z2NtVmhaRlZKYm5Rek1reEZJQ2h2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lHOW1abk5sZENBOUlHOW1abk5sZENBK1BqNGdNRnh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0JqYUdWamEwOW1abk5sZENodlptWnpaWFFzSURRc0lIUm9hWE11YkdWdVozUm9LVnh1WEc0Z0lISmxkSFZ5YmlBb0tIUm9hWE5iYjJabWMyVjBYU2tnZkZ4dUlDQWdJQ0FnS0hSb2FYTmJiMlptYzJWMElDc2dNVjBnUER3Z09Da2dmRnh1SUNBZ0lDQWdLSFJvYVhOYmIyWm1jMlYwSUNzZ01sMGdQRHdnTVRZcEtTQXJYRzRnSUNBZ0lDQW9kR2hwYzF0dlptWnpaWFFnS3lBelhTQXFJREI0TVRBd01EQXdNQ2xjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXlaV0ZrVlVsdWRETXlRa1VnUFNCbWRXNWpkR2x2YmlCeVpXRmtWVWx1ZERNeVFrVWdLRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2IyWm1jMlYwSUQwZ2IyWm1jMlYwSUQ0K1BpQXdYRzRnSUdsbUlDZ2hibTlCYzNObGNuUXBJR05vWldOclQyWm1jMlYwS0c5bVpuTmxkQ3dnTkN3Z2RHaHBjeTVzWlc1bmRHZ3BYRzVjYmlBZ2NtVjBkWEp1SUNoMGFHbHpXMjltWm5ObGRGMGdLaUF3ZURFd01EQXdNREFwSUN0Y2JpQWdJQ0FvS0hSb2FYTmJiMlptYzJWMElDc2dNVjBnUER3Z01UWXBJSHhjYmlBZ0lDQW9kR2hwYzF0dlptWnpaWFFnS3lBeVhTQThQQ0E0S1NCOFhHNGdJQ0FnZEdocGMxdHZabVp6WlhRZ0t5QXpYU2xjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXlaV0ZrU1c1MFRFVWdQU0JtZFc1amRHbHZiaUJ5WldGa1NXNTBURVVnS0c5bVpuTmxkQ3dnWW5sMFpVeGxibWQwYUN3Z2JtOUJjM05sY25RcElIdGNiaUFnYjJabWMyVjBJRDBnYjJabWMyVjBJRDQrUGlBd1hHNGdJR0o1ZEdWTVpXNW5kR2dnUFNCaWVYUmxUR1Z1WjNSb0lENCtQaUF3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUdOb1pXTnJUMlptYzJWMEtHOW1abk5sZEN3Z1lubDBaVXhsYm1kMGFDd2dkR2hwY3k1c1pXNW5kR2dwWEc1Y2JpQWdkbUZ5SUhaaGJDQTlJSFJvYVhOYmIyWm1jMlYwWFZ4dUlDQjJZWElnYlhWc0lEMGdNVnh1SUNCMllYSWdhU0E5SURCY2JpQWdkMmhwYkdVZ0tDc3JhU0E4SUdKNWRHVk1aVzVuZEdnZ0ppWWdLRzExYkNBcVBTQXdlREV3TUNrcElIdGNiaUFnSUNCMllXd2dLejBnZEdocGMxdHZabVp6WlhRZ0t5QnBYU0FxSUcxMWJGeHVJQ0I5WEc0Z0lHMTFiQ0FxUFNBd2VEZ3dYRzVjYmlBZ2FXWWdLSFpoYkNBK1BTQnRkV3dwSUhaaGJDQXRQU0JOWVhSb0xuQnZkeWd5TENBNElDb2dZbmwwWlV4bGJtZDBhQ2xjYmx4dUlDQnlaWFIxY200Z2RtRnNYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWNtVmhaRWx1ZEVKRklEMGdablZ1WTNScGIyNGdjbVZoWkVsdWRFSkZJQ2h2Wm1aelpYUXNJR0o1ZEdWTVpXNW5kR2dzSUc1dlFYTnpaWEowS1NCN1hHNGdJRzltWm5ObGRDQTlJRzltWm5ObGRDQStQajRnTUZ4dUlDQmllWFJsVEdWdVozUm9JRDBnWW5sMFpVeGxibWQwYUNBK1BqNGdNRnh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0JqYUdWamEwOW1abk5sZENodlptWnpaWFFzSUdKNWRHVk1aVzVuZEdnc0lIUm9hWE11YkdWdVozUm9LVnh1WEc0Z0lIWmhjaUJwSUQwZ1lubDBaVXhsYm1kMGFGeHVJQ0IyWVhJZ2JYVnNJRDBnTVZ4dUlDQjJZWElnZG1Gc0lEMGdkR2hwYzF0dlptWnpaWFFnS3lBdExXbGRYRzRnSUhkb2FXeGxJQ2hwSUQ0Z01DQW1KaUFvYlhWc0lDbzlJREI0TVRBd0tTa2dlMXh1SUNBZ0lIWmhiQ0FyUFNCMGFHbHpXMjltWm5ObGRDQXJJQzB0YVYwZ0tpQnRkV3hjYmlBZ2ZWeHVJQ0J0ZFd3Z0tqMGdNSGc0TUZ4dVhHNGdJR2xtSUNoMllXd2dQajBnYlhWc0tTQjJZV3dnTFQwZ1RXRjBhQzV3YjNjb01pd2dPQ0FxSUdKNWRHVk1aVzVuZEdncFhHNWNiaUFnY21WMGRYSnVJSFpoYkZ4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbkpsWVdSSmJuUTRJRDBnWm5WdVkzUnBiMjRnY21WaFpFbHVkRGdnS0c5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdiMlptYzJWMElEMGdiMlptYzJWMElENCtQaUF3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUdOb1pXTnJUMlptYzJWMEtHOW1abk5sZEN3Z01Td2dkR2hwY3k1c1pXNW5kR2dwWEc0Z0lHbG1JQ2doS0hSb2FYTmJiMlptYzJWMFhTQW1JREI0T0RBcEtTQnlaWFIxY200Z0tIUm9hWE5iYjJabWMyVjBYU2xjYmlBZ2NtVjBkWEp1SUNnb01IaG1aaUF0SUhSb2FYTmJiMlptYzJWMFhTQXJJREVwSUNvZ0xURXBYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWNtVmhaRWx1ZERFMlRFVWdQU0JtZFc1amRHbHZiaUJ5WldGa1NXNTBNVFpNUlNBb2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0J2Wm1aelpYUWdQU0J2Wm1aelpYUWdQajQrSURCY2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ1kyaGxZMnRQWm1aelpYUW9iMlptYzJWMExDQXlMQ0IwYUdsekxteGxibWQwYUNsY2JpQWdkbUZ5SUhaaGJDQTlJSFJvYVhOYmIyWm1jMlYwWFNCOElDaDBhR2x6VzI5bVpuTmxkQ0FySURGZElEdzhJRGdwWEc0Z0lISmxkSFZ5YmlBb2RtRnNJQ1lnTUhnNE1EQXdLU0EvSUhaaGJDQjhJREI0UmtaR1JqQXdNREFnT2lCMllXeGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1eVpXRmtTVzUwTVRaQ1JTQTlJR1oxYm1OMGFXOXVJSEpsWVdSSmJuUXhOa0pGSUNodlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJRzltWm5ObGRDQTlJRzltWm5ObGRDQStQajRnTUZ4dUlDQnBaaUFvSVc1dlFYTnpaWEowS1NCamFHVmphMDltWm5ObGRDaHZabVp6WlhRc0lESXNJSFJvYVhNdWJHVnVaM1JvS1Z4dUlDQjJZWElnZG1Gc0lEMGdkR2hwYzF0dlptWnpaWFFnS3lBeFhTQjhJQ2gwYUdselcyOW1abk5sZEYwZ1BEd2dPQ2xjYmlBZ2NtVjBkWEp1SUNoMllXd2dKaUF3ZURnd01EQXBJRDhnZG1Gc0lId2dNSGhHUmtaR01EQXdNQ0E2SUhaaGJGeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5KbFlXUkpiblF6TWt4RklEMGdablZ1WTNScGIyNGdjbVZoWkVsdWRETXlURVVnS0c5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdiMlptYzJWMElEMGdiMlptYzJWMElENCtQaUF3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUdOb1pXTnJUMlptYzJWMEtHOW1abk5sZEN3Z05Dd2dkR2hwY3k1c1pXNW5kR2dwWEc1Y2JpQWdjbVYwZFhKdUlDaDBhR2x6VzI5bVpuTmxkRjBwSUh4Y2JpQWdJQ0FvZEdocGMxdHZabVp6WlhRZ0t5QXhYU0E4UENBNEtTQjhYRzRnSUNBZ0tIUm9hWE5iYjJabWMyVjBJQ3NnTWwwZ1BEd2dNVFlwSUh4Y2JpQWdJQ0FvZEdocGMxdHZabVp6WlhRZ0t5QXpYU0E4UENBeU5DbGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1eVpXRmtTVzUwTXpKQ1JTQTlJR1oxYm1OMGFXOXVJSEpsWVdSSmJuUXpNa0pGSUNodlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJRzltWm5ObGRDQTlJRzltWm5ObGRDQStQajRnTUZ4dUlDQnBaaUFvSVc1dlFYTnpaWEowS1NCamFHVmphMDltWm5ObGRDaHZabVp6WlhRc0lEUXNJSFJvYVhNdWJHVnVaM1JvS1Z4dVhHNGdJSEpsZEhWeWJpQW9kR2hwYzF0dlptWnpaWFJkSUR3OElESTBLU0I4WEc0Z0lDQWdLSFJvYVhOYmIyWm1jMlYwSUNzZ01WMGdQRHdnTVRZcElIeGNiaUFnSUNBb2RHaHBjMXR2Wm1aelpYUWdLeUF5WFNBOFBDQTRLU0I4WEc0Z0lDQWdLSFJvYVhOYmIyWm1jMlYwSUNzZ00xMHBYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWNtVmhaRVpzYjJGMFRFVWdQU0JtZFc1amRHbHZiaUJ5WldGa1JteHZZWFJNUlNBb2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0J2Wm1aelpYUWdQU0J2Wm1aelpYUWdQajQrSURCY2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ1kyaGxZMnRQWm1aelpYUW9iMlptYzJWMExDQTBMQ0IwYUdsekxteGxibWQwYUNsY2JpQWdjbVYwZFhKdUlHbGxaV1UzTlRRdWNtVmhaQ2gwYUdsekxDQnZabVp6WlhRc0lIUnlkV1VzSURJekxDQTBLVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuSmxZV1JHYkc5aGRFSkZJRDBnWm5WdVkzUnBiMjRnY21WaFpFWnNiMkYwUWtVZ0tHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnYjJabWMyVjBJRDBnYjJabWMyVjBJRDQrUGlBd1hHNGdJR2xtSUNnaGJtOUJjM05sY25RcElHTm9aV05yVDJabWMyVjBLRzltWm5ObGRDd2dOQ3dnZEdocGN5NXNaVzVuZEdncFhHNGdJSEpsZEhWeWJpQnBaV1ZsTnpVMExuSmxZV1FvZEdocGN5d2diMlptYzJWMExDQm1ZV3h6WlN3Z01qTXNJRFFwWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVjbVZoWkVSdmRXSnNaVXhGSUQwZ1puVnVZM1JwYjI0Z2NtVmhaRVJ2ZFdKc1pVeEZJQ2h2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lHOW1abk5sZENBOUlHOW1abk5sZENBK1BqNGdNRnh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0JqYUdWamEwOW1abk5sZENodlptWnpaWFFzSURnc0lIUm9hWE11YkdWdVozUm9LVnh1SUNCeVpYUjFjbTRnYVdWbFpUYzFOQzV5WldGa0tIUm9hWE1zSUc5bVpuTmxkQ3dnZEhKMVpTd2dOVElzSURncFhHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1Y21WaFpFUnZkV0pzWlVKRklEMGdablZ1WTNScGIyNGdjbVZoWkVSdmRXSnNaVUpGSUNodlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJRzltWm5ObGRDQTlJRzltWm5ObGRDQStQajRnTUZ4dUlDQnBaaUFvSVc1dlFYTnpaWEowS1NCamFHVmphMDltWm5ObGRDaHZabVp6WlhRc0lEZ3NJSFJvYVhNdWJHVnVaM1JvS1Z4dUlDQnlaWFIxY200Z2FXVmxaVGMxTkM1eVpXRmtLSFJvYVhNc0lHOW1abk5sZEN3Z1ptRnNjMlVzSURVeUxDQTRLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmphR1ZqYTBsdWRDQW9ZblZtTENCMllXeDFaU3dnYjJabWMyVjBMQ0JsZUhRc0lHMWhlQ3dnYldsdUtTQjdYRzRnSUdsbUlDZ2hRblZtWm1WeUxtbHpRblZtWm1WeUtHSjFaaWtwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oxd2lZblZtWm1WeVhDSWdZWEpuZFcxbGJuUWdiWFZ6ZENCaVpTQmhJRUoxWm1abGNpQnBibk4wWVc1alpTY3BYRzRnSUdsbUlDaDJZV3gxWlNBK0lHMWhlQ0I4ZkNCMllXeDFaU0E4SUcxcGJpa2dkR2h5YjNjZ2JtVjNJRkpoYm1kbFJYSnliM0lvSjF3aWRtRnNkV1ZjSWlCaGNtZDFiV1Z1ZENCcGN5QnZkWFFnYjJZZ1ltOTFibVJ6SnlsY2JpQWdhV1lnS0c5bVpuTmxkQ0FySUdWNGRDQStJR0oxWmk1c1pXNW5kR2dwSUhSb2NtOTNJRzVsZHlCU1lXNW5aVVZ5Y205eUtDZEpibVJsZUNCdmRYUWdiMllnY21GdVoyVW5LVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuZHlhWFJsVlVsdWRFeEZJRDBnWm5WdVkzUnBiMjRnZDNKcGRHVlZTVzUwVEVVZ0tIWmhiSFZsTENCdlptWnpaWFFzSUdKNWRHVk1aVzVuZEdnc0lHNXZRWE56WlhKMEtTQjdYRzRnSUhaaGJIVmxJRDBnSzNaaGJIVmxYRzRnSUc5bVpuTmxkQ0E5SUc5bVpuTmxkQ0ErUGo0Z01GeHVJQ0JpZVhSbFRHVnVaM1JvSUQwZ1lubDBaVXhsYm1kMGFDQStQajRnTUZ4dUlDQnBaaUFvSVc1dlFYTnpaWEowS1NCN1hHNGdJQ0FnZG1GeUlHMWhlRUo1ZEdWeklEMGdUV0YwYUM1d2IzY29NaXdnT0NBcUlHSjVkR1ZNWlc1bmRHZ3BJQzBnTVZ4dUlDQWdJR05vWldOclNXNTBLSFJvYVhNc0lIWmhiSFZsTENCdlptWnpaWFFzSUdKNWRHVk1aVzVuZEdnc0lHMWhlRUo1ZEdWekxDQXdLVnh1SUNCOVhHNWNiaUFnZG1GeUlHMTFiQ0E5SURGY2JpQWdkbUZ5SUdrZ1BTQXdYRzRnSUhSb2FYTmJiMlptYzJWMFhTQTlJSFpoYkhWbElDWWdNSGhHUmx4dUlDQjNhR2xzWlNBb0t5dHBJRHdnWW5sMFpVeGxibWQwYUNBbUppQW9iWFZzSUNvOUlEQjRNVEF3S1NrZ2UxeHVJQ0FnSUhSb2FYTmJiMlptYzJWMElDc2dhVjBnUFNBb2RtRnNkV1VnTHlCdGRXd3BJQ1lnTUhoR1JseHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHOW1abk5sZENBcklHSjVkR1ZNWlc1bmRHaGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1M2NtbDBaVlZKYm5SQ1JTQTlJR1oxYm1OMGFXOXVJSGR5YVhSbFZVbHVkRUpGSUNoMllXeDFaU3dnYjJabWMyVjBMQ0JpZVhSbFRHVnVaM1JvTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0IyWVd4MVpTQTlJQ3QyWVd4MVpWeHVJQ0J2Wm1aelpYUWdQU0J2Wm1aelpYUWdQajQrSURCY2JpQWdZbmwwWlV4bGJtZDBhQ0E5SUdKNWRHVk1aVzVuZEdnZ1BqNCtJREJjYmlBZ2FXWWdLQ0Z1YjBGemMyVnlkQ2tnZTF4dUlDQWdJSFpoY2lCdFlYaENlWFJsY3lBOUlFMWhkR2d1Y0c5M0tESXNJRGdnS2lCaWVYUmxUR1Z1WjNSb0tTQXRJREZjYmlBZ0lDQmphR1ZqYTBsdWRDaDBhR2x6TENCMllXeDFaU3dnYjJabWMyVjBMQ0JpZVhSbFRHVnVaM1JvTENCdFlYaENlWFJsY3l3Z01DbGNiaUFnZlZ4dVhHNGdJSFpoY2lCcElEMGdZbmwwWlV4bGJtZDBhQ0F0SURGY2JpQWdkbUZ5SUcxMWJDQTlJREZjYmlBZ2RHaHBjMXR2Wm1aelpYUWdLeUJwWFNBOUlIWmhiSFZsSUNZZ01IaEdSbHh1SUNCM2FHbHNaU0FvTFMxcElENDlJREFnSmlZZ0tHMTFiQ0FxUFNBd2VERXdNQ2twSUh0Y2JpQWdJQ0IwYUdselcyOW1abk5sZENBcklHbGRJRDBnS0haaGJIVmxJQzhnYlhWc0tTQW1JREI0UmtaY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCdlptWnpaWFFnS3lCaWVYUmxUR1Z1WjNSb1hHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1ZDNKcGRHVlZTVzUwT0NBOUlHWjFibU4wYVc5dUlIZHlhWFJsVlVsdWREZ2dLSFpoYkhWbExDQnZabVp6WlhRc0lHNXZRWE56WlhKMEtTQjdYRzRnSUhaaGJIVmxJRDBnSzNaaGJIVmxYRzRnSUc5bVpuTmxkQ0E5SUc5bVpuTmxkQ0ErUGo0Z01GeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQmphR1ZqYTBsdWRDaDBhR2x6TENCMllXeDFaU3dnYjJabWMyVjBMQ0F4TENBd2VHWm1MQ0F3S1Z4dUlDQjBhR2x6VzI5bVpuTmxkRjBnUFNBb2RtRnNkV1VnSmlBd2VHWm1LVnh1SUNCeVpYUjFjbTRnYjJabWMyVjBJQ3NnTVZ4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFZVbHVkREUyVEVVZ1BTQm1kVzVqZEdsdmJpQjNjbWwwWlZWSmJuUXhOa3hGSUNoMllXeDFaU3dnYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQjJZV3gxWlNBOUlDdDJZV3gxWlZ4dUlDQnZabVp6WlhRZ1BTQnZabVp6WlhRZ1BqNCtJREJjYmlBZ2FXWWdLQ0Z1YjBGemMyVnlkQ2tnWTJobFkydEpiblFvZEdocGN5d2dkbUZzZFdVc0lHOW1abk5sZEN3Z01pd2dNSGhtWm1abUxDQXdLVnh1SUNCMGFHbHpXMjltWm5ObGRGMGdQU0FvZG1Gc2RXVWdKaUF3ZUdabUtWeHVJQ0IwYUdselcyOW1abk5sZENBcklERmRJRDBnS0haaGJIVmxJRDQrUGlBNEtWeHVJQ0J5WlhSMWNtNGdiMlptYzJWMElDc2dNbHh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuZHlhWFJsVlVsdWRERTJRa1VnUFNCbWRXNWpkR2x2YmlCM2NtbDBaVlZKYm5ReE5rSkZJQ2gyWVd4MVpTd2diMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCMllXeDFaU0E5SUN0MllXeDFaVnh1SUNCdlptWnpaWFFnUFNCdlptWnpaWFFnUGo0K0lEQmNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dZMmhsWTJ0SmJuUW9kR2hwY3l3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnTWl3Z01IaG1abVptTENBd0tWeHVJQ0IwYUdselcyOW1abk5sZEYwZ1BTQW9kbUZzZFdVZ1BqNCtJRGdwWEc0Z0lIUm9hWE5iYjJabWMyVjBJQ3NnTVYwZ1BTQW9kbUZzZFdVZ0ppQXdlR1ptS1Z4dUlDQnlaWFIxY200Z2IyWm1jMlYwSUNzZ01seHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5keWFYUmxWVWx1ZERNeVRFVWdQU0JtZFc1amRHbHZiaUIzY21sMFpWVkpiblF6TWt4RklDaDJZV3gxWlN3Z2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0IyWVd4MVpTQTlJQ3QyWVd4MVpWeHVJQ0J2Wm1aelpYUWdQU0J2Wm1aelpYUWdQajQrSURCY2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ1kyaGxZMnRKYm5Rb2RHaHBjeXdnZG1Gc2RXVXNJRzltWm5ObGRDd2dOQ3dnTUhobVptWm1abVptWml3Z01DbGNiaUFnZEdocGMxdHZabVp6WlhRZ0t5QXpYU0E5SUNoMllXeDFaU0ErUGo0Z01qUXBYRzRnSUhSb2FYTmJiMlptYzJWMElDc2dNbDBnUFNBb2RtRnNkV1VnUGo0K0lERTJLVnh1SUNCMGFHbHpXMjltWm5ObGRDQXJJREZkSUQwZ0tIWmhiSFZsSUQ0K1BpQTRLVnh1SUNCMGFHbHpXMjltWm5ObGRGMGdQU0FvZG1Gc2RXVWdKaUF3ZUdabUtWeHVJQ0J5WlhSMWNtNGdiMlptYzJWMElDc2dORnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuZHlhWFJsVlVsdWRETXlRa1VnUFNCbWRXNWpkR2x2YmlCM2NtbDBaVlZKYm5Rek1rSkZJQ2gyWVd4MVpTd2diMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCMllXeDFaU0E5SUN0MllXeDFaVnh1SUNCdlptWnpaWFFnUFNCdlptWnpaWFFnUGo0K0lEQmNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dZMmhsWTJ0SmJuUW9kR2hwY3l3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnTkN3Z01IaG1abVptWm1abVppd2dNQ2xjYmlBZ2RHaHBjMXR2Wm1aelpYUmRJRDBnS0haaGJIVmxJRDQrUGlBeU5DbGNiaUFnZEdocGMxdHZabVp6WlhRZ0t5QXhYU0E5SUNoMllXeDFaU0ErUGo0Z01UWXBYRzRnSUhSb2FYTmJiMlptYzJWMElDc2dNbDBnUFNBb2RtRnNkV1VnUGo0K0lEZ3BYRzRnSUhSb2FYTmJiMlptYzJWMElDc2dNMTBnUFNBb2RtRnNkV1VnSmlBd2VHWm1LVnh1SUNCeVpYUjFjbTRnYjJabWMyVjBJQ3NnTkZ4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFNXNTBURVVnUFNCbWRXNWpkR2x2YmlCM2NtbDBaVWx1ZEV4RklDaDJZV3gxWlN3Z2IyWm1jMlYwTENCaWVYUmxUR1Z1WjNSb0xDQnViMEZ6YzJWeWRDa2dlMXh1SUNCMllXeDFaU0E5SUN0MllXeDFaVnh1SUNCdlptWnpaWFFnUFNCdlptWnpaWFFnUGo0K0lEQmNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dlMXh1SUNBZ0lIWmhjaUJzYVcxcGRDQTlJRTFoZEdndWNHOTNLRElzSUNnNElDb2dZbmwwWlV4bGJtZDBhQ2tnTFNBeEtWeHVYRzRnSUNBZ1kyaGxZMnRKYm5Rb2RHaHBjeXdnZG1Gc2RXVXNJRzltWm5ObGRDd2dZbmwwWlV4bGJtZDBhQ3dnYkdsdGFYUWdMU0F4TENBdGJHbHRhWFFwWEc0Z0lIMWNibHh1SUNCMllYSWdhU0E5SURCY2JpQWdkbUZ5SUcxMWJDQTlJREZjYmlBZ2RtRnlJSE4xWWlBOUlEQmNiaUFnZEdocGMxdHZabVp6WlhSZElEMGdkbUZzZFdVZ0ppQXdlRVpHWEc0Z0lIZG9hV3hsSUNncksya2dQQ0JpZVhSbFRHVnVaM1JvSUNZbUlDaHRkV3dnS2owZ01IZ3hNREFwS1NCN1hHNGdJQ0FnYVdZZ0tIWmhiSFZsSUR3Z01DQW1KaUJ6ZFdJZ1BUMDlJREFnSmlZZ2RHaHBjMXR2Wm1aelpYUWdLeUJwSUMwZ01WMGdJVDA5SURBcElIdGNiaUFnSUNBZ0lITjFZaUE5SURGY2JpQWdJQ0I5WEc0Z0lDQWdkR2hwYzF0dlptWnpaWFFnS3lCcFhTQTlJQ2dvZG1Gc2RXVWdMeUJ0ZFd3cElENCtJREFwSUMwZ2MzVmlJQ1lnTUhoR1JseHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHOW1abk5sZENBcklHSjVkR1ZNWlc1bmRHaGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1M2NtbDBaVWx1ZEVKRklEMGdablZ1WTNScGIyNGdkM0pwZEdWSmJuUkNSU0FvZG1Gc2RXVXNJRzltWm5ObGRDd2dZbmwwWlV4bGJtZDBhQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdkbUZzZFdVZ1BTQXJkbUZzZFdWY2JpQWdiMlptYzJWMElEMGdiMlptYzJWMElENCtQaUF3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUh0Y2JpQWdJQ0IyWVhJZ2JHbHRhWFFnUFNCTllYUm9MbkJ2ZHlneUxDQW9PQ0FxSUdKNWRHVk1aVzVuZEdncElDMGdNU2xjYmx4dUlDQWdJR05vWldOclNXNTBLSFJvYVhNc0lIWmhiSFZsTENCdlptWnpaWFFzSUdKNWRHVk1aVzVuZEdnc0lHeHBiV2wwSUMwZ01Td2dMV3hwYldsMEtWeHVJQ0I5WEc1Y2JpQWdkbUZ5SUdrZ1BTQmllWFJsVEdWdVozUm9JQzBnTVZ4dUlDQjJZWElnYlhWc0lEMGdNVnh1SUNCMllYSWdjM1ZpSUQwZ01GeHVJQ0IwYUdselcyOW1abk5sZENBcklHbGRJRDBnZG1Gc2RXVWdKaUF3ZUVaR1hHNGdJSGRvYVd4bElDZ3RMV2tnUGowZ01DQW1KaUFvYlhWc0lDbzlJREI0TVRBd0tTa2dlMXh1SUNBZ0lHbG1JQ2gyWVd4MVpTQThJREFnSmlZZ2MzVmlJRDA5UFNBd0lDWW1JSFJvYVhOYmIyWm1jMlYwSUNzZ2FTQXJJREZkSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0J6ZFdJZ1BTQXhYRzRnSUNBZ2ZWeHVJQ0FnSUhSb2FYTmJiMlptYzJWMElDc2dhVjBnUFNBb0tIWmhiSFZsSUM4Z2JYVnNLU0ErUGlBd0tTQXRJSE4xWWlBbUlEQjRSa1pjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ2Wm1aelpYUWdLeUJpZVhSbFRHVnVaM1JvWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVkM0pwZEdWSmJuUTRJRDBnWm5WdVkzUnBiMjRnZDNKcGRHVkpiblE0SUNoMllXeDFaU3dnYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQjJZV3gxWlNBOUlDdDJZV3gxWlZ4dUlDQnZabVp6WlhRZ1BTQnZabVp6WlhRZ1BqNCtJREJjYmlBZ2FXWWdLQ0Z1YjBGemMyVnlkQ2tnWTJobFkydEpiblFvZEdocGN5d2dkbUZzZFdVc0lHOW1abk5sZEN3Z01Td2dNSGczWml3Z0xUQjRPREFwWEc0Z0lHbG1JQ2gyWVd4MVpTQThJREFwSUhaaGJIVmxJRDBnTUhobVppQXJJSFpoYkhWbElDc2dNVnh1SUNCMGFHbHpXMjltWm5ObGRGMGdQU0FvZG1Gc2RXVWdKaUF3ZUdabUtWeHVJQ0J5WlhSMWNtNGdiMlptYzJWMElDc2dNVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuZHlhWFJsU1c1ME1UWk1SU0E5SUdaMWJtTjBhVzl1SUhkeWFYUmxTVzUwTVRaTVJTQW9kbUZzZFdVc0lHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnZG1Gc2RXVWdQU0FyZG1Gc2RXVmNiaUFnYjJabWMyVjBJRDBnYjJabWMyVjBJRDQrUGlBd1hHNGdJR2xtSUNnaGJtOUJjM05sY25RcElHTm9aV05yU1c1MEtIUm9hWE1zSUhaaGJIVmxMQ0J2Wm1aelpYUXNJRElzSURCNE4yWm1aaXdnTFRCNE9EQXdNQ2xjYmlBZ2RHaHBjMXR2Wm1aelpYUmRJRDBnS0haaGJIVmxJQ1lnTUhobVppbGNiaUFnZEdocGMxdHZabVp6WlhRZ0t5QXhYU0E5SUNoMllXeDFaU0ErUGo0Z09DbGNiaUFnY21WMGRYSnVJRzltWm5ObGRDQXJJREpjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNTNjbWwwWlVsdWRERTJRa1VnUFNCbWRXNWpkR2x2YmlCM2NtbDBaVWx1ZERFMlFrVWdLSFpoYkhWbExDQnZabVp6WlhRc0lHNXZRWE56WlhKMEtTQjdYRzRnSUhaaGJIVmxJRDBnSzNaaGJIVmxYRzRnSUc5bVpuTmxkQ0E5SUc5bVpuTmxkQ0ErUGo0Z01GeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQmphR1ZqYTBsdWRDaDBhR2x6TENCMllXeDFaU3dnYjJabWMyVjBMQ0F5TENBd2VEZG1abVlzSUMwd2VEZ3dNREFwWEc0Z0lIUm9hWE5iYjJabWMyVjBYU0E5SUNoMllXeDFaU0ErUGo0Z09DbGNiaUFnZEdocGMxdHZabVp6WlhRZ0t5QXhYU0E5SUNoMllXeDFaU0FtSURCNFptWXBYRzRnSUhKbGRIVnliaUJ2Wm1aelpYUWdLeUF5WEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVkM0pwZEdWSmJuUXpNa3hGSUQwZ1puVnVZM1JwYjI0Z2QzSnBkR1ZKYm5Rek1reEZJQ2gyWVd4MVpTd2diMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCMllXeDFaU0E5SUN0MllXeDFaVnh1SUNCdlptWnpaWFFnUFNCdlptWnpaWFFnUGo0K0lEQmNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dZMmhsWTJ0SmJuUW9kR2hwY3l3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnTkN3Z01IZzNabVptWm1abVppd2dMVEI0T0RBd01EQXdNREFwWEc0Z0lIUm9hWE5iYjJabWMyVjBYU0E5SUNoMllXeDFaU0FtSURCNFptWXBYRzRnSUhSb2FYTmJiMlptYzJWMElDc2dNVjBnUFNBb2RtRnNkV1VnUGo0K0lEZ3BYRzRnSUhSb2FYTmJiMlptYzJWMElDc2dNbDBnUFNBb2RtRnNkV1VnUGo0K0lERTJLVnh1SUNCMGFHbHpXMjltWm5ObGRDQXJJRE5kSUQwZ0tIWmhiSFZsSUQ0K1BpQXlOQ2xjYmlBZ2NtVjBkWEp1SUc5bVpuTmxkQ0FySURSY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUzY21sMFpVbHVkRE15UWtVZ1BTQm1kVzVqZEdsdmJpQjNjbWwwWlVsdWRETXlRa1VnS0haaGJIVmxMQ0J2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lIWmhiSFZsSUQwZ0szWmhiSFZsWEc0Z0lHOW1abk5sZENBOUlHOW1abk5sZENBK1BqNGdNRnh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0JqYUdWamEwbHVkQ2gwYUdsekxDQjJZV3gxWlN3Z2IyWm1jMlYwTENBMExDQXdlRGRtWm1abVptWm1MQ0F0TUhnNE1EQXdNREF3TUNsY2JpQWdhV1lnS0haaGJIVmxJRHdnTUNrZ2RtRnNkV1VnUFNBd2VHWm1abVptWm1abUlDc2dkbUZzZFdVZ0t5QXhYRzRnSUhSb2FYTmJiMlptYzJWMFhTQTlJQ2gyWVd4MVpTQStQajRnTWpRcFhHNGdJSFJvYVhOYmIyWm1jMlYwSUNzZ01WMGdQU0FvZG1Gc2RXVWdQajQrSURFMktWeHVJQ0IwYUdselcyOW1abk5sZENBcklESmRJRDBnS0haaGJIVmxJRDQrUGlBNEtWeHVJQ0IwYUdselcyOW1abk5sZENBcklETmRJRDBnS0haaGJIVmxJQ1lnTUhobVppbGNiaUFnY21WMGRYSnVJRzltWm5ObGRDQXJJRFJjYm4xY2JseHVablZ1WTNScGIyNGdZMmhsWTJ0SlJVVkZOelUwSUNoaWRXWXNJSFpoYkhWbExDQnZabVp6WlhRc0lHVjRkQ3dnYldGNExDQnRhVzRwSUh0Y2JpQWdhV1lnS0c5bVpuTmxkQ0FySUdWNGRDQStJR0oxWmk1c1pXNW5kR2dwSUhSb2NtOTNJRzVsZHlCU1lXNW5aVVZ5Y205eUtDZEpibVJsZUNCdmRYUWdiMllnY21GdVoyVW5LVnh1SUNCcFppQW9iMlptYzJWMElEd2dNQ2tnZEdoeWIzY2dibVYzSUZKaGJtZGxSWEp5YjNJb0owbHVaR1Y0SUc5MWRDQnZaaUJ5WVc1blpTY3BYRzU5WEc1Y2JtWjFibU4wYVc5dUlIZHlhWFJsUm14dllYUWdLR0oxWml3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnYkdsMGRHeGxSVzVrYVdGdUxDQnViMEZ6YzJWeWRDa2dlMXh1SUNCMllXeDFaU0E5SUN0MllXeDFaVnh1SUNCdlptWnpaWFFnUFNCdlptWnpaWFFnUGo0K0lEQmNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dlMXh1SUNBZ0lHTm9aV05yU1VWRlJUYzFOQ2hpZFdZc0lIWmhiSFZsTENCdlptWnpaWFFzSURRc0lETXVOREF5T0RJek5EWTJNemcxTWpnNE5tVXJNemdzSUMwekxqUXdNamd5TXpRMk5qTTROVEk0T0RabEt6TTRLVnh1SUNCOVhHNGdJR2xsWldVM05UUXVkM0pwZEdVb1luVm1MQ0IyWVd4MVpTd2diMlptYzJWMExDQnNhWFIwYkdWRmJtUnBZVzRzSURJekxDQTBLVnh1SUNCeVpYUjFjbTRnYjJabWMyVjBJQ3NnTkZ4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFJteHZZWFJNUlNBOUlHWjFibU4wYVc5dUlIZHlhWFJsUm14dllYUk1SU0FvZG1Gc2RXVXNJRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2NtVjBkWEp1SUhkeWFYUmxSbXh2WVhRb2RHaHBjeXdnZG1Gc2RXVXNJRzltWm5ObGRDd2dkSEoxWlN3Z2JtOUJjM05sY25RcFhHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1ZDNKcGRHVkdiRzloZEVKRklEMGdablZ1WTNScGIyNGdkM0pwZEdWR2JHOWhkRUpGSUNoMllXeDFaU3dnYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQnlaWFIxY200Z2QzSnBkR1ZHYkc5aGRDaDBhR2x6TENCMllXeDFaU3dnYjJabWMyVjBMQ0JtWVd4elpTd2dibTlCYzNObGNuUXBYRzU5WEc1Y2JtWjFibU4wYVc5dUlIZHlhWFJsUkc5MVlteGxJQ2hpZFdZc0lIWmhiSFZsTENCdlptWnpaWFFzSUd4cGRIUnNaVVZ1WkdsaGJpd2dibTlCYzNObGNuUXBJSHRjYmlBZ2RtRnNkV1VnUFNBcmRtRnNkV1ZjYmlBZ2IyWm1jMlYwSUQwZ2IyWm1jMlYwSUQ0K1BpQXdYRzRnSUdsbUlDZ2hibTlCYzNObGNuUXBJSHRjYmlBZ0lDQmphR1ZqYTBsRlJVVTNOVFFvWW5WbUxDQjJZV3gxWlN3Z2IyWm1jMlYwTENBNExDQXhMamM1TnpZNU16RXpORGcyTWpNeE5UZEZLek13T0N3Z0xURXVOemszTmprek1UTTBPRFl5TXpFMU4wVXJNekE0S1Z4dUlDQjlYRzRnSUdsbFpXVTNOVFF1ZDNKcGRHVW9ZblZtTENCMllXeDFaU3dnYjJabWMyVjBMQ0JzYVhSMGJHVkZibVJwWVc0c0lEVXlMQ0E0S1Z4dUlDQnlaWFIxY200Z2IyWm1jMlYwSUNzZ09GeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5keWFYUmxSRzkxWW14bFRFVWdQU0JtZFc1amRHbHZiaUIzY21sMFpVUnZkV0pzWlV4RklDaDJZV3gxWlN3Z2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0J5WlhSMWNtNGdkM0pwZEdWRWIzVmliR1VvZEdocGN5d2dkbUZzZFdVc0lHOW1abk5sZEN3Z2RISjFaU3dnYm05QmMzTmxjblFwWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVkM0pwZEdWRWIzVmliR1ZDUlNBOUlHWjFibU4wYVc5dUlIZHlhWFJsUkc5MVlteGxRa1VnS0haaGJIVmxMQ0J2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lISmxkSFZ5YmlCM2NtbDBaVVJ2ZFdKc1pTaDBhR2x6TENCMllXeDFaU3dnYjJabWMyVjBMQ0JtWVd4elpTd2dibTlCYzNObGNuUXBYRzU5WEc1Y2JpOHZJR052Y0hrb2RHRnlaMlYwUW5WbVptVnlMQ0IwWVhKblpYUlRkR0Z5ZEQwd0xDQnpiM1Z5WTJWVGRHRnlkRDB3TENCemIzVnlZMlZGYm1ROVluVm1abVZ5TG14bGJtZDBhQ2xjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1WTI5d2VTQTlJR1oxYm1OMGFXOXVJR052Y0hrZ0tIUmhjbWRsZEN3Z2RHRnlaMlYwVTNSaGNuUXNJSE4wWVhKMExDQmxibVFwSUh0Y2JpQWdhV1lnS0NGQ2RXWm1aWEl1YVhOQ2RXWm1aWElvZEdGeVoyVjBLU2tnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnbllYSm5kVzFsYm5RZ2MyaHZkV3hrSUdKbElHRWdRblZtWm1WeUp5bGNiaUFnYVdZZ0tDRnpkR0Z5ZENrZ2MzUmhjblFnUFNBd1hHNGdJR2xtSUNnaFpXNWtJQ1ltSUdWdVpDQWhQVDBnTUNrZ1pXNWtJRDBnZEdocGN5NXNaVzVuZEdoY2JpQWdhV1lnS0hSaGNtZGxkRk4wWVhKMElENDlJSFJoY21kbGRDNXNaVzVuZEdncElIUmhjbWRsZEZOMFlYSjBJRDBnZEdGeVoyVjBMbXhsYm1kMGFGeHVJQ0JwWmlBb0lYUmhjbWRsZEZOMFlYSjBLU0IwWVhKblpYUlRkR0Z5ZENBOUlEQmNiaUFnYVdZZ0tHVnVaQ0ErSURBZ0ppWWdaVzVrSUR3Z2MzUmhjblFwSUdWdVpDQTlJSE4wWVhKMFhHNWNiaUFnTHk4Z1EyOXdlU0F3SUdKNWRHVnpPeUIzWlNkeVpTQmtiMjVsWEc0Z0lHbG1JQ2hsYm1RZ1BUMDlJSE4wWVhKMEtTQnlaWFIxY200Z01GeHVJQ0JwWmlBb2RHRnlaMlYwTG14bGJtZDBhQ0E5UFQwZ01DQjhmQ0IwYUdsekxteGxibWQwYUNBOVBUMGdNQ2tnY21WMGRYSnVJREJjYmx4dUlDQXZMeUJHWVhSaGJDQmxjbkp2Y2lCamIyNWthWFJwYjI1elhHNGdJR2xtSUNoMFlYSm5aWFJUZEdGeWRDQThJREFwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVW1GdVoyVkZjbkp2Y2lnbmRHRnlaMlYwVTNSaGNuUWdiM1YwSUc5bUlHSnZkVzVrY3ljcFhHNGdJSDFjYmlBZ2FXWWdLSE4wWVhKMElEd2dNQ0I4ZkNCemRHRnlkQ0ErUFNCMGFHbHpMbXhsYm1kMGFDa2dkR2h5YjNjZ2JtVjNJRkpoYm1kbFJYSnliM0lvSjBsdVpHVjRJRzkxZENCdlppQnlZVzVuWlNjcFhHNGdJR2xtSUNobGJtUWdQQ0F3S1NCMGFISnZkeUJ1WlhjZ1VtRnVaMlZGY25KdmNpZ25jMjkxY21ObFJXNWtJRzkxZENCdlppQmliM1Z1WkhNbktWeHVYRzRnSUM4dklFRnlaU0IzWlNCdmIySS9YRzRnSUdsbUlDaGxibVFnUGlCMGFHbHpMbXhsYm1kMGFDa2daVzVrSUQwZ2RHaHBjeTVzWlc1bmRHaGNiaUFnYVdZZ0tIUmhjbWRsZEM1c1pXNW5kR2dnTFNCMFlYSm5aWFJUZEdGeWRDQThJR1Z1WkNBdElITjBZWEowS1NCN1hHNGdJQ0FnWlc1a0lEMGdkR0Z5WjJWMExteGxibWQwYUNBdElIUmhjbWRsZEZOMFlYSjBJQ3NnYzNSaGNuUmNiaUFnZlZ4dVhHNGdJSFpoY2lCc1pXNGdQU0JsYm1RZ0xTQnpkR0Z5ZEZ4dVhHNGdJR2xtSUNoMGFHbHpJRDA5UFNCMFlYSm5aWFFnSmlZZ2RIbHdaVzltSUZWcGJuUTRRWEp5WVhrdWNISnZkRzkwZVhCbExtTnZjSGxYYVhSb2FXNGdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBdkx5QlZjMlVnWW5WcGJIUXRhVzRnZDJobGJpQmhkbUZwYkdGaWJHVXNJRzFwYzNOcGJtY2dabkp2YlNCSlJURXhYRzRnSUNBZ2RHaHBjeTVqYjNCNVYybDBhR2x1S0hSaGNtZGxkRk4wWVhKMExDQnpkR0Z5ZEN3Z1pXNWtLVnh1SUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE1nUFQwOUlIUmhjbWRsZENBbUppQnpkR0Z5ZENBOElIUmhjbWRsZEZOMFlYSjBJQ1ltSUhSaGNtZGxkRk4wWVhKMElEd2daVzVrS1NCN1hHNGdJQ0FnTHk4Z1pHVnpZMlZ1WkdsdVp5QmpiM0I1SUdaeWIyMGdaVzVrWEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SUd4bGJpQXRJREU3SUdrZ1BqMGdNRHNnTFMxcEtTQjdYRzRnSUNBZ0lDQjBZWEpuWlhSYmFTQXJJSFJoY21kbGRGTjBZWEowWFNBOUlIUm9hWE5iYVNBcklITjBZWEowWFZ4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0JWYVc1ME9FRnljbUY1TG5CeWIzUnZkSGx3WlM1elpYUXVZMkZzYkNoY2JpQWdJQ0FnSUhSaGNtZGxkQ3hjYmlBZ0lDQWdJSFJvYVhNdWMzVmlZWEp5WVhrb2MzUmhjblFzSUdWdVpDa3NYRzRnSUNBZ0lDQjBZWEpuWlhSVGRHRnlkRnh1SUNBZ0lDbGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQnNaVzVjYm4xY2JseHVMeThnVlhOaFoyVTZYRzR2THlBZ0lDQmlkV1ptWlhJdVptbHNiQ2h1ZFcxaVpYSmJMQ0J2Wm1aelpYUmJMQ0JsYm1SZFhTbGNiaTh2SUNBZ0lHSjFabVpsY2k1bWFXeHNLR0oxWm1abGNsc3NJRzltWm5ObGRGc3NJR1Z1WkYxZEtWeHVMeThnSUNBZ1luVm1abVZ5TG1acGJHd29jM1J5YVc1bld5d2diMlptYzJWMFd5d2daVzVrWFYxYkxDQmxibU52WkdsdVoxMHBYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbVpwYkd3Z1BTQm1kVzVqZEdsdmJpQm1hV3hzSUNoMllXd3NJSE4wWVhKMExDQmxibVFzSUdWdVkyOWthVzVuS1NCN1hHNGdJQzh2SUVoaGJtUnNaU0J6ZEhKcGJtY2dZMkZ6WlhNNlhHNGdJR2xtSUNoMGVYQmxiMllnZG1Gc0lEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnYzNSaGNuUWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNCbGJtTnZaR2x1WnlBOUlITjBZWEowWEc0Z0lDQWdJQ0J6ZEdGeWRDQTlJREJjYmlBZ0lDQWdJR1Z1WkNBOUlIUm9hWE11YkdWdVozUm9YRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ1pXNWtJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ1pXNWpiMlJwYm1jZ1BTQmxibVJjYmlBZ0lDQWdJR1Z1WkNBOUlIUm9hWE11YkdWdVozUm9YRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaGxibU52WkdsdVp5QWhQVDBnZFc1a1pXWnBibVZrSUNZbUlIUjVjR1Z2WmlCbGJtTnZaR2x1WnlBaFBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjJWdVkyOWthVzVuSUcxMWMzUWdZbVVnWVNCemRISnBibWNuS1Z4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1Z1WTI5a2FXNW5JRDA5UFNBbmMzUnlhVzVuSnlBbUppQWhRblZtWm1WeUxtbHpSVzVqYjJScGJtY29aVzVqYjJScGJtY3BLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkVmJtdHViM2R1SUdWdVkyOWthVzVuT2lBbklDc2daVzVqYjJScGJtY3BYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDJZV3d1YkdWdVozUm9JRDA5UFNBeEtTQjdYRzRnSUNBZ0lDQjJZWElnWTI5a1pTQTlJSFpoYkM1amFHRnlRMjlrWlVGMEtEQXBYRzRnSUNBZ0lDQnBaaUFvS0dWdVkyOWthVzVuSUQwOVBTQW5kWFJtT0NjZ0ppWWdZMjlrWlNBOElERXlPQ2tnZkh4Y2JpQWdJQ0FnSUNBZ0lDQmxibU52WkdsdVp5QTlQVDBnSjJ4aGRHbHVNU2NwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdSbUZ6ZENCd1lYUm9PaUJKWmlCZ2RtRnNZQ0JtYVhSeklHbHVkRzhnWVNCemFXNW5iR1VnWW5sMFpTd2dkWE5sSUhSb1lYUWdiblZ0WlhKcFl5QjJZV3gxWlM1Y2JpQWdJQ0FnSUNBZ2RtRnNJRDBnWTI5a1pWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdkbUZzSUQwOVBTQW5iblZ0WW1WeUp5a2dlMXh1SUNBZ0lIWmhiQ0E5SUhaaGJDQW1JREkxTlZ4dUlDQjlYRzVjYmlBZ0x5OGdTVzUyWVd4cFpDQnlZVzVuWlhNZ1lYSmxJRzV2ZENCelpYUWdkRzhnWVNCa1pXWmhkV3gwTENCemJ5QmpZVzRnY21GdVoyVWdZMmhsWTJzZ1pXRnliSGt1WEc0Z0lHbG1JQ2h6ZEdGeWRDQThJREFnZkh3Z2RHaHBjeTVzWlc1bmRHZ2dQQ0J6ZEdGeWRDQjhmQ0IwYUdsekxteGxibWQwYUNBOElHVnVaQ2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJTWVc1blpVVnljbTl5S0NkUGRYUWdiMllnY21GdVoyVWdhVzVrWlhnbktWeHVJQ0I5WEc1Y2JpQWdhV1lnS0dWdVpDQThQU0J6ZEdGeWRDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpYRzRnSUgxY2JseHVJQ0J6ZEdGeWRDQTlJSE4wWVhKMElENCtQaUF3WEc0Z0lHVnVaQ0E5SUdWdVpDQTlQVDBnZFc1a1pXWnBibVZrSUQ4Z2RHaHBjeTVzWlc1bmRHZ2dPaUJsYm1RZ1BqNCtJREJjYmx4dUlDQnBaaUFvSVhaaGJDa2dkbUZzSUQwZ01GeHVYRzRnSUhaaGNpQnBYRzRnSUdsbUlDaDBlWEJsYjJZZ2RtRnNJRDA5UFNBbmJuVnRZbVZ5SnlrZ2UxeHVJQ0FnSUdadmNpQW9hU0E5SUhOMFlYSjBPeUJwSUR3Z1pXNWtPeUFySzJrcElIdGNiaUFnSUNBZ0lIUm9hWE5iYVYwZ1BTQjJZV3hjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkbUZ5SUdKNWRHVnpJRDBnUW5WbVptVnlMbWx6UW5WbVptVnlLSFpoYkNsY2JpQWdJQ0FnSUQ4Z2RtRnNYRzRnSUNBZ0lDQTZJRUoxWm1abGNpNW1jbTl0S0haaGJDd2daVzVqYjJScGJtY3BYRzRnSUNBZ2RtRnlJR3hsYmlBOUlHSjVkR1Z6TG14bGJtZDBhRnh1SUNBZ0lHbG1JQ2hzWlc0Z1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oxUm9aU0IyWVd4MVpTQmNJaWNnS3lCMllXd2dLMXh1SUNBZ0lDQWdJQ0FuWENJZ2FYTWdhVzUyWVd4cFpDQm1iM0lnWVhKbmRXMWxiblFnWENKMllXeDFaVndpSnlsY2JpQWdJQ0I5WEc0Z0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElHVnVaQ0F0SUhOMFlYSjBPeUFySzJrcElIdGNiaUFnSUNBZ0lIUm9hWE5iYVNBcklITjBZWEowWFNBOUlHSjVkR1Z6VzJrZ0pTQnNaVzVkWEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSFJvYVhOY2JuMWNibHh1THk4Z1NFVk1VRVZTSUVaVlRrTlVTVTlPVTF4dUx5OGdQVDA5UFQwOVBUMDlQVDA5UFQwOVBWeHVYRzUyWVhJZ1NVNVdRVXhKUkY5Q1FWTkZOalJmVWtVZ1BTQXZXMTRyTHpBdE9VRXRXbUV0ZWkxZlhTOW5YRzVjYm1aMWJtTjBhVzl1SUdKaGMyVTJOR05zWldGdUlDaHpkSElwSUh0Y2JpQWdMeThnVG05a1pTQjBZV3RsY3lCbGNYVmhiQ0J6YVdkdWN5QmhjeUJsYm1RZ2IyWWdkR2hsSUVKaGMyVTJOQ0JsYm1OdlpHbHVaMXh1SUNCemRISWdQU0J6ZEhJdWMzQnNhWFFvSnowbktWc3dYVnh1SUNBdkx5Qk9iMlJsSUhOMGNtbHdjeUJ2ZFhRZ2FXNTJZV3hwWkNCamFHRnlZV04wWlhKeklHeHBhMlVnWEZ4dUlHRnVaQ0JjWEhRZ1puSnZiU0IwYUdVZ2MzUnlhVzVuTENCaVlYTmxOalF0YW5NZ1pHOWxjeUJ1YjNSY2JpQWdjM1J5SUQwZ2MzUnlMblJ5YVcwb0tTNXlaWEJzWVdObEtFbE9Wa0ZNU1VSZlFrRlRSVFkwWDFKRkxDQW5KeWxjYmlBZ0x5OGdUbTlrWlNCamIyNTJaWEowY3lCemRISnBibWR6SUhkcGRHZ2diR1Z1WjNSb0lEd2dNaUIwYnlBbkoxeHVJQ0JwWmlBb2MzUnlMbXhsYm1kMGFDQThJRElwSUhKbGRIVnliaUFuSjF4dUlDQXZMeUJPYjJSbElHRnNiRzkzY3lCbWIzSWdibTl1TFhCaFpHUmxaQ0JpWVhObE5qUWdjM1J5YVc1bmN5QW9iV2x6YzJsdVp5QjBjbUZwYkdsdVp5QTlQVDBwTENCaVlYTmxOalF0YW5NZ1pHOWxjeUJ1YjNSY2JpQWdkMmhwYkdVZ0tITjBjaTVzWlc1bmRHZ2dKU0EwSUNFOVBTQXdLU0I3WEc0Z0lDQWdjM1J5SUQwZ2MzUnlJQ3NnSnowblhHNGdJSDFjYmlBZ2NtVjBkWEp1SUhOMGNseHVmVnh1WEc1bWRXNWpkR2x2YmlCMGIwaGxlQ0FvYmlrZ2UxeHVJQ0JwWmlBb2JpQThJREUyS1NCeVpYUjFjbTRnSnpBbklDc2diaTUwYjFOMGNtbHVaeWd4TmlsY2JpQWdjbVYwZFhKdUlHNHVkRzlUZEhKcGJtY29NVFlwWEc1OVhHNWNibVoxYm1OMGFXOXVJSFYwWmpoVWIwSjVkR1Z6SUNoemRISnBibWNzSUhWdWFYUnpLU0I3WEc0Z0lIVnVhWFJ6SUQwZ2RXNXBkSE1nZkh3Z1NXNW1hVzVwZEhsY2JpQWdkbUZ5SUdOdlpHVlFiMmx1ZEZ4dUlDQjJZWElnYkdWdVozUm9JRDBnYzNSeWFXNW5MbXhsYm1kMGFGeHVJQ0IyWVhJZ2JHVmhaRk4xY25KdloyRjBaU0E5SUc1MWJHeGNiaUFnZG1GeUlHSjVkR1Z6SUQwZ1cxMWNibHh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHeGxibWQwYURzZ0t5dHBLU0I3WEc0Z0lDQWdZMjlrWlZCdmFXNTBJRDBnYzNSeWFXNW5MbU5vWVhKRGIyUmxRWFFvYVNsY2JseHVJQ0FnSUM4dklHbHpJSE4xY25KdloyRjBaU0JqYjIxd2IyNWxiblJjYmlBZ0lDQnBaaUFvWTI5a1pWQnZhVzUwSUQ0Z01IaEVOMFpHSUNZbUlHTnZaR1ZRYjJsdWRDQThJREI0UlRBd01Da2dlMXh1SUNBZ0lDQWdMeThnYkdGemRDQmphR0Z5SUhkaGN5QmhJR3hsWVdSY2JpQWdJQ0FnSUdsbUlDZ2hiR1ZoWkZOMWNuSnZaMkYwWlNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJ1YnlCc1pXRmtJSGxsZEZ4dUlDQWdJQ0FnSUNCcFppQW9ZMjlrWlZCdmFXNTBJRDRnTUhoRVFrWkdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkVzVsZUhCbFkzUmxaQ0IwY21GcGJGeHVJQ0FnSUNBZ0lDQWdJR2xtSUNnb2RXNXBkSE1nTFQwZ015a2dQaUF0TVNrZ1lubDBaWE11Y0hWemFDZ3dlRVZHTENBd2VFSkdMQ0F3ZUVKRUtWeHVJQ0FnSUNBZ0lDQWdJR052Ym5ScGJuVmxYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYVNBcklERWdQVDA5SUd4bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJSFZ1Y0dGcGNtVmtJR3hsWVdSY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvS0hWdWFYUnpJQzA5SURNcElENGdMVEVwSUdKNWRHVnpMbkIxYzJnb01IaEZSaXdnTUhoQ1Jpd2dNSGhDUkNsY2JpQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2RtRnNhV1FnYkdWaFpGeHVJQ0FnSUNBZ0lDQnNaV0ZrVTNWeWNtOW5ZWFJsSUQwZ1kyOWtaVkJ2YVc1MFhHNWNiaUFnSUNBZ0lDQWdZMjl1ZEdsdWRXVmNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnTWlCc1pXRmtjeUJwYmlCaElISnZkMXh1SUNBZ0lDQWdhV1lnS0dOdlpHVlFiMmx1ZENBOElEQjRSRU13TUNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvS0hWdWFYUnpJQzA5SURNcElENGdMVEVwSUdKNWRHVnpMbkIxYzJnb01IaEZSaXdnTUhoQ1Jpd2dNSGhDUkNsY2JpQWdJQ0FnSUNBZ2JHVmhaRk4xY25KdloyRjBaU0E5SUdOdlpHVlFiMmx1ZEZ4dUlDQWdJQ0FnSUNCamIyNTBhVzUxWlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QjJZV3hwWkNCemRYSnliMmRoZEdVZ2NHRnBjbHh1SUNBZ0lDQWdZMjlrWlZCdmFXNTBJRDBnS0d4bFlXUlRkWEp5YjJkaGRHVWdMU0F3ZUVRNE1EQWdQRHdnTVRBZ2ZDQmpiMlJsVUc5cGJuUWdMU0F3ZUVSRE1EQXBJQ3NnTUhneE1EQXdNRnh1SUNBZ0lIMGdaV3h6WlNCcFppQW9iR1ZoWkZOMWNuSnZaMkYwWlNrZ2UxeHVJQ0FnSUNBZ0x5OGdkbUZzYVdRZ1ltMXdJR05vWVhJc0lHSjFkQ0JzWVhOMElHTm9ZWElnZDJGeklHRWdiR1ZoWkZ4dUlDQWdJQ0FnYVdZZ0tDaDFibWwwY3lBdFBTQXpLU0ErSUMweEtTQmllWFJsY3k1d2RYTm9LREI0UlVZc0lEQjRRa1lzSURCNFFrUXBYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2JHVmhaRk4xY25KdloyRjBaU0E5SUc1MWJHeGNibHh1SUNBZ0lDOHZJR1Z1WTI5a1pTQjFkR1k0WEc0Z0lDQWdhV1lnS0dOdlpHVlFiMmx1ZENBOElEQjRPREFwSUh0Y2JpQWdJQ0FnSUdsbUlDZ29kVzVwZEhNZ0xUMGdNU2tnUENBd0tTQmljbVZoYTF4dUlDQWdJQ0FnWW5sMFpYTXVjSFZ6YUNoamIyUmxVRzlwYm5RcFhHNGdJQ0FnZlNCbGJITmxJR2xtSUNoamIyUmxVRzlwYm5RZ1BDQXdlRGd3TUNrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ2gxYm1sMGN5QXRQU0F5S1NBOElEQXBJR0p5WldGclhHNGdJQ0FnSUNCaWVYUmxjeTV3ZFhOb0tGeHVJQ0FnSUNBZ0lDQmpiMlJsVUc5cGJuUWdQajRnTUhnMklId2dNSGhETUN4Y2JpQWdJQ0FnSUNBZ1kyOWtaVkJ2YVc1MElDWWdNSGd6UmlCOElEQjRPREJjYmlBZ0lDQWdJQ2xjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR052WkdWUWIybHVkQ0E4SURCNE1UQXdNREFwSUh0Y2JpQWdJQ0FnSUdsbUlDZ29kVzVwZEhNZ0xUMGdNeWtnUENBd0tTQmljbVZoYTF4dUlDQWdJQ0FnWW5sMFpYTXVjSFZ6YUNoY2JpQWdJQ0FnSUNBZ1kyOWtaVkJ2YVc1MElENCtJREI0UXlCOElEQjRSVEFzWEc0Z0lDQWdJQ0FnSUdOdlpHVlFiMmx1ZENBK1BpQXdlRFlnSmlBd2VETkdJSHdnTUhnNE1DeGNiaUFnSUNBZ0lDQWdZMjlrWlZCdmFXNTBJQ1lnTUhnelJpQjhJREI0T0RCY2JpQWdJQ0FnSUNsY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dOdlpHVlFiMmx1ZENBOElEQjRNVEV3TURBd0tTQjdYRzRnSUNBZ0lDQnBaaUFvS0hWdWFYUnpJQzA5SURRcElEd2dNQ2tnWW5KbFlXdGNiaUFnSUNBZ0lHSjVkR1Z6TG5CMWMyZ29YRzRnSUNBZ0lDQWdJR052WkdWUWIybHVkQ0ErUGlBd2VERXlJSHdnTUhoR01DeGNiaUFnSUNBZ0lDQWdZMjlrWlZCdmFXNTBJRDQrSURCNFF5QW1JREI0TTBZZ2ZDQXdlRGd3TEZ4dUlDQWdJQ0FnSUNCamIyUmxVRzlwYm5RZ1BqNGdNSGcySUNZZ01IZ3pSaUI4SURCNE9EQXNYRzRnSUNBZ0lDQWdJR052WkdWUWIybHVkQ0FtSURCNE0wWWdmQ0F3ZURnd1hHNGdJQ0FnSUNBcFhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25TVzUyWVd4cFpDQmpiMlJsSUhCdmFXNTBKeWxjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdZbmwwWlhOY2JuMWNibHh1Wm5WdVkzUnBiMjRnWVhOamFXbFViMEo1ZEdWeklDaHpkSElwSUh0Y2JpQWdkbUZ5SUdKNWRHVkJjbkpoZVNBOUlGdGRYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2MzUnlMbXhsYm1kMGFEc2dLeXRwS1NCN1hHNGdJQ0FnTHk4Z1RtOWtaU2R6SUdOdlpHVWdjMlZsYlhNZ2RHOGdZbVVnWkc5cGJtY2dkR2hwY3lCaGJtUWdibTkwSUNZZ01IZzNSaTR1WEc0Z0lDQWdZbmwwWlVGeWNtRjVMbkIxYzJnb2MzUnlMbU5vWVhKRGIyUmxRWFFvYVNrZ0ppQXdlRVpHS1Z4dUlDQjlYRzRnSUhKbGRIVnliaUJpZVhSbFFYSnlZWGxjYm4xY2JseHVablZ1WTNScGIyNGdkWFJtTVRac1pWUnZRbmwwWlhNZ0tITjBjaXdnZFc1cGRITXBJSHRjYmlBZ2RtRnlJR01zSUdocExDQnNiMXh1SUNCMllYSWdZbmwwWlVGeWNtRjVJRDBnVzExY2JpQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J6ZEhJdWJHVnVaM1JvT3lBcksya3BJSHRjYmlBZ0lDQnBaaUFvS0hWdWFYUnpJQzA5SURJcElEd2dNQ2tnWW5KbFlXdGNibHh1SUNBZ0lHTWdQU0J6ZEhJdVkyaGhja052WkdWQmRDaHBLVnh1SUNBZ0lHaHBJRDBnWXlBK1BpQTRYRzRnSUNBZ2JHOGdQU0JqSUNVZ01qVTJYRzRnSUNBZ1lubDBaVUZ5Y21GNUxuQjFjMmdvYkc4cFhHNGdJQ0FnWW5sMFpVRnljbUY1TG5CMWMyZ29hR2twWEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWW5sMFpVRnljbUY1WEc1OVhHNWNibVoxYm1OMGFXOXVJR0poYzJVMk5GUnZRbmwwWlhNZ0tITjBjaWtnZTF4dUlDQnlaWFIxY200Z1ltRnpaVFkwTG5SdlFubDBaVUZ5Y21GNUtHSmhjMlUyTkdOc1pXRnVLSE4wY2lrcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdKc2FYUkNkV1ptWlhJZ0tITnlZeXdnWkhOMExDQnZabVp6WlhRc0lHeGxibWQwYUNrZ2UxeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUd4bGJtZDBhRHNnS3l0cEtTQjdYRzRnSUNBZ2FXWWdLQ2hwSUNzZ2IyWm1jMlYwSUQ0OUlHUnpkQzVzWlc1bmRHZ3BJSHg4SUNocElENDlJSE55WXk1c1pXNW5kR2dwS1NCaWNtVmhhMXh1SUNBZ0lHUnpkRnRwSUNzZ2IyWm1jMlYwWFNBOUlITnlZMXRwWFZ4dUlDQjlYRzRnSUhKbGRIVnliaUJwWEc1OVhHNWNiaTh2SUVGeWNtRjVRblZtWm1WeUlHOXlJRlZwYm5RNFFYSnlZWGtnYjJKcVpXTjBjeUJtY205dElHOTBhR1Z5SUdOdmJuUmxlSFJ6SUNocExtVXVJR2xtY21GdFpYTXBJR1J2SUc1dmRDQndZWE56WEc0dkx5QjBhR1VnWUdsdWMzUmhibU5sYjJaZ0lHTm9aV05ySUdKMWRDQjBhR1Y1SUhOb2IzVnNaQ0JpWlNCMGNtVmhkR1ZrSUdGeklHOW1JSFJvWVhRZ2RIbHdaUzVjYmk4dklGTmxaVG9nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJabGNtOXpjeTlpZFdabVpYSXZhWE56ZFdWekx6RTJObHh1Wm5WdVkzUnBiMjRnYVhOSmJuTjBZVzVqWlNBb2IySnFMQ0IwZVhCbEtTQjdYRzRnSUhKbGRIVnliaUJ2WW1vZ2FXNXpkR0Z1WTJWdlppQjBlWEJsSUh4OFhHNGdJQ0FnS0c5aWFpQWhQU0J1ZFd4c0lDWW1JRzlpYWk1amIyNXpkSEoxWTNSdmNpQWhQU0J1ZFd4c0lDWW1JRzlpYWk1amIyNXpkSEoxWTNSdmNpNXVZVzFsSUNFOUlHNTFiR3dnSmlaY2JpQWdJQ0FnSUc5aWFpNWpiMjV6ZEhKMVkzUnZjaTV1WVcxbElEMDlQU0IwZVhCbExtNWhiV1VwWEc1OVhHNW1kVzVqZEdsdmJpQnVkVzFpWlhKSmMwNWhUaUFvYjJKcUtTQjdYRzRnSUM4dklFWnZjaUJKUlRFeElITjFjSEJ2Y25SY2JpQWdjbVYwZFhKdUlHOWlhaUFoUFQwZ2IySnFJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMV3hwYm1VZ2JtOHRjMlZzWmkxamIyMXdZWEpsWEc1OVhHNGlMQ0l2THlCRGIzQjVjbWxuYUhRZ1NtOTVaVzUwTENCSmJtTXVJR0Z1WkNCdmRHaGxjaUJPYjJSbElHTnZiblJ5YVdKMWRHOXljeTVjYmk4dlhHNHZMeUJRWlhKdGFYTnphVzl1SUdseklHaGxjbVZpZVNCbmNtRnVkR1ZrTENCbWNtVmxJRzltSUdOb1lYSm5aU3dnZEc4Z1lXNTVJSEJsY25OdmJpQnZZblJoYVc1cGJtY2dZVnh1THk4Z1kyOXdlU0J2WmlCMGFHbHpJSE52Wm5SM1lYSmxJR0Z1WkNCaGMzTnZZMmxoZEdWa0lHUnZZM1Z0Wlc1MFlYUnBiMjRnWm1sc1pYTWdLSFJvWlZ4dUx5OGdYQ0pUYjJaMGQyRnlaVndpS1N3Z2RHOGdaR1ZoYkNCcGJpQjBhR1VnVTI5bWRIZGhjbVVnZDJsMGFHOTFkQ0J5WlhOMGNtbGpkR2x2Yml3Z2FXNWpiSFZrYVc1blhHNHZMeUIzYVhSb2IzVjBJR3hwYldsMFlYUnBiMjRnZEdobElISnBaMmgwY3lCMGJ5QjFjMlVzSUdOdmNIa3NJRzF2WkdsbWVTd2diV1Z5WjJVc0lIQjFZbXhwYzJnc1hHNHZMeUJrYVhOMGNtbGlkWFJsTENCemRXSnNhV05sYm5ObExDQmhibVF2YjNJZ2MyVnNiQ0JqYjNCcFpYTWdiMllnZEdobElGTnZablIzWVhKbExDQmhibVFnZEc4Z2NHVnliV2wwWEc0dkx5QndaWEp6YjI1eklIUnZJSGRvYjIwZ2RHaGxJRk52Wm5SM1lYSmxJR2x6SUdaMWNtNXBjMmhsWkNCMGJ5QmtieUJ6Ynl3Z2MzVmlhbVZqZENCMGJ5QjBhR1ZjYmk4dklHWnZiR3h2ZDJsdVp5QmpiMjVrYVhScGIyNXpPbHh1THk5Y2JpOHZJRlJvWlNCaFltOTJaU0JqYjNCNWNtbG5hSFFnYm05MGFXTmxJR0Z1WkNCMGFHbHpJSEJsY20xcGMzTnBiMjRnYm05MGFXTmxJSE5vWVd4c0lHSmxJR2x1WTJ4MVpHVmtYRzR2THlCcGJpQmhiR3dnWTI5d2FXVnpJRzl5SUhOMVluTjBZVzUwYVdGc0lIQnZjblJwYjI1eklHOW1JSFJvWlNCVGIyWjBkMkZ5WlM1Y2JpOHZYRzR2THlCVVNFVWdVMDlHVkZkQlVrVWdTVk1nVUZKUFZrbEVSVVFnWENKQlV5QkpVMXdpTENCWFNWUklUMVZVSUZkQlVsSkJUbFJaSUU5R0lFRk9XU0JMU1U1RUxDQkZXRkJTUlZOVFhHNHZMeUJQVWlCSlRWQk1TVVZFTENCSlRrTk1WVVJKVGtjZ1FsVlVJRTVQVkNCTVNVMUpWRVZFSUZSUElGUklSU0JYUVZKU1FVNVVTVVZUSUU5R1hHNHZMeUJOUlZKRFNFRk9WRUZDU1V4SlZGa3NJRVpKVkU1RlUxTWdSazlTSUVFZ1VFRlNWRWxEVlV4QlVpQlFWVkpRVDFORklFRk9SQ0JPVDA1SlRrWlNTVTVIUlUxRlRsUXVJRWxPWEc0dkx5Qk9UeUJGVmtWT1ZDQlRTRUZNVENCVVNFVWdRVlZVU0U5U1V5QlBVaUJEVDFCWlVrbEhTRlFnU0U5TVJFVlNVeUJDUlNCTVNVRkNURVVnUms5U0lFRk9XU0JEVEVGSlRTeGNiaTh2SUVSQlRVRkhSVk1nVDFJZ1QxUklSVklnVEVsQlFrbE1TVlJaTENCWFNFVlVTRVZTSUVsT0lFRk9JRUZEVkVsUFRpQlBSaUJEVDA1VVVrRkRWQ3dnVkU5U1ZDQlBVbHh1THk4Z1QxUklSVkpYU1ZORkxDQkJVa2xUU1U1SElFWlNUMDBzSUU5VlZDQlBSaUJQVWlCSlRpQkRUMDVPUlVOVVNVOU9JRmRKVkVnZ1ZFaEZJRk5QUmxSWFFWSkZJRTlTSUZSSVJWeHVMeThnVlZORklFOVNJRTlVU0VWU0lFUkZRVXhKVGtkVElFbE9JRlJJUlNCVFQwWlVWMEZTUlM1Y2JseHVkbUZ5SUc5aWFtVmpkRU55WldGMFpTQTlJRTlpYW1WamRDNWpjbVZoZEdVZ2ZId2diMkpxWldOMFEzSmxZWFJsVUc5c2VXWnBiR3hjYm5aaGNpQnZZbXBsWTNSTFpYbHpJRDBnVDJKcVpXTjBMbXRsZVhNZ2ZId2diMkpxWldOMFMyVjVjMUJ2YkhsbWFXeHNYRzUyWVhJZ1ltbHVaQ0E5SUVaMWJtTjBhVzl1TG5CeWIzUnZkSGx3WlM1aWFXNWtJSHg4SUdaMWJtTjBhVzl1UW1sdVpGQnZiSGxtYVd4c1hHNWNibVoxYm1OMGFXOXVJRVYyWlc1MFJXMXBkSFJsY2lncElIdGNiaUFnYVdZZ0tDRjBhR2x6TGw5bGRtVnVkSE1nZkh3Z0lVOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaDBhR2x6TENBblgyVjJaVzUwY3ljcEtTQjdYRzRnSUNBZ2RHaHBjeTVmWlhabGJuUnpJRDBnYjJKcVpXTjBRM0psWVhSbEtHNTFiR3dwTzF4dUlDQWdJSFJvYVhNdVgyVjJaVzUwYzBOdmRXNTBJRDBnTUR0Y2JpQWdmVnh1WEc0Z0lIUm9hWE11WDIxaGVFeHBjM1JsYm1WeWN5QTlJSFJvYVhNdVgyMWhlRXhwYzNSbGJtVnljeUI4ZkNCMWJtUmxabWx1WldRN1hHNTlYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRVYyWlc1MFJXMXBkSFJsY2p0Y2JseHVMeThnUW1GamEzZGhjbVJ6TFdOdmJYQmhkQ0IzYVhSb0lHNXZaR1VnTUM0eE1DNTRYRzVGZG1WdWRFVnRhWFIwWlhJdVJYWmxiblJGYldsMGRHVnlJRDBnUlhabGJuUkZiV2wwZEdWeU8xeHVYRzVGZG1WdWRFVnRhWFIwWlhJdWNISnZkRzkwZVhCbExsOWxkbVZ1ZEhNZ1BTQjFibVJsWm1sdVpXUTdYRzVGZG1WdWRFVnRhWFIwWlhJdWNISnZkRzkwZVhCbExsOXRZWGhNYVhOMFpXNWxjbk1nUFNCMWJtUmxabWx1WldRN1hHNWNiaTh2SUVKNUlHUmxabUYxYkhRZ1JYWmxiblJGYldsMGRHVnljeUIzYVd4c0lIQnlhVzUwSUdFZ2QyRnlibWx1WnlCcFppQnRiM0psSUhSb1lXNGdNVEFnYkdsemRHVnVaWEp6SUdGeVpWeHVMeThnWVdSa1pXUWdkRzhnYVhRdUlGUm9hWE1nYVhNZ1lTQjFjMlZtZFd3Z1pHVm1ZWFZzZENCM2FHbGphQ0JvWld4d2N5Qm1hVzVrYVc1bklHMWxiVzl5ZVNCc1pXRnJjeTVjYm5aaGNpQmtaV1poZFd4MFRXRjRUR2x6ZEdWdVpYSnpJRDBnTVRBN1hHNWNiblpoY2lCb1lYTkVaV1pwYm1WUWNtOXdaWEowZVR0Y2JuUnllU0I3WEc0Z0lIWmhjaUJ2SUQwZ2UzMDdYRzRnSUdsbUlDaFBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtwSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaHZMQ0FuZUNjc0lIc2dkbUZzZFdVNklEQWdmU2s3WEc0Z0lHaGhjMFJsWm1sdVpWQnliM0JsY25SNUlEMGdieTU0SUQwOVBTQXdPMXh1ZlNCallYUmphQ0FvWlhKeUtTQjdJR2hoYzBSbFptbHVaVkJ5YjNCbGNuUjVJRDBnWm1Gc2MyVWdmVnh1YVdZZ0tHaGhjMFJsWm1sdVpWQnliM0JsY25SNUtTQjdYRzRnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaEZkbVZ1ZEVWdGFYUjBaWElzSUNka1pXWmhkV3gwVFdGNFRHbHpkR1Z1WlhKekp5d2dlMXh1SUNBZ0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmtaV1poZFd4MFRXRjRUR2x6ZEdWdVpYSnpPMXh1SUNBZ0lIMHNYRzRnSUNBZ2MyVjBPaUJtZFc1amRHbHZiaWhoY21jcElIdGNiaUFnSUNBZ0lDOHZJR05vWldOcklIZG9aWFJvWlhJZ2RHaGxJR2x1Y0hWMElHbHpJR0VnY0c5emFYUnBkbVVnYm5WdFltVnlJQ2gzYUc5elpTQjJZV3gxWlNCcGN5QjZaWEp2SUc5eVhHNGdJQ0FnSUNBdkx5Qm5jbVZoZEdWeUlHRnVaQ0J1YjNRZ1lTQk9ZVTRwTGx4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCaGNtY2dJVDA5SUNkdWRXMWlaWEluSUh4OElHRnlaeUE4SURBZ2ZId2dZWEpuSUNFOVBTQmhjbWNwWEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oxd2laR1ZtWVhWc2RFMWhlRXhwYzNSbGJtVnljMXdpSUcxMWMzUWdZbVVnWVNCd2IzTnBkR2wyWlNCdWRXMWlaWEluS1R0Y2JpQWdJQ0FnSUdSbFptRjFiSFJOWVhoTWFYTjBaVzVsY25NZ1BTQmhjbWM3WEc0Z0lDQWdmVnh1SUNCOUtUdGNibjBnWld4elpTQjdYRzRnSUVWMlpXNTBSVzFwZEhSbGNpNWtaV1poZFd4MFRXRjRUR2x6ZEdWdVpYSnpJRDBnWkdWbVlYVnNkRTFoZUV4cGMzUmxibVZ5Y3p0Y2JuMWNibHh1THk4Z1QySjJhVzkxYzJ4NUlHNXZkQ0JoYkd3Z1JXMXBkSFJsY25NZ2MyaHZkV3hrSUdKbElHeHBiV2wwWldRZ2RHOGdNVEF1SUZSb2FYTWdablZ1WTNScGIyNGdZV3hzYjNkelhHNHZMeUIwYUdGMElIUnZJR0psSUdsdVkzSmxZWE5sWkM0Z1UyVjBJSFJ2SUhwbGNtOGdabTl5SUhWdWJHbHRhWFJsWkM1Y2JrVjJaVzUwUlcxcGRIUmxjaTV3Y205MGIzUjVjR1V1YzJWMFRXRjRUR2x6ZEdWdVpYSnpJRDBnWm5WdVkzUnBiMjRnYzJWMFRXRjRUR2x6ZEdWdVpYSnpLRzRwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJ1SUNFOVBTQW5iblZ0WW1WeUp5QjhmQ0J1SUR3Z01DQjhmQ0JwYzA1aFRpaHVLU2xjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RjSW01Y0lpQmhjbWQxYldWdWRDQnRkWE4wSUdKbElHRWdjRzl6YVhScGRtVWdiblZ0WW1WeUp5azdYRzRnSUhSb2FYTXVYMjFoZUV4cGMzUmxibVZ5Y3lBOUlHNDdYRzRnSUhKbGRIVnliaUIwYUdsek8xeHVmVHRjYmx4dVpuVnVZM1JwYjI0Z0pHZGxkRTFoZUV4cGMzUmxibVZ5Y3loMGFHRjBLU0I3WEc0Z0lHbG1JQ2gwYUdGMExsOXRZWGhNYVhOMFpXNWxjbk1nUFQwOUlIVnVaR1ZtYVc1bFpDbGNiaUFnSUNCeVpYUjFjbTRnUlhabGJuUkZiV2wwZEdWeUxtUmxabUYxYkhSTllYaE1hWE4wWlc1bGNuTTdYRzRnSUhKbGRIVnliaUIwYUdGMExsOXRZWGhNYVhOMFpXNWxjbk03WEc1OVhHNWNia1YyWlc1MFJXMXBkSFJsY2k1d2NtOTBiM1I1Y0dVdVoyVjBUV0Y0VEdsemRHVnVaWEp6SUQwZ1puVnVZM1JwYjI0Z1oyVjBUV0Y0VEdsemRHVnVaWEp6S0NrZ2UxeHVJQ0J5WlhSMWNtNGdKR2RsZEUxaGVFeHBjM1JsYm1WeWN5aDBhR2x6S1R0Y2JuMDdYRzVjYmk4dklGUm9aWE5sSUhOMFlXNWtZV3h2Ym1VZ1pXMXBkQ29nWm5WdVkzUnBiMjV6SUdGeVpTQjFjMlZrSUhSdklHOXdkR2x0YVhwbElHTmhiR3hwYm1jZ2IyWWdaWFpsYm5SY2JpOHZJR2hoYm1Sc1pYSnpJR1p2Y2lCbVlYTjBJR05oYzJWeklHSmxZMkYxYzJVZ1pXMXBkQ2dwSUdsMGMyVnNaaUJ2Wm5SbGJpQm9ZWE1nWVNCMllYSnBZV0pzWlNCdWRXMWlaWElnYjJaY2JpOHZJR0Z5WjNWdFpXNTBjeUJoYm1RZ1kyRnVJR0psSUdSbGIzQjBhVzFwZW1Wa0lHSmxZMkYxYzJVZ2IyWWdkR2hoZEM0Z1ZHaGxjMlVnWm5WdVkzUnBiMjV6SUdGc2QyRjVjeUJvWVhabFhHNHZMeUIwYUdVZ2MyRnRaU0J1ZFcxaVpYSWdiMllnWVhKbmRXMWxiblJ6SUdGdVpDQjBhSFZ6SUdSdklHNXZkQ0JuWlhRZ1pHVnZjSFJwYldsNlpXUXNJSE52SUhSb1pTQmpiMlJsWEc0dkx5QnBibk5wWkdVZ2RHaGxiU0JqWVc0Z1pYaGxZM1YwWlNCbVlYTjBaWEl1WEc1bWRXNWpkR2x2YmlCbGJXbDBUbTl1WlNob1lXNWtiR1Z5TENCcGMwWnVMQ0J6Wld4bUtTQjdYRzRnSUdsbUlDaHBjMFp1S1Z4dUlDQWdJR2hoYm1Sc1pYSXVZMkZzYkNoelpXeG1LVHRjYmlBZ1pXeHpaU0I3WEc0Z0lDQWdkbUZ5SUd4bGJpQTlJR2hoYm1Sc1pYSXViR1Z1WjNSb08xeHVJQ0FnSUhaaGNpQnNhWE4wWlc1bGNuTWdQU0JoY25KaGVVTnNiMjVsS0doaGJtUnNaWElzSUd4bGJpazdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnNaVzQ3SUNzcmFTbGNiaUFnSUNBZ0lHeHBjM1JsYm1WeWMxdHBYUzVqWVd4c0tITmxiR1lwTzF4dUlDQjlYRzU5WEc1bWRXNWpkR2x2YmlCbGJXbDBUMjVsS0doaGJtUnNaWElzSUdselJtNHNJSE5sYkdZc0lHRnlaekVwSUh0Y2JpQWdhV1lnS0dselJtNHBYRzRnSUNBZ2FHRnVaR3hsY2k1allXeHNLSE5sYkdZc0lHRnlaekVwTzF4dUlDQmxiSE5sSUh0Y2JpQWdJQ0IyWVhJZ2JHVnVJRDBnYUdGdVpHeGxjaTVzWlc1bmRHZzdYRzRnSUNBZ2RtRnlJR3hwYzNSbGJtVnljeUE5SUdGeWNtRjVRMnh2Ym1Vb2FHRnVaR3hsY2l3Z2JHVnVLVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR3hsYmpzZ0t5dHBLVnh1SUNBZ0lDQWdiR2x6ZEdWdVpYSnpXMmxkTG1OaGJHd29jMlZzWml3Z1lYSm5NU2s3WEc0Z0lIMWNibjFjYm1aMWJtTjBhVzl1SUdWdGFYUlVkMjhvYUdGdVpHeGxjaXdnYVhOR2Jpd2djMlZzWml3Z1lYSm5NU3dnWVhKbk1pa2dlMXh1SUNCcFppQW9hWE5HYmlsY2JpQWdJQ0JvWVc1a2JHVnlMbU5oYkd3b2MyVnNaaXdnWVhKbk1Td2dZWEpuTWlrN1hHNGdJR1ZzYzJVZ2UxeHVJQ0FnSUhaaGNpQnNaVzRnUFNCb1lXNWtiR1Z5TG14bGJtZDBhRHRjYmlBZ0lDQjJZWElnYkdsemRHVnVaWEp6SUQwZ1lYSnlZWGxEYkc5dVpTaG9ZVzVrYkdWeUxDQnNaVzRwTzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYkdWdU95QXJLMmtwWEc0Z0lDQWdJQ0JzYVhOMFpXNWxjbk5iYVYwdVkyRnNiQ2h6Wld4bUxDQmhjbWN4TENCaGNtY3lLVHRjYmlBZ2ZWeHVmVnh1Wm5WdVkzUnBiMjRnWlcxcGRGUm9jbVZsS0doaGJtUnNaWElzSUdselJtNHNJSE5sYkdZc0lHRnlaekVzSUdGeVp6SXNJR0Z5WnpNcElIdGNiaUFnYVdZZ0tHbHpSbTRwWEc0Z0lDQWdhR0Z1Wkd4bGNpNWpZV3hzS0hObGJHWXNJR0Z5WnpFc0lHRnlaeklzSUdGeVp6TXBPMXh1SUNCbGJITmxJSHRjYmlBZ0lDQjJZWElnYkdWdUlEMGdhR0Z1Wkd4bGNpNXNaVzVuZEdnN1hHNGdJQ0FnZG1GeUlHeHBjM1JsYm1WeWN5QTlJR0Z5Y21GNVEyeHZibVVvYUdGdVpHeGxjaXdnYkdWdUtUdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHeGxianNnS3l0cEtWeHVJQ0FnSUNBZ2JHbHpkR1Z1WlhKelcybGRMbU5oYkd3b2MyVnNaaXdnWVhKbk1Td2dZWEpuTWl3Z1lYSm5NeWs3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1pXMXBkRTFoYm5rb2FHRnVaR3hsY2l3Z2FYTkdiaXdnYzJWc1ppd2dZWEpuY3lrZ2UxeHVJQ0JwWmlBb2FYTkdiaWxjYmlBZ0lDQm9ZVzVrYkdWeUxtRndjR3g1S0hObGJHWXNJR0Z5WjNNcE8xeHVJQ0JsYkhObElIdGNiaUFnSUNCMllYSWdiR1Z1SUQwZ2FHRnVaR3hsY2k1c1pXNW5kR2c3WEc0Z0lDQWdkbUZ5SUd4cGMzUmxibVZ5Y3lBOUlHRnljbUY1UTJ4dmJtVW9hR0Z1Wkd4bGNpd2diR1Z1S1R0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUd4bGJqc2dLeXRwS1Z4dUlDQWdJQ0FnYkdsemRHVnVaWEp6VzJsZExtRndjR3g1S0hObGJHWXNJR0Z5WjNNcE8xeHVJQ0I5WEc1OVhHNWNia1YyWlc1MFJXMXBkSFJsY2k1d2NtOTBiM1I1Y0dVdVpXMXBkQ0E5SUdaMWJtTjBhVzl1SUdWdGFYUW9kSGx3WlNrZ2UxeHVJQ0IyWVhJZ1pYSXNJR2hoYm1Sc1pYSXNJR3hsYml3Z1lYSm5jeXdnYVN3Z1pYWmxiblJ6TzF4dUlDQjJZWElnWkc5RmNuSnZjaUE5SUNoMGVYQmxJRDA5UFNBblpYSnliM0luS1R0Y2JseHVJQ0JsZG1WdWRITWdQU0IwYUdsekxsOWxkbVZ1ZEhNN1hHNGdJR2xtSUNobGRtVnVkSE1wWEc0Z0lDQWdaRzlGY25KdmNpQTlJQ2hrYjBWeWNtOXlJQ1ltSUdWMlpXNTBjeTVsY25KdmNpQTlQU0J1ZFd4c0tUdGNiaUFnWld4elpTQnBaaUFvSVdSdlJYSnliM0lwWEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dVhHNGdJQzh2SUVsbUlIUm9aWEpsSUdseklHNXZJQ2RsY25KdmNpY2daWFpsYm5RZ2JHbHpkR1Z1WlhJZ2RHaGxiaUIwYUhKdmR5NWNiaUFnYVdZZ0tHUnZSWEp5YjNJcElIdGNiaUFnSUNCcFppQW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStJREVwWEc0Z0lDQWdJQ0JsY2lBOUlHRnlaM1Z0Wlc1MGMxc3hYVHRjYmlBZ0lDQnBaaUFvWlhJZ2FXNXpkR0Z1WTJWdlppQkZjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnWlhJN0lDOHZJRlZ1YUdGdVpHeGxaQ0FuWlhKeWIzSW5JR1YyWlc1MFhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQzh2SUVGMElHeGxZWE4wSUdkcGRtVWdjMjl0WlNCcmFXNWtJRzltSUdOdmJuUmxlSFFnZEc4Z2RHaGxJSFZ6WlhKY2JpQWdJQ0FnSUhaaGNpQmxjbklnUFNCdVpYY2dSWEp5YjNJb0oxVnVhR0Z1Wkd4bFpDQmNJbVZ5Y205eVhDSWdaWFpsYm5RdUlDZ25JQ3NnWlhJZ0t5QW5LU2NwTzF4dUlDQWdJQ0FnWlhKeUxtTnZiblJsZUhRZ1BTQmxjanRjYmlBZ0lDQWdJSFJvY205M0lHVnljanRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNCOVhHNWNiaUFnYUdGdVpHeGxjaUE5SUdWMlpXNTBjMXQwZVhCbFhUdGNibHh1SUNCcFppQW9JV2hoYm1Sc1pYSXBYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1WEc0Z0lIWmhjaUJwYzBadUlEMGdkSGx3Wlc5bUlHaGhibVJzWlhJZ1BUMDlJQ2RtZFc1amRHbHZiaWM3WEc0Z0lHeGxiaUE5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3WEc0Z0lITjNhWFJqYUNBb2JHVnVLU0I3WEc0Z0lDQWdJQ0F2THlCbVlYTjBJR05oYzJWelhHNGdJQ0FnWTJGelpTQXhPbHh1SUNBZ0lDQWdaVzFwZEU1dmJtVW9hR0Z1Wkd4bGNpd2dhWE5HYml3Z2RHaHBjeWs3WEc0Z0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNCallYTmxJREk2WEc0Z0lDQWdJQ0JsYldsMFQyNWxLR2hoYm1Sc1pYSXNJR2x6Um00c0lIUm9hWE1zSUdGeVozVnRaVzUwYzFzeFhTazdYRzRnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0JqWVhObElETTZYRzRnSUNBZ0lDQmxiV2wwVkhkdktHaGhibVJzWlhJc0lHbHpSbTRzSUhSb2FYTXNJR0Z5WjNWdFpXNTBjMXN4WFN3Z1lYSm5kVzFsYm5Seld6SmRLVHRjYmlBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUdOaGMyVWdORHBjYmlBZ0lDQWdJR1Z0YVhSVWFISmxaU2hvWVc1a2JHVnlMQ0JwYzBadUxDQjBhR2x6TENCaGNtZDFiV1Z1ZEhOYk1WMHNJR0Z5WjNWdFpXNTBjMXN5WFN3Z1lYSm5kVzFsYm5Seld6TmRLVHRjYmlBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0x5OGdjMnh2ZDJWeVhHNGdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJR0Z5WjNNZ1BTQnVaWGNnUVhKeVlYa29iR1Z1SUMwZ01TazdYRzRnSUNBZ0lDQm1iM0lnS0drZ1BTQXhPeUJwSUR3Z2JHVnVPeUJwS3lzcFhHNGdJQ0FnSUNBZ0lHRnlaM05iYVNBdElERmRJRDBnWVhKbmRXMWxiblJ6VzJsZE8xeHVJQ0FnSUNBZ1pXMXBkRTFoYm5rb2FHRnVaR3hsY2l3Z2FYTkdiaXdnZEdocGN5d2dZWEpuY3lrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2RISjFaVHRjYm4wN1hHNWNibVoxYm1OMGFXOXVJRjloWkdSTWFYTjBaVzVsY2loMFlYSm5aWFFzSUhSNWNHVXNJR3hwYzNSbGJtVnlMQ0J3Y21Wd1pXNWtLU0I3WEc0Z0lIWmhjaUJ0TzF4dUlDQjJZWElnWlhabGJuUnpPMXh1SUNCMllYSWdaWGhwYzNScGJtYzdYRzVjYmlBZ2FXWWdLSFI1Y0dWdlppQnNhWE4wWlc1bGNpQWhQVDBnSjJaMWJtTjBhVzl1SnlsY2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkY0lteHBjM1JsYm1WeVhDSWdZWEpuZFcxbGJuUWdiWFZ6ZENCaVpTQmhJR1oxYm1OMGFXOXVKeWs3WEc1Y2JpQWdaWFpsYm5SeklEMGdkR0Z5WjJWMExsOWxkbVZ1ZEhNN1hHNGdJR2xtSUNnaFpYWmxiblJ6S1NCN1hHNGdJQ0FnWlhabGJuUnpJRDBnZEdGeVoyVjBMbDlsZG1WdWRITWdQU0J2WW1wbFkzUkRjbVZoZEdVb2JuVnNiQ2s3WEc0Z0lDQWdkR0Z5WjJWMExsOWxkbVZ1ZEhORGIzVnVkQ0E5SURBN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ0x5OGdWRzhnWVhadmFXUWdjbVZqZFhKemFXOXVJR2x1SUhSb1pTQmpZWE5sSUhSb1lYUWdkSGx3WlNBOVBUMGdYQ0p1WlhkTWFYTjBaVzVsY2x3aUlTQkNaV1p2Y21WY2JpQWdJQ0F2THlCaFpHUnBibWNnYVhRZ2RHOGdkR2hsSUd4cGMzUmxibVZ5Y3l3Z1ptbHljM1FnWlcxcGRDQmNJbTVsZDB4cGMzUmxibVZ5WENJdVhHNGdJQ0FnYVdZZ0tHVjJaVzUwY3k1dVpYZE1hWE4wWlc1bGNpa2dlMXh1SUNBZ0lDQWdkR0Z5WjJWMExtVnRhWFFvSjI1bGQweHBjM1JsYm1WeUp5d2dkSGx3WlN4Y2JpQWdJQ0FnSUNBZ0lDQnNhWE4wWlc1bGNpNXNhWE4wWlc1bGNpQS9JR3hwYzNSbGJtVnlMbXhwYzNSbGJtVnlJRG9nYkdsemRHVnVaWElwTzF4dVhHNGdJQ0FnSUNBdkx5QlNaUzFoYzNOcFoyNGdZR1YyWlc1MGMyQWdZbVZqWVhWelpTQmhJRzVsZDB4cGMzUmxibVZ5SUdoaGJtUnNaWElnWTI5MWJHUWdhR0YyWlNCallYVnpaV1FnZEdobFhHNGdJQ0FnSUNBdkx5QjBhR2x6TGw5bGRtVnVkSE1nZEc4Z1ltVWdZWE56YVdkdVpXUWdkRzhnWVNCdVpYY2diMkpxWldOMFhHNGdJQ0FnSUNCbGRtVnVkSE1nUFNCMFlYSm5aWFF1WDJWMlpXNTBjenRjYmlBZ0lDQjlYRzRnSUNBZ1pYaHBjM1JwYm1jZ1BTQmxkbVZ1ZEhOYmRIbHdaVjA3WEc0Z0lIMWNibHh1SUNCcFppQW9JV1Y0YVhOMGFXNW5LU0I3WEc0Z0lDQWdMeThnVDNCMGFXMXBlbVVnZEdobElHTmhjMlVnYjJZZ2IyNWxJR3hwYzNSbGJtVnlMaUJFYjI0bmRDQnVaV1ZrSUhSb1pTQmxlSFJ5WVNCaGNuSmhlU0J2WW1wbFkzUXVYRzRnSUNBZ1pYaHBjM1JwYm1jZ1BTQmxkbVZ1ZEhOYmRIbHdaVjBnUFNCc2FYTjBaVzVsY2p0Y2JpQWdJQ0FySzNSaGNtZGxkQzVmWlhabGJuUnpRMjkxYm5RN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQmxlR2x6ZEdsdVp5QTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ0x5OGdRV1JrYVc1bklIUm9aU0J6WldOdmJtUWdaV3hsYldWdWRDd2dibVZsWkNCMGJ5QmphR0Z1WjJVZ2RHOGdZWEp5WVhrdVhHNGdJQ0FnSUNCbGVHbHpkR2x1WnlBOUlHVjJaVzUwYzF0MGVYQmxYU0E5WEc0Z0lDQWdJQ0FnSUNBZ2NISmxjR1Z1WkNBL0lGdHNhWE4wWlc1bGNpd2daWGhwYzNScGJtZGRJRG9nVzJWNGFYTjBhVzVuTENCc2FYTjBaVzVsY2wwN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQzh2SUVsbUlIZGxKM1psSUdGc2NtVmhaSGtnWjI5MElHRnVJR0Z5Y21GNUxDQnFkWE4wSUdGd2NHVnVaQzVjYmlBZ0lDQWdJR2xtSUNod2NtVndaVzVrS1NCN1hHNGdJQ0FnSUNBZ0lHVjRhWE4wYVc1bkxuVnVjMmhwWm5Rb2JHbHpkR1Z1WlhJcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1pYaHBjM1JwYm1jdWNIVnphQ2hzYVhOMFpXNWxjaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUTJobFkyc2dabTl5SUd4cGMzUmxibVZ5SUd4bFlXdGNiaUFnSUNCcFppQW9JV1Y0YVhOMGFXNW5MbmRoY201bFpDa2dlMXh1SUNBZ0lDQWdiU0E5SUNSblpYUk5ZWGhNYVhOMFpXNWxjbk1vZEdGeVoyVjBLVHRjYmlBZ0lDQWdJR2xtSUNodElDWW1JRzBnUGlBd0lDWW1JR1Y0YVhOMGFXNW5MbXhsYm1kMGFDQStJRzBwSUh0Y2JpQWdJQ0FnSUNBZ1pYaHBjM1JwYm1jdWQyRnlibVZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZG1GeUlIY2dQU0J1WlhjZ1JYSnliM0lvSjFCdmMzTnBZbXhsSUVWMlpXNTBSVzFwZEhSbGNpQnRaVzF2Y25rZ2JHVmhheUJrWlhSbFkzUmxaQzRnSnlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0JsZUdsemRHbHVaeTVzWlc1bmRHZ2dLeUFuSUZ3aUp5QXJJRk4wY21sdVp5aDBlWEJsS1NBcklDZGNJaUJzYVhOMFpXNWxjbk1nSnlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FuWVdSa1pXUXVJRlZ6WlNCbGJXbDBkR1Z5TG5ObGRFMWhlRXhwYzNSbGJtVnljeWdwSUhSdklDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0oybHVZM0psWVhObElHeHBiV2wwTGljcE8xeHVJQ0FnSUNBZ0lDQjNMbTVoYldVZ1BTQW5UV0Y0VEdsemRHVnVaWEp6UlhoalpXVmtaV1JYWVhKdWFXNW5KenRjYmlBZ0lDQWdJQ0FnZHk1bGJXbDBkR1Z5SUQwZ2RHRnlaMlYwTzF4dUlDQWdJQ0FnSUNCM0xuUjVjR1VnUFNCMGVYQmxPMXh1SUNBZ0lDQWdJQ0IzTG1OdmRXNTBJRDBnWlhocGMzUnBibWN1YkdWdVozUm9PMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdOdmJuTnZiR1VnUFQwOUlDZHZZbXBsWTNRbklDWW1JR052Ym5OdmJHVXVkMkZ5YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnbkpYTTZJQ1Z6Snl3Z2R5NXVZVzFsTENCM0xtMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlIUmhjbWRsZER0Y2JuMWNibHh1UlhabGJuUkZiV2wwZEdWeUxuQnliM1J2ZEhsd1pTNWhaR1JNYVhOMFpXNWxjaUE5SUdaMWJtTjBhVzl1SUdGa1pFeHBjM1JsYm1WeUtIUjVjR1VzSUd4cGMzUmxibVZ5S1NCN1hHNGdJSEpsZEhWeWJpQmZZV1JrVEdsemRHVnVaWElvZEdocGN5d2dkSGx3WlN3Z2JHbHpkR1Z1WlhJc0lHWmhiSE5sS1R0Y2JuMDdYRzVjYmtWMlpXNTBSVzFwZEhSbGNpNXdjbTkwYjNSNWNHVXViMjRnUFNCRmRtVnVkRVZ0YVhSMFpYSXVjSEp2ZEc5MGVYQmxMbUZrWkV4cGMzUmxibVZ5TzF4dVhHNUZkbVZ1ZEVWdGFYUjBaWEl1Y0hKdmRHOTBlWEJsTG5CeVpYQmxibVJNYVhOMFpXNWxjaUE5WEc0Z0lDQWdablZ1WTNScGIyNGdjSEpsY0dWdVpFeHBjM1JsYm1WeUtIUjVjR1VzSUd4cGMzUmxibVZ5S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWDJGa1pFeHBjM1JsYm1WeUtIUm9hWE1zSUhSNWNHVXNJR3hwYzNSbGJtVnlMQ0IwY25WbEtUdGNiaUFnSUNCOU8xeHVYRzVtZFc1amRHbHZiaUJ2Ym1ObFYzSmhjSEJsY2lncElIdGNiaUFnYVdZZ0tDRjBhR2x6TG1acGNtVmtLU0I3WEc0Z0lDQWdkR2hwY3k1MFlYSm5aWFF1Y21WdGIzWmxUR2x6ZEdWdVpYSW9kR2hwY3k1MGVYQmxMQ0IwYUdsekxuZHlZWEJHYmlrN1hHNGdJQ0FnZEdocGN5NW1hWEpsWkNBOUlIUnlkV1U3WEc0Z0lDQWdjM2RwZEdOb0lDaGhjbWQxYldWdWRITXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQmpZWE5sSURBNlhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbXhwYzNSbGJtVnlMbU5oYkd3b2RHaHBjeTUwWVhKblpYUXBPMXh1SUNBZ0lDQWdZMkZ6WlNBeE9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVzYVhOMFpXNWxjaTVqWVd4c0tIUm9hWE11ZEdGeVoyVjBMQ0JoY21kMWJXVnVkSE5iTUYwcE8xeHVJQ0FnSUNBZ1kyRnpaU0F5T2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXNhWE4wWlc1bGNpNWpZV3hzS0hSb2FYTXVkR0Z5WjJWMExDQmhjbWQxYldWdWRITmJNRjBzSUdGeVozVnRaVzUwYzFzeFhTazdYRzRnSUNBZ0lDQmpZWE5sSURNNlhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbXhwYzNSbGJtVnlMbU5oYkd3b2RHaHBjeTUwWVhKblpYUXNJR0Z5WjNWdFpXNTBjMXN3WFN3Z1lYSm5kVzFsYm5Seld6RmRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lYSm5kVzFsYm5Seld6SmRLVHRjYmlBZ0lDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQWdJSFpoY2lCaGNtZHpJRDBnYm1WM0lFRnljbUY1S0dGeVozVnRaVzUwY3k1c1pXNW5kR2dwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHRnlaM011YkdWdVozUm9PeUFySzJrcFhHNGdJQ0FnSUNBZ0lDQWdZWEpuYzF0cFhTQTlJR0Z5WjNWdFpXNTBjMXRwWFR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVzYVhOMFpXNWxjaTVoY0hCc2VTaDBhR2x6TG5SaGNtZGxkQ3dnWVhKbmN5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJRjl2Ym1ObFYzSmhjQ2gwWVhKblpYUXNJSFI1Y0dVc0lHeHBjM1JsYm1WeUtTQjdYRzRnSUhaaGNpQnpkR0YwWlNBOUlIc2dabWx5WldRNklHWmhiSE5sTENCM2NtRndSbTQ2SUhWdVpHVm1hVzVsWkN3Z2RHRnlaMlYwT2lCMFlYSm5aWFFzSUhSNWNHVTZJSFI1Y0dVc0lHeHBjM1JsYm1WeU9pQnNhWE4wWlc1bGNpQjlPMXh1SUNCMllYSWdkM0poY0hCbFpDQTlJR0pwYm1RdVkyRnNiQ2h2Ym1ObFYzSmhjSEJsY2l3Z2MzUmhkR1VwTzF4dUlDQjNjbUZ3Y0dWa0xteHBjM1JsYm1WeUlEMGdiR2x6ZEdWdVpYSTdYRzRnSUhOMFlYUmxMbmR5WVhCR2JpQTlJSGR5WVhCd1pXUTdYRzRnSUhKbGRIVnliaUIzY21Gd2NHVmtPMXh1ZlZ4dVhHNUZkbVZ1ZEVWdGFYUjBaWEl1Y0hKdmRHOTBlWEJsTG05dVkyVWdQU0JtZFc1amRHbHZiaUJ2Ym1ObEtIUjVjR1VzSUd4cGMzUmxibVZ5S1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnYkdsemRHVnVaWElnSVQwOUlDZG1kVzVqZEdsdmJpY3BYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25YQ0pzYVhOMFpXNWxjbHdpSUdGeVozVnRaVzUwSUcxMWMzUWdZbVVnWVNCbWRXNWpkR2x2YmljcE8xeHVJQ0IwYUdsekxtOXVLSFI1Y0dVc0lGOXZibU5sVjNKaGNDaDBhR2x6TENCMGVYQmxMQ0JzYVhOMFpXNWxjaWtwTzF4dUlDQnlaWFIxY200Z2RHaHBjenRjYm4wN1hHNWNia1YyWlc1MFJXMXBkSFJsY2k1d2NtOTBiM1I1Y0dVdWNISmxjR1Z1WkU5dVkyVk1hWE4wWlc1bGNpQTlYRzRnSUNBZ1puVnVZM1JwYjI0Z2NISmxjR1Z1WkU5dVkyVk1hWE4wWlc1bGNpaDBlWEJsTENCc2FYTjBaVzVsY2lrZ2UxeHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnNhWE4wWlc1bGNpQWhQVDBnSjJaMWJtTjBhVzl1SnlsY2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25YQ0pzYVhOMFpXNWxjbHdpSUdGeVozVnRaVzUwSUcxMWMzUWdZbVVnWVNCbWRXNWpkR2x2YmljcE8xeHVJQ0FnSUNBZ2RHaHBjeTV3Y21Wd1pXNWtUR2x6ZEdWdVpYSW9kSGx3WlN3Z1gyOXVZMlZYY21Gd0tIUm9hWE1zSUhSNWNHVXNJR3hwYzNSbGJtVnlLU2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TzF4dVhHNHZMeUJGYldsMGN5QmhJQ2R5WlcxdmRtVk1hWE4wWlc1bGNpY2daWFpsYm5RZ2FXWWdZVzVrSUc5dWJIa2dhV1lnZEdobElHeHBjM1JsYm1WeUlIZGhjeUJ5WlcxdmRtVmtMbHh1UlhabGJuUkZiV2wwZEdWeUxuQnliM1J2ZEhsd1pTNXlaVzF2ZG1WTWFYTjBaVzVsY2lBOVhHNGdJQ0FnWm5WdVkzUnBiMjRnY21WdGIzWmxUR2x6ZEdWdVpYSW9kSGx3WlN3Z2JHbHpkR1Z1WlhJcElIdGNiaUFnSUNBZ0lIWmhjaUJzYVhOMExDQmxkbVZ1ZEhNc0lIQnZjMmwwYVc5dUxDQnBMQ0J2Y21sbmFXNWhiRXhwYzNSbGJtVnlPMXh1WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUd4cGMzUmxibVZ5SUNFOVBTQW5ablZ1WTNScGIyNG5LVnh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkY0lteHBjM1JsYm1WeVhDSWdZWEpuZFcxbGJuUWdiWFZ6ZENCaVpTQmhJR1oxYm1OMGFXOXVKeWs3WEc1Y2JpQWdJQ0FnSUdWMlpXNTBjeUE5SUhSb2FYTXVYMlYyWlc1MGN6dGNiaUFnSUNBZ0lHbG1JQ2doWlhabGJuUnpLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JseHVJQ0FnSUNBZ2JHbHpkQ0E5SUdWMlpXNTBjMXQwZVhCbFhUdGNiaUFnSUNBZ0lHbG1JQ2doYkdsemRDbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc1Y2JpQWdJQ0FnSUdsbUlDaHNhWE4wSUQwOVBTQnNhWE4wWlc1bGNpQjhmQ0JzYVhOMExteHBjM1JsYm1WeUlEMDlQU0JzYVhOMFpXNWxjaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9MUzEwYUdsekxsOWxkbVZ1ZEhORGIzVnVkQ0E5UFQwZ01DbGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxsOWxkbVZ1ZEhNZ1BTQnZZbXBsWTNSRGNtVmhkR1VvYm5Wc2JDazdYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQmxkbVZ1ZEhOYmRIbHdaVjA3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR1YyWlc1MGN5NXlaVzF2ZG1WTWFYTjBaVzVsY2lsY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkQ2duY21WdGIzWmxUR2x6ZEdWdVpYSW5MQ0IwZVhCbExDQnNhWE4wTG14cGMzUmxibVZ5SUh4OElHeHBjM1JsYm1WeUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdiR2x6ZENBaFBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNCd2IzTnBkR2x2YmlBOUlDMHhPMXh1WEc0Z0lDQWdJQ0FnSUdadmNpQW9hU0E5SUd4cGMzUXViR1Z1WjNSb0lDMGdNVHNnYVNBK1BTQXdPeUJwTFMwcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2JHbHpkRnRwWFNBOVBUMGdiR2x6ZEdWdVpYSWdmSHdnYkdsemRGdHBYUzVzYVhOMFpXNWxjaUE5UFQwZ2JHbHpkR1Z1WlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc5eWFXZHBibUZzVEdsemRHVnVaWElnUFNCc2FYTjBXMmxkTG14cGMzUmxibVZ5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjRzl6YVhScGIyNGdQU0JwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJ2YzJsMGFXOXVJRHdnTUNsY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmx4dUlDQWdJQ0FnSUNCcFppQW9jRzl6YVhScGIyNGdQVDA5SURBcFhHNGdJQ0FnSUNBZ0lDQWdiR2x6ZEM1emFHbG1kQ2dwTzF4dUlDQWdJQ0FnSUNCbGJITmxYRzRnSUNBZ0lDQWdJQ0FnYzNCc2FXTmxUMjVsS0d4cGMzUXNJSEJ2YzJsMGFXOXVLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9iR2x6ZEM1c1pXNW5kR2dnUFQwOUlERXBYRzRnSUNBZ0lDQWdJQ0FnWlhabGJuUnpXM1I1Y0dWZElEMGdiR2x6ZEZzd1hUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb1pYWmxiblJ6TG5KbGJXOTJaVXhwYzNSbGJtVnlLVnh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVaVzFwZENnbmNtVnRiM1psVEdsemRHVnVaWEluTENCMGVYQmxMQ0J2Y21sbmFXNWhiRXhwYzNSbGJtVnlJSHg4SUd4cGMzUmxibVZ5S1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZUdGNibHh1UlhabGJuUkZiV2wwZEdWeUxuQnliM1J2ZEhsd1pTNXlaVzF2ZG1WQmJHeE1hWE4wWlc1bGNuTWdQVnh1SUNBZ0lHWjFibU4wYVc5dUlISmxiVzkyWlVGc2JFeHBjM1JsYm1WeWN5aDBlWEJsS1NCN1hHNGdJQ0FnSUNCMllYSWdiR2x6ZEdWdVpYSnpMQ0JsZG1WdWRITXNJR2s3WEc1Y2JpQWdJQ0FnSUdWMlpXNTBjeUE5SUhSb2FYTXVYMlYyWlc1MGN6dGNiaUFnSUNBZ0lHbG1JQ2doWlhabGJuUnpLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JseHVJQ0FnSUNBZ0x5OGdibTkwSUd4cGMzUmxibWx1WnlCbWIzSWdjbVZ0YjNabFRHbHpkR1Z1WlhJc0lHNXZJRzVsWldRZ2RHOGdaVzFwZEZ4dUlDQWdJQ0FnYVdZZ0tDRmxkbVZ1ZEhNdWNtVnRiM1psVEdsemRHVnVaWElwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxsOWxkbVZ1ZEhNZ1BTQnZZbXBsWTNSRGNtVmhkR1VvYm5Wc2JDazdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZaWFpsYm5SelEyOTFiblFnUFNBd08xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR1YyWlc1MGMxdDBlWEJsWFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNndExYUm9hWE11WDJWMlpXNTBjME52ZFc1MElEMDlQU0F3S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlpYWmxiblJ6SUQwZ2IySnFaV04wUTNKbFlYUmxLRzUxYkd3cE8xeHVJQ0FnSUNBZ0lDQWdJR1ZzYzJWY2JpQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQmxkbVZ1ZEhOYmRIbHdaVjA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUdWdGFYUWdjbVZ0YjNabFRHbHpkR1Z1WlhJZ1ptOXlJR0ZzYkNCc2FYTjBaVzVsY25NZ2IyNGdZV3hzSUdWMlpXNTBjMXh1SUNBZ0lDQWdhV1lnS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHdGxlWE1nUFNCdlltcGxZM1JMWlhsektHVjJaVzUwY3lrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJyWlhrN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCclpYbHpMbXhsYm1kMGFEc2dLeXRwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhMlY1SUQwZ2EyVjVjMXRwWFR0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYTJWNUlEMDlQU0FuY21WdGIzWmxUR2x6ZEdWdVpYSW5LU0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpsYlc5MlpVRnNiRXhwYzNSbGJtVnljeWhyWlhrcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVnRiM1psUVd4c1RHbHpkR1Z1WlhKektDZHlaVzF2ZG1WTWFYTjBaVzVsY2ljcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bGRtVnVkSE1nUFNCdlltcGxZM1JEY21WaGRHVW9iblZzYkNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJWMlpXNTBjME52ZFc1MElEMGdNRHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHeHBjM1JsYm1WeWN5QTlJR1YyWlc1MGMxdDBlWEJsWFR0Y2JseHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnNhWE4wWlc1bGNuTWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpXMXZkbVZNYVhOMFpXNWxjaWgwZVhCbExDQnNhWE4wWlc1bGNuTXBPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hzYVhOMFpXNWxjbk1wSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdURWxHVHlCdmNtUmxjbHh1SUNBZ0lDQWdJQ0JtYjNJZ0tHa2dQU0JzYVhOMFpXNWxjbk11YkdWdVozUm9JQzBnTVRzZ2FTQStQU0F3T3lCcExTMHBJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpsYlc5MlpVeHBjM1JsYm1WeUtIUjVjR1VzSUd4cGMzUmxibVZ5YzF0cFhTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlR0Y2JseHVablZ1WTNScGIyNGdYMnhwYzNSbGJtVnljeWgwWVhKblpYUXNJSFI1Y0dVc0lIVnVkM0poY0NrZ2UxeHVJQ0IyWVhJZ1pYWmxiblJ6SUQwZ2RHRnlaMlYwTGw5bGRtVnVkSE03WEc1Y2JpQWdhV1lnS0NGbGRtVnVkSE1wWEc0Z0lDQWdjbVYwZFhKdUlGdGRPMXh1WEc0Z0lIWmhjaUJsZG14cGMzUmxibVZ5SUQwZ1pYWmxiblJ6VzNSNWNHVmRPMXh1SUNCcFppQW9JV1YyYkdsemRHVnVaWElwWEc0Z0lDQWdjbVYwZFhKdUlGdGRPMXh1WEc0Z0lHbG1JQ2gwZVhCbGIyWWdaWFpzYVhOMFpXNWxjaUE5UFQwZ0oyWjFibU4wYVc5dUp5bGNiaUFnSUNCeVpYUjFjbTRnZFc1M2NtRndJRDhnVzJWMmJHbHpkR1Z1WlhJdWJHbHpkR1Z1WlhJZ2ZId2daWFpzYVhOMFpXNWxjbDBnT2lCYlpYWnNhWE4wWlc1bGNsMDdYRzVjYmlBZ2NtVjBkWEp1SUhWdWQzSmhjQ0EvSUhWdWQzSmhjRXhwYzNSbGJtVnljeWhsZG14cGMzUmxibVZ5S1NBNklHRnljbUY1UTJ4dmJtVW9aWFpzYVhOMFpXNWxjaXdnWlhac2FYTjBaVzVsY2k1c1pXNW5kR2dwTzF4dWZWeHVYRzVGZG1WdWRFVnRhWFIwWlhJdWNISnZkRzkwZVhCbExteHBjM1JsYm1WeWN5QTlJR1oxYm1OMGFXOXVJR3hwYzNSbGJtVnljeWgwZVhCbEtTQjdYRzRnSUhKbGRIVnliaUJmYkdsemRHVnVaWEp6S0hSb2FYTXNJSFI1Y0dVc0lIUnlkV1VwTzF4dWZUdGNibHh1UlhabGJuUkZiV2wwZEdWeUxuQnliM1J2ZEhsd1pTNXlZWGRNYVhOMFpXNWxjbk1nUFNCbWRXNWpkR2x2YmlCeVlYZE1hWE4wWlc1bGNuTW9kSGx3WlNrZ2UxeHVJQ0J5WlhSMWNtNGdYMnhwYzNSbGJtVnljeWgwYUdsekxDQjBlWEJsTENCbVlXeHpaU2s3WEc1OU8xeHVYRzVGZG1WdWRFVnRhWFIwWlhJdWJHbHpkR1Z1WlhKRGIzVnVkQ0E5SUdaMWJtTjBhVzl1S0dWdGFYUjBaWElzSUhSNWNHVXBJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQmxiV2wwZEdWeUxteHBjM1JsYm1WeVEyOTFiblFnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQnlaWFIxY200Z1pXMXBkSFJsY2k1c2FYTjBaVzVsY2tOdmRXNTBLSFI1Y0dVcE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISmxkSFZ5YmlCc2FYTjBaVzVsY2tOdmRXNTBMbU5oYkd3b1pXMXBkSFJsY2l3Z2RIbHdaU2s3WEc0Z0lIMWNibjA3WEc1Y2JrVjJaVzUwUlcxcGRIUmxjaTV3Y205MGIzUjVjR1V1YkdsemRHVnVaWEpEYjNWdWRDQTlJR3hwYzNSbGJtVnlRMjkxYm5RN1hHNW1kVzVqZEdsdmJpQnNhWE4wWlc1bGNrTnZkVzUwS0hSNWNHVXBJSHRjYmlBZ2RtRnlJR1YyWlc1MGN5QTlJSFJvYVhNdVgyVjJaVzUwY3p0Y2JseHVJQ0JwWmlBb1pYWmxiblJ6S1NCN1hHNGdJQ0FnZG1GeUlHVjJiR2x6ZEdWdVpYSWdQU0JsZG1WdWRITmJkSGx3WlYwN1hHNWNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHVjJiR2x6ZEdWdVpYSWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlBeE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pYWnNhWE4wWlc1bGNpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHVjJiR2x6ZEdWdVpYSXViR1Z1WjNSb08xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlBd08xeHVmVnh1WEc1RmRtVnVkRVZ0YVhSMFpYSXVjSEp2ZEc5MGVYQmxMbVYyWlc1MFRtRnRaWE1nUFNCbWRXNWpkR2x2YmlCbGRtVnVkRTVoYldWektDa2dlMXh1SUNCeVpYUjFjbTRnZEdocGN5NWZaWFpsYm5SelEyOTFiblFnUGlBd0lEOGdVbVZtYkdWamRDNXZkMjVMWlhsektIUm9hWE11WDJWMlpXNTBjeWtnT2lCYlhUdGNibjA3WEc1Y2JpOHZJRUZpYjNWMElERXVOWGdnWm1GemRHVnlJSFJvWVc0Z2RHaGxJSFIzYnkxaGNtY2dkbVZ5YzJsdmJpQnZaaUJCY25KaGVTTnpjR3hwWTJVb0tTNWNibVoxYm1OMGFXOXVJSE53YkdsalpVOXVaU2hzYVhOMExDQnBibVJsZUNrZ2UxeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ2FXNWtaWGdzSUdzZ1BTQnBJQ3NnTVN3Z2JpQTlJR3hwYzNRdWJHVnVaM1JvT3lCcklEd2dianNnYVNBclBTQXhMQ0JySUNzOUlERXBYRzRnSUNBZ2JHbHpkRnRwWFNBOUlHeHBjM1JiYTEwN1hHNGdJR3hwYzNRdWNHOXdLQ2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJR0Z5Y21GNVEyeHZibVVvWVhKeUxDQnVLU0I3WEc0Z0lIWmhjaUJqYjNCNUlEMGdibVYzSUVGeWNtRjVLRzRwTzF4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJRzQ3SUNzcmFTbGNiaUFnSUNCamIzQjVXMmxkSUQwZ1lYSnlXMmxkTzF4dUlDQnlaWFIxY200Z1kyOXdlVHRjYm4xY2JseHVablZ1WTNScGIyNGdkVzUzY21Gd1RHbHpkR1Z1WlhKektHRnljaWtnZTF4dUlDQjJZWElnY21WMElEMGdibVYzSUVGeWNtRjVLR0Z5Y2k1c1pXNW5kR2dwTzF4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSEpsZEM1c1pXNW5kR2c3SUNzcmFTa2dlMXh1SUNBZ0lISmxkRnRwWFNBOUlHRnljbHRwWFM1c2FYTjBaVzVsY2lCOGZDQmhjbkpiYVYwN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGREdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2IySnFaV04wUTNKbFlYUmxVRzlzZVdacGJHd29jSEp2ZEc4cElIdGNiaUFnZG1GeUlFWWdQU0JtZFc1amRHbHZiaWdwSUh0OU8xeHVJQ0JHTG5CeWIzUnZkSGx3WlNBOUlIQnliM1J2TzF4dUlDQnlaWFIxY200Z2JtVjNJRVk3WEc1OVhHNW1kVzVqZEdsdmJpQnZZbXBsWTNSTFpYbHpVRzlzZVdacGJHd29iMkpxS1NCN1hHNGdJSFpoY2lCclpYbHpJRDBnVzEwN1hHNGdJR1p2Y2lBb2RtRnlJR3NnYVc0Z2IySnFLU0JwWmlBb1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tHOWlhaXdnYXlrcElIdGNiaUFnSUNCclpYbHpMbkIxYzJnb2F5azdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHczdYRzU5WEc1bWRXNWpkR2x2YmlCbWRXNWpkR2x2YmtKcGJtUlFiMng1Wm1sc2JDaGpiMjUwWlhoMEtTQjdYRzRnSUhaaGNpQm1iaUE5SUhSb2FYTTdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1p1TG1Gd2NHeDVLR052Ym5SbGVIUXNJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lIMDdYRzU5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnU205NVpXNTBMQ0JKYm1NdUlHRnVaQ0J2ZEdobGNpQk9iMlJsSUdOdmJuUnlhV0oxZEc5eWN5NWNiaTh2WEc0dkx5QlFaWEp0YVhOemFXOXVJR2x6SUdobGNtVmllU0JuY21GdWRHVmtMQ0JtY21WbElHOW1JR05vWVhKblpTd2dkRzhnWVc1NUlIQmxjbk52YmlCdlluUmhhVzVwYm1jZ1lWeHVMeThnWTI5d2VTQnZaaUIwYUdseklITnZablIzWVhKbElHRnVaQ0JoYzNOdlkybGhkR1ZrSUdSdlkzVnRaVzUwWVhScGIyNGdabWxzWlhNZ0tIUm9aVnh1THk4Z1hDSlRiMlowZDJGeVpWd2lLU3dnZEc4Z1pHVmhiQ0JwYmlCMGFHVWdVMjltZEhkaGNtVWdkMmwwYUc5MWRDQnlaWE4wY21samRHbHZiaXdnYVc1amJIVmthVzVuWEc0dkx5QjNhWFJvYjNWMElHeHBiV2wwWVhScGIyNGdkR2hsSUhKcFoyaDBjeUIwYnlCMWMyVXNJR052Y0hrc0lHMXZaR2xtZVN3Z2JXVnlaMlVzSUhCMVlteHBjMmdzWEc0dkx5QmthWE4wY21saWRYUmxMQ0J6ZFdKc2FXTmxibk5sTENCaGJtUXZiM0lnYzJWc2JDQmpiM0JwWlhNZ2IyWWdkR2hsSUZOdlpuUjNZWEpsTENCaGJtUWdkRzhnY0dWeWJXbDBYRzR2THlCd1pYSnpiMjV6SUhSdklIZG9iMjBnZEdobElGTnZablIzWVhKbElHbHpJR1oxY201cGMyaGxaQ0IwYnlCa2J5QnpieXdnYzNWaWFtVmpkQ0IwYnlCMGFHVmNiaTh2SUdadmJHeHZkMmx1WnlCamIyNWthWFJwYjI1ek9seHVMeTljYmk4dklGUm9aU0JoWW05MlpTQmpiM0I1Y21sbmFIUWdibTkwYVdObElHRnVaQ0IwYUdseklIQmxjbTFwYzNOcGIyNGdibTkwYVdObElITm9ZV3hzSUdKbElHbHVZMngxWkdWa1hHNHZMeUJwYmlCaGJHd2dZMjl3YVdWeklHOXlJSE4xWW5OMFlXNTBhV0ZzSUhCdmNuUnBiMjV6SUc5bUlIUm9aU0JUYjJaMGQyRnlaUzVjYmk4dlhHNHZMeUJVU0VVZ1UwOUdWRmRCVWtVZ1NWTWdVRkpQVmtsRVJVUWdYQ0pCVXlCSlUxd2lMQ0JYU1ZSSVQxVlVJRmRCVWxKQlRsUlpJRTlHSUVGT1dTQkxTVTVFTENCRldGQlNSVk5UWEc0dkx5QlBVaUJKVFZCTVNVVkVMQ0JKVGtOTVZVUkpUa2NnUWxWVUlFNVBWQ0JNU1UxSlZFVkVJRlJQSUZSSVJTQlhRVkpTUVU1VVNVVlRJRTlHWEc0dkx5Qk5SVkpEU0VGT1ZFRkNTVXhKVkZrc0lFWkpWRTVGVTFNZ1JrOVNJRUVnVUVGU1ZFbERWVXhCVWlCUVZWSlFUMU5GSUVGT1JDQk9UMDVKVGtaU1NVNUhSVTFGVGxRdUlFbE9YRzR2THlCT1R5QkZWa1ZPVkNCVFNFRk1UQ0JVU0VVZ1FWVlVTRTlTVXlCUFVpQkRUMUJaVWtsSFNGUWdTRTlNUkVWU1V5QkNSU0JNU1VGQ1RFVWdSazlTSUVGT1dTQkRURUZKVFN4Y2JpOHZJRVJCVFVGSFJWTWdUMUlnVDFSSVJWSWdURWxCUWtsTVNWUlpMQ0JYU0VWVVNFVlNJRWxPSUVGT0lFRkRWRWxQVGlCUFJpQkRUMDVVVWtGRFZDd2dWRTlTVkNCUFVseHVMeThnVDFSSVJWSlhTVk5GTENCQlVrbFRTVTVISUVaU1QwMHNJRTlWVkNCUFJpQlBVaUJKVGlCRFQwNU9SVU5VU1U5T0lGZEpWRWdnVkVoRklGTlBSbFJYUVZKRklFOVNJRlJJUlZ4dUx5OGdWVk5GSUU5U0lFOVVTRVZTSUVSRlFVeEpUa2RUSUVsT0lGUklSU0JUVDBaVVYwRlNSUzVjYmx4dUx5OGdUazlVUlRvZ1ZHaGxjMlVnZEhsd1pTQmphR1ZqYTJsdVp5Qm1kVzVqZEdsdmJuTWdhVzUwWlc1MGFXOXVZV3hzZVNCa2IyNG5kQ0IxYzJVZ1lHbHVjM1JoYm1ObGIyWmdYRzR2THlCaVpXTmhkWE5sSUdsMElHbHpJR1p5WVdkcGJHVWdZVzVrSUdOaGJpQmlaU0JsWVhOcGJIa2dabUZyWldRZ2QybDBhQ0JnVDJKcVpXTjBMbU55WldGMFpTZ3BZQzVjYmx4dVpuVnVZM1JwYjI0Z2FYTkJjbkpoZVNoaGNtY3BJSHRjYmlBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrcElIdGNiaUFnSUNCeVpYUjFjbTRnUVhKeVlYa3VhWE5CY25KaGVTaGhjbWNwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ2WW1wbFkzUlViMU4wY21sdVp5aGhjbWNwSUQwOVBTQW5XMjlpYW1WamRDQkJjbkpoZVYwbk8xeHVmVnh1Wlhod2IzSjBjeTVwYzBGeWNtRjVJRDBnYVhOQmNuSmhlVHRjYmx4dVpuVnVZM1JwYjI0Z2FYTkNiMjlzWldGdUtHRnlaeWtnZTF4dUlDQnlaWFIxY200Z2RIbHdaVzltSUdGeVp5QTlQVDBnSjJKdmIyeGxZVzRuTzF4dWZWeHVaWGh3YjNKMGN5NXBjMEp2YjJ4bFlXNGdQU0JwYzBKdmIyeGxZVzQ3WEc1Y2JtWjFibU4wYVc5dUlHbHpUblZzYkNoaGNtY3BJSHRjYmlBZ2NtVjBkWEp1SUdGeVp5QTlQVDBnYm5Wc2JEdGNibjFjYm1WNGNHOXlkSE11YVhOT2RXeHNJRDBnYVhOT2RXeHNPMXh1WEc1bWRXNWpkR2x2YmlCcGMwNTFiR3hQY2xWdVpHVm1hVzVsWkNoaGNtY3BJSHRjYmlBZ2NtVjBkWEp1SUdGeVp5QTlQU0J1ZFd4c08xeHVmVnh1Wlhod2IzSjBjeTVwYzA1MWJHeFBjbFZ1WkdWbWFXNWxaQ0E5SUdselRuVnNiRTl5Vlc1a1pXWnBibVZrTzF4dVhHNW1kVzVqZEdsdmJpQnBjMDUxYldKbGNpaGhjbWNwSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCaGNtY2dQVDA5SUNkdWRXMWlaWEluTzF4dWZWeHVaWGh3YjNKMGN5NXBjMDUxYldKbGNpQTlJR2x6VG5WdFltVnlPMXh1WEc1bWRXNWpkR2x2YmlCcGMxTjBjbWx1WnloaGNtY3BJSHRjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUJoY21jZ1BUMDlJQ2R6ZEhKcGJtY25PMXh1ZlZ4dVpYaHdiM0owY3k1cGMxTjBjbWx1WnlBOUlHbHpVM1J5YVc1bk8xeHVYRzVtZFc1amRHbHZiaUJwYzFONWJXSnZiQ2hoY21jcElIdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQmhjbWNnUFQwOUlDZHplVzFpYjJ3bk8xeHVmVnh1Wlhod2IzSjBjeTVwYzFONWJXSnZiQ0E5SUdselUzbHRZbTlzTzF4dVhHNW1kVzVqZEdsdmJpQnBjMVZ1WkdWbWFXNWxaQ2hoY21jcElIdGNiaUFnY21WMGRYSnVJR0Z5WnlBOVBUMGdkbTlwWkNBd08xeHVmVnh1Wlhod2IzSjBjeTVwYzFWdVpHVm1hVzVsWkNBOUlHbHpWVzVrWldacGJtVmtPMXh1WEc1bWRXNWpkR2x2YmlCcGMxSmxaMFY0Y0NoeVpTa2dlMXh1SUNCeVpYUjFjbTRnYjJKcVpXTjBWRzlUZEhKcGJtY29jbVVwSUQwOVBTQW5XMjlpYW1WamRDQlNaV2RGZUhCZEp6dGNibjFjYm1WNGNHOXlkSE11YVhOU1pXZEZlSEFnUFNCcGMxSmxaMFY0Y0R0Y2JseHVablZ1WTNScGIyNGdhWE5QWW1wbFkzUW9ZWEpuS1NCN1hHNGdJSEpsZEhWeWJpQjBlWEJsYjJZZ1lYSm5JRDA5UFNBbmIySnFaV04wSnlBbUppQmhjbWNnSVQwOUlHNTFiR3c3WEc1OVhHNWxlSEJ2Y25SekxtbHpUMkpxWldOMElEMGdhWE5QWW1wbFkzUTdYRzVjYm1aMWJtTjBhVzl1SUdselJHRjBaU2hrS1NCN1hHNGdJSEpsZEhWeWJpQnZZbXBsWTNSVWIxTjBjbWx1Wnloa0tTQTlQVDBnSjF0dlltcGxZM1FnUkdGMFpWMG5PMXh1ZlZ4dVpYaHdiM0owY3k1cGMwUmhkR1VnUFNCcGMwUmhkR1U3WEc1Y2JtWjFibU4wYVc5dUlHbHpSWEp5YjNJb1pTa2dlMXh1SUNCeVpYUjFjbTRnS0c5aWFtVmpkRlJ2VTNSeWFXNW5LR1VwSUQwOVBTQW5XMjlpYW1WamRDQkZjbkp2Y2wwbklIeDhJR1VnYVc1emRHRnVZMlZ2WmlCRmNuSnZjaWs3WEc1OVhHNWxlSEJ2Y25SekxtbHpSWEp5YjNJZ1BTQnBjMFZ5Y205eU8xeHVYRzVtZFc1amRHbHZiaUJwYzBaMWJtTjBhVzl1S0dGeVp5a2dlMXh1SUNCeVpYUjFjbTRnZEhsd1pXOW1JR0Z5WnlBOVBUMGdKMloxYm1OMGFXOXVKenRjYm4xY2JtVjRjRzl5ZEhNdWFYTkdkVzVqZEdsdmJpQTlJR2x6Um5WdVkzUnBiMjQ3WEc1Y2JtWjFibU4wYVc5dUlHbHpVSEpwYldsMGFYWmxLR0Z5WnlrZ2UxeHVJQ0J5WlhSMWNtNGdZWEpuSUQwOVBTQnVkV3hzSUh4OFhHNGdJQ0FnSUNBZ0lDQjBlWEJsYjJZZ1lYSm5JRDA5UFNBblltOXZiR1ZoYmljZ2ZIeGNiaUFnSUNBZ0lDQWdJSFI1Y0dWdlppQmhjbWNnUFQwOUlDZHVkVzFpWlhJbklIeDhYRzRnSUNBZ0lDQWdJQ0IwZVhCbGIyWWdZWEpuSUQwOVBTQW5jM1J5YVc1bkp5QjhmRnh1SUNBZ0lDQWdJQ0FnZEhsd1pXOW1JR0Z5WnlBOVBUMGdKM041YldKdmJDY2dmSHdnSUM4dklFVlROaUJ6ZVcxaWIyeGNiaUFnSUNBZ0lDQWdJSFI1Y0dWdlppQmhjbWNnUFQwOUlDZDFibVJsWm1sdVpXUW5PMXh1ZlZ4dVpYaHdiM0owY3k1cGMxQnlhVzFwZEdsMlpTQTlJR2x6VUhKcGJXbDBhWFpsTzF4dVhHNWxlSEJ2Y25SekxtbHpRblZtWm1WeUlEMGdRblZtWm1WeUxtbHpRblZtWm1WeU8xeHVYRzVtZFc1amRHbHZiaUJ2WW1wbFkzUlViMU4wY21sdVp5aHZLU0I3WEc0Z0lISmxkSFZ5YmlCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuTG1OaGJHd29ieWs3WEc1OVhHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiblpoY2lCZlgzTndjbVZoWkVGeWNtRjVjeUE5SUNoMGFHbHpJQ1ltSUhSb2FYTXVYMTl6Y0hKbFlXUkJjbkpoZVhNcElIeDhJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJ6SUQwZ01Dd2dhU0E5SURBc0lHbHNJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVNBOElHbHNPeUJwS3lzcElITWdLejBnWVhKbmRXMWxiblJ6VzJsZExteGxibWQwYUR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJ5SUQwZ1FYSnlZWGtvY3lrc0lHc2dQU0F3TENCcElEMGdNRHNnYVNBOElHbHNPeUJwS3lzcFhHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHRWdQU0JoY21kMWJXVnVkSE5iYVYwc0lHb2dQU0F3TENCcWJDQTlJR0V1YkdWdVozUm9PeUJxSUR3Z2FtdzdJR29yS3l3Z2F5c3JLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NsdHJYU0E5SUdGYmFsMDdYRzRnSUNBZ2NtVjBkWEp1SUhJN1hHNTlPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN0lIWmhiSFZsT2lCMGNuVmxJSDBwTzF4dWRtRnlJRUp5YjNkelpYSkpibVp2SUQwZ0x5b3FJRUJqYkdGemN5QXFMeUFvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUdaMWJtTjBhVzl1SUVKeWIzZHpaWEpKYm1adktHNWhiV1VzSUhabGNuTnBiMjRzSUc5ektTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtRnRaU0E5SUc1aGJXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRtVnljMmx2YmlBOUlIWmxjbk5wYjI0N1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjNNZ1BTQnZjenRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBlWEJsSUQwZ0oySnliM2R6WlhJbk8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdRbkp2ZDNObGNrbHVabTg3WEc1OUtDa3BPMXh1Wlhod2IzSjBjeTVDY205M2MyVnlTVzVtYnlBOUlFSnliM2R6WlhKSmJtWnZPMXh1ZG1GeUlFNXZaR1ZKYm1adklEMGdMeW9xSUVCamJHRnpjeUFxTHlBb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lHWjFibU4wYVc5dUlFNXZaR1ZKYm1adktIWmxjbk5wYjI0cElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MlpYSnphVzl1SUQwZ2RtVnljMmx2Ymp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwZVhCbElEMGdKMjV2WkdVbk8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG01aGJXVWdQU0FuYm05a1pTYzdYRzRnSUNBZ0lDQWdJSFJvYVhNdWIzTWdQU0J3Y205alpYTnpMbkJzWVhSbWIzSnRPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnVG05a1pVbHVabTg3WEc1OUtDa3BPMXh1Wlhod2IzSjBjeTVPYjJSbFNXNW1ieUE5SUU1dlpHVkpibVp2TzF4dWRtRnlJRk5sWVhKamFFSnZkRVJsZG1salpVbHVabThnUFNBdktpb2dRR05zWVhOeklDb3ZJQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnWm5WdVkzUnBiMjRnVTJWaGNtTm9RbTkwUkdWMmFXTmxTVzVtYnlodVlXMWxMQ0IyWlhKemFXOXVMQ0J2Y3l3Z1ltOTBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVibUZ0WlNBOUlHNWhiV1U3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbVZ5YzJsdmJpQTlJSFpsY25OcGIyNDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWIzTWdQU0J2Y3p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVpYjNRZ1BTQmliM1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkSGx3WlNBOUlDZGliM1F0WkdWMmFXTmxKenRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUZObFlYSmphRUp2ZEVSbGRtbGpaVWx1Wm04N1hHNTlLQ2twTzF4dVpYaHdiM0owY3k1VFpXRnlZMmhDYjNSRVpYWnBZMlZKYm1adklEMGdVMlZoY21Ob1FtOTBSR1YyYVdObFNXNW1ienRjYm5aaGNpQkNiM1JKYm1adklEMGdMeW9xSUVCamJHRnpjeUFxTHlBb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lHWjFibU4wYVc5dUlFSnZkRWx1Wm04b0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRIbHdaU0E5SUNkaWIzUW5PMXh1SUNBZ0lDQWdJQ0IwYUdsekxtSnZkQ0E5SUhSeWRXVTdJQzh2SUU1UFZFVTZJR1JsY0hKbFkyRjBaV1FnZEdWemRDQnVZVzFsSUdsdWMzUmxZV1JjYmlBZ0lDQWdJQ0FnZEdocGN5NXVZVzFsSUQwZ0oySnZkQ2M3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbVZ5YzJsdmJpQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjNNZ1BTQnVkV3hzTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1FtOTBTVzVtYnp0Y2JuMG9LU2s3WEc1bGVIQnZjblJ6TGtKdmRFbHVabThnUFNCQ2IzUkpibVp2TzF4dWRtRnlJRkpsWVdOMFRtRjBhWFpsU1c1bWJ5QTlJQzhxS2lCQVkyeGhjM01nS2k4Z0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQm1kVzVqZEdsdmJpQlNaV0ZqZEU1aGRHbDJaVWx1Wm04b0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRIbHdaU0E5SUNkeVpXRmpkQzF1WVhScGRtVW5PMXh1SUNBZ0lDQWdJQ0IwYUdsekxtNWhiV1VnUFNBbmNtVmhZM1F0Ym1GMGFYWmxKenRjYmlBZ0lDQWdJQ0FnZEdocGN5NTJaWEp6YVc5dUlEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2Y3lBOUlHNTFiR3c3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCU1pXRmpkRTVoZEdsMlpVbHVabTg3WEc1OUtDa3BPMXh1Wlhod2IzSjBjeTVTWldGamRFNWhkR2wyWlVsdVptOGdQU0JTWldGamRFNWhkR2wyWlVsdVptODdYRzR2THlCMGMyeHBiblE2WkdsellXSnNaUzF1WlhoMExXeHBibVU2YldGNExXeHBibVV0YkdWdVozUm9YRzUyWVhJZ1UwVkJVa05JUWs5WVgxVkJYMUpGUjBWWUlEMGdMMkZzWlhoaGZHSnZkSHhqY21GM2JDaGxjbnhwYm1jcGZHWmhZMlZpYjI5clpYaDBaWEp1WVd4b2FYUjhabVZsWkdKMWNtNWxjbnhuYjI5bmJHVWdkMlZpSUhCeVpYWnBaWGQ4Ym1GbmFXOXpmSEJ2YzNSeVlXNXJmSEJwYm1ka2IyMThjMngxY25COGMzQnBaR1Z5ZkhsaGFHOXZJWHg1WVc1a1pYZ3ZPMXh1ZG1GeUlGTkZRVkpEU0VKUFZGOVBVMTlTUlVkRldDQTlJQzhvYm5Wb2EzeEhiMjluYkdWaWIzUjhXV0Z0YlhsaWIzUjhUM0JsYm1KdmRIeFRiSFZ5Y0h4TlUwNUNiM1I4UVhOclhGd2dTbVZsZG1WelhGd3ZWR1Z2YldGOGFXRmZZWEpqYUdsMlpYSXBMenRjYm5aaGNpQlNSVkZWU1ZKRlJGOVdSVkpUU1U5T1gxQkJVbFJUSUQwZ016dGNiblpoY2lCMWMyVnlRV2RsYm5SU2RXeGxjeUE5SUZ0Y2JpQWdJQ0JiSjJGdmJDY3NJQzlCVDB4VGFHbGxiR1JjWEM4b1d6QXRPVnhjTGw5ZEt5a3ZYU3hjYmlBZ0lDQmJKMlZrWjJVbkxDQXZSV1JuWlZ4Y0x5aGJNQzA1WEZ3dVgxMHJLUzlkTEZ4dUlDQWdJRnNuWldSblpTMXBiM01uTENBdlJXUm5hVTlUWEZ3dktGc3dMVGxjWEM1ZlhTc3BMMTBzWEc0Z0lDQWdXeWQ1WVc1a1pYaGljbTkzYzJWeUp5d2dMMWxoUW5KdmQzTmxjbHhjTHloYk1DMDVYRnd1WDEwcktTOWRMRnh1SUNBZ0lGc25hMkZyWVc5MFlXeHJKeXdnTDB0QlMwRlBWRUZNUzF4Y2N5aGJNQzA1WEZ3dVhTc3BMMTBzWEc0Z0lDQWdXeWR6WVcxemRXNW5KeXdnTDFOaGJYTjFibWRDY205M2MyVnlYRnd2S0Zzd0xUbGNYQzVkS3lrdlhTeGNiaUFnSUNCYkozTnBiR3NuTENBdlhGeGlVMmxzYTF4Y0x5aGJNQzA1TGw4dFhTc3BYRnhpTDEwc1hHNGdJQ0FnV3lkdGFYVnBKeXdnTDAxcGRXbENjbTkzYzJWeVhGd3ZLRnN3TFRsY1hDNWRLeWtrTDEwc1hHNGdJQ0FnV3lkaVpXRnJaWEluTENBdlFtVmhhMlZ5UW5KdmQzTmxjbHhjTHloYk1DMDVYRnd1WFNzcEwxMHNYRzRnSUNBZ1d5ZGxaR2RsTFdOb2NtOXRhWFZ0Snl3Z0wwVmtaMEUvWEZ3dktGc3dMVGxjWEM1ZEt5a3ZYU3hjYmlBZ0lDQmJYRzRnSUNBZ0lDQWdJQ2RqYUhKdmJXbDFiUzEzWldKMmFXVjNKeXhjYmlBZ0lDQWdJQ0FnTHlnL0lVTm9jbTl0TGlwUFVGSXBkM1pjWENrdUtrTm9jbTl0S0Q4NlpYeHBkVzBwWEZ3dktGc3dMVGxjWEM1ZEt5a29PajljWEhOOEpDa3ZMRnh1SUNBZ0lGMHNYRzRnSUNBZ1d5ZGphSEp2YldVbkxDQXZLRDhoUTJoeWIyMHVLazlRVWlsRGFISnZiU2cvT21WOGFYVnRLVnhjTHloYk1DMDVYRnd1WFNzcEtEby9YRnh6ZkNRcEwxMHNYRzRnSUNBZ1d5ZHdhR0Z1ZEc5dGFuTW5MQ0F2VUdoaGJuUnZiVXBUWEZ3dktGc3dMVGxjWEM1ZEt5a29PajljWEhOOEpDa3ZYU3hjYmlBZ0lDQmJKMk55YVc5ekp5d2dMME55YVU5VFhGd3ZLRnN3TFRsY1hDNWRLeWtvT2o5Y1hITjhKQ2t2WFN4Y2JpQWdJQ0JiSjJacGNtVm1iM2duTENBdlJtbHlaV1p2ZUZ4Y0x5aGJNQzA1WEZ3dVhTc3BLRDg2WEZ4emZDUXBMMTBzWEc0Z0lDQWdXeWRtZUdsdmN5Y3NJQzlHZUdsUFUxeGNMeWhiTUMwNVhGd3VYU3NwTDEwc1hHNGdJQ0FnV3lkdmNHVnlZUzF0YVc1cEp5d2dMMDl3WlhKaElFMXBibWt1S2xabGNuTnBiMjVjWEM4b1d6QXRPVnhjTGwwcktTOWRMRnh1SUNBZ0lGc25iM0JsY21FbkxDQXZUM0JsY21GY1hDOG9XekF0T1Z4Y0xsMHJLU2cvT2x4Y2Mzd2tLUzlkTEZ4dUlDQWdJRnNuYjNCbGNtRW5MQ0F2VDFCU1hGd3ZLRnN3TFRsY1hDNWRLeWtvT2o5Y1hITjhKQ2t2WFN4Y2JpQWdJQ0JiSjJsbEp5d2dMMVJ5YVdSbGJuUmNYQzgzWEZ3dU1DNHFjblpjWERvb1d6QXRPVnhjTGwwcktTNHFYRndwTGlwSFpXTnJieVF2WFN4Y2JpQWdJQ0JiSjJsbEp5d2dMMDFUU1VWY1hITW9XekF0T1Z4Y0xsMHJLVHN1S2xSeWFXUmxiblJjWEM5Yk5DMDNYUzR3TDEwc1hHNGdJQ0FnV3lkcFpTY3NJQzlOVTBsRlhGeHpLRGRjWEM0d0tTOWRMRnh1SUNBZ0lGc25ZbUl4TUNjc0lDOUNRakV3TzF4Y2MxUnZkV05vTGlwV1pYSnphVzl1WEZ3dktGc3dMVGxjWEM1ZEt5a3ZYU3hjYmlBZ0lDQmJKMkZ1WkhKdmFXUW5MQ0F2UVc1a2NtOXBaRnhjY3loYk1DMDVYRnd1WFNzcEwxMHNYRzRnSUNBZ1d5ZHBiM01uTENBdlZtVnljMmx2Ymx4Y0x5aGJNQzA1WEZ3dVgxMHJLUzRxVFc5aWFXeGxMaXBUWVdaaGNta3VLaTlkTEZ4dUlDQWdJRnNuYzJGbVlYSnBKeXdnTDFabGNuTnBiMjVjWEM4b1d6QXRPVnhjTGw5ZEt5a3VLbE5oWm1GeWFTOWRMRnh1SUNBZ0lGc25abUZqWldKdmIyc25MQ0F2UmtKQlZseGNMeWhiTUMwNVhGd3VYU3NwTDEwc1hHNGdJQ0FnV3lkcGJuTjBZV2R5WVcwbkxDQXZTVzV6ZEdGbmNtRnRYRnh6S0Zzd0xUbGNYQzVkS3lrdlhTeGNiaUFnSUNCYkoybHZjeTEzWldKMmFXVjNKeXdnTDBGd2NHeGxWMlZpUzJsMFhGd3ZLRnN3TFRsY1hDNWRLeWt1S2sxdlltbHNaUzlkTEZ4dUlDQWdJRnNuYVc5ekxYZGxZblpwWlhjbkxDQXZRWEJ3YkdWWFpXSkxhWFJjWEM4b1d6QXRPVnhjTGwwcktTNHFSMlZqYTI5Y1hDa2tMMTBzWEc0Z0lDQWdXeWR6WldGeVkyaGliM1FuTENCVFJVRlNRMGhDVDFoZlZVRmZVa1ZIUlZoZExGeHVYVHRjYm5aaGNpQnZjR1Z5WVhScGJtZFRlWE4wWlcxU2RXeGxjeUE5SUZ0Y2JpQWdJQ0JiSjJsUFV5Y3NJQzlwVUNob2IyNWxmRzlrZkdGa0tTOWRMRnh1SUNBZ0lGc25RVzVrY205cFpDQlBVeWNzSUM5QmJtUnliMmxrTDEwc1hHNGdJQ0FnV3lkQ2JHRmphMEpsY25KNUlFOVRKeXdnTDBKc1lXTnJRbVZ5Y25sOFFrSXhNQzlkTEZ4dUlDQWdJRnNuVjJsdVpHOTNjeUJOYjJKcGJHVW5MQ0F2U1VWTmIySnBiR1V2WFN4Y2JpQWdJQ0JiSjBGdFlYcHZiaUJQVXljc0lDOUxhVzVrYkdVdlhTeGNiaUFnSUNCYkoxZHBibVJ2ZDNNZ015NHhNU2NzSUM5WGFXNHhOaTlkTEZ4dUlDQWdJRnNuVjJsdVpHOTNjeUE1TlNjc0lDOG9WMmx1Wkc5M2N5QTVOU2w4S0ZkcGJqazFLWHdvVjJsdVpHOTNjMTg1TlNrdlhTeGNiaUFnSUNCYkoxZHBibVJ2ZDNNZ09UZ25MQ0F2S0ZkcGJtUnZkM01nT1RncGZDaFhhVzQ1T0NrdlhTeGNiaUFnSUNCYkoxZHBibVJ2ZDNNZ01qQXdNQ2NzSUM4b1YybHVaRzkzY3lCT1ZDQTFMakFwZkNoWGFXNWtiM2R6SURJd01EQXBMMTBzWEc0Z0lDQWdXeWRYYVc1a2IzZHpJRmhRSnl3Z0x5aFhhVzVrYjNkeklFNVVJRFV1TVNsOEtGZHBibVJ2ZDNNZ1dGQXBMMTBzWEc0Z0lDQWdXeWRYYVc1a2IzZHpJRk5sY25abGNpQXlNREF6Snl3Z0x5aFhhVzVrYjNkeklFNVVJRFV1TWlrdlhTeGNiaUFnSUNCYkoxZHBibVJ2ZDNNZ1ZtbHpkR0VuTENBdktGZHBibVJ2ZDNNZ1RsUWdOaTR3S1M5ZExGeHVJQ0FnSUZzblYybHVaRzkzY3lBM0p5d2dMeWhYYVc1a2IzZHpJRTVVSURZdU1Ta3ZYU3hjYmlBZ0lDQmJKMWRwYm1SdmQzTWdPQ2NzSUM4b1YybHVaRzkzY3lCT1ZDQTJMaklwTDEwc1hHNGdJQ0FnV3lkWGFXNWtiM2R6SURndU1TY3NJQzhvVjJsdVpHOTNjeUJPVkNBMkxqTXBMMTBzWEc0Z0lDQWdXeWRYYVc1a2IzZHpJREV3Snl3Z0x5aFhhVzVrYjNkeklFNVVJREV3TGpBcEwxMHNYRzRnSUNBZ1d5ZFhhVzVrYjNkeklFMUZKeXdnTDFkcGJtUnZkM01nVFVVdlhTeGNiaUFnSUNCYkowOXdaVzRnUWxORUp5d2dMMDl3Wlc1Q1UwUXZYU3hjYmlBZ0lDQmJKMU4xYmlCUFV5Y3NJQzlUZFc1UFV5OWRMRnh1SUNBZ0lGc25RMmh5YjIxbElFOVRKeXdnTDBOeVQxTXZYU3hjYmlBZ0lDQmJKMHhwYm5WNEp5d2dMeWhNYVc1MWVDbDhLRmd4TVNrdlhTeGNiaUFnSUNCYkowMWhZeUJQVXljc0lDOG9UV0ZqWDFCdmQyVnlVRU1wZkNoTllXTnBiblJ2YzJncEwxMHNYRzRnSUNBZ1d5ZFJUbGduTENBdlVVNVlMMTBzWEc0Z0lDQWdXeWRDWlU5VEp5d2dMMEpsVDFNdlhTeGNiaUFnSUNCYkowOVRMekluTENBdlQxTmNYQzh5TDEwc1hHNWRPMXh1Wm5WdVkzUnBiMjRnWkdWMFpXTjBLSFZ6WlhKQloyVnVkQ2tnZTF4dUlDQWdJR2xtSUNnaElYVnpaWEpCWjJWdWRDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjR0Z5YzJWVmMyVnlRV2RsYm5Rb2RYTmxja0ZuWlc1MEtUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCa2IyTjFiV1Z1ZENBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlaY2JpQWdJQ0FnSUNBZ2RIbHdaVzltSUc1aGRtbG5ZWFJ2Y2lBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlaY2JpQWdJQ0FnSUNBZ2JtRjJhV2RoZEc5eUxuQnliMlIxWTNRZ1BUMDlJQ2RTWldGamRFNWhkR2wyWlNjcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJTWldGamRFNWhkR2wyWlVsdVptOG9LVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnVZWFpwWjJGMGIzSWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQndZWEp6WlZWelpYSkJaMlZ1ZENodVlYWnBaMkYwYjNJdWRYTmxja0ZuWlc1MEtUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR2RsZEU1dlpHVldaWEp6YVc5dUtDazdYRzU5WEc1bGVIQnZjblJ6TG1SbGRHVmpkQ0E5SUdSbGRHVmpkRHRjYm1aMWJtTjBhVzl1SUcxaGRHTm9WWE5sY2tGblpXNTBLSFZoS1NCN1hHNGdJQ0FnTHk4Z2IzQjBaV1FnWm05eUlIVnphVzVuSUhKbFpIVmpaU0JvWlhKbElISmhkR2hsY2lCMGFHRnVJRUZ5Y21GNUkyWnBjbk4wSUhkcGRHZ2dZU0J5WldkbGVDNTBaWE4wSUdOaGJHeGNiaUFnSUNBdkx5QjBhR2x6SUdseklIQnlhVzFoY21sc2VTQmlaV05oZFhObElIVnphVzVuSUhSb1pTQnlaV1IxWTJVZ2QyVWdiMjVzZVNCd1pYSm1iM0p0SUhSb1pTQnlaV2RsZUZ4dUlDQWdJQzh2SUdWNFpXTjFkR2x2YmlCdmJtTmxJSEpoZEdobGNpQjBhR0Z1SUc5dVkyVWdabTl5SUhSb1pTQjBaWE4wSUdGdVpDQm1iM0lnZEdobElHVjRaV01nWVdkaGFXNGdZbVZzYjNkY2JpQWdJQ0F2THlCd2NtOWlZV0pzZVNCemIyMWxkR2hwYm1jZ2RHaGhkQ0J1WldWa2N5QjBieUJpWlNCaVpXNWphRzFoY210bFpDQjBhRzkxWjJoY2JpQWdJQ0J5WlhSMWNtNGdLSFZoSUNFOVBTQW5KeUFtSmx4dUlDQWdJQ0FnSUNCMWMyVnlRV2RsYm5SU2RXeGxjeTV5WldSMVkyVW9ablZ1WTNScGIyNGdLRzFoZEdOb1pXUXNJRjloS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1luSnZkM05sY2lBOUlGOWhXekJkTENCeVpXZGxlQ0E5SUY5aFd6RmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzFoZEdOb1pXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiV0YwWTJobFpEdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMVlVMWhkR05vSUQwZ2NtVm5aWGd1WlhobFl5aDFZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0lTRjFZVTFoZEdOb0lDWW1JRnRpY205M2MyVnlMQ0IxWVUxaGRHTm9YVHRjYmlBZ0lDQWdJQ0FnZlN3Z1ptRnNjMlVwS1R0Y2JuMWNibVoxYm1OMGFXOXVJR0p5YjNkelpYSk9ZVzFsS0hWaEtTQjdYRzRnSUNBZ2RtRnlJR1JoZEdFZ1BTQnRZWFJqYUZWelpYSkJaMlZ1ZENoMVlTazdYRzRnSUNBZ2NtVjBkWEp1SUdSaGRHRWdQeUJrWVhSaFd6QmRJRG9nYm5Wc2JEdGNibjFjYm1WNGNHOXlkSE11WW5KdmQzTmxjazVoYldVZ1BTQmljbTkzYzJWeVRtRnRaVHRjYm1aMWJtTjBhVzl1SUhCaGNuTmxWWE5sY2tGblpXNTBLSFZoS1NCN1hHNGdJQ0FnZG1GeUlHMWhkR05vWldSU2RXeGxJRDBnYldGMFkyaFZjMlZ5UVdkbGJuUW9kV0VwTzF4dUlDQWdJR2xtSUNnaGJXRjBZMmhsWkZKMWJHVXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCdVlXMWxJRDBnYldGMFkyaGxaRkoxYkdWYk1GMHNJRzFoZEdOb0lEMGdiV0YwWTJobFpGSjFiR1ZiTVYwN1hHNGdJQ0FnYVdZZ0tHNWhiV1VnUFQwOUlDZHpaV0Z5WTJoaWIzUW5LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1FtOTBTVzVtYnlncE8xeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ2RtVnljMmx2YmxCaGNuUnpJRDBnYldGMFkyaGJNVjBnSmlZZ2JXRjBZMmhiTVYwdWMzQnNhWFFvTDFzdVgxMHZLUzV6YkdsalpTZ3dMQ0F6S1R0Y2JpQWdJQ0JwWmlBb2RtVnljMmx2YmxCaGNuUnpLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDJaWEp6YVc5dVVHRnlkSE11YkdWdVozUm9JRHdnVWtWUlZVbFNSVVJmVmtWU1UwbFBUbDlRUVZKVVV5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtVnljMmx2YmxCaGNuUnpJRDBnWDE5emNISmxZV1JCY25KaGVYTW9kbVZ5YzJsdmJsQmhjblJ6TENCamNtVmhkR1ZXWlhKemFXOXVVR0Z5ZEhNb1VrVlJWVWxTUlVSZlZrVlNVMGxQVGw5UVFWSlVVeUF0SUhabGNuTnBiMjVRWVhKMGN5NXNaVzVuZEdncEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZG1WeWMybHZibEJoY25SeklEMGdXMTA3WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUIyWlhKemFXOXVJRDBnZG1WeWMybHZibEJoY25SekxtcHZhVzRvSnk0bktUdGNiaUFnSUNCMllYSWdiM01nUFNCa1pYUmxZM1JQVXloMVlTazdYRzRnSUNBZ2RtRnlJSE5sWVhKamFFSnZkRTFoZEdOb0lEMGdVMFZCVWtOSVFrOVVYMDlUWDFKRlIwVllMbVY0WldNb2RXRXBPMXh1SUNBZ0lHbG1JQ2h6WldGeVkyaENiM1JOWVhSamFDQW1KaUJ6WldGeVkyaENiM1JOWVhSamFGc3hYU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGTmxZWEpqYUVKdmRFUmxkbWxqWlVsdVptOG9ibUZ0WlN3Z2RtVnljMmx2Yml3Z2IzTXNJSE5sWVhKamFFSnZkRTFoZEdOb1d6RmRLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkNjbTkzYzJWeVNXNW1ieWh1WVcxbExDQjJaWEp6YVc5dUxDQnZjeWs3WEc1OVhHNWxlSEJ2Y25SekxuQmhjbk5sVlhObGNrRm5aVzUwSUQwZ2NHRnljMlZWYzJWeVFXZGxiblE3WEc1bWRXNWpkR2x2YmlCa1pYUmxZM1JQVXloMVlTa2dlMXh1SUNBZ0lHWnZjaUFvZG1GeUlHbHBJRDBnTUN3Z1kyOTFiblFnUFNCdmNHVnlZWFJwYm1kVGVYTjBaVzFTZFd4bGN5NXNaVzVuZEdnN0lHbHBJRHdnWTI5MWJuUTdJR2xwS3lzcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5aElEMGdiM0JsY21GMGFXNW5VM2x6ZEdWdFVuVnNaWE5iYVdsZExDQnZjeUE5SUY5aFd6QmRMQ0J5WldkbGVDQTlJRjloV3pGZE8xeHVJQ0FnSUNBZ0lDQjJZWElnYldGMFkyZ2dQU0J5WldkbGVDNWxlR1ZqS0hWaEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0cxaGRHTm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2IzTTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzU5WEc1bGVIQnZjblJ6TG1SbGRHVmpkRTlUSUQwZ1pHVjBaV04wVDFNN1hHNW1kVzVqZEdsdmJpQm5aWFJPYjJSbFZtVnljMmx2YmlncElIdGNiaUFnSUNCMllYSWdhWE5PYjJSbElEMGdkSGx3Wlc5bUlIQnliMk5sYzNNZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlIQnliMk5sYzNNdWRtVnljMmx2Ymp0Y2JpQWdJQ0J5WlhSMWNtNGdhWE5PYjJSbElEOGdibVYzSUU1dlpHVkpibVp2S0hCeWIyTmxjM011ZG1WeWMybHZiaTV6YkdsalpTZ3hLU2tnT2lCdWRXeHNPMXh1ZlZ4dVpYaHdiM0owY3k1blpYUk9iMlJsVm1WeWMybHZiaUE5SUdkbGRFNXZaR1ZXWlhKemFXOXVPMXh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxWbVZ5YzJsdmJsQmhjblJ6S0dOdmRXNTBLU0I3WEc0Z0lDQWdkbUZ5SUc5MWRIQjFkQ0E5SUZ0ZE8xeHVJQ0FnSUdadmNpQW9kbUZ5SUdscElEMGdNRHNnYVdrZ1BDQmpiM1Z1ZERzZ2FXa3JLeWtnZTF4dUlDQWdJQ0FnSUNCdmRYUndkWFF1Y0hWemFDZ25NQ2NwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2IzVjBjSFYwTzF4dWZWeHVJaXdpZG1GeUlHOXVZMlVnUFNCeVpYRjFhWEpsS0NkdmJtTmxKeWs3WEc1Y2JuWmhjaUJ1YjI5d0lEMGdablZ1WTNScGIyNG9LU0I3ZlR0Y2JseHVkbUZ5SUdselVtVnhkV1Z6ZENBOUlHWjFibU4wYVc5dUtITjBjbVZoYlNrZ2UxeHVYSFJ5WlhSMWNtNGdjM1J5WldGdExuTmxkRWhsWVdSbGNpQW1KaUIwZVhCbGIyWWdjM1J5WldGdExtRmliM0owSUQwOVBTQW5ablZ1WTNScGIyNG5PMXh1ZlR0Y2JseHVkbUZ5SUdselEyaHBiR1JRY205alpYTnpJRDBnWm5WdVkzUnBiMjRvYzNSeVpXRnRLU0I3WEc1Y2RISmxkSFZ5YmlCemRISmxZVzB1YzNSa2FXOGdKaVlnUVhKeVlYa3VhWE5CY25KaGVTaHpkSEpsWVcwdWMzUmthVzhwSUNZbUlITjBjbVZoYlM1emRHUnBieTVzWlc1bmRHZ2dQVDA5SUROY2JuMDdYRzVjYm5aaGNpQmxiM01nUFNCbWRXNWpkR2x2YmloemRISmxZVzBzSUc5d2RITXNJR05oYkd4aVlXTnJLU0I3WEc1Y2RHbG1JQ2gwZVhCbGIyWWdiM0IwY3lBOVBUMGdKMloxYm1OMGFXOXVKeWtnY21WMGRYSnVJR1Z2Y3loemRISmxZVzBzSUc1MWJHd3NJRzl3ZEhNcE8xeHVYSFJwWmlBb0lXOXdkSE1wSUc5d2RITWdQU0I3ZlR0Y2JseHVYSFJqWVd4c1ltRmpheUE5SUc5dVkyVW9ZMkZzYkdKaFkyc2dmSHdnYm05dmNDazdYRzVjYmx4MGRtRnlJSGR6SUQwZ2MzUnlaV0Z0TGw5M2NtbDBZV0pzWlZOMFlYUmxPMXh1WEhSMllYSWdjbk1nUFNCemRISmxZVzB1WDNKbFlXUmhZbXhsVTNSaGRHVTdYRzVjZEhaaGNpQnlaV0ZrWVdKc1pTQTlJRzl3ZEhNdWNtVmhaR0ZpYkdVZ2ZId2dLRzl3ZEhNdWNtVmhaR0ZpYkdVZ0lUMDlJR1poYkhObElDWW1JSE4wY21WaGJTNXlaV0ZrWVdKc1pTazdYRzVjZEhaaGNpQjNjbWwwWVdKc1pTQTlJRzl3ZEhNdWQzSnBkR0ZpYkdVZ2ZId2dLRzl3ZEhNdWQzSnBkR0ZpYkdVZ0lUMDlJR1poYkhObElDWW1JSE4wY21WaGJTNTNjbWwwWVdKc1pTazdYRzVjZEhaaGNpQmpZVzVqWld4c1pXUWdQU0JtWVd4elpUdGNibHh1WEhSMllYSWdiMjVzWldkaFkzbG1hVzVwYzJnZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUnBaaUFvSVhOMGNtVmhiUzUzY21sMFlXSnNaU2tnYjI1bWFXNXBjMmdvS1R0Y2JseDBmVHRjYmx4dVhIUjJZWElnYjI1bWFXNXBjMmdnUFNCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSM2NtbDBZV0pzWlNBOUlHWmhiSE5sTzF4dVhIUmNkR2xtSUNnaGNtVmhaR0ZpYkdVcElHTmhiR3hpWVdOckxtTmhiR3dvYzNSeVpXRnRLVHRjYmx4MGZUdGNibHh1WEhSMllYSWdiMjVsYm1RZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUnlaV0ZrWVdKc1pTQTlJR1poYkhObE8xeHVYSFJjZEdsbUlDZ2hkM0pwZEdGaWJHVXBJR05oYkd4aVlXTnJMbU5oYkd3b2MzUnlaV0Z0S1R0Y2JseDBmVHRjYmx4dVhIUjJZWElnYjI1bGVHbDBJRDBnWm5WdVkzUnBiMjRvWlhocGRFTnZaR1VwSUh0Y2JseDBYSFJqWVd4c1ltRmpheTVqWVd4c0tITjBjbVZoYlN3Z1pYaHBkRU52WkdVZ1B5QnVaWGNnUlhKeWIzSW9KMlY0YVhSbFpDQjNhWFJvSUdWeWNtOXlJR052WkdVNklDY2dLeUJsZUdsMFEyOWtaU2tnT2lCdWRXeHNLVHRjYmx4MGZUdGNibHh1WEhSMllYSWdiMjVsY25KdmNpQTlJR1oxYm1OMGFXOXVLR1Z5Y2lrZ2UxeHVYSFJjZEdOaGJHeGlZV05yTG1OaGJHd29jM1J5WldGdExDQmxjbklwTzF4dVhIUjlPMXh1WEc1Y2RIWmhjaUJ2Ym1Oc2IzTmxJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwY0hKdlkyVnpjeTV1WlhoMFZHbGpheWh2Ym1Oc2IzTmxibVY0ZEhScFkyc3BPMXh1WEhSOU8xeHVYRzVjZEhaaGNpQnZibU5zYjNObGJtVjRkSFJwWTJzZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUnBaaUFvWTJGdVkyVnNiR1ZrS1NCeVpYUjFjbTQ3WEc1Y2RGeDBhV1lnS0hKbFlXUmhZbXhsSUNZbUlDRW9jbk1nSmlZZ0tISnpMbVZ1WkdWa0lDWW1JQ0Z5Y3k1a1pYTjBjbTk1WldRcEtTa2djbVYwZFhKdUlHTmhiR3hpWVdOckxtTmhiR3dvYzNSeVpXRnRMQ0J1WlhjZ1JYSnliM0lvSjNCeVpXMWhkSFZ5WlNCamJHOXpaU2NwS1R0Y2JseDBYSFJwWmlBb2QzSnBkR0ZpYkdVZ0ppWWdJU2gzY3lBbUppQW9kM011Wlc1a1pXUWdKaVlnSVhkekxtUmxjM1J5YjNsbFpDa3BLU0J5WlhSMWNtNGdZMkZzYkdKaFkyc3VZMkZzYkNoemRISmxZVzBzSUc1bGR5QkZjbkp2Y2lnbmNISmxiV0YwZFhKbElHTnNiM05sSnlrcE8xeHVYSFI5TzF4dVhHNWNkSFpoY2lCdmJuSmxjWFZsYzNRZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUnpkSEpsWVcwdWNtVnhMbTl1S0NkbWFXNXBjMmduTENCdmJtWnBibWx6YUNrN1hHNWNkSDA3WEc1Y2JseDBhV1lnS0dselVtVnhkV1Z6ZENoemRISmxZVzBwS1NCN1hHNWNkRngwYzNSeVpXRnRMbTl1S0NkamIyMXdiR1YwWlNjc0lHOXVabWx1YVhOb0tUdGNibHgwWEhSemRISmxZVzB1YjI0b0oyRmliM0owSnl3Z2IyNWpiRzl6WlNrN1hHNWNkRngwYVdZZ0tITjBjbVZoYlM1eVpYRXBJRzl1Y21WeGRXVnpkQ2dwTzF4dVhIUmNkR1ZzYzJVZ2MzUnlaV0Z0TG05dUtDZHlaWEYxWlhOMEp5d2diMjV5WlhGMVpYTjBLVHRjYmx4MGZTQmxiSE5sSUdsbUlDaDNjbWwwWVdKc1pTQW1KaUFoZDNNcElIc2dMeThnYkdWbllXTjVJSE4wY21WaGJYTmNibHgwWEhSemRISmxZVzB1YjI0b0oyVnVaQ2NzSUc5dWJHVm5ZV041Wm1sdWFYTm9LVHRjYmx4MFhIUnpkSEpsWVcwdWIyNG9KMk5zYjNObEp5d2diMjVzWldkaFkzbG1hVzVwYzJncE8xeHVYSFI5WEc1Y2JseDBhV1lnS0dselEyaHBiR1JRY205alpYTnpLSE4wY21WaGJTa3BJSE4wY21WaGJTNXZiaWduWlhocGRDY3NJRzl1WlhocGRDazdYRzVjYmx4MGMzUnlaV0Z0TG05dUtDZGxibVFuTENCdmJtVnVaQ2s3WEc1Y2RITjBjbVZoYlM1dmJpZ25abWx1YVhOb0p5d2diMjVtYVc1cGMyZ3BPMXh1WEhScFppQW9iM0IwY3k1bGNuSnZjaUFoUFQwZ1ptRnNjMlVwSUhOMGNtVmhiUzV2YmlnblpYSnliM0luTENCdmJtVnljbTl5S1R0Y2JseDBjM1J5WldGdExtOXVLQ2RqYkc5elpTY3NJRzl1WTJ4dmMyVXBPMXh1WEc1Y2RISmxkSFZ5YmlCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSallXNWpaV3hzWldRZ1BTQjBjblZsTzF4dVhIUmNkSE4wY21WaGJTNXlaVzF2ZG1WTWFYTjBaVzVsY2lnblkyOXRjR3hsZEdVbkxDQnZibVpwYm1semFDazdYRzVjZEZ4MGMzUnlaV0Z0TG5KbGJXOTJaVXhwYzNSbGJtVnlLQ2RoWW05eWRDY3NJRzl1WTJ4dmMyVXBPMXh1WEhSY2RITjBjbVZoYlM1eVpXMXZkbVZNYVhOMFpXNWxjaWduY21WeGRXVnpkQ2NzSUc5dWNtVnhkV1Z6ZENrN1hHNWNkRngwYVdZZ0tITjBjbVZoYlM1eVpYRXBJSE4wY21WaGJTNXlaWEV1Y21WdGIzWmxUR2x6ZEdWdVpYSW9KMlpwYm1semFDY3NJRzl1Wm1sdWFYTm9LVHRjYmx4MFhIUnpkSEpsWVcwdWNtVnRiM1psVEdsemRHVnVaWElvSjJWdVpDY3NJRzl1YkdWbllXTjVabWx1YVhOb0tUdGNibHgwWEhSemRISmxZVzB1Y21WdGIzWmxUR2x6ZEdWdVpYSW9KMk5zYjNObEp5d2diMjVzWldkaFkzbG1hVzVwYzJncE8xeHVYSFJjZEhOMGNtVmhiUzV5WlcxdmRtVk1hWE4wWlc1bGNpZ25abWx1YVhOb0p5d2diMjVtYVc1cGMyZ3BPMXh1WEhSY2RITjBjbVZoYlM1eVpXMXZkbVZNYVhOMFpXNWxjaWduWlhocGRDY3NJRzl1WlhocGRDazdYRzVjZEZ4MGMzUnlaV0Z0TG5KbGJXOTJaVXhwYzNSbGJtVnlLQ2RsYm1RbkxDQnZibVZ1WkNrN1hHNWNkRngwYzNSeVpXRnRMbkpsYlc5MlpVeHBjM1JsYm1WeUtDZGxjbkp2Y2ljc0lHOXVaWEp5YjNJcE8xeHVYSFJjZEhOMGNtVmhiUzV5WlcxdmRtVk1hWE4wWlc1bGNpZ25ZMnh2YzJVbkxDQnZibU5zYjNObEtUdGNibHgwZlR0Y2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWlc5ek8xeHVJaXdpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUhzZ2RtRnNkV1U2SUhSeWRXVWdmU2s3WEc1bGVIQnZjblJ6TGtWMGFHVnlaWFZ0VUhKdmRtbGtaWEpGY25KdmNpQTlJR1Y0Y0c5eWRITXVSWFJvWlhKbGRXMVNjR05GY25KdmNpQTlJSFp2YVdRZ01EdGNibU52Ym5OMElHWmhjM1JmYzJGbVpWOXpkSEpwYm1kcFpubGZNU0E5SUhKbGNYVnBjbVVvWENKbVlYTjBMWE5oWm1VdGMzUnlhVzVuYVdaNVhDSXBPMXh1THlvcVhHNGdLaUJGY25KdmNpQnpkV0pqYkdGemN5QnBiWEJzWlcxbGJuUnBibWNnU2xOUFRpQlNVRU1nTWk0d0lHVnljbTl5Y3lCaGJtUWdSWFJvWlhKbGRXMGdVbEJESUdWeWNtOXljMXh1SUNvZ2NHVnlJRVZKVUMweE5EYzBMbHh1SUNvZ1VHVnliV2wwY3lCaGJua2dhVzUwWldkbGNpQmxjbkp2Y2lCamIyUmxMbHh1SUNvdlhHNWpiR0Z6Y3lCRmRHaGxjbVYxYlZKd1kwVnljbTl5SUdWNGRHVnVaSE1nUlhKeWIzSWdlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLR052WkdVc0lHMWxjM05oWjJVc0lHUmhkR0VwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZPZFcxaVpYSXVhWE5KYm5SbFoyVnlLR052WkdVcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjF3aVkyOWtaVndpSUcxMWMzUWdZbVVnWVc0Z2FXNTBaV2RsY2k0bktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb0lXMWxjM05oWjJVZ2ZId2dkSGx3Wlc5bUlHMWxjM05oWjJVZ0lUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxd2liV1Z6YzJGblpWd2lJRzExYzNRZ1ltVWdZU0J1YjI1bGJYQjBlU0J6ZEhKcGJtY3VKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2MzVndaWElvYldWemMyRm5aU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjlrWlNBOUlHTnZaR1U3WEc0Z0lDQWdJQ0FnSUdsbUlDaGtZWFJoSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WkdGMFlTQTlJR1JoZEdFN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtVjBkWEp1Y3lCaElIQnNZV2x1SUc5aWFtVmpkQ0IzYVhSb0lHRnNiQ0J3ZFdKc2FXTWdZMnhoYzNNZ2NISnZjR1Z5ZEdsbGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCelpYSnBZV3hwZW1Vb0tTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElITmxjbWxoYkdsNlpXUWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMlJsT2lCMGFHbHpMbU52WkdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxPaUIwYUdsekxtMWxjM05oWjJVc1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVJoZEdFZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZ5YVdGc2FYcGxaQzVrWVhSaElEMGdkR2hwY3k1a1lYUmhPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5OMFlXTnJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWEpwWVd4cGVtVmtMbk4wWVdOcklEMGdkR2hwY3k1emRHRmphenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYzJWeWFXRnNhWHBsWkR0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1WMGRYSnVJR0VnYzNSeWFXNW5JSEpsY0hKbGMyVnVkR0YwYVc5dUlHOW1JSFJvWlNCelpYSnBZV3hwZW1Wa0lHVnljbTl5TENCdmJXbDBkR2x1WjF4dUlDQWdJQ0FxSUdGdWVTQmphWEpqZFd4aGNpQnlaV1psY21WdVkyVnpMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIUnZVM1J5YVc1bktDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZ6ZEY5ellXWmxYM04wY21sdVoybG1lVjh4TG1SbFptRjFiSFFvZEdocGN5NXpaWEpwWVd4cGVtVW9LU3dnYzNSeWFXNW5hV1o1VW1Wd2JHRmpaWElzSURJcE8xeHVJQ0FnSUgxY2JuMWNibVY0Y0c5eWRITXVSWFJvWlhKbGRXMVNjR05GY25KdmNpQTlJRVYwYUdWeVpYVnRVbkJqUlhKeWIzSTdYRzR2S2lwY2JpQXFJRVZ5Y205eUlITjFZbU5zWVhOeklHbHRjR3hsYldWdWRHbHVaeUJGZEdobGNtVjFiU0JRY205MmFXUmxjaUJsY25KdmNuTWdjR1Z5SUVWSlVDMHhNVGt6TGx4dUlDb2dVR1Z5YldsMGN5QnBiblJsWjJWeUlHVnljbTl5SUdOdlpHVnpJR2x1SUhSb1pTQmJJREV3TURBZ1BEMGdORGs1T1NCZElISmhibWRsTGx4dUlDb3ZYRzVqYkdGemN5QkZkR2hsY21WMWJWQnliM1pwWkdWeVJYSnliM0lnWlhoMFpXNWtjeUJGZEdobGNtVjFiVkp3WTBWeWNtOXlJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEY21WaGRHVWdZVzRnUlhSb1pYSmxkVzBnVUhKdmRtbGtaWElnU2xOUFRpMVNVRU1nWlhKeWIzSXVYRzRnSUNBZ0lDb2dZR052WkdWZ0lHMTFjM1FnWW1VZ1lXNGdhVzUwWldkbGNpQnBiaUIwYUdVZ01UQXdNQ0E4UFNBME9UazVJSEpoYm1kbExseHVJQ0FnSUNBcUwxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHTnZaR1VzSUcxbGMzTmhaMlVzSUdSaGRHRXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnBjMVpoYkdsa1JYUm9VSEp2ZG1sa1pYSkRiMlJsS0dOdlpHVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxd2lZMjlrWlZ3aUlHMTFjM1FnWW1VZ1lXNGdhVzUwWldkbGNpQnpkV05vSUhSb1lYUTZJREV3TURBZ1BEMGdZMjlrWlNBOFBTQTBPVGs1SnlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjM1Z3WlhJb1kyOWtaU3dnYldWemMyRm5aU3dnWkdGMFlTazdYRzRnSUNBZ2ZWeHVmVnh1Wlhod2IzSjBjeTVGZEdobGNtVjFiVkJ5YjNacFpHVnlSWEp5YjNJZ1BTQkZkR2hsY21WMWJWQnliM1pwWkdWeVJYSnliM0k3WEc0dkx5QkpiblJsY201aGJGeHVablZ1WTNScGIyNGdhWE5XWVd4cFpFVjBhRkJ5YjNacFpHVnlRMjlrWlNoamIyUmxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlFNTFiV0psY2k1cGMwbHVkR1ZuWlhJb1kyOWtaU2tnSmlZZ1kyOWtaU0ErUFNBeE1EQXdJQ1ltSUdOdlpHVWdQRDBnTkRrNU9UdGNibjFjYm1aMWJtTjBhVzl1SUhOMGNtbHVaMmxtZVZKbGNHeGhZMlZ5S0Y4c0lIWmhiSFZsS1NCN1hHNGdJQ0FnYVdZZ0tIWmhiSFZsSUQwOVBTQW5XME5wY21OMWJHRnlYU2NwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIWmhiSFZsTzF4dWZWeHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5WkdGMFlUcGhjSEJzYVdOaGRHbHZiaTlxYzI5dU8ySmhjMlUyTkN4bGVVb3lXbGhLZW1GWE9YVkphbTk2VEVOS2JXRlhlR3hKYW05cFdUSjRhR016VG14amVUVnhZM2xKYzBsdVRuWmtXRXBxV2xaS2RtSXpVV2xQYVVscFRFTktlbUl6Vm5sWk1sWjZTV3B3WWtscE5IVk1NMDU1V1hrNWFtSkhSbnBqTWxaNlRHNVNla2xzTUhOSmJUVm9ZbGRXZWtscWNHSllVM2RwWWxkR2QyTkhiSFZhTTAxcFQybEpOMDk2ZEVKUlZVWkNURVJhUlZGVlJtNVNSSFJDVVZaT2IxSkVjemRQZW5SSVVWVnNTRTh3UmtKUk1HZHpWRlZHUWxsVGVHNVJhMFpDWWpCSmMxVXdSa0pWVTNoTVVWVkdURTh3YkVKVVZGWkVURVpzUWxGV2EzTlRWVVpDVjFONFJsRlZSa1pNUlRsQ1VWZFZjMUpWUmtKU1UzaEtVVlZHVWs4eFJrSlNWM0JGVEVWc1FsRlZhM05STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFVd1JrSlZlWGhFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUVaUlZVWkdUekZzUWxGNlRrTk1SVEZDVVZVd2MxTlZSa0pUVTNoTVVWVkdURXhGVGtKUk1rbHpUa1ZLUWxGVVVrTk1SVTVDVVhwa1EweEZUa0pSVlUwM1ZUQkdSRk5FZEZKUlZVNUZURVZzUWxGVmEzTlJNRVpDVVhsNFVGRlZSbEJNUld4Q1VWVnJjMVF3UmtKVWVYaFFVVlZHVUV4RmRFSlJWWE56VlZWR1FsVlRlRVpSVlVaR1R6RnNRbEY2VGtSTVJURkNVVlV3YzFOVlJrSlRVM2hNVVZWR1RFeEZUa0pSTWtsell6Qk9RbEZZVGtSTVJVNUNVVE5hUkV4RlRrSlJWVTAzVlRCR1JGTkVkRkpSVlZaRlRFVjBRbEZWYzNOUk1FWkNVWGw0VUZGVlJsQk1SVTVDVVZWTmMxRXdSa0pSZW5SU1VWVk9iVXhGYkVKUlZXdHpVVEJHUWxGNWVFcFJWVVpLVEVWa1FsRlZZM05UVlVaQ1UxTjRSRkZWUmtSUE1VWkNVVEp3UTB4RmJFSlJWV3R6VTFWR1FsTlRlRXhSVlVaTVRFWk9RbEZXVFhOU1ZVWkNVbFIwV2xGVlRqQlJhWGhLVVZWR1NreEZUa0pSVlUxelUxVkdRbE5UZUVoUlZVWklURVZzUWxGVmEzTlJNRVpDVVhwMFZGRlZUbk5SYW5SS1VWVk9TVXhGVGtKUlZVMDNVMVZHUmxKRWN6ZFVNRVpHVW5wMFNsRlZUa2xNUms1Q1VWWk5OMVZWUmtSVlEzaE9VVlZHVGt4R1ZrSlJWbFZ6VWpCR1Frc3dTVGRYVlVaRVRqQk5jMU5WUmtKVFUzaEdVVlZHUmt4RmJFSlJWV3R6VVRCR1FsRjVlRXBSVlVaS1R6RnNRbEV5V1hOVU1FWkNWSGw0UmxGVlJrWk1SV3hDVVZWcmMxRXdSa0pSZVhoUVVWVkdVRTh4VGtKUk0xSkRURVZPUWxGVlRUZFZWVVpFVW1sNFNsRlZSa3BNUld4Q1VWVnJjMUV3UmtKUmVYaEtVVlZHU2t4RmRFSlJWWE56VlRCR1FsVjVlRVpSVlVaR1R6RnNRbEY2VGtOTVJsWkNVVlpWYzFFd1JrSlJlWGhLVVZWR1NreEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhwMFZGRlZUVE5SYW5SU1VWVk9SVXhGYkVKUlZXdHpVMVZHUWxOVGVFUlJWVVpFVEVWMFFsRlZjM05TVlVaQ1VsUjBXbEZWVG10TVJsWkNVVlpWYzFFd1JrSlJlWGhNVVZWR1RFeEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkVURVYwUWxGVmMzTlJNRVpDVVhwMFZGRlZUWFpSYW5SU1VWVk9SVXhGT1VKUlZUaHpWbFZHUWxaVGVFUlJWVVpFVHpCc1FsRXpRa05NUlU1Q1VWVk5OMU5WUmtaU1JITTNUekE1UWxJd1l6ZFRWVVpFVTBONFVsRlZSbEpQTVVaQ1VUQTBjMVF3UmtKVWVYY3lVV3RHUWxsVGVFUlJWVTV6VVdsNFNsRlZSa3BNUlU1Q1VWVk5jMVV3UmtKVmVYaEdVVlZHUmt4RlZrSlJNbWhEVEVkc1ExRlZSbkJSYVhoR1VWVk9jVkZwZUVSUlZVWkVURVZPUWxFd1dYTlJNRVpDVVhwMFNsRlZUa3RNUlU1Q1VWVk5OMUV3UmtSU2FuUkNVVmhTUlZKRGR6QlJNRVo2VWtWTk4xRlZSa1pTUkhNM1R6QmtRbEl3WXpkUlZVWkVVME40VGxGVlJtaE1TRVpEVVZWR05WRnBlRlJSVlVaU1RFZGtRMUZWUm5SUmFuUktVVlZWZGxKRWN6ZFBNRGxDVWpCak4xTlZSa1JUUTNoYVVWVkdXa3hGYkVKUlZtdHpVbFZHUWxKVGVGQlJWVVpzVEVWV1FsRlZWWE5UVlVaQ1ZWUjBVbEZWVm5GU1EzaEtVVlZHU2t4RlRrSlJWVTF6WXpCS1FsRllUa05NUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4RlZrSlJWVlUzVjFWR1JHRnJUWE5VVlVaQ1ZGTjRTbEZWUmtwTVJYUkNVVlZ6YzFFd1JrUlphWGQ1VWtWR1FrMXJVWE5STUVaRVRsVlJjMUV3UmtKUmVuUlVVVlZPU1U4eFJrSlNWVkZ6VXpCR1FsTjVlRVJSVlVaRVRFVnNRbEZWYTNOU1ZVWkNVbE40VUZGVlJsQk1SVlpDVVZWVmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMDNVMVZHUkU0d1NYTlJNRVpDVVhwMFJGRlZUa2RQTUVaQ1lVVktSVXhJVGtWUlYyUkRVWHAwUWxGVlZrVk1SbVJDVVZaak4xRlZSa1pYUTNoVVVWVkdWRXhJVGtOUlZVWjZVV2w0UkZGVlJrUk1SV3hDVVZack4xTlZSa1JOVlUxelZEQkdRbFI1ZUU1UlZVWk9URVZPUWxGVlRYTlZNRVpDVlhsNFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaEtVVlZHU2t4RmJFSlJWV3R6VTFWR1FsTlRlRXBSVlVaS1RFVnNRbEZWYTNOVFZVWkNVMU40U2xGVlJrcE1SV3hDVVZWcmMxRXdSa0pSZW5SQ1VWVk9iMUpUZUVSUlZVWkVUekJHUWxKVlVYTlZNRVpDVlhsNGNGRnJSa0poVlVselVUQkdRbEY1ZUVSUlZVWldURVZXUWxGVlZYTlRNRVpDV1hwMFNsRlZUblZTUTNoS1VWVkdTa3hGZEVKUlZYTnpVekJHUWxONWVGcFJWVVphVEVWV1FsRlZWVGRWVlVaRVRWVkpjMVF3UmtKVWVYaFVVVlZHVkV4RlRrSlJWVTAzVXpCR1JHSkZTVGRUVlVaRVVrTjRVRkZWUmxCTVJYUkNVVlZ6YzFFd1JrSlJlblJDVVZWT2JVeEZUa0pSVlUxcFpsRTlQU0lzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN0lIWmhiSFZsT2lCMGNuVmxJSDBwTzF4dVpYaHdiM0owY3k1bGNuSnZjbFpoYkhWbGN5QTlJR1Y0Y0c5eWRITXVaWEp5YjNKRGIyUmxjeUE5SUhadmFXUWdNRHRjYm1WNGNHOXlkSE11WlhKeWIzSkRiMlJsY3lBOUlIdGNiaUFnSUNCeWNHTTZJSHRjYmlBZ0lDQWdJQ0FnYVc1MllXeHBaRWx1Y0hWME9pQXRNekl3TURBc1hHNGdJQ0FnSUNBZ0lISmxjMjkxY21ObFRtOTBSbTkxYm1RNklDMHpNakF3TVN4Y2JpQWdJQ0FnSUNBZ2NtVnpiM1Z5WTJWVmJtRjJZV2xzWVdKc1pUb2dMVE15TURBeUxGeHVJQ0FnSUNBZ0lDQjBjbUZ1YzJGamRHbHZibEpsYW1WamRHVmtPaUF0TXpJd01ETXNYRzRnSUNBZ0lDQWdJRzFsZEdodlpFNXZkRk4xY0hCdmNuUmxaRG9nTFRNeU1EQTBMRnh1SUNBZ0lDQWdJQ0JzYVcxcGRFVjRZMlZsWkdWa09pQXRNekl3TURVc1hHNGdJQ0FnSUNBZ0lIQmhjbk5sT2lBdE16STNNREFzWEc0Z0lDQWdJQ0FnSUdsdWRtRnNhV1JTWlhGMVpYTjBPaUF0TXpJMk1EQXNYRzRnSUNBZ0lDQWdJRzFsZEdodlpFNXZkRVp2ZFc1a09pQXRNekkyTURFc1hHNGdJQ0FnSUNBZ0lHbHVkbUZzYVdSUVlYSmhiWE02SUMwek1qWXdNaXhjYmlBZ0lDQWdJQ0FnYVc1MFpYSnVZV3c2SUMwek1qWXdNeXhjYmlBZ0lDQjlMRnh1SUNBZ0lIQnliM1pwWkdWeU9pQjdYRzRnSUNBZ0lDQWdJSFZ6WlhKU1pXcGxZM1JsWkZKbGNYVmxjM1E2SURRd01ERXNYRzRnSUNBZ0lDQWdJSFZ1WVhWMGFHOXlhWHBsWkRvZ05ERXdNQ3hjYmlBZ0lDQWdJQ0FnZFc1emRYQndiM0owWldSTlpYUm9iMlE2SURReU1EQXNYRzRnSUNBZ0lDQWdJR1JwYzJOdmJtNWxZM1JsWkRvZ05Ea3dNQ3hjYmlBZ0lDQWdJQ0FnWTJoaGFXNUVhWE5qYjI1dVpXTjBaV1E2SURRNU1ERXNYRzRnSUNBZ2ZTeGNibjA3WEc1bGVIQnZjblJ6TG1WeWNtOXlWbUZzZFdWeklEMGdlMXh1SUNBZ0lDY3RNekkzTURBbk9pQjdYRzRnSUNBZ0lDQWdJSE4wWVc1a1lYSmtPaUFuU2xOUFRpQlNVRU1nTWk0d0p5eGNiaUFnSUNBZ0lDQWdiV1Z6YzJGblpUb2dKMGx1ZG1Gc2FXUWdTbE5QVGlCM1lYTWdjbVZqWldsMlpXUWdZbmtnZEdobElITmxjblpsY2k0Z1FXNGdaWEp5YjNJZ2IyTmpkWEp5WldRZ2IyNGdkR2hsSUhObGNuWmxjaUIzYUdsc1pTQndZWEp6YVc1bklIUm9aU0JLVTA5T0lIUmxlSFF1Snl4Y2JpQWdJQ0I5TEZ4dUlDQWdJQ2N0TXpJMk1EQW5PaUI3WEc0Z0lDQWdJQ0FnSUhOMFlXNWtZWEprT2lBblNsTlBUaUJTVUVNZ01pNHdKeXhjYmlBZ0lDQWdJQ0FnYldWemMyRm5aVG9nSjFSb1pTQktVMDlPSUhObGJuUWdhWE1nYm05MElHRWdkbUZzYVdRZ1VtVnhkV1Z6ZENCdlltcGxZM1F1Snl4Y2JpQWdJQ0I5TEZ4dUlDQWdJQ2N0TXpJMk1ERW5PaUI3WEc0Z0lDQWdJQ0FnSUhOMFlXNWtZWEprT2lBblNsTlBUaUJTVUVNZ01pNHdKeXhjYmlBZ0lDQWdJQ0FnYldWemMyRm5aVG9nSjFSb1pTQnRaWFJvYjJRZ1pHOWxjeUJ1YjNRZ1pYaHBjM1FnTHlCcGN5QnViM1FnWVhaaGFXeGhZbXhsTGljc1hHNGdJQ0FnZlN4Y2JpQWdJQ0FuTFRNeU5qQXlKem9nZTF4dUlDQWdJQ0FnSUNCemRHRnVaR0Z5WkRvZ0owcFRUMDRnVWxCRElESXVNQ2NzWEc0Z0lDQWdJQ0FnSUcxbGMzTmhaMlU2SUNkSmJuWmhiR2xrSUcxbGRHaHZaQ0J3WVhKaGJXVjBaWElvY3lrdUp5eGNiaUFnSUNCOUxGeHVJQ0FnSUNjdE16STJNRE1uT2lCN1hHNGdJQ0FnSUNBZ0lITjBZVzVrWVhKa09pQW5TbE5QVGlCU1VFTWdNaTR3Snl4Y2JpQWdJQ0FnSUNBZ2JXVnpjMkZuWlRvZ0owbHVkR1Z5Ym1Gc0lFcFRUMDR0VWxCRElHVnljbTl5TGljc1hHNGdJQ0FnZlN4Y2JpQWdJQ0FuTFRNeU1EQXdKem9nZTF4dUlDQWdJQ0FnSUNCemRHRnVaR0Z5WkRvZ0owVkpVQzB4TkRjMEp5eGNiaUFnSUNBZ0lDQWdiV1Z6YzJGblpUb2dKMGx1ZG1Gc2FXUWdhVzV3ZFhRdUp5eGNiaUFnSUNCOUxGeHVJQ0FnSUNjdE16SXdNREVuT2lCN1hHNGdJQ0FnSUNBZ0lITjBZVzVrWVhKa09pQW5SVWxRTFRFME56UW5MRnh1SUNBZ0lDQWdJQ0J0WlhOellXZGxPaUFuVW1WemIzVnlZMlVnYm05MElHWnZkVzVrTGljc1hHNGdJQ0FnZlN4Y2JpQWdJQ0FuTFRNeU1EQXlKem9nZTF4dUlDQWdJQ0FnSUNCemRHRnVaR0Z5WkRvZ0owVkpVQzB4TkRjMEp5eGNiaUFnSUNBZ0lDQWdiV1Z6YzJGblpUb2dKMUpsYzI5MWNtTmxJSFZ1WVhaaGFXeGhZbXhsTGljc1hHNGdJQ0FnZlN4Y2JpQWdJQ0FuTFRNeU1EQXpKem9nZTF4dUlDQWdJQ0FnSUNCemRHRnVaR0Z5WkRvZ0owVkpVQzB4TkRjMEp5eGNiaUFnSUNBZ0lDQWdiV1Z6YzJGblpUb2dKMVJ5WVc1ellXTjBhVzl1SUhKbGFtVmpkR1ZrTGljc1hHNGdJQ0FnZlN4Y2JpQWdJQ0FuTFRNeU1EQTBKem9nZTF4dUlDQWdJQ0FnSUNCemRHRnVaR0Z5WkRvZ0owVkpVQzB4TkRjMEp5eGNiaUFnSUNBZ0lDQWdiV1Z6YzJGblpUb2dKMDFsZEdodlpDQnViM1FnYzNWd2NHOXlkR1ZrTGljc1hHNGdJQ0FnZlN4Y2JpQWdJQ0FuTFRNeU1EQTFKem9nZTF4dUlDQWdJQ0FnSUNCemRHRnVaR0Z5WkRvZ0owVkpVQzB4TkRjMEp5eGNiaUFnSUNBZ0lDQWdiV1Z6YzJGblpUb2dKMUpsY1hWbGMzUWdiR2x0YVhRZ1pYaGpaV1ZrWldRdUp5eGNiaUFnSUNCOUxGeHVJQ0FnSUNjME1EQXhKem9nZTF4dUlDQWdJQ0FnSUNCemRHRnVaR0Z5WkRvZ0owVkpVQzB4TVRrekp5eGNiaUFnSUNBZ0lDQWdiV1Z6YzJGblpUb2dKMVZ6WlhJZ2NtVnFaV04wWldRZ2RHaGxJSEpsY1hWbGMzUXVKeXhjYmlBZ0lDQjlMRnh1SUNBZ0lDYzBNVEF3SnpvZ2UxeHVJQ0FnSUNBZ0lDQnpkR0Z1WkdGeVpEb2dKMFZKVUMweE1Ua3pKeXhjYmlBZ0lDQWdJQ0FnYldWemMyRm5aVG9nSjFSb1pTQnlaWEYxWlhOMFpXUWdZV05qYjNWdWRDQmhibVF2YjNJZ2JXVjBhRzlrSUdoaGN5QnViM1FnWW1WbGJpQmhkWFJvYjNKcGVtVmtJR0o1SUhSb1pTQjFjMlZ5TGljc1hHNGdJQ0FnZlN4Y2JpQWdJQ0FuTkRJd01DYzZJSHRjYmlBZ0lDQWdJQ0FnYzNSaGJtUmhjbVE2SUNkRlNWQXRNVEU1TXljc1hHNGdJQ0FnSUNBZ0lHMWxjM05oWjJVNklDZFVhR1VnY21WeGRXVnpkR1ZrSUcxbGRHaHZaQ0JwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtJR0o1SUhSb2FYTWdSWFJvWlhKbGRXMGdjSEp2ZG1sa1pYSXVKeXhjYmlBZ0lDQjlMRnh1SUNBZ0lDYzBPVEF3SnpvZ2UxeHVJQ0FnSUNBZ0lDQnpkR0Z1WkdGeVpEb2dKMFZKVUMweE1Ua3pKeXhjYmlBZ0lDQWdJQ0FnYldWemMyRm5aVG9nSjFSb1pTQndjbTkyYVdSbGNpQnBjeUJrYVhOamIyNXVaV04wWldRZ1puSnZiU0JoYkd3Z1kyaGhhVzV6TGljc1hHNGdJQ0FnZlN4Y2JpQWdJQ0FuTkRrd01TYzZJSHRjYmlBZ0lDQWdJQ0FnYzNSaGJtUmhjbVE2SUNkRlNWQXRNVEU1TXljc1hHNGdJQ0FnSUNBZ0lHMWxjM05oWjJVNklDZFVhR1VnY0hKdmRtbGtaWElnYVhNZ1pHbHpZMjl1Ym1WamRHVmtJR1p5YjIwZ2RHaGxJSE53WldOcFptbGxaQ0JqYUdGcGJpNG5MRnh1SUNBZ0lIMHNYRzU5TzF4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlaR0YwWVRwaGNIQnNhV05oZEdsdmJpOXFjMjl1TzJKaGMyVTJOQ3hsZVVveVdsaEtlbUZYT1hWSmFtOTZURU5LYldGWGVHeEphbTlwV2xoS2VXSXpTWFJaTWpsMVl6TlNhR0p1VW5wTWJYQjZTV2wzYVdNeU9URmpiVTVzVlcwNWRtUkRTVFpKYVVselNXNU9kbVJZU21wYVdFMXBUMnh6YVV4cE5IWmpNMHBxVERKV2VXTnRPWGxNVjA1MlltNU9NRmxYTlRCamVUVXdZM2xLWkV4RFNuVlpWekZzWTNsSk5sY3hNSE5KYlRGb1kwaENjR0p0WkhwSmFtOXBUM3B6TjFGVlJqRlJiVVZ6VlZWR1FsRlRlRlpSVlVaV1RFVmtRbEZYVlRkVFZVWkVZMFZOYzFJd1JrSlNlWGhHVVZWR1JrOHhSa0pSTUdkelYxVkdRbGRUZUVaUlZVWkdURVZPUWxGVlRYTlRNRVpDVTNwMFVsRlZUbmRSYVhodVVXdEdRbG93U1hOU1ZVWkNVbE40UkZGVlJrUk1SWFJDVVZWek4xVlZSa1JsUlVsellsVktRbEZYTVVOTVJWWkNVVlZWYzFFd1JrSlJlWGhNVVZWR1RFOHhSa0pSZWs1RFRFY3hRMUZWUm5SUmFYaEdVVlZHUmt4RlRrSlJWVTF6VXpCR1FsTjZkRkpSVlUxNlVXbDRjbEZyUmtKaE1FbHpVbFZHUWxKVGVFUlJWVVpFVEVWMFFsRlZjemRWVlVaRVRWVkpjMWxWUmtKWlUzaEdVVlZHUmt4RlRrSlJWVTF6VXpCR1FsTjZkRkpSVlU1NVVXbDRURkZWUmt4TVJWWkNVVlZWYzFFd1JrSlJlWGhNVVZWR1RFOHhSa0pSTWtseldUQkdRbGw1ZUVaUlZVWkdURVZPUWxGVlRYTlRNRVpDVTNwMFVsRlZUakJSYVhocVVWVkdha3hGVmtKUlZWVnpVVEJHUWxGNWVFeFJWVVpNVHpGR1FsRXpVa05NUjBaQ1VWZEZjMUpWUmtKU1UzaEVVVlZHUkV4RmRFSlJWWE0zVlZWR1JHTnJTWE5WVlVaQ1ZWTjRSbEZWUmtaTVJVNUNVVlZOYzFNd1JrSlRlblJNVVZWT2NWRnFkRXBSVlU1RlRFWkdRbEZXUlhOU1ZVWkNVbFIwVWxGVlRsTk1SekZEVVZWR2RGRnBlRVpSVlVaR1RFVnNRbEZWYXpkVlZVWkVaV3RKYzFkVlJrSlhVM2hHVVZWR1JreEZiRUpSVldzM1ZWVkdSR0pGU1hOaFZVcENVVmRzUTB4RlZrSlJWVlZ6VTFWR1FsTlVkRkpSVlU0eVVXbDRXbEZWUmxwTVJWWkNVVlZWYzFOVlJrSlRWSFJTVVZWT2MxRnBlSEJSYTBaQ1lWVkpjMUpWUmtKU1UzaEtVVlZHU2s4d2RFSlJNMmhEVHpCT1FsRXdXWE5STUVaQ1VYcDBRbEZWVmxoTVJrWkNVVlZGYzFZd1JrSldlWGhJVVZWR1NFOHdiRUpSTTNCRFRFWkdRbEZXUlhOU1ZVWkNVbFIwVWxGVlRsTk1Sa1pDVVZaRmMxSlZSa0pTVTNocVVWVkdhazh4UmtKUk0yaERURVU1UWxGVk9ITlNWVVpDVWxONE1WSXdSa0prVldNM1V6QkdSR0ZyWnpkVFZVWkVVa040VWxGVlJsSk1SVlpDVVZWVk4xVlZSa1JWYVhoU1VWVkdVa3hGVmtKUlZWVnpXVEJHUWxsNmRGSlJWVTQwVVdsNFVGRlZSbEJNUlZaQ1VWVlZjMDlGVGtKUlZHaEVUekIwUWxFemFFVlBNR3hDVVRCUmMxVlZSa0pWVTNoR1VWVkdSazh4UmtKUk1VbHpWVlZHUWxWVGVFWlJWVVpHVEVkT1FsRlhUVGRWVlVaRVpVVkpjMVF3UmtKVWVYaEdVVlZHUmt4RGRFUlJWVVZ5VVhwMFRGRlZUalpTUkhSS1VWVk9SVXhHUmtKUlZrVnpVbFZHUWxKVWRGSlJWVTVUVEVaR1FsRldSWE5TVlVaQ1VsTjRhbEZWUm1wUE1VWkNVVE5vUTB4Rk9VSlJWVGh6VWxWR1FsSlRkelJSYTBaQ1QwVkpOMU13UmtSbFJVMDNVMVZHUkZKRGVGSlJWVVpTVEVWV1FsRlZWVGRWVlVaRVZXbDRVbEZWUmxKTVJWWkNVVlZWYzFrd1JrSlplblJTVVZWT05GRnBlRkJSVlVaUVRFVldRbEZWVlhOTlJVcENVVlJDUTA4d2RFSlJNMEpFVHpCc1FsRXdVWE5WVlVaQ1ZWTjRSbEZWUmtaUE1VWkNVVEZKYzFWVlJrSlZVM2hHVVZWR1JreEdWa0pSVmxVM1ZWVkdSR05GU1hOVU1FWkNWSGw0UmxGVlJrWk1SMlJEVVZWR2JsRnFkRXhSVlUxNFVXcDBTbEZWVGtWTVJrWkNVVlpGYzFKVlJrSlNWSFJTVVZWT1UweEdSa0pSVmtWelVsVkdRbEpUZUZaUlZVWldUekZHUWxFelFrTk1SVGxDVVZVNGMxSlZSa0pTVTNoNFVXdEdRbU5WU1RkVE1FWkVUREJKTjFOVlJrUlNRM2hTVVZWR1VreEZWa0pSVlZVM1ZWVkdSRlZwZUZKUlZVWlNURVZXUWxGVlZYTldWVVpDVmxSMFVsRlZUbmRSYVhoUVVWVkdVRXhGVmtKUlZWVnpaRlZLUWxGWVZrTlBNSFJDVVRKd1JFOHdiRUpSTUZGelZWVkdRbFZUZUVaUlZVWkdUekZHUWxFeFNYTlZWVVpDVlZONFJsRlZSa1pNUmxaQ1VWWlZOMVZWUmtSalJVbHpWREJHUWxSNWVFWlJWVVpHVEVoV1ExRlZSakZSYW5STVVWVk9jVkY2ZEVwUlZVNUZURVpHUWxGV1JYTlNWVVpDVWxSMFVsRlZUbE5NUmtaQ1VWWkZjMUpWUmtKU1UzaFdVVlZHVms4eFJrSlJNMEpEVEVVNVFsRlZPSE5TVlVaQ1VsTjRNVkZyUmtKa1ZVazNVekJHUkdGclRUZFRWVVpFVWtONFVsRlZSbEpNUlZaQ1VWVlZOMVZWUmtSVmFYaFNVVlZHVWt4RlZrSlJWVlZ6VmxWR1FsWlVkRkpSVlU1M1VXbDRVRkZWUmxCTVJWWkNVVlZWYzJWVlNrSlJXR3hEVHpCMFFsRXlOVVJQTUd4Q1VUQlJjMVJWUmtKVVUzaEdVVlZHUms4eFJrSlJNRFJ6VlZWR1FsVlRlRVpSVlVaR1RFWldRbEZXVlRkVlZVWkVZMFZKYzFRd1JrSlVlWGhHVVZWR1JreEVVa05SVlVVd1VXcDBURkZWVGpCUmVuUktVVlZPUlV4Rk1VSlJWVEJ6VWxWR1FsSlVkRkpSVlU1UFRFWkdRbEZXUlhOU1ZVWkNVbE40VmxGVlJsWlBNVVpDVVROQ1EweEZPVUpSVlRoelVsVkdRbEpUZDNkU1ZVWkNUVVZWTjFNd1JrUmpSVmszVTFWR1JGSkRlRTVSVlVaT1RFVldRbEZWVlRkVlZVWkVWR2w0VWxGVlJsSk1SVlpDVVZWVmMxWlZSa0pXVkhSU1VWVk9kMUZwZUZCUlZVWlFURVZXUWxGVlZYTmhNRlpDVVZkMFJrOHdkRUpSZWxaR1R6QnNRbEV3VVhOVVZVWkNWRk40UmxGVlJrWlBNVVpDVVRBMGMxVlZSa0pWVTNoR1VWVkdSa3hHVmtKUlZsVTNWVlZHUkdORlNYTlVNRVpDVkhsNFJsRlZSa1pNUTNSRVVWVkZjbEY2ZEV4UlZVNDJVa1IwU2xGVlRrVk1SVEZDVVZVd2MxSlZSa0pTVkhSU1VWVk9UMHhHUmtKUlZrVnpVbFZHUWxKVGVGWlJWVVpXVHpGR1FsRXpRa05NUlRsQ1VWVTRjMUpWUmtKU1UzZ3pVa1ZHUW1Rd1VUZFRNRVpFWWtWVk4xRXdSa1JTYVhoRVVWVkdSRWx1TUQwaUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dleUIyWVd4MVpUb2dkSEoxWlNCOUtUdGNibVY0Y0c5eWRITXVaWFJvUlhKeWIzSnpJRDBnZG05cFpDQXdPMXh1WTI5dWMzUWdZMnhoYzNObGMxOHhJRDBnY21WeGRXbHlaU2hjSWk0dlkyeGhjM05sYzF3aUtUdGNibU52Ym5OMElIVjBhV3h6WHpFZ1BTQnlaWEYxYVhKbEtGd2lMaTkxZEdsc2Mxd2lLVHRjYm1OdmJuTjBJR1Z5Y205eVgyTnZibk4wWVc1MGMxOHhJRDBnY21WeGRXbHlaU2hjSWk0dlpYSnliM0l0WTI5dWMzUmhiblJ6WENJcE8xeHVaWGh3YjNKMGN5NWxkR2hGY25KdmNuTWdQU0I3WEc0Z0lDQWdjbkJqT2lCN1hHNGdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnS2lCSFpYUWdZU0JLVTA5T0lGSlFReUF5TGpBZ1VHRnljMlVnS0Mwek1qY3dNQ2tnWlhKeWIzSXVYRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNCd1lYSnpaVG9nS0dGeVp5a2dQVDRnWjJWMFJYUm9Tbk52YmxKd1kwVnljbTl5S0dWeWNtOXlYMk52Ym5OMFlXNTBjMTh4TG1WeWNtOXlRMjlrWlhNdWNuQmpMbkJoY25ObExDQmhjbWNwTEZ4dUlDQWdJQ0FnSUNBdktpcGNiaUFnSUNBZ0lDQWdJQ29nUjJWMElHRWdTbE5QVGlCU1VFTWdNaTR3SUVsdWRtRnNhV1FnVW1WeGRXVnpkQ0FvTFRNeU5qQXdLU0JsY25KdmNpNWNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUdsdWRtRnNhV1JTWlhGMVpYTjBPaUFvWVhKbktTQTlQaUJuWlhSRmRHaEtjMjl1VW5CalJYSnliM0lvWlhKeWIzSmZZMjl1YzNSaGJuUnpYekV1WlhKeWIzSkRiMlJsY3k1eWNHTXVhVzUyWVd4cFpGSmxjWFZsYzNRc0lHRnlaeWtzWEc0Z0lDQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDQWdLaUJIWlhRZ1lTQktVMDlPSUZKUVF5QXlMakFnU1c1MllXeHBaQ0JRWVhKaGJYTWdLQzB6TWpZd01pa2daWEp5YjNJdVhHNGdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0JwYm5aaGJHbGtVR0Z5WVcxek9pQW9ZWEpuS1NBOVBpQm5aWFJGZEdoS2MyOXVVbkJqUlhKeWIzSW9aWEp5YjNKZlkyOXVjM1JoYm5Selh6RXVaWEp5YjNKRGIyUmxjeTV5Y0dNdWFXNTJZV3hwWkZCaGNtRnRjeXdnWVhKbktTeGNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlFZGxkQ0JoSUVwVFQwNGdVbEJESURJdU1DQk5aWFJvYjJRZ1RtOTBJRVp2ZFc1a0lDZ3RNekkyTURFcElHVnljbTl5TGx4dUlDQWdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lDQWdiV1YwYUc5a1RtOTBSbTkxYm1RNklDaGhjbWNwSUQwK0lHZGxkRVYwYUVwemIyNVNjR05GY25KdmNpaGxjbkp2Y2w5amIyNXpkR0Z1ZEhOZk1TNWxjbkp2Y2tOdlpHVnpMbkp3WXk1dFpYUm9iMlJPYjNSR2IzVnVaQ3dnWVhKbktTeGNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlFZGxkQ0JoSUVwVFQwNGdVbEJESURJdU1DQkpiblJsY201aGJDQW9MVE15TmpBektTQmxjbkp2Y2k1Y2JpQWdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJR2x1ZEdWeWJtRnNPaUFvWVhKbktTQTlQaUJuWlhSRmRHaEtjMjl1VW5CalJYSnliM0lvWlhKeWIzSmZZMjl1YzNSaGJuUnpYekV1WlhKeWIzSkRiMlJsY3k1eWNHTXVhVzUwWlhKdVlXd3NJR0Z5Wnlrc1hHNGdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnS2lCSFpYUWdZU0JLVTA5T0lGSlFReUF5TGpBZ1UyVnlkbVZ5SUdWeWNtOXlMbHh1SUNBZ0lDQWdJQ0FnS2lCUVpYSnRhWFJ6SUdsdWRHVm5aWElnWlhKeWIzSWdZMjlrWlhNZ2FXNGdkR2hsSUZzZ0xUTXlNRGs1SUR3OUlDMHpNakF3TlNCZElISmhibWRsTGx4dUlDQWdJQ0FnSUNBZ0tpQkRiMlJsY3lBdE16SXdNREFnZEdoeWIzVm5hQ0F0TXpJd01EUWdZWEpsSUhKbGMyVnlkbVZrSUdKNUlFVkpVQzB4TkRjMExseHVJQ0FnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJQ0FnYzJWeWRtVnlPaUFvYjNCMGN5a2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGdmNIUnpJSHg4SUhSNWNHVnZaaUJ2Y0hSeklDRTlQU0FuYjJKcVpXTjBKeUI4ZkNCQmNuSmhlUzVwYzBGeWNtRjVLRzl3ZEhNcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZEZkR2hsY21WMWJTQlNVRU1nVTJWeWRtVnlJR1Z5Y205eWN5QnRkWE4wSUhCeWIzWnBaR1VnYzJsdVoyeGxJRzlpYW1WamRDQmhjbWQxYldWdWRDNG5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSHNnWTI5a1pTQjlJRDBnYjNCMGN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hUblZ0WW1WeUxtbHpTVzUwWldkbGNpaGpiMlJsS1NCOGZDQmpiMlJsSUQ0Z0xUTXlNREExSUh4OElHTnZaR1VnUENBdE16SXdPVGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjF3aVkyOWtaVndpSUcxMWMzUWdZbVVnWVc0Z2FXNTBaV2RsY2lCemRXTm9JSFJvWVhRNklDMHpNakE1T1NBOFBTQmpiMlJsSUR3OUlDMHpNakF3TlNjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHZGxkRVYwYUVwemIyNVNjR05GY25KdmNpaGpiMlJsTENCdmNIUnpLVHRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdJQ0FxSUVkbGRDQmhiaUJGZEdobGNtVjFiU0JLVTA5T0lGSlFReUJKYm5aaGJHbGtJRWx1Y0hWMElDZ3RNekl3TURBcElHVnljbTl5TGx4dUlDQWdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lDQWdhVzUyWVd4cFpFbHVjSFYwT2lBb1lYSm5LU0E5UGlCblpYUkZkR2hLYzI5dVVuQmpSWEp5YjNJb1pYSnliM0pmWTI5dWMzUmhiblJ6WHpFdVpYSnliM0pEYjJSbGN5NXljR011YVc1MllXeHBaRWx1Y0hWMExDQmhjbWNwTEZ4dUlDQWdJQ0FnSUNBdktpcGNiaUFnSUNBZ0lDQWdJQ29nUjJWMElHRnVJRVYwYUdWeVpYVnRJRXBUVDA0Z1VsQkRJRkpsYzI5MWNtTmxJRTV2ZENCR2IzVnVaQ0FvTFRNeU1EQXhLU0JsY25KdmNpNWNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUhKbGMyOTFjbU5sVG05MFJtOTFibVE2SUNoaGNtY3BJRDArSUdkbGRFVjBhRXB6YjI1U2NHTkZjbkp2Y2lobGNuSnZjbDlqYjI1emRHRnVkSE5mTVM1bGNuSnZja052WkdWekxuSndZeTV5WlhOdmRYSmpaVTV2ZEVadmRXNWtMQ0JoY21jcExGeHVJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNvZ1IyVjBJR0Z1SUVWMGFHVnlaWFZ0SUVwVFQwNGdVbEJESUZKbGMyOTFjbU5sSUZWdVlYWmhhV3hoWW14bElDZ3RNekl3TURJcElHVnljbTl5TGx4dUlDQWdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lDQWdjbVZ6YjNWeVkyVlZibUYyWVdsc1lXSnNaVG9nS0dGeVp5a2dQVDRnWjJWMFJYUm9Tbk52YmxKd1kwVnljbTl5S0dWeWNtOXlYMk52Ym5OMFlXNTBjMTh4TG1WeWNtOXlRMjlrWlhNdWNuQmpMbkpsYzI5MWNtTmxWVzVoZG1GcGJHRmliR1VzSUdGeVp5a3NYRzRnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0tpQkhaWFFnWVc0Z1JYUm9aWEpsZFcwZ1NsTlBUaUJTVUVNZ1ZISmhibk5oWTNScGIyNGdVbVZxWldOMFpXUWdLQzB6TWpBd015a2daWEp5YjNJdVhHNGdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0IwY21GdWMyRmpkR2x2YmxKbGFtVmpkR1ZrT2lBb1lYSm5LU0E5UGlCblpYUkZkR2hLYzI5dVVuQmpSWEp5YjNJb1pYSnliM0pmWTI5dWMzUmhiblJ6WHpFdVpYSnliM0pEYjJSbGN5NXljR011ZEhKaGJuTmhZM1JwYjI1U1pXcGxZM1JsWkN3Z1lYSm5LU3hjYmlBZ0lDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0lDQXFJRWRsZENCaGJpQkZkR2hsY21WMWJTQktVMDlPSUZKUVF5Qk5aWFJvYjJRZ1RtOTBJRk4xY0hCdmNuUmxaQ0FvTFRNeU1EQTBLU0JsY25KdmNpNWNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUcxbGRHaHZaRTV2ZEZOMWNIQnZjblJsWkRvZ0tHRnlaeWtnUFQ0Z1oyVjBSWFJvU25OdmJsSndZMFZ5Y205eUtHVnljbTl5WDJOdmJuTjBZVzUwYzE4eExtVnljbTl5UTI5a1pYTXVjbkJqTG0xbGRHaHZaRTV2ZEZOMWNIQnZjblJsWkN3Z1lYSm5LU3hjYmlBZ0lDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0lDQXFJRWRsZENCaGJpQkZkR2hsY21WMWJTQktVMDlPSUZKUVF5Qk1hVzFwZENCRmVHTmxaV1JsWkNBb0xUTXlNREExS1NCbGNuSnZjaTVjYmlBZ0lDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNBZ0lHeHBiV2wwUlhoalpXVmtaV1E2SUNoaGNtY3BJRDArSUdkbGRFVjBhRXB6YjI1U2NHTkZjbkp2Y2lobGNuSnZjbDlqYjI1emRHRnVkSE5mTVM1bGNuSnZja052WkdWekxuSndZeTVzYVcxcGRFVjRZMlZsWkdWa0xDQmhjbWNwTEZ4dUlDQWdJSDBzWEc0Z0lDQWdjSEp2ZG1sa1pYSTZJSHRjYmlBZ0lDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0lDQXFJRWRsZENCaGJpQkZkR2hsY21WMWJTQlFjbTkyYVdSbGNpQlZjMlZ5SUZKbGFtVmpkR1ZrSUZKbGNYVmxjM1FnS0RRd01ERXBJR1Z5Y205eUxseHVJQ0FnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJQ0FnZFhObGNsSmxhbVZqZEdWa1VtVnhkV1Z6ZERvZ0tHRnlaeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2RsZEVWMGFGQnliM1pwWkdWeVJYSnliM0lvWlhKeWIzSmZZMjl1YzNSaGJuUnpYekV1WlhKeWIzSkRiMlJsY3k1d2NtOTJhV1JsY2k1MWMyVnlVbVZxWldOMFpXUlNaWEYxWlhOMExDQmhjbWNwTzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNvZ1IyVjBJR0Z1SUVWMGFHVnlaWFZ0SUZCeWIzWnBaR1Z5SUZWdVlYVjBhRzl5YVhwbFpDQW9OREV3TUNrZ1pYSnliM0l1WEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQjFibUYxZEdodmNtbDZaV1E2SUNoaGNtY3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm5aWFJGZEdoUWNtOTJhV1JsY2tWeWNtOXlLR1Z5Y205eVgyTnZibk4wWVc1MGMxOHhMbVZ5Y205eVEyOWtaWE11Y0hKdmRtbGtaWEl1ZFc1aGRYUm9iM0pwZW1Wa0xDQmhjbWNwTzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNvZ1IyVjBJR0Z1SUVWMGFHVnlaWFZ0SUZCeWIzWnBaR1Z5SUZWdWMzVndjRzl5ZEdWa0lFMWxkR2h2WkNBb05ESXdNQ2tnWlhKeWIzSXVYRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNCMWJuTjFjSEJ2Y25SbFpFMWxkR2h2WkRvZ0tHRnlaeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2RsZEVWMGFGQnliM1pwWkdWeVJYSnliM0lvWlhKeWIzSmZZMjl1YzNSaGJuUnpYekV1WlhKeWIzSkRiMlJsY3k1d2NtOTJhV1JsY2k1MWJuTjFjSEJ2Y25SbFpFMWxkR2h2WkN3Z1lYSm5LVHRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdJQ0FxSUVkbGRDQmhiaUJGZEdobGNtVjFiU0JRY205MmFXUmxjaUJPYjNRZ1EyOXVibVZqZEdWa0lDZzBPVEF3S1NCbGNuSnZjaTVjYmlBZ0lDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNBZ0lHUnBjMk52Ym01bFkzUmxaRG9nS0dGeVp5a2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHZGxkRVYwYUZCeWIzWnBaR1Z5UlhKeWIzSW9aWEp5YjNKZlkyOXVjM1JoYm5Selh6RXVaWEp5YjNKRGIyUmxjeTV3Y205MmFXUmxjaTVrYVhOamIyNXVaV04wWldRc0lHRnlaeWs3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnS2lCSFpYUWdZVzRnUlhSb1pYSmxkVzBnVUhKdmRtbGtaWElnUTJoaGFXNGdUbTkwSUVOdmJtNWxZM1JsWkNBb05Ea3dNU2tnWlhKeWIzSXVYRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNCamFHRnBia1JwYzJOdmJtNWxZM1JsWkRvZ0tHRnlaeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2RsZEVWMGFGQnliM1pwWkdWeVJYSnliM0lvWlhKeWIzSmZZMjl1YzNSaGJuUnpYekV1WlhKeWIzSkRiMlJsY3k1d2NtOTJhV1JsY2k1amFHRnBia1JwYzJOdmJtNWxZM1JsWkN3Z1lYSm5LVHRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdJQ0FxSUVkbGRDQmhJR04xYzNSdmJTQkZkR2hsY21WMWJTQlFjbTkyYVdSbGNpQmxjbkp2Y2k1Y2JpQWdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJR04xYzNSdmJUb2dLRzl3ZEhNcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYjNCMGN5QjhmQ0IwZVhCbGIyWWdiM0IwY3lBaFBUMGdKMjlpYW1WamRDY2dmSHdnUVhKeVlYa3VhWE5CY25KaGVTaHZjSFJ6S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblJYUm9aWEpsZFcwZ1VISnZkbWxrWlhJZ1kzVnpkRzl0SUdWeWNtOXljeUJ0ZFhOMElIQnliM1pwWkdVZ2MybHVaMnhsSUc5aWFtVmpkQ0JoY21kMWJXVnVkQzRuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhzZ1kyOWtaU3dnYldWemMyRm5aU3dnWkdGMFlTQjlJRDBnYjNCMGN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hiV1Z6YzJGblpTQjhmQ0IwZVhCbGIyWWdiV1Z6YzJGblpTQWhQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjF3aWJXVnpjMkZuWlZ3aUlHMTFjM1FnWW1VZ1lTQnViMjVsYlhCMGVTQnpkSEpwYm1jbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnWTJ4aGMzTmxjMTh4TGtWMGFHVnlaWFZ0VUhKdmRtbGtaWEpGY25KdmNpaGpiMlJsTENCdFpYTnpZV2RsTENCa1lYUmhLVHRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0I5TEZ4dWZUdGNiaTh2SUVsdWRHVnlibUZzWEc1bWRXNWpkR2x2YmlCblpYUkZkR2hLYzI5dVVuQmpSWEp5YjNJb1kyOWtaU3dnWVhKbktTQjdYRzRnSUNBZ1kyOXVjM1FnVzIxbGMzTmhaMlVzSUdSaGRHRmRJRDBnY0dGeWMyVlBjSFJ6S0dGeVp5azdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QmpiR0Z6YzJWelh6RXVSWFJvWlhKbGRXMVNjR05GY25KdmNpaGpiMlJsTENCdFpYTnpZV2RsSUh4OElIVjBhV3h6WHpFdVoyVjBUV1Z6YzJGblpVWnliMjFEYjJSbEtHTnZaR1VwTENCa1lYUmhLVHRjYm4xY2JtWjFibU4wYVc5dUlHZGxkRVYwYUZCeWIzWnBaR1Z5UlhKeWIzSW9ZMjlrWlN3Z1lYSm5LU0I3WEc0Z0lDQWdZMjl1YzNRZ1cyMWxjM05oWjJVc0lHUmhkR0ZkSUQwZ2NHRnljMlZQY0hSektHRnlaeWs3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJqYkdGemMyVnpYekV1UlhSb1pYSmxkVzFRY205MmFXUmxja1Z5Y205eUtHTnZaR1VzSUcxbGMzTmhaMlVnZkh3Z2RYUnBiSE5mTVM1blpYUk5aWE56WVdkbFJuSnZiVU52WkdVb1kyOWtaU2tzSUdSaGRHRXBPMXh1ZlZ4dVpuVnVZM1JwYjI0Z2NHRnljMlZQY0hSektHRnlaeWtnZTF4dUlDQWdJR2xtSUNoaGNtY3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCaGNtY2dQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdXMkZ5WjEwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCcFppQW9kSGx3Wlc5bUlHRnlaeUE5UFQwZ0oyOWlhbVZqZENjZ0ppWWdJVUZ5Y21GNUxtbHpRWEp5WVhrb1lYSm5LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2V5QnRaWE56WVdkbExDQmtZWFJoSUgwZ1BTQmhjbWM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYldWemMyRm5aU0FtSmlCMGVYQmxiMllnYldWemMyRm5aU0FoUFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0owMTFjM1FnYzNCbFkybG1lU0J6ZEhKcGJtY2diV1Z6YzJGblpTNG5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJiYldWemMyRm5aU0I4ZkNCMWJtUmxabWx1WldRc0lHUmhkR0ZkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQmJYVHRjYm4xY2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV1JoZEdFNllYQndiR2xqWVhScGIyNHZhbk52Ymp0aVlYTmxOalFzWlhsS01scFlTbnBoVnpsMVNXcHZla3hEU20xaFYzaHNTV3B2YVZwWVNubGlNMHA2VEcxd2VrbHBkMmxqTWpreFkyMU9iRlZ0T1haa1EwazJTV2xKYzBsdVRuWmtXRXBxV2xoTmFVOXNjMmxNYVRSMll6Tktha3d5Vm5samJUbDVZM2sxTUdONVNtUk1RMHAxV1ZjeGJHTjVTVFpYTVRCelNXMHhhR05JUW5CaWJXUjZTV3B2YVU5NmN6ZFJWVVpDVVZONE1WRXdSa0ppTUZVM1VWVkdSR05GVlhOaVZVNUNVVlJhUkU4d1JrSlJlbVJFVEVoV1JWRlZSWEpSZW5SQ1VWZFdjMUY1ZUZKUlZVWkNURVpPUWxGV1RYTlNNRVpDVW5wMFNsRlZUakpSYVhoSVVWVkdTRXhGVmtKUlZWVTNWVlZHUmxORWN6ZFdNRVpHVW5wMFVsRlZUa2xNUlhSQ1VWVnpjMUpWUmtKU1UzaEVVVlZHU2t4RlpFSlJWemxEVEVWV1FsRlZWWE5TVlVaQ1VsTjRSRkZWUmtSTVIzUkRVVlZHY2xGcGVFUlJWVTUzVWtOM01GRnJSa0pXVTNoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFeFJWVVpNVEVWV1FsRlZWWE5TTUVaQ1VubDRSRkZWVFhoUmFuUlNVVlZXUlU5NmRGaFJWVlpJVHpGR1FsRXdaM05aTUVaQ1dYbDRSbEZWUmtaTVJVNUNVVlZyYzFJd1JrSmlNRWx6VWxWR1FsSlRlRVpSVlVaR1RFVk9RbEZWVFhOaE1FcENVVmQwUTB4RlRrSlJlbVJGVEVSU1ExRlZSbFpNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4SFRrSlJWMDF6VWxWR1FsSlRlRWhSVlVaSVRFVk9RbEV5TlVSUE1VWkNVbFZSTjA4eFpFSlNWV00zVlZWR1JGTkRlR2hSVlVab1RFVldRbEZWVlhOUk1FWkNVMU40U0ZGVlJuWlJhWGhHVVZWR1JreEZWa0pSVlZWelVUQkdRbEY1ZUhKUmEwWkNZVEJKYzFFd1JrUk9WVkZ6VGtWS1FsRldWWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFsVlJrSlpVM2hHVVZWR1JreEZaRUpSVldOelVUQkdSR0pGVFRkVlZVWkdVa1J6TjFZd1JrWlNlblJTVVZWT1NVeEhUa0pSVjAxelVsVkdRbEpUZUVSUlZVWktURVZrUWxGWE9VTk1SVlpDVVZWVmMxSlZSa0pTVTNoRVVWVkdSRXhIZEVOUlZVWnlVV2w0UkZGVlRUTlNRM2N3VVd0R1FsWlRlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0YWxGVlJtcE1SVlpDVVZWVmMxSXdSa0pTZVhoRVVWVk9kVkY2ZEZKUlZWWkZUM3AwV0ZGVlZraFBNVVpDVVRCbmMxVlZSa0pWVTNoR1VWVkdSa3hGVGtKUlZXdHpVakJHUW1Jd1NYTlNWVVpDVWxONFJsRlZSa1pNUlU1Q1VWVk5jMkV3U2tKUlYzUkRURVZPUWxFeldrVk1SRkpEVVZWR1ZreEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVpHUWxGV1JYTlNWVVpDVWxONFNGRlZSa2hNUlU1Q1VYcGtRMDh4UmtKU1ZWRTNUM3B6TjFZd1JrcFNlblJTVVZWT1NVeEZNVUpSVlRCelVsVkdRbEpUZUVSUlZVWktURVZzUWxGVVNrTk1SVlpDVVZWVmMxSlZSa0pTVkhSYVVWVk9ObEY1ZUVwUlZVWktURVZPUWxGVlRYTlRWVVpDVTFONFNsRlZSa3BNUlRsQ1VWVTRjMU5WUmtKVFUzaE1VVlZHVEV4R1JrSlJWa1Z6VTFWR1FsTlRlRXhSVlVaTVRFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoR1VWVkdSazh5WkVOUlZVMHhVa040VGxGVlJrNU1SV3hDVVZWcmMxTXdSa0pUZVhoRVVWVkdSRXhIYkVaUlZVWndVbE40UkZGVlJrUk1SVTVDVVZWTk4xbFZSa1JqUlZrM1YxVkdSRkpEZUU1UlZVWk9URVZXUWxGVlZYTlRWVVpDVTFONFJsRlZSa1pNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkU4eGJFSlJNMUpEVEVWc1FsRlZhM05STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFVd1JrSlZlWGhFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUVwUlZVWktURVZzUWxGVmEzTlNNRVpDVW5sNFJGRlZSa1JNUlhSQ1VWVnpjMU5WUmtKVFUzaEtVVlZHU2t4RlpFSlJWV056VVRCR1FsRjVlRXhSVlVaTVRFVldRbEZWVlRkYU1FcENVWHBrUlV4Rk1VSlJWVEJ6VTFWR1FsTlRlRXhSVlVaTVRFVk9RbEV5U1hOTE1GSkNVVk4wUlV4RlRrSlJNbWhHVEVWT1FsRlZUVGRaVlVaRVUwUjBXbEZWVGtWTVJUbENVVlU0YzJFd1NrSlJWM1JEVEVWT1FsRlZUWE5UVlVaQ1UxTjRSbEZWUmtaTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFOHhSa0pSTTJoRVRFVk9RbEZWVFRkVlZVWkdVa1J6TjFZd1JrWlNlblJTVVZWT1NVeEdiRUpSVm10elVsVkdRbEpUZUVSUlZVWktURVZrUWxGWE9VTk1SVlpDVVZWVmMxSlZSa0pTVTNoRVVWVkdSRXhIZEVOUlZVWnlVV2w0UkZGVlRYcFNRM2N3VVd0R1FsWlRlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0V2xGVlJscE1SVlpDVVZWVmMxSXdSa0pTZVhoRVVWVk9jVkY2ZEZKUlZWWkZUM3AwV0ZGVlZraFBNVVpDVVRCbmMxb3dTa0pSVjJSRFRFVldRbEZWVlhOUk1FWkNVMU40U0ZGVlJuWlJhWGhHVVZWR1JreEZWa0pSVlZWelVUQkdRbEY1ZUhKUmEwWkNZVEJKYzFFd1JrUk1NRkZ6VGtWS1FsRldWWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFvd1NrSlJWMlJEVEVWV1FsRlZWWE5TTUVaQ1VubDRSRkZWVG5sUmVuUlNVVlZXUlU5NmRGaFJWVlpJVHpGR1FsRXdaM05pVlVwQ1VWY3hRMHhGVmtKUlZWVnpVVEJHUWxOVGVFaFJWVVoyVVdsNFJsRlZSa1pNUlZaQ1VWVlZjMUV3UmtKUmVYaHlVV3RHUW1Fd1NYTlJNRVpFWWtWVmMwNUZTa0pSVmxWelVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRYTmlWVXBDVVZjeFEweEZWa0pSVlZWelVqQkdRbEo1ZUVSUlZVNDBVWHAwVWxGVlZrVlBlblJZVVZWV1NFOHhSa0pSTUdkellsVktRbEZYTVVOTVJWWkNVVlZWYzFFd1JrSlRVM2hJVVZWR2RsRnBlRVpSVlVaR1RFVldRbEZWVlhOUk1FWkNVWGw0Y2xGclJrSmhNRWx6VVRCR1JHSkZWWE5PUlVwQ1VWWlZjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6WWxWS1FsRlhNVU5NUlZaQ1VWVlZjMUl3UmtKU2VYaEVVVlZPTkZGNmRGSlJWVlpGVDNwMFdGRlZWa2hQTVVaQ1VUQm5jMkV3U2tKUlYzUkRURVZXUWxGVlZYTlJNRVpDVTFONFNGRlZSblpSYVhoR1VWVkdSa3hGVmtKUlZWVnpVVEJHUWxGNWVISlJhMFpDWVRCSmMxRXdSa1JoYTFWelRrVktRbEZXVlhOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMyRXdTa0pSVjNSRFRFVldRbEZWVlhOU01FWkNVbmw0UkZGVlRqSlJlblJTVVZWV1JVOTZkRmhSVlZaSVR6RkdRbEV3WjNOWlZVWkNXVk40UmxGVlJrWk1SVTVDVVZWcmMxSXdSa0ppTUVselVsVkdRbEpUZUVaUlZVWkdURVZPUWxGVlRYTmhNRXBDVVZkMFEweEZUa0pSZWxaRlRFUlNRMUZWUmxaTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEhSa0pSVjBWelVsVkdRbEpUZUVoUlZVWklURVZPUWxFeWVFUlBNSFJDVVRCWk4xTlZSa1pTUTNoU1VWVkdVa3hGVmtKUlZWVTNWVlZHUmxWcWN6ZFdNRVpHVW5wMFVsRlZUa2xNUnpGRFVWVkdkRkZwZUVaUlZVWkdURVZPUWxGVmEzTlNNRVpDWWpCSmMxSlZSa0pTVTNoR1VWVkdSazh4YkVKUmVUbEVURVU1UWxGVk9ITmlWVXBDVVZjeFEweEZUa0pSTTJoRFRFUlNRMUZWUmxaTVJVNUNVVlZOYzFWVlJrSlZVM2hFVVZWR1JFeEhNVU5SVlVaMFVXbDRSbEZWUmtaTVJXUkNVVlZqYzFFd1JrUk9NRTF6VVRCR1FsRjZkRkpSVlU1TFRFVk9RbEZWVFRkVlZVWkdVa1J6TjFZd1JrWlNlblJTVVZWT1NVeEdiRUpSVm10elVsVkdRbEpUZUVSUlZVWktURVZrUWxGWE9VTk1SVlpDVVZWVmMxSlZSa0pTVkhSYVVWVk9ORkY1ZUZCUlZVWlFURWN4UTFGVlJuUlJhWGhFVVZWT05GRnBkekJSYTBaQ1ZsTjRSRkZWUmtSTVJrWkNVVlpGYzFFd1JrSlJlWGhhVVZWR1dreEZWa0pSVlZWelVqQkdRbEo1ZUVSUlZVNHdVWGw0UkZGVlJrUlBNVVpDVVRCdmMxRXdSa0pSZW5SU1VWVldSVTk2ZEZoUlZWWklUekZHUWxFd1ozTmhWVXBDVVZkc1EweEZWa0pSVlZWelVUQkdRbE5UZUVoUlZVWjJVV2w0UmxGVlJrWk1SVlpDVVZWVk4xZFZSa1JPTUUxelZEQkdRbFI1ZUhSUmEwWkNZbFZKYzFFd1JrUmxSVWx6VGtWS1FsRldWWE5STUVaQ1VYbDRVbEZWUmxKTVJVNUNVVlZOYzJGVlNrSlJWMnhEVEVWV1FsRlZWWE5TTUVaQ1VubDRSRkZWVFhwUmVYaEVVVlZHUkU4eFJrSlJNRzl6VVRCR1FsRjZkRkpSVlZaRlQzcDBXRkZWVmtoUE1VWkNVVEJuYzFkVlJrSlhVM2hHVVZWR1JreEZUa0pSVld0elVqQkdRbUl3U1hOU1ZVWkNVbE40UmxGVlJrWlBNV3hDVVROb1JFeEZPVUpSVlRoellsVktRbEZYTVVOTVJVNUNVVE5vUTB4RVVrTlJWVVpXVEVWT1FsRlZUWE5WVlVaQ1ZWTjRSRkZWUmtSTVJteENVVlpyYzFKVlJrSlNVM2hJVVZWR1NFeEZUa0pSTTFKRVRFVk9RbEZWVFRkVlZVWkVVMmw0UkZGVlJrUlBNVVpDVWxWUk4wOHhaRUpTVldNM1ZWVkdSRk5EZUhCUmEwWkNZVlZKYzFKVlJrSlNVM2hFVVZWR1NreEZaRUpSVnpsRFRFVldRbEZWVlhOU1ZVWkNVbFIwV2xGVlRUTlJlWGhRVVZWR1VFeEhNVU5SVlVaMFVXbDRSRkZWVGpSUmFYY3dVV3RHUWxaVGVFUlJWVVpFVEVaR1FsRldSWE5STUVaQ1VYbDRjRkZyUmtKaFZVbHpVbFZHUWxKVGVFaFJWVVpJVEVWT1FsRjZUa1JNUlU1Q1VWVk5OMVZWUmtSVGFYaEVVVlZHUkU4eFJrSlNWVkUzVHpGa1FsSlZZemRWVlVaRVUwTjRUbEZWUms1TVJWWkNVVlZWYzFFd1JrSlRVM2hLVVZWRmVWRnBlRVpSVlVaR1RFVldRbEZWVlRkWFZVWkVaV3ROYzFOVlJrSlRVM2hFVVZWR1JFeEZiRUpSVld0elUxVkdRbE5UZUZCUlZVWlFURVZzUWxGVmEzTlRNRVpDVTNsNFVsRlZSbEpNUld4Q1VWVnJjMU13UmtKVGVYaEVVVlZHUkV4Rk9VSlJWVGh6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOU1ZVWkNVbFIwYmxGclJrUk9WVkZ6VkZWR1FsUlRlRXBSVlVaS1RFVjBRbEZWYzNOUk1FWkNVWGw0ZWxKVlJrSmpNRlZ6VVRCR1FsRjVlRVJSVlVaRVR6SkdRbEV6Y0VkUE1XeENVVEJSYzFSVlJrSlVVM2hHVVZWR1JreEZiRUpSVld0elVsVkdRbEpUZUZCUlZVWlFURVZXUWxGVlZYTlRWVVpDVTFONFJsRlZSa1pNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkU4eGJFSlJNMHBFVEVWc1FsRlZhM05STUVaQ1VYbDRVRkZWUmxCTVJXeENVVlZyYzFRd1JrSlVlWGhRVVZWR1VFeEZkRUpSVlhOelZWVkdRbFZUZUVaUlZVWkdUekprUTFGVlRYcFJlWGhPVVZWR1RreEZiRUpSVld0elV6QkdRbE41ZUVSUlZVNXBURWhHUkZGVlJuaFJlWGhFVVZWT01GRjVlRVJSVlVaRVR6SkdRbEV3WnpkWFZVWkVVa040VUZGVlJsQk1SV3hDVVZWcmMwc3dTa0pSV0VaRFRFVk9RbEZWVFhOVFZVWkNVMU40UmxGVlJrWk1SVGxDVVZVNGMxSlZSa0pTVTNoS1VWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTQwVWtONFJGRlZSa1JQTUhSQ1VUQlpOMUV3UmtSU2FYaEVVVlZHUkU4d1JrSlNWVmx6VmpCR1FsWjZkRUpSVlZaWlRFWk9RbEZXVFhOaE1FcENVVmQwUTB4RlRrSlJWV3R6VTFWR1FsZFRlRVpSVlVaR1RFVmtRbEZYT1VOUE1HeENVWGs1UlV4Rk1VSlJWVEJ6VVRCR1FsRjVlRkJSVlVaUVRFVldRbEZWVlhOVFZVWkNVMU40UkZGVlJrUk1SV1JDVVZWamMxVXdSa0pWZVhoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVHpCc1FsRXpXa1JNUlRsQ1VWVTRjMU5WUmtKVFUzZDNVV3RHUWxvd1NYTlJNRVpFWld0SmMxTlZSa0pUVTNoR1VWVk9TMHhGT1VKUlZUaHpVMVZHUWxOVGQzZFJhMFpDWVRCSmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpVbFZHUkdKclRYTlRWVVpDVTFONFJGRlZUazFNUlU1Q1VWVk5OMUZWUmtSVGFYaEVVVlZHUkU4d1JrSlNWVkZ6VlRCR1FsVjVlSFJSYTBaQ1lsVkpjMUV3UmtKVFUzaEtVVlZHV2t4RlZrSlJWVlZ6VWpCR1FtSXdTVGRUVlVaRVlVVlZjMVJWUmtKVVUzaEVVVlZHUkV4Rk9VSlJWVGh6VWxWR1FsSlRlRXBSVlVaS1RFVk9RbEZWVFhOU01FWkNVbmw0VkZGVlJsUk1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMDNVMVZHUkdSclRYTlVNRVpDVkhsNFNsRlZSa3BNUTNSRFVWVkdlRkZwZUVSUlZVMDFVV2w0U2xGVlJrcE1SVlpDVVRCdmMxUXdSa0pVZVhoS1VWVkdTa3hFUWtOUlZVWnlVV2w0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoR1VWVk9kVkY1ZUVwUlZVWktURVZPUWxFd2QzTlJNRVpDVVhwMFFsRlZUa3RNUlU1Q1VWVk5OMUZWUmtaU1EzaFVVVlZHVkV4R1RrSlJWazF6VVRCR1FsTlRlRWhSVlVaMlVXcDBTbEZWVGpSUmVYaEtVVlZHU2t4RlpFSlJWV056VWxWR1FsSlVkRkpSVlU1UlRFVnNRbEZWYTNOVU1FWkNWSGw0U0ZGVlJraE1SWFJDVVZWemMxVlZSa0pWVTNoR1VWVkdSazh4YkVKUmVrNURURVU1UWxGVk9ITlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVuUlVVVlZPYTA4eVJrSlJWVEJ6VTFWR1FsTlRlRkJSVlVaUVRFVmtRbEZWWTNOVE1FWkNVM2w0VWxGVlJsSk1SV3hDVVZWcmMxRXdSa0pSZVhoTVVWVkdURXhGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSbEZWUmtaUE1XeENVVE53UlV4Rk1VSlJWVEJ6VWxWR1FsSlRlRkJSVlVaUVRFVldRbEZWVlhOVFZVWkNVMU40UmxGVlJrWk1SV1JDVVZWamMxSXdSa0pTZVhoRVVWVkdSRTh4YkVKU1ZHeERURVZzUWxGVmEzTlVNRVpDVkhsNFNsRlZSa3BNUlRsQ1VWVTRjMVF3UmtKVWVYaE1VVlZHVEV4R1JrSlJWa1Z6VWxWR1FsSlVkRzVSYTBaRVRWVk5jMVJWUmtKVVUzaEtVVlZHU2t4RmRFSlJWWE56VVRCR1FsRjVkelJSYTBaQ1QwVkpjMUV3UmtKUmVYaEVVVlZHUkU4eVJrSlJNbkJGVHpGc1FsRXdVWE5VTUVaQ1ZIbDRSRkZWUmtSTVJUbENVVlU0YzFOVlJrSlRVM2hVVVZWR1ZFeEZWa0pSVlZWelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRUZFZNRVpFWTJ0Tk4xTXdSa1JTYW5SS1VWVk9SVXhGT1VKUlZUaHpVbFZHUWxKVGVFUlJWVVpFVHpCR1FsRXhiM05STUVaQ1VYbEtPU0lzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN0lIWmhiSFZsT2lCMGNuVmxJSDBwTzF4dVpYaHdiM0owY3k1blpYUk5aWE56WVdkbFJuSnZiVU52WkdVZ1BTQmxlSEJ2Y25SekxuTmxjbWxoYkdsNlpVVnljbTl5SUQwZ1pYaHdiM0owY3k1RmRHaGxjbVYxYlZCeWIzWnBaR1Z5UlhKeWIzSWdQU0JsZUhCdmNuUnpMa1YwYUdWeVpYVnRVbkJqUlhKeWIzSWdQU0JsZUhCdmNuUnpMbVYwYUVWeWNtOXljeUE5SUdWNGNHOXlkSE11WlhKeWIzSkRiMlJsY3lBOUlIWnZhV1FnTUR0Y2JtTnZibk4wSUdOc1lYTnpaWE5mTVNBOUlISmxjWFZwY21Vb1hDSXVMMk5zWVhOelpYTmNJaWs3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pGZEdobGNtVjFiVkp3WTBWeWNtOXlYQ0lzSUhzZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN3Z1oyVjBPaUJtZFc1amRHbHZiaUFvS1NCN0lISmxkSFZ5YmlCamJHRnpjMlZ6WHpFdVJYUm9aWEpsZFcxU2NHTkZjbkp2Y2pzZ2ZTQjlLVHRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJa1YwYUdWeVpYVnRVSEp2ZG1sa1pYSkZjbkp2Y2x3aUxDQjdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVXNJR2RsZERvZ1puVnVZM1JwYjI0Z0tDa2dleUJ5WlhSMWNtNGdZMnhoYzNObGMxOHhMa1YwYUdWeVpYVnRVSEp2ZG1sa1pYSkZjbkp2Y2pzZ2ZTQjlLVHRjYm1OdmJuTjBJSFYwYVd4elh6RWdQU0J5WlhGMWFYSmxLRndpTGk5MWRHbHNjMXdpS1R0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSW5ObGNtbGhiR2w2WlVWeWNtOXlYQ0lzSUhzZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN3Z1oyVjBPaUJtZFc1amRHbHZiaUFvS1NCN0lISmxkSFZ5YmlCMWRHbHNjMTh4TG5ObGNtbGhiR2w2WlVWeWNtOXlPeUI5SUgwcE8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVoyVjBUV1Z6YzJGblpVWnliMjFEYjJSbFhDSXNJSHNnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3dnWjJWME9pQm1kVzVqZEdsdmJpQW9LU0I3SUhKbGRIVnliaUIxZEdsc2MxOHhMbWRsZEUxbGMzTmhaMlZHY205dFEyOWtaVHNnZlNCOUtUdGNibU52Ym5OMElHVnljbTl5YzE4eElEMGdjbVZ4ZFdseVpTaGNJaTR2WlhKeWIzSnpYQ0lwTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWlhSb1JYSnliM0p6WENJc0lIc2daVzUxYldWeVlXSnNaVG9nZEhKMVpTd2daMlYwT2lCbWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQmxjbkp2Y25OZk1TNWxkR2hGY25KdmNuTTdJSDBnZlNrN1hHNWpiMjV6ZENCbGNuSnZjbDlqYjI1emRHRnVkSE5mTVNBOUlISmxjWFZwY21Vb1hDSXVMMlZ5Y205eUxXTnZibk4wWVc1MGMxd2lLVHRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbVZ5Y205eVEyOWtaWE5jSWl3Z2V5QmxiblZ0WlhKaFlteGxPaUIwY25WbExDQm5aWFE2SUdaMWJtTjBhVzl1SUNncElIc2djbVYwZFhKdUlHVnljbTl5WDJOdmJuTjBZVzUwYzE4eExtVnljbTl5UTI5a1pYTTdJSDBnZlNrN1hHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFrWVhSaE9tRndjR3hwWTJGMGFXOXVMMnB6YjI0N1ltRnpaVFkwTEdWNVNqSmFXRXA2WVZjNWRVbHFiM3BNUTBwdFlWZDRiRWxxYjJsaFZ6VnJXbGhuZFdGdVRXbE1RMHA2WWpOV2VWa3lWbE5pTWprd1NXcHZhVWxwZDJsak1qa3hZMjFPYkdONVNUWlhlVWwxVEdrNWVtTnRUWFpoVnpWcldsaG5kV1JJVFdsWVUzZHBZbTFHZEZwWVRXbFBiSFJrVEVOS2RGbFlRbmRoVnpWdVkzbEpOa2xxY3pkUE1FWkNVVlZGYzJSVlRrSlJWemxHVHpCR1FsWlhlRVpNUjJ4SVVWWmFVRXhFUWtOUlZVWnVVV2w0VUZGV1ZsRlBNRVpDVVRKb1EweElUa2hSVm1nMVVXbDNjbEZyUmtKalZVbHpWREJHV0dWclNUZFJWVVpYWkd0SmMySlZUa0pTVjJ4RFR6QkdRbFV5V1hOTE1GcENWbXRGYzJNd1NrSlJWMDF6VkRCR1ZsRlVkRUpSVlU1clRFY3hTRkZXYUc1UmFYZDNVV3RHUW1Fd1NYTlVNRVpZWVVWSk4xRlZSbFZqUlVselkxVk9RbEZZUmtSUE1FWkNVekkxUkV4RVFrZFJWWGhRVEVkMFExRlZSbFJNUlRsQ1V6RkJOMUZWUmt0WFEzZ3hVa1ZHUWtzd1RUZFJWVVpJVGpCTmMwMXJXa0pUUlRoelRrVktRbEZXVlhOVU1FWklWVU5LT1NJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVaWGh3YjNKMGN5NXpaWEpwWVd4cGVtVkZjbkp2Y2lBOUlHVjRjRzl5ZEhNdWFYTldZV3hwWkVOdlpHVWdQU0JsZUhCdmNuUnpMbWRsZEUxbGMzTmhaMlZHY205dFEyOWtaU0E5SUdWNGNHOXlkSE11U2xOUFRsOVNVRU5mVTBWU1ZrVlNYMFZTVWs5U1gwMUZVMU5CUjBVZ1BTQjJiMmxrSURBN1hHNWpiMjV6ZENCbGNuSnZjbDlqYjI1emRHRnVkSE5mTVNBOUlISmxjWFZwY21Vb1hDSXVMMlZ5Y205eUxXTnZibk4wWVc1MGMxd2lLVHRjYm1OdmJuTjBJR05zWVhOelpYTmZNU0E5SUhKbGNYVnBjbVVvWENJdUwyTnNZWE56WlhOY0lpazdYRzVqYjI1emRDQkdRVXhNUWtGRFMxOUZVbEpQVWw5RFQwUkZJRDBnWlhKeWIzSmZZMjl1YzNSaGJuUnpYekV1WlhKeWIzSkRiMlJsY3k1eWNHTXVhVzUwWlhKdVlXdzdYRzVqYjI1emRDQkdRVXhNUWtGRFMxOU5SVk5UUVVkRklEMGdKMVZ1YzNCbFkybG1hV1ZrSUdWeWNtOXlJRzFsYzNOaFoyVXVJRlJvYVhNZ2FYTWdZU0JpZFdjc0lIQnNaV0Z6WlNCeVpYQnZjblFnYVhRdUp6dGNibU52Ym5OMElFWkJURXhDUVVOTFgwVlNVazlTSUQwZ2UxeHVJQ0FnSUdOdlpHVTZJRVpCVEV4Q1FVTkxYMFZTVWs5U1gwTlBSRVVzWEc0Z0lDQWdiV1Z6YzJGblpUb2daMlYwVFdWemMyRm5aVVp5YjIxRGIyUmxLRVpCVEV4Q1FVTkxYMFZTVWs5U1gwTlBSRVVwTEZ4dWZUdGNibVY0Y0c5eWRITXVTbE5QVGw5U1VFTmZVMFZTVmtWU1gwVlNVazlTWDAxRlUxTkJSMFVnUFNBblZXNXpjR1ZqYVdacFpXUWdjMlZ5ZG1WeUlHVnljbTl5TGljN1hHNHZLaXBjYmlBcUlFZGxkSE1nZEdobElHMWxjM05oWjJVZ1ptOXlJR0VnWjJsMlpXNGdZMjlrWlN3Z2IzSWdZU0JtWVd4c1ltRmpheUJ0WlhOellXZGxJR2xtSUhSb1pTQmpiMlJsSUdoaGMxeHVJQ29nYm04Z1kyOXljbVZ6Y0c5dVpHbHVaeUJ0WlhOellXZGxMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQm5aWFJOWlhOellXZGxSbkp2YlVOdlpHVW9ZMjlrWlN3Z1ptRnNiR0poWTJ0TlpYTnpZV2RsSUQwZ1JrRk1URUpCUTB0ZlRVVlRVMEZIUlNrZ2UxeHVJQ0FnSUdsbUlDaE9kVzFpWlhJdWFYTkpiblJsWjJWeUtHTnZaR1VwS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdOdlpHVlRkSEpwYm1jZ1BTQmpiMlJsTG5SdlUzUnlhVzVuS0NrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hvWVhOTFpYa29aWEp5YjNKZlkyOXVjM1JoYm5Selh6RXVaWEp5YjNKV1lXeDFaWE1zSUdOdlpHVlRkSEpwYm1jcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlhKeWIzSmZZMjl1YzNSaGJuUnpYekV1WlhKeWIzSldZV3gxWlhOYlkyOWtaVk4wY21sdVoxMHViV1Z6YzJGblpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2FYTktjMjl1VW5CalUyVnlkbVZ5UlhKeWIzSW9ZMjlrWlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsZUhCdmNuUnpMa3BUVDA1ZlVsQkRYMU5GVWxaRlVsOUZVbEpQVWw5TlJWTlRRVWRGTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQm1ZV3hzWW1GamEwMWxjM05oWjJVN1hHNTlYRzVsZUhCdmNuUnpMbWRsZEUxbGMzTmhaMlZHY205dFEyOWtaU0E5SUdkbGRFMWxjM05oWjJWR2NtOXRRMjlrWlR0Y2JpOHFLbHh1SUNvZ1VtVjBkWEp1Y3lCM2FHVjBhR1Z5SUhSb1pTQm5hWFpsYmlCamIyUmxJR2x6SUhaaGJHbGtMbHh1SUNvZ1FTQmpiMlJsSUdseklHOXViSGtnZG1Gc2FXUWdhV1lnYVhRZ2FHRnpJR0VnYldWemMyRm5aUzVjYmlBcUwxeHVablZ1WTNScGIyNGdhWE5XWVd4cFpFTnZaR1VvWTI5a1pTa2dlMXh1SUNBZ0lHbG1JQ2doVG5WdFltVnlMbWx6U1c1MFpXZGxjaWhqYjJSbEtTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dUlDQWdJR052Ym5OMElHTnZaR1ZUZEhKcGJtY2dQU0JqYjJSbExuUnZVM1J5YVc1bktDazdYRzRnSUNBZ2FXWWdLR1Z5Y205eVgyTnZibk4wWVc1MGMxOHhMbVZ5Y205eVZtRnNkV1Z6VzJOdlpHVlRkSEpwYm1kZEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvYVhOS2MyOXVVbkJqVTJWeWRtVnlSWEp5YjNJb1kyOWtaU2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNibjFjYm1WNGNHOXlkSE11YVhOV1lXeHBaRU52WkdVZ1BTQnBjMVpoYkdsa1EyOWtaVHRjYmk4cUtseHVJQ29nVTJWeWFXRnNhWHBsY3lCMGFHVWdaMmwyWlc0Z1pYSnliM0lnZEc4Z1lXNGdSWFJvWlhKbGRXMGdTbE5QVGlCU1VFTXRZMjl0Y0dGMGFXSnNaU0JsY25KdmNpQnZZbXBsWTNRdVhHNGdLaUJOWlhKbGJIa2dZMjl3YVdWeklIUm9aU0JuYVhabGJpQmxjbkp2Y2lkeklIWmhiSFZsY3lCcFppQnBkQ0JwY3lCaGJISmxZV1I1SUdOdmJYQmhkR2xpYkdVdVhHNGdLaUJKWmlCMGFHVWdaMmwyWlc0Z1pYSnliM0lnYVhNZ2JtOTBJR1oxYkd4NUlHTnZiWEJoZEdsaWJHVXNJR2wwSUhkcGJHd2dZbVVnY0hKbGMyVnlkbVZrSUc5dUlIUm9aVnh1SUNvZ2NtVjBkWEp1WldRZ2IySnFaV04wSjNNZ1pHRjBZUzV2Y21sbmFXNWhiRVZ5Y205eUlIQnliM0JsY25SNUxseHVJQ292WEc1bWRXNWpkR2x2YmlCelpYSnBZV3hwZW1WRmNuSnZjaWhsY25KdmNpd2dleUJtWVd4c1ltRmphMFZ5Y205eUlEMGdSa0ZNVEVKQlEwdGZSVkpTVDFJc0lITm9iM1ZzWkVsdVkyeDFaR1ZUZEdGamF5QTlJR1poYkhObExDQjlJRDBnZTMwcElIdGNiaUFnSUNCMllYSWdYMkVzSUY5aU8xeHVJQ0FnSUdsbUlDZ2habUZzYkdKaFkydEZjbkp2Y2lCOGZGeHVJQ0FnSUNBZ0lDQWhUblZ0WW1WeUxtbHpTVzUwWldkbGNpaG1ZV3hzWW1GamEwVnljbTl5TG1OdlpHVXBJSHg4WEc0Z0lDQWdJQ0FnSUhSNWNHVnZaaUJtWVd4c1ltRmphMFZ5Y205eUxtMWxjM05oWjJVZ0lUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVFhWemRDQndjbTkyYVdSbElHWmhiR3hpWVdOcklHVnljbTl5SUhkcGRHZ2dhVzUwWldkbGNpQnVkVzFpWlhJZ1kyOWtaU0JoYm1RZ2MzUnlhVzVuSUcxbGMzTmhaMlV1SnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNobGNuSnZjaUJwYm5OMFlXNWpaVzltSUdOc1lYTnpaWE5mTVM1RmRHaGxjbVYxYlZKd1kwVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbGNuSnZjaTV6WlhKcFlXeHBlbVVvS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdZMjl1YzNRZ2MyVnlhV0ZzYVhwbFpDQTlJSHQ5TzF4dUlDQWdJR2xtSUNobGNuSnZjaUFtSmx4dUlDQWdJQ0FnSUNCMGVYQmxiMllnWlhKeWIzSWdQVDA5SUNkdlltcGxZM1FuSUNZbVhHNGdJQ0FnSUNBZ0lDRkJjbkpoZVM1cGMwRnljbUY1S0dWeWNtOXlLU0FtSmx4dUlDQWdJQ0FnSUNCb1lYTkxaWGtvWlhKeWIzSXNJQ2RqYjJSbEp5a2dKaVpjYmlBZ0lDQWdJQ0FnYVhOV1lXeHBaRU52WkdVb1pYSnliM0l1WTI5a1pTa3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdYMlZ5Y205eUlEMGdaWEp5YjNJN1hHNGdJQ0FnSUNBZ0lITmxjbWxoYkdsNlpXUXVZMjlrWlNBOUlGOWxjbkp2Y2k1amIyUmxPMXh1SUNBZ0lDQWdJQ0JwWmlBb1gyVnljbTl5TG0xbGMzTmhaMlVnSmlZZ2RIbHdaVzltSUY5bGNuSnZjaTV0WlhOellXZGxJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWeWFXRnNhWHBsWkM1dFpYTnpZV2RsSUQwZ1gyVnljbTl5TG0xbGMzTmhaMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYUdGelMyVjVLRjlsY25KdmNpd2dKMlJoZEdFbktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sY21saGJHbDZaV1F1WkdGMFlTQTlJRjlsY25KdmNpNWtZWFJoTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnlhV0ZzYVhwbFpDNXRaWE56WVdkbElEMGdaMlYwVFdWemMyRm5aVVp5YjIxRGIyUmxLSE5sY21saGJHbDZaV1F1WTI5a1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCelpYSnBZV3hwZW1Wa0xtUmhkR0VnUFNCN0lHOXlhV2RwYm1Gc1JYSnliM0k2SUdGemMybG5iazl5YVdkcGJtRnNSWEp5YjNJb1pYSnliM0lwSUgwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJSE5sY21saGJHbDZaV1F1WTI5a1pTQTlJR1poYkd4aVlXTnJSWEp5YjNJdVkyOWtaVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiV1Z6YzJGblpTQTlJQ2hmWVNBOUlHVnljbTl5S1NBOVBUMGdiblZzYkNCOGZDQmZZU0E5UFQwZ2RtOXBaQ0F3SUQ4Z2RtOXBaQ0F3SURvZ1gyRXViV1Z6YzJGblpUdGNiaUFnSUNBZ0lDQWdjMlZ5YVdGc2FYcGxaQzV0WlhOellXZGxJRDBnS0cxbGMzTmhaMlVnSmlZZ2RIbHdaVzltSUcxbGMzTmhaMlVnUFQwOUlDZHpkSEpwYm1jblhHNGdJQ0FnSUNBZ0lDQWdJQ0EvSUcxbGMzTmhaMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lEb2dabUZzYkdKaFkydEZjbkp2Y2k1dFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUNBZ2MyVnlhV0ZzYVhwbFpDNWtZWFJoSUQwZ2V5QnZjbWxuYVc1aGJFVnljbTl5T2lCaGMzTnBaMjVQY21sbmFXNWhiRVZ5Y205eUtHVnljbTl5S1NCOU8xeHVJQ0FnSUgxY2JpQWdJQ0JqYjI1emRDQnpkR0ZqYXlBOUlDaGZZaUE5SUdWeWNtOXlLU0E5UFQwZ2JuVnNiQ0I4ZkNCZllpQTlQVDBnZG05cFpDQXdJRDhnZG05cFpDQXdJRG9nWDJJdWMzUmhZMnM3WEc0Z0lDQWdhV1lnS0hOb2IzVnNaRWx1WTJ4MVpHVlRkR0ZqYXlBbUppQmxjbkp2Y2lBbUppQnpkR0ZqYXlBbUppQjBlWEJsYjJZZ2MzUmhZMnNnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQWdJSE5sY21saGJHbDZaV1F1YzNSaFkyc2dQU0J6ZEdGamF6dGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSE5sY21saGJHbDZaV1E3WEc1OVhHNWxlSEJ2Y25SekxuTmxjbWxoYkdsNlpVVnljbTl5SUQwZ2MyVnlhV0ZzYVhwbFJYSnliM0k3WEc0dkx5QkpiblJsY201aGJGeHVablZ1WTNScGIyNGdhWE5LYzI5dVVuQmpVMlZ5ZG1WeVJYSnliM0lvWTI5a1pTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCamIyUmxJRDQ5SUMwek1qQTVPU0FtSmlCamIyUmxJRHc5SUMwek1qQXdNRHRjYm4xY2JtWjFibU4wYVc5dUlHRnpjMmxuYms5eWFXZHBibUZzUlhKeWIzSW9aWEp5YjNJcElIdGNiaUFnSUNCcFppQW9aWEp5YjNJZ0ppWWdkSGx3Wlc5bUlHVnljbTl5SUQwOVBTQW5iMkpxWldOMEp5QW1KaUFoUVhKeVlYa3VhWE5CY25KaGVTaGxjbkp2Y2lrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFOWlhbVZqZEM1aGMzTnBaMjRvZTMwc0lHVnljbTl5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHVnljbTl5TzF4dWZWeHVablZ1WTNScGIyNGdhR0Z6UzJWNUtHOWlhaXdnYTJWNUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNodlltb3NJR3RsZVNrN1hHNTlYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxa1lYUmhPbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNDdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcHRZVmQ0YkVscWIybGtXRkp3WWtoTmRXRnVUV2xNUTBwNllqTldlVmt5VmxOaU1qa3dTV3B2YVVscGQybGpNamt4WTIxT2JHTjVTVFpYZVVsMVRHazVlbU50VFhaa1dGSndZa2hOZFdSSVRXbFlVM2RwWW0xR2RGcFlUV2xQYkhSa1RFTktkRmxZUW5kaFZ6VnVZM2xKTmtscWN6ZFBNRVpDVVZWRmMyUlZVa0pSVkZKRlR6QkdRbEY2VmtWTVNGWkVVVlZHTlZKVWRFSlJWVlkyVWxONFRsRlZSazVNUnpGRFVWVkdkRkZwZUVoUlZVWklURVJTUTFGVlJsWk1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhHUmtKUlZrVnpVVEJHUWxGNmRFSlJWVTUzVWtONFRsRlZSazVNUjJSRFVWVkdibEZwZUVoUlZVWklURVJhUlZGVlJUSlNRM2hFVVZWR1JFOHdSa0pSTTFwSFRFVXhRbEZWTUhOWk1FWkNXWGw0U0ZGVlJYSlJhblJLVVZWT2NWSkRlRXBSVlVaS1RFVldRbEZWVlhOaVZVcENVVmN4UTA4d2JFSlJNM0JEVEVVNVFsRlZPSE5TVlVaQ1VsTjRjbEZyUmtKaE1FbHpVVEJHUWxGNWVIUlJhMFpDWWxWSmMxRXdSa0pSZW5SRVVWVk9jVkpEZUVSUlZVWkVUekJHUWxKV1kzTlZWVVpDVVZOM01sRnJSa0pPYTBselVqQkdRbEo1ZDNsUmEwWkNUV3RKYzFFd1JrSlJlblJDVVZWc05sSlVjemRQTUdSQ1VqQmpOMUZWUmtSVFEzaFVVVlZHYmxGcGVISlJhMFpDWVRCSmMxRXdSa1JoUlUxelUxVkdRbGRUZUVaUlZVNWhURWQwUTFGVlJYZFJhWGh1VVd0R1Fsb3dTVGRUVlVaR1RWVk5jMU5WUmtKVFUzaE9VVlZHVGt4RlRrSlJWVTF6VlRCR1FsVjVlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0UmxGVlJrWlBNVVpDVVhwR1EweEZNVUpSVlRCelZsVkdRbFpUZUVoUlZVWklURVZzUWxGVmEzTlJNRVpDVVhsNFVsRlZSbEpNUlZaQ1VWVlZjMUV3UmtKUmVuUlNVVlZXZFZGNWVFcFJWVVpLVEVVeFFsRlZNSE5STUVaQ1VYbDNNbEZyUmtKV2VYaEdVVlZHUmt4R1ZrSlJWbFZ6VVRCR1FsRjVlRVpSVlVaR1R6RnNRbEV5TlVSTVJUbENVVlU0YzA1clNrSlJWbU56VVRCR1FsRjVlRlpSVlVWNVVXbDRSRkZWUmtSTVJVNUNVVlZOYzFRd1JrSlVlWGhFVVZWR1JFOHhUa0pSTTNCRlR6RkdRbEV3VVhOVFZVWkNVMU40ZGxGclJrSmlNRWx6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOU1ZVWkNVbFIwV2xGVlRUVlJhWGhRVVZWR1VFeElSa1JSVlVVeVVXbDRSRkZWUmtSUE1VNUNVVE5TUkU4d2RFSlJNRmszVTFWR1JGSkRlRkJSVlVaUVRFZFdRbEZYVlhOUk1FWkNVWHAwUWxGVlRqWlJhWGhFVVZWR1JFOHdSa0phYTFGeldqQlNRbHBWVFRkUlZVWkdVa1J6TjA4d1pFSlNNR00zVVZWR1JGTkRlRlJSVlVadVVXbDRXRkZWUmxoTVJVNUNVVlZOYzFOVlJrSlhWSFJLVVZWT01GRjVlRXBSVlVaS1RFVk9RbEZWVFhOVVZVWkNWRk40UkZGVlJrUk1SazVDVVZaTmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpVbFZHUWxKVWRGSlJWVTE2VVdsNFVGRlZSbEJNUlhSQ1VWVnpjMUV3UmtKUmVuUk1VVlZPYTA4d2JFSlNWVkZ6VkZWR1FsUlRlRlpSVlVaV1RFVmtRbEZWWTNOVFZVWkNVMU40UkZGVlJrUk1Sa1pDVVZaRmMxSlZSa0pTVTNoRVVWVkdSRTh3YkVKUk1qVkVURVZzUWxGVmEzTk9hMHBDVVZaamMxRXdSa0pSZVhoV1VWVkZlVkZwZUVSUlZVWkVURVZXUWxGVlZUZFZWVVpFVGxWTmMxUXdSa0pVZVhoS1VWVkdTa3hGVGtKUlZVMDNVekJHUkZscWRFcFJWVlpGVEVWc1FsRlZhM05pTUVwQ1VWYzVRMHhGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVWV1FsRlZWVGRWVlVaRVQxVkpjMVF3UmtKVWVYaEtVVlZHU2t4RlRrSlJWVTAzVXpCR1JGbHFkRXBSVlU1RlRFVTVRbEZWT0hOVE1FWkNVM2w0UkZGVlJrUlBNRVpDVVRKWmMxRXdSa0pSZW5SQ1VWZFNSVXhIZEVSUlYwNUVUekJHUWxKVlVUZFBlbk0zVHpCa1FsTXdZemRSVlVaRVUwTjRWRkZWUm01UmFYaHFVVlZHYWt4RlRrSlJlbFpEVEVWMFFsRlhUWE5TVlVaRVdrTjRSbEZWVGtaTVIwWkNVVmRGYzFJd1JrSlNlWGhxVVZWR2FreEZWa0pSZW14RFRFZDBRMUZWUm5KUmFYaElVVlZHU0V4RmRFSlJWWE56VWpCR1JFMHdTWE5TTUVaQ1VubDRSbEZWUmtaUGVuUktVVlZrVDB4RmJFSlJNRlZ6VVRCR1FsRjVlR2hSVlVab1R6RkdRbEV5VVhOUk1FWkNVWGw0VGxGVlJrNU1SVTVDVVZWTmMxVXdSa0pWZVhoRVVWVkdSRXhIUmtKUlYwVnpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUVGRWVlVaRVkydE5jMVF3UmtKVWVYaG9VVlZHYUV4RlRrSlJWVTF6VkRCR1FsUjVlRXhSVlVaTVRFWkdRbEZXUlhOU1ZVWkVaV3ROTjFWVlJrUlJVM2hPVVZWR1RreEZiRUpSVld0elV6QkdRbE41ZUVSUlZVNXBURVJDUmxGVlJYZFNVM2hFVVZWTmVsSlRlRVJSVlVaRVR6QjBRbEV3WnpkVFZVWkdVa040U2xGVlJrcE1SWFJDVVZWemMxZFZSa0pYVTNkM1VXdEdRbG93U1hOU1ZVWkNVbFIwVWxGVlRubFJlWGhRVVZWR1VFeEZkRUpSVlhOelVUQkdRbEY1ZUZSUlZVWlVURVZXUWxGVlZYTlJNRVpDVVhwMFRGRlZUWGhSYW5SS1VWVldSVXhGTVVKUlZUQnpWbFZHUWxaVGVFaFJWVVl6VVhsNFJsRlZSa1pNUlU1Q1VWVk5OMU5WUmtaTk1GRnpVMVZHUkZKVGVFeFJWVVpNVHpGR1FsRXdkM05VTUVaQ1ZIbDRURkZWUmt4TVJYUkNVVlZ6YzFWVlJrSlZWSFJTVVZWT05sRnBlRVJSVlVaRVRFVjBRbEZWYzNOUk1FWkNVWGw0VUZGVlJsQk1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSRTh4UmtKUk0wcERURVV4UWxGVk1ITlJNRVpDVVhsNFRGRlZSbTVSZVhoR1VWVkdSa3hGTVVKUlZUQnpVVEJHUWxGNmRGSlJWVTV2VWtONFdGRlZSbGhNUlU1Q1VWVlZjMU13UmtKaU1FMXpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5TVlVaRVpHdFJOMVZWUmtSUlUzaE9VVlZHVGt4Rk1VSlJWVEJ6VWpCR1FsSjVlRXhSVlVVd1VYbDRSRkZWUmtSUE1VWkNVWHBXUlV4R1ZrSlJWbFZ6VVRCR1FsRjVlRXBSVlVaS1RFVmtRbEZWWTNOVVZVWkNWRk40UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZW5SU1VWVlZOVkZwZUVwUlZVWktURVV4UWxGVk1ITlJNRVpDVVhsNFVGRlZSbEJNUld4Q1VWVnJjMVF3UmtKVWVYaE9VVlZHVGt4RlRrSlJWVTF6VkRCR1FsUjVlRXhSVlVaTVRFWkdRbEZXUlhOU1ZVWkNVbFIwV2xGVlRqUlNRM2hXVVZWR1ZreEZUa0pSVlUxelZEQkdRbFI1ZUVoUlZVWklURVV4UWxGVk1ITlJNRVpDVVhsNFVGRlZSbEJNUlU1Q1VWVk5OMWRWUmtaalJVMXpVMVZHUWxOVGVFNVJWVVpPVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSbEZWUmtaTVJURkNVVlV3YzFFd1JrSlJlWGhHVVZWR1JrOHlaRU5SVlUxNFVXbDRWbEZWUmxaTVJVNUNVVlZOYzFOVlJrSlRVM2hJVVZWR1NFeEZNVUpSVlRCelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRUZFpWVVpFVERCSk4xVXdSa1JTYW5Sb1VWVkdUazh4YkVKUk1IZHpWbFZHUWxaVGVFUlJWVVpFVEVVNVFsRlZPSE5TTUVaQ1VubDRjbEZyUmtKaE1FbHpVVEJHUkdORlRYTldWVVpDWlZWTmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUk1taEZURVZPUWxGVlRUZFhWVVpHVW1sNFZsRlZSbFpNUlU1Q1VWVk5jMU5WUmtKVFUzaElVVlZHU0V4RlZrSlJWVlZ6V1ZWR1FsbFRlRVpSVlVaR1RFY3hRMUZWUm5SUmFYaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFRkVk1FWkVZV3RWTjFNd1JrUlNhblJVVVZWR1RrOHhSa0pSTUhkelZsVkdRbFpUZUVSUlZVWkVURVZzUWxGVmEzTlNNRVpDVW5sNGFGRlZSbWhNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkU4eFJrSlNXRXBFVEVVeFFsRlZNSE5VTUVaQ1ZIbDRWRkZWUmtwTVJYUkNVVmRGYzAxRlRrSlJWVlZ6VkRCR1FsUjVlRVJSVlVaRVR6RkdRbEpZYUVSTVJsWkNVVlpWYzFFd1JrSlJlWGhRVVZWR1VFeEZaRUpSVldOelVUQkdSR0pyU1hOVU1FWkNWSGw0U2xGVlJrcE1SVGxDVVZVNGMxUXdSa0pVZVhoTVVWVkdURXhHUmtKUlZrVTNWMVZHUkdORlRYTlJNRVpDVVhsNFJGRlZSa1JNUlRsQ1VWVTROMWRWUmtSV1EzaEVVVlZHUkV4RlRrSlJWVTF6V1ZWR1FsbFRlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkVUVlZKYzFFd1JrSlJlblJTVVZWT1IweEdWa0pSVmxWelVUQkdRbEY1ZUVwUlZVWktURVZrUWxGVlkzTlNWVVpDVWxONGFGRlZSbWhNUlZaQ1VWVlZjMkpWU2tKUlZ6RkRURVZPUWxGVlRYTlRNRVpDVTNsNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVuUk1VVlZPY1ZKVWRFcFJWVlpGVEVVeFFsRlZNSE5UTUVaQ1UzbDRWRkZWUmtwTVJYUkNVVmRGYzAxRlRrSlJWVlZ6VXpCR1FsTjVlRVJSVlVaRVR6QnNRbEpZUWtSTVJXeENVVlZyYzJFd1NrSlJWM1JEVEVWc1FsRlZhM05UTUVaQ1UzbDRTbEZWUmtwTVJYUkNVVlZ6YzFOVlJrSlRVM2hRVVZWR1VFeEZkRUpSVlhOelV6QkdRbE41ZUZKUlZVWlNURVZXUWxGVlZUZFZWVVpFWTJ0VmMxWlZSa0pXVTNoRVVWVkdSRXhGZEVKUlZYTnpVakJHUWxKNWVFeFJWVVpNVEVWT1FsRlZUVGRUTUVaRVRWVkpOMU5WUmtSU1EzaFFVVlZHVUV4R1ZrSlJXR1JFVEVWT1FsRlZUVGRSVlVaRVlrVlJjMUV3UmtKUmVuUkNVVmQ0UmxKRGVETlJNRVp5VWxWTk4xRlZSa1pTUTNoWVVWVkdXRTh3UmtKU1ZtZHpWVEJHUWxWNWVIWlJhMFpDWWpCSmMxRXdSa0pSZVhoS1VWVkdXazh3YkVKUk0yaEVURVU1UWxGVk9ITlRWVVpDVTFONFNsRlZSa3BNUlU1Q1VWVk5jMU13UmtKVGVYaEtVVlZHU2t4RmJFSlJWV3R6VTFWR1FsTlRlRVJSVlVaRVRFVjBRbEZWYzNOUk1FWkNVWHAwUWxGVlRYaFJlWGhFVVZWR1JFOHdSa0pTVlZGelZUQkdRbFY1ZUhSUmEwWkNZbFZKYzFFd1JrSlJlWGhNVVZWR2FrOHdiRUpSTTNCRVRFVnNRbEZWYTNOVE1FWkNVM2w0U2xGVlJrcE1SVGxDVVZVNGMxTXdSa0pUZVhoTVVWVkdURXhHUmtKUlZrVnpVMVZHUWxOVGVFUlJWVVpFVEVWMFFsRlZjM05STUVaQ1VYbDRVRkZWUmxCTVJVNUNVVlZOYzFNd1JrSlRlWGhFVVZWR1JFeEZWa0pSVlZVM1ZWVkdSRXd3VVhOVU1FWkNWSGw0VGxGVlJrNU1SVTVDVVZWTmMxUlZSa0pVVTNoRVVWVkdSRXhGVmtKUlZWVnpVbFZHUWxKVGVFeFJWVVpNVEVWT1FsRlZUWE5STUVaQ1VYcDBURkZWVG5GUmVuUktVVlZPUlV4Rk9VSlJWVGh6VXpCR1FsTjVlRVJSVlVaRVR6QkdRbEV5V1hOUk1FWkNVWHAwUWxGVlZrVk1SazVDVVZaTmMxUlZSa0pVVTNoRVVWVkdSRXhGWkVKUlZGSkRURVZXUWxGVlZYTlNNRVpDVm5wMFNsRlZUakpTUTNoUVVWVkdVRXhGTVVKUlZUQnpVVEJHUWxGNWVGUlJWVVpVVEVWT1FsRlZUWE5aTUVaQ1dYbDRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhJVVZWR1NFeEZWa0pSVlZWelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRUZFJWVVpFWlVWUmMxRXdSa0pSZVVvNUlpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnpkSEpwYm1kcFpubGNibk4wY21sdVoybG1lUzVrWldaaGRXeDBJRDBnYzNSeWFXNW5hV1o1WEc1emRISnBibWRwWm5rdWMzUmhZbXhsSUQwZ1pHVjBaWEp0YVc1cGMzUnBZMU4wY21sdVoybG1lVnh1YzNSeWFXNW5hV1o1TG5OMFlXSnNaVk4wY21sdVoybG1lU0E5SUdSbGRHVnliV2x1YVhOMGFXTlRkSEpwYm1kcFpubGNibHh1ZG1GeUlHRnljaUE5SUZ0ZFhHNTJZWElnY21Wd2JHRmpaWEpUZEdGamF5QTlJRnRkWEc1Y2JpOHZJRkpsWjNWc1lYSWdjM1J5YVc1bmFXWjVYRzVtZFc1amRHbHZiaUJ6ZEhKcGJtZHBabmtnS0c5aWFpd2djbVZ3YkdGalpYSXNJSE53WVdObGNpa2dlMXh1SUNCa1pXTnBjbU1vYjJKcUxDQW5KeXdnVzEwc0lIVnVaR1ZtYVc1bFpDbGNiaUFnZG1GeUlISmxjMXh1SUNCcFppQW9jbVZ3YkdGalpYSlRkR0ZqYXk1c1pXNW5kR2dnUFQwOUlEQXBJSHRjYmlBZ0lDQnlaWE1nUFNCS1UwOU9Mbk4wY21sdVoybG1lU2h2WW1vc0lISmxjR3hoWTJWeUxDQnpjR0ZqWlhJcFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVnpJRDBnU2xOUFRpNXpkSEpwYm1kcFpua29iMkpxTENCeVpYQnNZV05sUjJWMGRHVnlWbUZzZFdWektISmxjR3hoWTJWeUtTd2djM0JoWTJWeUtWeHVJQ0I5WEc0Z0lIZG9hV3hsSUNoaGNuSXViR1Z1WjNSb0lDRTlQU0F3S1NCN1hHNGdJQ0FnZG1GeUlIQmhjblFnUFNCaGNuSXVjRzl3S0NsY2JpQWdJQ0JwWmlBb2NHRnlkQzVzWlc1bmRHZ2dQVDA5SURRcElIdGNiaUFnSUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h3WVhKMFd6QmRMQ0J3WVhKMFd6RmRMQ0J3WVhKMFd6TmRLVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCd1lYSjBXekJkVzNCaGNuUmJNVjFkSUQwZ2NHRnlkRnN5WFZ4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVZ6WEc1OVhHNW1kVzVqZEdsdmJpQmtaV05wY21NZ0tIWmhiQ3dnYXl3Z2MzUmhZMnNzSUhCaGNtVnVkQ2tnZTF4dUlDQjJZWElnYVZ4dUlDQnBaaUFvZEhsd1pXOW1JSFpoYkNBOVBUMGdKMjlpYW1WamRDY2dKaVlnZG1Gc0lDRTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ1ptOXlJQ2hwSUQwZ01Ec2dhU0E4SUhOMFlXTnJMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCcFppQW9jM1JoWTJ0YmFWMGdQVDA5SUhaaGJDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUlEMGdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2lod1lYSmxiblFzSUdzcFhHNGdJQ0FnSUNBZ0lHbG1JQ2h3Y205d1pYSjBlVVJsYzJOeWFYQjBiM0l1WjJWMElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvY0hKdmNHVnlkSGxFWlhOamNtbHdkRzl5TG1OdmJtWnBaM1Z5WVdKc1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSEJoY21WdWRDd2dheXdnZXlCMllXeDFaVG9nSjF0RGFYSmpkV3hoY2wwbklIMHBYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNuSXVjSFZ6YUNoYmNHRnlaVzUwTENCckxDQjJZV3dzSUhCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2wwcFhHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGNHeGhZMlZ5VTNSaFkyc3VjSFZ6YUNoYmRtRnNMQ0JyWFNsY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnY0dGeVpXNTBXMnRkSUQwZ0oxdERhWEpqZFd4aGNsMG5YRzRnSUNBZ0lDQWdJQ0FnWVhKeUxuQjFjMmdvVzNCaGNtVnVkQ3dnYXl3Z2RtRnNYU2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTVjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2MzUmhZMnN1Y0hWemFDaDJZV3dwWEc0Z0lDQWdMeThnVDNCMGFXMXBlbVVnWm05eUlFRnljbUY1Y3k0Z1FtbG5JR0Z5Y21GNWN5QmpiM1ZzWkNCcmFXeHNJSFJvWlNCd1pYSm1iM0p0WVc1alpTQnZkR2hsY25kcGMyVWhYRzRnSUNBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb2RtRnNLU2tnZTF4dUlDQWdJQ0FnWm05eUlDaHBJRDBnTURzZ2FTQThJSFpoYkM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0JrWldOcGNtTW9kbUZzVzJsZExDQnBMQ0J6ZEdGamF5d2dkbUZzS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjJZWElnYTJWNWN5QTlJRTlpYW1WamRDNXJaWGx6S0haaGJDbGNiaUFnSUNBZ0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCclpYbHpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJyWlhrZ1BTQnJaWGx6VzJsZFhHNGdJQ0FnSUNBZ0lHUmxZMmx5WXloMllXeGJhMlY1WFN3Z2EyVjVMQ0J6ZEdGamF5d2dkbUZzS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnpkR0ZqYXk1d2IzQW9LVnh1SUNCOVhHNTlYRzVjYmk4dklGTjBZV0pzWlMxemRISnBibWRwWm5sY2JtWjFibU4wYVc5dUlHTnZiWEJoY21WR2RXNWpkR2x2YmlBb1lTd2dZaWtnZTF4dUlDQnBaaUFvWVNBOElHSXBJSHRjYmlBZ0lDQnlaWFIxY200Z0xURmNiaUFnZlZ4dUlDQnBaaUFvWVNBK0lHSXBJSHRjYmlBZ0lDQnlaWFIxY200Z01WeHVJQ0I5WEc0Z0lISmxkSFZ5YmlBd1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdSbGRHVnliV2x1YVhOMGFXTlRkSEpwYm1kcFpua2dLRzlpYWl3Z2NtVndiR0ZqWlhJc0lITndZV05sY2lrZ2UxeHVJQ0IyWVhJZ2RHMXdJRDBnWkdWMFpYSnRhVzVwYzNScFkwUmxZMmx5WXlodlltb3NJQ2NuTENCYlhTd2dkVzVrWldacGJtVmtLU0I4ZkNCdlltcGNiaUFnZG1GeUlISmxjMXh1SUNCcFppQW9jbVZ3YkdGalpYSlRkR0ZqYXk1c1pXNW5kR2dnUFQwOUlEQXBJSHRjYmlBZ0lDQnlaWE1nUFNCS1UwOU9Mbk4wY21sdVoybG1lU2gwYlhBc0lISmxjR3hoWTJWeUxDQnpjR0ZqWlhJcFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVnpJRDBnU2xOUFRpNXpkSEpwYm1kcFpua29kRzF3TENCeVpYQnNZV05sUjJWMGRHVnlWbUZzZFdWektISmxjR3hoWTJWeUtTd2djM0JoWTJWeUtWeHVJQ0I5WEc0Z0lIZG9hV3hsSUNoaGNuSXViR1Z1WjNSb0lDRTlQU0F3S1NCN1hHNGdJQ0FnZG1GeUlIQmhjblFnUFNCaGNuSXVjRzl3S0NsY2JpQWdJQ0JwWmlBb2NHRnlkQzVzWlc1bmRHZ2dQVDA5SURRcElIdGNiaUFnSUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h3WVhKMFd6QmRMQ0J3WVhKMFd6RmRMQ0J3WVhKMFd6TmRLVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCd1lYSjBXekJkVzNCaGNuUmJNVjFkSUQwZ2NHRnlkRnN5WFZ4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVZ6WEc1OVhHNWNibVoxYm1OMGFXOXVJR1JsZEdWeWJXbHVhWE4wYVdORVpXTnBjbU1nS0haaGJDd2dheXdnYzNSaFkyc3NJSEJoY21WdWRDa2dlMXh1SUNCMllYSWdhVnh1SUNCcFppQW9kSGx3Wlc5bUlIWmhiQ0E5UFQwZ0oyOWlhbVZqZENjZ0ppWWdkbUZzSUNFOVBTQnVkV3hzS1NCN1hHNGdJQ0FnWm05eUlDaHBJRDBnTURzZ2FTQThJSE4wWVdOckxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0JwWmlBb2MzUmhZMnRiYVYwZ1BUMDlJSFpoYkNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY0hKdmNHVnlkSGxFWlhOamNtbHdkRzl5SUQwZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaWh3WVhKbGJuUXNJR3NwWEc0Z0lDQWdJQ0FnSUdsbUlDaHdjbTl3WlhKMGVVUmxjMk55YVhCMGIzSXVaMlYwSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlMbU52Ym1acFozVnlZV0pzWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtIQmhjbVZ1ZEN3Z2F5d2dleUIyWVd4MVpUb2dKMXREYVhKamRXeGhjbDBuSUgwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0JoY25JdWNIVnphQ2hiY0dGeVpXNTBMQ0JyTENCMllXd3NJSEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjbDBwWEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsY0d4aFkyVnlVM1JoWTJzdWNIVnphQ2hiZG1Gc0xDQnJYU2xjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjR0Z5Wlc1MFcydGRJRDBnSjF0RGFYSmpkV3hoY2wwblhHNGdJQ0FnSUNBZ0lDQWdZWEp5TG5CMWMyZ29XM0JoY21WdWRDd2dheXdnZG1Gc1hTbGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCMllXd3VkRzlLVTA5T0lEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTVjYmlBZ0lDQjlYRzRnSUNBZ2MzUmhZMnN1Y0hWemFDaDJZV3dwWEc0Z0lDQWdMeThnVDNCMGFXMXBlbVVnWm05eUlFRnljbUY1Y3k0Z1FtbG5JR0Z5Y21GNWN5QmpiM1ZzWkNCcmFXeHNJSFJvWlNCd1pYSm1iM0p0WVc1alpTQnZkR2hsY25kcGMyVWhYRzRnSUNBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb2RtRnNLU2tnZTF4dUlDQWdJQ0FnWm05eUlDaHBJRDBnTURzZ2FTQThJSFpoYkM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0JrWlhSbGNtMXBibWx6ZEdsalJHVmphWEpqS0haaGJGdHBYU3dnYVN3Z2MzUmhZMnNzSUhaaGJDbGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnTHk4Z1EzSmxZWFJsSUdFZ2RHVnRjRzl5WVhKNUlHOWlhbVZqZENCcGJpQjBhR1VnY21WeGRXbHlaV1FnZDJGNVhHNGdJQ0FnSUNCMllYSWdkRzF3SUQwZ2UzMWNiaUFnSUNBZ0lIWmhjaUJyWlhseklEMGdUMkpxWldOMExtdGxlWE1vZG1Gc0tTNXpiM0owS0dOdmJYQmhjbVZHZFc1amRHbHZiaWxjYmlBZ0lDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQnJaWGx6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCclpYa2dQU0JyWlhselcybGRYRzRnSUNBZ0lDQWdJR1JsZEdWeWJXbHVhWE4wYVdORVpXTnBjbU1vZG1Gc1cydGxlVjBzSUd0bGVTd2djM1JoWTJzc0lIWmhiQ2xjYmlBZ0lDQWdJQ0FnZEcxd1cydGxlVjBnUFNCMllXeGJhMlY1WFZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tIQmhjbVZ1ZENBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUdGeWNpNXdkWE5vS0Z0d1lYSmxiblFzSUdzc0lIWmhiRjBwWEc0Z0lDQWdJQ0FnSUhCaGNtVnVkRnRyWFNBOUlIUnRjRnh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUnRjRnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCemRHRmpheTV3YjNBb0tWeHVJQ0I5WEc1OVhHNWNiaTh2SUhkeVlYQnpJSEpsY0d4aFkyVnlJR1oxYm1OMGFXOXVJSFJ2SUdoaGJtUnNaU0IyWVd4MVpYTWdkMlVnWTI5MWJHUnVKM1FnY21Wd2JHRmpaVnh1THk4Z1lXNWtJRzFoY21zZ2RHaGxiU0JoY3lCYlEybHlZM1ZzWVhKZFhHNW1kVzVqZEdsdmJpQnlaWEJzWVdObFIyVjBkR1Z5Vm1Gc2RXVnpJQ2h5WlhCc1lXTmxjaWtnZTF4dUlDQnlaWEJzWVdObGNpQTlJSEpsY0d4aFkyVnlJQ0U5UFNCMWJtUmxabWx1WldRZ1B5QnlaWEJzWVdObGNpQTZJR1oxYm1OMGFXOXVJQ2hyTENCMktTQjdJSEpsZEhWeWJpQjJJSDFjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNoclpYa3NJSFpoYkNrZ2UxeHVJQ0FnSUdsbUlDaHlaWEJzWVdObGNsTjBZV05yTG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2djbVZ3YkdGalpYSlRkR0ZqYXk1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NHRnlkQ0E5SUhKbGNHeGhZMlZ5VTNSaFkydGJhVjFjYmlBZ0lDQWdJQ0FnYVdZZ0tIQmhjblJiTVYwZ1BUMDlJR3RsZVNBbUppQndZWEowV3pCZElEMDlQU0IyWVd3cElIdGNiaUFnSUNBZ0lDQWdJQ0IyWVd3Z1BTQW5XME5wY21OMWJHRnlYU2RjYmlBZ0lDQWdJQ0FnSUNCeVpYQnNZV05sY2xOMFlXTnJMbk53YkdsalpTaHBMQ0F4S1Z4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlISmxjR3hoWTJWeUxtTmhiR3dvZEdocGN5d2dhMlY1TENCMllXd3BYRzRnSUgxY2JuMWNiaUlzSWk4cUlTQnBaV1ZsTnpVMExpQkNVMFF0TXkxRGJHRjFjMlVnVEdsalpXNXpaUzRnUm1WeWIzTnpJRUZpYjNWcmFHRmthV3BsYUNBOGFIUjBjSE02THk5bVpYSnZjM011YjNKbkwyOXdaVzV6YjNWeVkyVStJQ292WEc1bGVIQnZjblJ6TG5KbFlXUWdQU0JtZFc1amRHbHZiaUFvWW5WbVptVnlMQ0J2Wm1aelpYUXNJR2x6VEVVc0lHMU1aVzRzSUc1Q2VYUmxjeWtnZTF4dUlDQjJZWElnWlN3Z2JWeHVJQ0IyWVhJZ1pVeGxiaUE5SUNodVFubDBaWE1nS2lBNEtTQXRJRzFNWlc0Z0xTQXhYRzRnSUhaaGNpQmxUV0Y0SUQwZ0tERWdQRHdnWlV4bGJpa2dMU0F4WEc0Z0lIWmhjaUJsUW1saGN5QTlJR1ZOWVhnZ1BqNGdNVnh1SUNCMllYSWdia0pwZEhNZ1BTQXROMXh1SUNCMllYSWdhU0E5SUdselRFVWdQeUFvYmtKNWRHVnpJQzBnTVNrZ09pQXdYRzRnSUhaaGNpQmtJRDBnYVhOTVJTQS9JQzB4SURvZ01WeHVJQ0IyWVhJZ2N5QTlJR0oxWm1abGNsdHZabVp6WlhRZ0t5QnBYVnh1WEc0Z0lHa2dLejBnWkZ4dVhHNGdJR1VnUFNCeklDWWdLQ2d4SUR3OElDZ3Ria0pwZEhNcEtTQXRJREVwWEc0Z0lITWdQajQ5SUNndGJrSnBkSE1wWEc0Z0lHNUNhWFJ6SUNzOUlHVk1aVzVjYmlBZ1ptOXlJQ2c3SUc1Q2FYUnpJRDRnTURzZ1pTQTlJQ2hsSUNvZ01qVTJLU0FySUdKMVptWmxjbHR2Wm1aelpYUWdLeUJwWFN3Z2FTQXJQU0JrTENCdVFtbDBjeUF0UFNBNEtTQjdmVnh1WEc0Z0lHMGdQU0JsSUNZZ0tDZ3hJRHc4SUNndGJrSnBkSE1wS1NBdElERXBYRzRnSUdVZ1BqNDlJQ2d0YmtKcGRITXBYRzRnSUc1Q2FYUnpJQ3M5SUcxTVpXNWNiaUFnWm05eUlDZzdJRzVDYVhSeklENGdNRHNnYlNBOUlDaHRJQ29nTWpVMktTQXJJR0oxWm1abGNsdHZabVp6WlhRZ0t5QnBYU3dnYVNBclBTQmtMQ0J1UW1sMGN5QXRQU0E0S1NCN2ZWeHVYRzRnSUdsbUlDaGxJRDA5UFNBd0tTQjdYRzRnSUNBZ1pTQTlJREVnTFNCbFFtbGhjMXh1SUNCOUlHVnNjMlVnYVdZZ0tHVWdQVDA5SUdWTllYZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2JTQS9JRTVoVGlBNklDZ29jeUEvSUMweElEb2dNU2tnS2lCSmJtWnBibWwwZVNsY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCdElEMGdiU0FySUUxaGRHZ3VjRzkzS0RJc0lHMU1aVzRwWEc0Z0lDQWdaU0E5SUdVZ0xTQmxRbWxoYzF4dUlDQjlYRzRnSUhKbGRIVnliaUFvY3lBL0lDMHhJRG9nTVNrZ0tpQnRJQ29nVFdGMGFDNXdiM2NvTWl3Z1pTQXRJRzFNWlc0cFhHNTlYRzVjYm1WNGNHOXlkSE11ZDNKcGRHVWdQU0JtZFc1amRHbHZiaUFvWW5WbVptVnlMQ0IyWVd4MVpTd2diMlptYzJWMExDQnBjMHhGTENCdFRHVnVMQ0J1UW5sMFpYTXBJSHRjYmlBZ2RtRnlJR1VzSUcwc0lHTmNiaUFnZG1GeUlHVk1aVzRnUFNBb2JrSjVkR1Z6SUNvZ09Da2dMU0J0VEdWdUlDMGdNVnh1SUNCMllYSWdaVTFoZUNBOUlDZ3hJRHc4SUdWTVpXNHBJQzBnTVZ4dUlDQjJZWElnWlVKcFlYTWdQU0JsVFdGNElENCtJREZjYmlBZ2RtRnlJSEowSUQwZ0tHMU1aVzRnUFQwOUlESXpJRDhnVFdGMGFDNXdiM2NvTWl3Z0xUSTBLU0F0SUUxaGRHZ3VjRzkzS0RJc0lDMDNOeWtnT2lBd0tWeHVJQ0IyWVhJZ2FTQTlJR2x6VEVVZ1B5QXdJRG9nS0c1Q2VYUmxjeUF0SURFcFhHNGdJSFpoY2lCa0lEMGdhWE5NUlNBL0lERWdPaUF0TVZ4dUlDQjJZWElnY3lBOUlIWmhiSFZsSUR3Z01DQjhmQ0FvZG1Gc2RXVWdQVDA5SURBZ0ppWWdNU0F2SUhaaGJIVmxJRHdnTUNrZ1B5QXhJRG9nTUZ4dVhHNGdJSFpoYkhWbElEMGdUV0YwYUM1aFluTW9kbUZzZFdVcFhHNWNiaUFnYVdZZ0tHbHpUbUZPS0haaGJIVmxLU0I4ZkNCMllXeDFaU0E5UFQwZ1NXNW1hVzVwZEhrcElIdGNiaUFnSUNCdElEMGdhWE5PWVU0b2RtRnNkV1VwSUQ4Z01TQTZJREJjYmlBZ0lDQmxJRDBnWlUxaGVGeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHVWdQU0JOWVhSb0xtWnNiMjl5S0UxaGRHZ3ViRzluS0haaGJIVmxLU0F2SUUxaGRHZ3VURTR5S1Z4dUlDQWdJR2xtSUNoMllXeDFaU0FxSUNoaklEMGdUV0YwYUM1d2IzY29NaXdnTFdVcEtTQThJREVwSUh0Y2JpQWdJQ0FnSUdVdExWeHVJQ0FnSUNBZ1l5QXFQU0F5WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hsSUNzZ1pVSnBZWE1nUGowZ01Ta2dlMXh1SUNBZ0lDQWdkbUZzZFdVZ0t6MGdjblFnTHlCalhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFpoYkhWbElDczlJSEowSUNvZ1RXRjBhQzV3YjNjb01pd2dNU0F0SUdWQ2FXRnpLVnh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kbUZzZFdVZ0tpQmpJRDQ5SURJcElIdGNiaUFnSUNBZ0lHVXJLMXh1SUNBZ0lDQWdZeUF2UFNBeVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHVWdLeUJsUW1saGN5QStQU0JsVFdGNEtTQjdYRzRnSUNBZ0lDQnRJRDBnTUZ4dUlDQWdJQ0FnWlNBOUlHVk5ZWGhjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR1VnS3lCbFFtbGhjeUErUFNBeEtTQjdYRzRnSUNBZ0lDQnRJRDBnS0NoMllXeDFaU0FxSUdNcElDMGdNU2tnS2lCTllYUm9MbkJ2ZHlneUxDQnRUR1Z1S1Z4dUlDQWdJQ0FnWlNBOUlHVWdLeUJsUW1saGMxeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J0SUQwZ2RtRnNkV1VnS2lCTllYUm9MbkJ2ZHlneUxDQmxRbWxoY3lBdElERXBJQ29nVFdGMGFDNXdiM2NvTWl3Z2JVeGxiaWxjYmlBZ0lDQWdJR1VnUFNBd1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1ptOXlJQ2c3SUcxTVpXNGdQajBnT0RzZ1luVm1abVZ5VzI5bVpuTmxkQ0FySUdsZElEMGdiU0FtSURCNFptWXNJR2tnS3owZ1pDd2diU0F2UFNBeU5UWXNJRzFNWlc0Z0xUMGdPQ2tnZTMxY2JseHVJQ0JsSUQwZ0tHVWdQRHdnYlV4bGJpa2dmQ0J0WEc0Z0lHVk1aVzRnS3owZ2JVeGxibHh1SUNCbWIzSWdLRHNnWlV4bGJpQStJREE3SUdKMVptWmxjbHR2Wm1aelpYUWdLeUJwWFNBOUlHVWdKaUF3ZUdabUxDQnBJQ3M5SUdRc0lHVWdMejBnTWpVMkxDQmxUR1Z1SUMwOUlEZ3BJSHQ5WEc1Y2JpQWdZblZtWm1WeVcyOW1abk5sZENBcklHa2dMU0JrWFNCOFBTQnpJQ29nTVRJNFhHNTlYRzRpTENKcFppQW9kSGx3Wlc5bUlFOWlhbVZqZEM1amNtVmhkR1VnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0x5OGdhVzF3YkdWdFpXNTBZWFJwYjI0Z1puSnZiU0J6ZEdGdVpHRnlaQ0J1YjJSbExtcHpJQ2QxZEdsc0p5QnRiMlIxYkdWY2JpQWdiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQnBibWhsY21sMGN5aGpkRzl5TENCemRYQmxja04wYjNJcElIdGNiaUFnSUNCcFppQW9jM1Z3WlhKRGRHOXlLU0I3WEc0Z0lDQWdJQ0JqZEc5eUxuTjFjR1Z5WHlBOUlITjFjR1Z5UTNSdmNseHVJQ0FnSUNBZ1kzUnZjaTV3Y205MGIzUjVjR1VnUFNCUFltcGxZM1F1WTNKbFlYUmxLSE4xY0dWeVEzUnZjaTV3Y205MGIzUjVjR1VzSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1J5ZFdOMGIzSTZJSHRjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nWTNSdmNpeGNiaUFnSUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNCM2NtbDBZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdWY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTbGNiaUFnSUNCOVhHNGdJSDA3WEc1OUlHVnNjMlVnZTF4dUlDQXZMeUJ2YkdRZ2MyTm9iMjlzSUhOb2FXMGdabTl5SUc5c1pDQmljbTkzYzJWeWMxeHVJQ0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVJR2x1YUdWeWFYUnpLR04wYjNJc0lITjFjR1Z5UTNSdmNpa2dlMXh1SUNBZ0lHbG1JQ2h6ZFhCbGNrTjBiM0lwSUh0Y2JpQWdJQ0FnSUdOMGIzSXVjM1Z3WlhKZklEMGdjM1Z3WlhKRGRHOXlYRzRnSUNBZ0lDQjJZWElnVkdWdGNFTjBiM0lnUFNCbWRXNWpkR2x2YmlBb0tTQjdmVnh1SUNBZ0lDQWdWR1Z0Y0VOMGIzSXVjSEp2ZEc5MGVYQmxJRDBnYzNWd1pYSkRkRzl5TG5CeWIzUnZkSGx3WlZ4dUlDQWdJQ0FnWTNSdmNpNXdjbTkwYjNSNWNHVWdQU0J1WlhjZ1ZHVnRjRU4wYjNJb0tWeHVJQ0FnSUNBZ1kzUnZjaTV3Y205MGIzUjVjR1V1WTI5dWMzUnlkV04wYjNJZ1BTQmpkRzl5WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzRpTENJdktpRmNiaUFxSUVSbGRHVnliV2x1WlNCcFppQmhiaUJ2WW1wbFkzUWdhWE1nWVNCQ2RXWm1aWEpjYmlBcVhHNGdLaUJBWVhWMGFHOXlJQ0FnUm1WeWIzTnpJRUZpYjNWcmFHRmthV3BsYUNBOGFIUjBjSE02THk5bVpYSnZjM011YjNKblBseHVJQ29nUUd4cFkyVnVjMlVnSUUxSlZGeHVJQ292WEc1Y2JpOHZJRlJvWlNCZmFYTkNkV1ptWlhJZ1kyaGxZMnNnYVhNZ1ptOXlJRk5oWm1GeWFTQTFMVGNnYzNWd2NHOXlkQ3dnWW1WallYVnpaU0JwZENkeklHMXBjM05wYm1kY2JpOHZJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVZMjl1YzNSeWRXTjBiM0l1SUZKbGJXOTJaU0IwYUdseklHVjJaVzUwZFdGc2JIbGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdLRzlpYWlrZ2UxeHVJQ0J5WlhSMWNtNGdiMkpxSUNFOUlHNTFiR3dnSmlZZ0tHbHpRblZtWm1WeUtHOWlhaWtnZkh3Z2FYTlRiRzkzUW5WbVptVnlLRzlpYWlrZ2ZId2dJU0Z2WW1vdVgybHpRblZtWm1WeUtWeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGMwSjFabVpsY2lBb2IySnFLU0I3WEc0Z0lISmxkSFZ5YmlBaElXOWlhaTVqYjI1emRISjFZM1J2Y2lBbUppQjBlWEJsYjJZZ2IySnFMbU52Ym5OMGNuVmpkRzl5TG1selFuVm1abVZ5SUQwOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUc5aWFpNWpiMjV6ZEhKMVkzUnZjaTVwYzBKMVptWmxjaWh2WW1vcFhHNTlYRzVjYmk4dklFWnZjaUJPYjJSbElIWXdMakV3SUhOMWNIQnZjblF1SUZKbGJXOTJaU0IwYUdseklHVjJaVzUwZFdGc2JIa3VYRzVtZFc1amRHbHZiaUJwYzFOc2IzZENkV1ptWlhJZ0tHOWlhaWtnZTF4dUlDQnlaWFIxY200Z2RIbHdaVzltSUc5aWFpNXlaV0ZrUm14dllYUk1SU0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUIwZVhCbGIyWWdiMkpxTG5Oc2FXTmxJRDA5UFNBblpuVnVZM1JwYjI0bklDWW1JR2x6UW5WbVptVnlLRzlpYWk1emJHbGpaU2d3TENBd0tTbGNibjFjYmlJc0luWmhjaUIwYjFOMGNtbHVaeUE5SUh0OUxuUnZVM1J5YVc1bk8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRUZ5Y21GNUxtbHpRWEp5WVhrZ2ZId2dablZ1WTNScGIyNGdLR0Z5Y2lrZ2UxeHVJQ0J5WlhSMWNtNGdkRzlUZEhKcGJtY3VZMkZzYkNoaGNuSXBJRDA5SUNkYmIySnFaV04wSUVGeWNtRjVYU2M3WEc1OU8xeHVJaXdpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzUyWVhJZ1gxOXBiWEJ2Y25SRVpXWmhkV3gwSUQwZ0tIUm9hWE1nSmlZZ2RHaHBjeTVmWDJsdGNHOXlkRVJsWm1GMWJIUXBJSHg4SUdaMWJtTjBhVzl1SUNodGIyUXBJSHRjYmlBZ0lDQnlaWFIxY200Z0tHMXZaQ0FtSmlCdGIyUXVYMTlsYzAxdlpIVnNaU2tnUHlCdGIyUWdPaUI3SUZ3aVpHVm1ZWFZzZEZ3aU9pQnRiMlFnZlR0Y2JuMDdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUhzZ2RtRnNkV1U2SUhSeWRXVWdmU2s3WEc1bGVIQnZjblJ6TGtwemIyNVNjR05GYm1kcGJtVWdQU0IyYjJsa0lEQTdYRzVqYjI1emRDQnpZV1psWDJWMlpXNTBYMlZ0YVhSMFpYSmZNU0E5SUY5ZmFXMXdiM0owUkdWbVlYVnNkQ2h5WlhGMWFYSmxLRndpUUcxbGRHRnRZWE5yTDNOaFptVXRaWFpsYm5RdFpXMXBkSFJsY2x3aUtTazdYRzVqYjI1emRDQmxkR2hmY25CalgyVnljbTl5YzE4eElEMGdjbVZ4ZFdseVpTaGNJbVYwYUMxeWNHTXRaWEp5YjNKelhDSXBPMXh1THlvcVhHNGdLaUJCSUVwVFQwNHRVbEJESUhKbGNYVmxjM1FnWVc1a0lISmxjM0J2Ym5ObElIQnliMk5sYzNOdmNpNWNiaUFxSUVkcGRtVWdhWFFnWVNCemRHRmpheUJ2WmlCdGFXUmtiR1YzWVhKbExDQndZWE56SUdsMElISmxjWFZsYzNSekxDQmhibVFnWjJWMElHSmhZMnNnY21WemNHOXVjMlZ6TGx4dUlDb3ZYRzVqYkdGemN5QktjMjl1VW5CalJXNW5hVzVsSUdWNGRHVnVaSE1nYzJGbVpWOWxkbVZ1ZEY5bGJXbDBkR1Z5WHpFdVpHVm1ZWFZzZENCN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyMXBaR1JzWlhkaGNtVWdQU0JiWFR0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUVdSa0lHRWdiV2xrWkd4bGQyRnlaU0JtZFc1amRHbHZiaUIwYnlCMGFHVWdaVzVuYVc1bEozTWdiV2xrWkd4bGQyRnlaU0J6ZEdGamF5NWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndZWEpoYlNCdGFXUmtiR1YzWVhKbElDMGdWR2hsSUcxcFpHUnNaWGRoY21VZ1puVnVZM1JwYjI0Z2RHOGdZV1JrTGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxYzJnb2JXbGtaR3hsZDJGeVpTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXRhV1JrYkdWM1lYSmxMbkIxYzJnb2JXbGtaR3hsZDJGeVpTazdYRzRnSUNBZ2ZWeHVJQ0FnSUdoaGJtUnNaU2h5WlhFc0lHTmlLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGpZaUFtSmlCMGVYQmxiMllnWTJJZ0lUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25YQ0pqWVd4c1ltRmphMXdpSUcxMWMzUWdZbVVnWVNCbWRXNWpkR2x2YmlCcFppQndjbTkyYVdSbFpDNG5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoeVpYRXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTJJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYUdGdVpHeGxRbUYwWTJnb2NtVnhMQ0JqWWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYUdGdVpHeGxRbUYwWTJnb2NtVnhLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9ZMklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5b1lXNWtiR1VvY21WeExDQmpZaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0J5YjIxcGMyVklZVzVrYkdVb2NtVnhLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVYwZFhKdWN5QjBhR2x6SUdWdVoybHVaU0JoY3lCaElHMXBaR1JzWlhkaGNtVWdablZ1WTNScGIyNGdkR2hoZENCallXNGdZbVVnY0hWemFHVmtJSFJ2SUc5MGFHVnlYRzRnSUNBZ0lDb2daVzVuYVc1bGN5NWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQnlaWFIxY201eklGUm9hWE1nWlc1bmFXNWxJR0Z6SUdFZ2JXbGtaR3hsZDJGeVpTQm1kVzVqZEdsdmJpNWNiaUFnSUNBZ0tpOWNiaUFnSUNCaGMwMXBaR1JzWlhkaGNtVW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoYzNsdVl5QW9jbVZ4TENCeVpYTXNJRzVsZUhRc0lHVnVaQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCYmJXbGtaR3hsZDJGeVpVVnljbTl5TENCcGMwTnZiWEJzWlhSbExDQnlaWFIxY201SVlXNWtiR1Z5Y3l4ZElEMGdZWGRoYVhRZ1NuTnZibEp3WTBWdVoybHVaUzVmY25WdVFXeHNUV2xrWkd4bGQyRnlaU2h5WlhFc0lISmxjeXdnZEdocGN5NWZiV2xrWkd4bGQyRnlaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHpRMjl0Y0d4bGRHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYZGhhWFFnU25OdmJsSndZMFZ1WjJsdVpTNWZjblZ1VW1WMGRYSnVTR0Z1Wkd4bGNuTW9jbVYwZFhKdVNHRnVaR3hsY25NcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaVzVrS0cxcFpHUnNaWGRoY21WRmNuSnZjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhoMEtHRnplVzVqSUNob1lXNWtiR1Z5UTJGc2JHSmhZMnNwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRjNZV2wwSUVwemIyNVNjR05GYm1kcGJtVXVYM0oxYmxKbGRIVnlia2hoYm1Sc1pYSnpLSEpsZEhWeWJraGhibVJzWlhKektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWFJqYUNBb1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJvWVc1a2JHVnlRMkZzYkdKaFkyc29aWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCb1lXNWtiR1Z5UTJGc2JHSmhZMnNvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR05oZEdOb0lDaGxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbGJtUW9aWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JpQWdJQ0JoYzNsdVl5QmZhR0Z1Wkd4bFFtRjBZMmdvY21WeGN5d2dZMklwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdWR2hsSUc5eVpHVnlJR2hsY21VZ2FYTWdhVzF3YjNKMFlXNTBYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlBeUxpQlhZV2wwSUdadmNpQmhiR3dnY21WeGRXVnpkSE1nZEc4Z1ptbHVhWE5vTENCdmNpQjBhSEp2ZHlCdmJpQnpiMjFsSUd0cGJtUWdiMllnWm1GMFlXeGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHVnljbTl5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpYTndiMjV6WlhNZ1BTQmhkMkZwZENCUWNtOXRhWE5sTG1Gc2JDaGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklERXVJRUpsWjJsdUlHVjRaV04xZEdsdVp5QmxZV05vSUhKbGNYVmxjM1FnYVc0Z2RHaGxJRzl5WkdWeUlISmxZMlZwZG1Wa1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhGekxtMWhjQ2gwYUdsekxsOXdjbTl0YVhObFNHRnVaR3hsTG1KcGJtUW9kR2hwY3lrcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklETXVJRkpsZEhWeWJpQmlZWFJqYUNCeVpYTndiMjV6WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOaUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTmlLRzUxYkd3c0lISmxjM0J2Ym5ObGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6Y0c5dWMyVnpPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdOaGRHTm9JQ2hsY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR05pS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOaUtHVnljbTl5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUdWeWNtOXlPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUVnY0hKdmJXbHpaUzEzY21Gd2NHVmtJRjlvWVc1a2JHVXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gzQnliMjFwYzJWSVlXNWtiR1VvY21WeEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhR0Z1Wkd4bEtISmxjU3dnS0Y5bGNuSXNJSEpsY3lrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZSb1pYSmxJSGRwYkd3Z1lXeDNZWGx6SUdKbElHRWdjbVZ6Y0c5dWMyVXNJR0Z1WkNCcGRDQjNhV3hzSUdGc2QyRjVjeUJvWVhabElHRnVlU0JsY25KdmNseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSFJvWVhRZ2FYTWdZMkYxWjJoMElHRnVaQ0J3Y205d1lXZGhkR1ZrTGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvY21WektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSVzV6ZFhKbGN5QjBhR0YwSUhSb1pTQnlaWEYxWlhOMElHOWlhbVZqZENCcGN5QjJZV3hwWkN3Z2NISnZZMlZ6YzJWeklHbDBMQ0JoYm1RZ2NHRnpjMlZ6SUdGdWVWeHVJQ0FnSUNBcUlHVnljbTl5SUdGdVpDQjBhR1VnY21WemNHOXVjMlVnYjJKcVpXTjBJSFJ2SUhSb1pTQm5hWFpsYmlCallXeHNZbUZqYXk1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVSdlpYTWdibTkwSUhKbGFtVmpkQzVjYmlBZ0lDQWdLaTljYmlBZ0lDQmhjM2x1WXlCZmFHRnVaR3hsS0dOaGJHeGxjbEpsY1N3Z1kySXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmpZV3hzWlhKU1pYRWdmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lFRnljbUY1TG1selFYSnlZWGtvWTJGc2JHVnlVbVZ4S1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pXOW1JR05oYkd4bGNsSmxjU0FoUFQwZ0oyOWlhbVZqZENjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1Z5Y205eUlEMGdibVYzSUdWMGFGOXljR05mWlhKeWIzSnpYekV1UlhSb1pYSmxkVzFTY0dORmNuSnZjaWhsZEdoZmNuQmpYMlZ5Y205eWMxOHhMbVZ5Y205eVEyOWtaWE11Y25CakxtbHVkbUZzYVdSU1pYRjFaWE4wTENCZ1VtVnhkV1Z6ZEhNZ2JYVnpkQ0JpWlNCd2JHRnBiaUJ2WW1wbFkzUnpMaUJTWldObGFYWmxaRG9nSkh0MGVYQmxiMllnWTJGc2JHVnlVbVZ4ZldBc0lIc2djbVZ4ZFdWemREb2dZMkZzYkdWeVVtVnhJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTmlLR1Z5Y205eUxDQjdJR2xrT2lCMWJtUmxabWx1WldRc0lHcHpiMjV5Y0dNNklDY3lMakFuTENCbGNuSnZjaUI5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR05oYkd4bGNsSmxjUzV0WlhSb2IyUWdJVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmxjbkp2Y2lBOUlHNWxkeUJsZEdoZmNuQmpYMlZ5Y205eWMxOHhMa1YwYUdWeVpYVnRVbkJqUlhKeWIzSW9aWFJvWDNKd1kxOWxjbkp2Y25OZk1TNWxjbkp2Y2tOdlpHVnpMbkp3WXk1cGJuWmhiR2xrVW1WeGRXVnpkQ3dnWUUxMWMzUWdjM0JsWTJsbWVTQmhJSE4wY21sdVp5QnRaWFJvYjJRdUlGSmxZMlZwZG1Wa09pQWtlM1I1Y0dWdlppQmpZV3hzWlhKU1pYRXViV1YwYUc5a2ZXQXNJSHNnY21WeGRXVnpkRG9nWTJGc2JHVnlVbVZ4SUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05pS0dWeWNtOXlMQ0I3SUdsa09pQmpZV3hzWlhKU1pYRXVhV1FzSUdwemIyNXljR002SUNjeUxqQW5MQ0JsY25KdmNpQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCamIyNXpkQ0J5WlhFZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQmpZV3hzWlhKU1pYRXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnlaWE1nUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWkRvZ2NtVnhMbWxrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhbk52Ym5Kd1l6b2djbVZ4TG1wemIyNXljR01zWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JsY25KdmNpQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhkMkZwZENCMGFHbHpMbDl3Y205alpYTnpVbVZ4ZFdWemRDaHlaWEVzSUhKbGN5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWTJGMFkyZ2dLRjlsY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRU0J5WlhGMVpYTjBJR2hoYm1Sc1pYSWdaWEp5YjNJc0lHRWdjbVV0ZEdoeWIzZHVJRzFwWkdSc1pYZGhjbVVnWlhKeWIzSXNJRzl5SUhOdmJXVjBhR2x1WjF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnZFc1bGVIQmxZM1JsWkM1Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eUlEMGdYMlZ5Y205eU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNobGNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUlc1emRYSmxJRzV2SUhKbGMzVnNkQ0JwY3lCd2NtVnpaVzUwSUc5dUlHRnVJR1Z5Y205eVpXUWdjbVZ6Y0c5dWMyVmNiaUFnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0J5WlhNdWNtVnpkV3gwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGeVpYTXVaWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE11WlhKeWIzSWdQU0JsZEdoZmNuQmpYMlZ5Y205eWMxOHhMbk5sY21saGJHbDZaVVZ5Y205eUtHVnljbTl5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTJJb1pYSnliM0lzSUhKbGN5azdYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFWnZjaUIwYUdVZ1oybDJaVzRnY21WeGRXVnpkQ0JoYm1RZ2NtVnpjRzl1YzJVc0lISjFibk1nWVd4c0lHMXBaR1JzWlhkaGNtVWdZVzVrSUhSb1pXbHlJSEpsZEhWeWJseHVJQ0FnSUNBcUlHaGhibVJzWlhKekxDQnBaaUJoYm5rc0lHRnVaQ0JsYm5OMWNtVnpJSFJvWVhRZ2FXNTBaWEp1WVd3Z2NtVnhkV1Z6ZENCd2NtOWpaWE56YVc1bklITmxiV0Z1ZEdsamMxeHVJQ0FnSUNBcUlHRnlaU0J6WVhScGMyWnBaV1F1WEc0Z0lDQWdJQ292WEc0Z0lDQWdZWE41Ym1NZ1gzQnliMk5sYzNOU1pYRjFaWE4wS0hKbGNTd2djbVZ6S1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUZ0bGNuSnZjaXdnYVhORGIyMXdiR1YwWlN3Z2NtVjBkWEp1U0dGdVpHeGxjbk1zWFNBOUlHRjNZV2wwSUVwemIyNVNjR05GYm1kcGJtVXVYM0oxYmtGc2JFMXBaR1JzWlhkaGNtVW9jbVZ4TENCeVpYTXNJSFJvYVhNdVgyMXBaR1JzWlhkaGNtVXBPMXh1SUNBZ0lDQWdJQ0F2THlCVWFISnZkeUJwWmlCY0ltVnVaRndpSUhkaGN5QnViM1FnWTJGc2JHVmtMQ0J2Y2lCcFppQjBhR1VnY21WemNHOXVjMlVnYUdGeklHNWxhWFJvWlhJZ1lTQnlaWE4xYkhSY2JpQWdJQ0FnSUNBZ0x5OGdibTl5SUdGdUlHVnljbTl5TGx4dUlDQWdJQ0FnSUNCS2MyOXVVbkJqUlc1bmFXNWxMbDlqYUdWamEwWnZja052YlhCc1pYUnBiMjRvY21WeExDQnlaWE1zSUdselEyOXRjR3hsZEdVcE8xeHVJQ0FnSUNBZ0lDQXZMeUJVYUdVZ2NtVjBkWEp1SUdoaGJtUnNaWEp6SUhOb2IzVnNaQ0J5ZFc0Z1pYWmxiaUJwWmlCaGJpQmxjbkp2Y2lCM1lYTWdaVzVqYjNWdWRHVnlaV1FnWkhWeWFXNW5YRzRnSUNBZ0lDQWdJQzh2SUcxcFpHUnNaWGRoY21VZ2NISnZZMlZ6YzJsdVp5NWNiaUFnSUNBZ0lDQWdZWGRoYVhRZ1NuTnZibEp3WTBWdVoybHVaUzVmY25WdVVtVjBkWEp1U0dGdVpHeGxjbk1vY21WMGRYSnVTR0Z1Wkd4bGNuTXBPMXh1SUNBZ0lDQWdJQ0F2THlCT2IzY2dkMlVnY21VdGRHaHliM2NnZEdobElHMXBaR1JzWlhkaGNtVWdjSEp2WTJWemMybHVaeUJsY25KdmNpd2dhV1lnWVc1NUxDQjBieUJqWVhSamFDQnBkRnh1SUNBZ0lDQWdJQ0F2THlCbWRYSjBhR1Z5SUhWd0lIUm9aU0JqWVd4c0lHTm9ZV2x1TGx4dUlDQWdJQ0FnSUNCcFppQW9aWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJR1Z5Y205eU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxjbWxoYkd4NUlHVjRaV04xZEdWeklIUm9aU0JuYVhabGJpQnpkR0ZqYXlCdlppQnRhV1JrYkdWM1lYSmxMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdRVzRnWVhKeVlYa2diMllnWVc1NUlHVnljbTl5SUdWdVkyOTFiblJsY21Wa0lHUjFjbWx1WnlCdGFXUmtiR1YzWVhKbElHVjRaV04xZEdsdmJpeGNiaUFnSUNBZ0tpQmhJR0p2YjJ4bFlXNGdhVzVrYVdOaGRHbHVaeUIzYUdWMGFHVnlJSFJvWlNCeVpYRjFaWE4wSUhkaGN5QmpiMjF3YkdWMFpXUXNJR0Z1WkNCaGJpQmhjbkpoZVNCdlpseHVJQ0FnSUNBcUlHMXBaR1JzWlhkaGNtVXRaR1ZtYVc1bFpDQnlaWFIxY200Z2FHRnVaR3hsY25NdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzNSaGRHbGpJR0Z6ZVc1aklGOXlkVzVCYkd4TmFXUmtiR1YzWVhKbEtISmxjU3dnY21WekxDQnRhV1JrYkdWM1lYSmxVM1JoWTJzcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtVjBkWEp1U0dGdVpHeGxjbk1nUFNCYlhUdGNiaUFnSUNBZ0lDQWdiR1YwSUdWeWNtOXlJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdiR1YwSUdselEyOXRjR3hsZEdVZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0x5OGdSMjhnWkc5M2JpQnpkR0ZqYXlCdlppQnRhV1JrYkdWM1lYSmxMQ0JqWVd4c0lHRnVaQ0JqYjJ4c1pXTjBJRzl3ZEdsdmJtRnNJSEpsZEhWeWJraGhibVJzWlhKelhHNGdJQ0FnSUNBZ0lHWnZjaUFvWTI5dWMzUWdiV2xrWkd4bGQyRnlaU0J2WmlCdGFXUmtiR1YzWVhKbFUzUmhZMnNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRnRsY25KdmNpd2dhWE5EYjIxd2JHVjBaVjBnUFNCaGQyRnBkQ0JLYzI5dVVuQmpSVzVuYVc1bExsOXlkVzVOYVdSa2JHVjNZWEpsS0hKbGNTd2djbVZ6TENCdGFXUmtiR1YzWVhKbExDQnlaWFIxY201SVlXNWtiR1Z5Y3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYTkRiMjF3YkdWMFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCYlpYSnliM0lzSUdselEyOXRjR3hsZEdVc0lISmxkSFZ5YmtoaGJtUnNaWEp6TG5KbGRtVnljMlVvS1YwN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKMWJuTWdZVzRnYVc1a2FYWnBaSFZoYkNCdGFXUmtiR1YzWVhKbExseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1FXNGdZWEp5WVhrZ2IyWWdZVzU1SUdWeWNtOXlJR1Z1WTI5MWJuUmxjbVZrSUdSMWNtbHVaeUJ0YVdSa2JHVjNZWEpsSUdWNFpXTjBhVzl1TEZ4dUlDQWdJQ0FxSUdGdVpDQmhJR0p2YjJ4bFlXNGdhVzVrYVdOaGRHbHVaeUIzYUdWMGFHVnlJSFJvWlNCeVpYRjFaWE4wSUhOb2IzVnNaQ0JsYm1RdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzNSaGRHbGpJRjl5ZFc1TmFXUmtiR1YzWVhKbEtISmxjU3dnY21WekxDQnRhV1JrYkdWM1lYSmxMQ0J5WlhSMWNtNUlZVzVrYkdWeWN5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1Z1WkNBOUlDaGxjbklwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCbGNuSnZjaUE5SUdWeWNpQjhmQ0J5WlhNdVpYSnliM0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY3k1bGNuSnZjaUE5SUdWMGFGOXljR05mWlhKeWIzSnpYekV1YzJWeWFXRnNhWHBsUlhKeWIzSW9aWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJVY25WbElHbHVaR2xqWVhSbGN5QjBhR0YwSUhSb1pTQnlaWEYxWlhOMElITm9iM1ZzWkNCbGJtUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtGdGxjbkp2Y2l3Z2RISjFaVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUc1bGVIUWdQU0FvY21WMGRYSnVTR0Z1Wkd4bGNpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaWE11WlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXNWtLSEpsY3k1bGNuSnZjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVYwZFhKdVNHRnVaR3hsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnlaWFIxY201SVlXNWtiR1Z5SUNFOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXNWtLRzVsZHlCbGRHaGZjbkJqWDJWeWNtOXljMTh4TGtWMGFHVnlaWFZ0VW5CalJYSnliM0lvWlhSb1gzSndZMTlsY25KdmNuTmZNUzVsY25KdmNrTnZaR1Z6TG5Kd1l5NXBiblJsY201aGJDd2dZRXB6YjI1U2NHTkZibWRwYm1VNklGd2libVY0ZEZ3aUlISmxkSFZ5YmlCb1lXNWtiR1Z5Y3lCdGRYTjBJR0psSUdaMWJtTjBhVzl1Y3k0Z1lDQXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHQlNaV05sYVhabFpDQmNJaVI3ZEhsd1pXOW1JSEpsZEhWeWJraGhibVJzWlhKOVhDSWdabTl5SUhKbGNYVmxjM1E2WEZ4dUpIdHFjMjl1YVdaNUtISmxjU2w5WUN3Z2V5QnlaWEYxWlhOME9pQnlaWEVnZlNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1U0dGdVpHeGxjbk11Y0hWemFDaHlaWFIxY201SVlXNWtiR1Z5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkdZV3h6WlNCcGJtUnBZMkYwWlhNZ2RHaGhkQ0IwYUdVZ2NtVnhkV1Z6ZENCemFHOTFiR1FnYm05MElHVnVaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0Z0dWRXeHNMQ0JtWVd4elpWMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFwWkdSc1pYZGhjbVVvY21WeExDQnlaWE1zSUc1bGVIUXNJR1Z1WkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWFJqYUNBb1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJtUW9aWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVnlhV0ZzYkhrZ1pYaGxZM1YwWlhNZ1lYSnlZWGtnYjJZZ2NtVjBkWEp1SUdoaGJtUnNaWEp6TGlCVWFHVWdjbVZ4ZFdWemRDQmhibVFnY21WemNHOXVjMlVnWVhKbFhHNGdJQ0FnSUNvZ1lYTnpkVzFsWkNCMGJ5QmlaU0JwYmlCMGFHVnBjaUJ6WTI5d1pTNWNiaUFnSUNBZ0tpOWNiaUFnSUNCemRHRjBhV01nWVhONWJtTWdYM0oxYmxKbGRIVnlia2hoYm1Sc1pYSnpLR2hoYm1Sc1pYSnpLU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9ZMjl1YzNRZ2FHRnVaR3hsY2lCdlppQm9ZVzVrYkdWeWN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lYZGhhWFFnYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2hoYm1Sc1pYSW9LR1Z5Y2lrZ1BUNGdLR1Z5Y2lBL0lISmxhbVZqZENobGNuSXBJRG9nY21WemIyeDJaU2dwS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVWFISnZkM01nWVc0Z1pYSnliM0lnYVdZZ2RHaGxJSEpsYzNCdmJuTmxJR2hoY3lCdVpXbDBhR1Z5SUdFZ2NtVnpkV3gwSUc1dmNpQmhiaUJsY25KdmNpd2diM0lnYVdaY2JpQWdJQ0FnS2lCMGFHVWdYQ0pwYzBOdmJYQnNaWFJsWENJZ1pteGhaeUJwY3lCbVlXeHplUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQnpkR0YwYVdNZ1gyTm9aV05yUm05eVEyOXRjR3hsZEdsdmJpaHlaWEVzSUhKbGN5d2dhWE5EYjIxd2JHVjBaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JU2duY21WemRXeDBKeUJwYmlCeVpYTXBJQ1ltSUNFb0oyVnljbTl5SnlCcGJpQnlaWE1wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnWlhSb1gzSndZMTlsY25KdmNuTmZNUzVGZEdobGNtVjFiVkp3WTBWeWNtOXlLR1YwYUY5eWNHTmZaWEp5YjNKelh6RXVaWEp5YjNKRGIyUmxjeTV5Y0dNdWFXNTBaWEp1WVd3c0lHQktjMjl1VW5CalJXNW5hVzVsT2lCU1pYTndiMjV6WlNCb1lYTWdibThnWlhKeWIzSWdiM0lnY21WemRXeDBJR1p2Y2lCeVpYRjFaWE4wT2x4Y2JpUjdhbk52Ym1sbWVTaHlaWEVwZldBc0lIc2djbVZ4ZFdWemREb2djbVZ4SUgwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNnaGFYTkRiMjF3YkdWMFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lHVjBhRjl5Y0dOZlpYSnliM0p6WHpFdVJYUm9aWEpsZFcxU2NHTkZjbkp2Y2lobGRHaGZjbkJqWDJWeWNtOXljMTh4TG1WeWNtOXlRMjlrWlhNdWNuQmpMbWx1ZEdWeWJtRnNMQ0JnU25OdmJsSndZMFZ1WjJsdVpUb2dUbTkwYUdsdVp5QmxibVJsWkNCeVpYRjFaWE4wT2x4Y2JpUjdhbk52Ym1sbWVTaHlaWEVwZldBc0lIc2djbVZ4ZFdWemREb2djbVZ4SUgwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVmVnh1Wlhod2IzSjBjeTVLYzI5dVVuQmpSVzVuYVc1bElEMGdTbk52YmxKd1kwVnVaMmx1WlR0Y2JtWjFibU4wYVc5dUlHcHpiMjVwWm5rb2NtVnhkV1Z6ZENrZ2UxeHVJQ0FnSUhKbGRIVnliaUJLVTA5T0xuTjBjbWx1WjJsbWVTaHlaWEYxWlhOMExDQnVkV3hzTENBeUtUdGNibjFjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXUmhkR0U2WVhCd2JHbGpZWFJwYjI0dmFuTnZianRpWVhObE5qUXNaWGxLTWxwWVNucGhWemwxU1dwdmVreERTbTFoVjNoc1NXcHZhVk51VG5aaWJFcDNXVEJXZFZveWJIVmFVelZ4WTNsSmMwbHVUblprV0VwcVdsWktkbUl6VVdsUGFVbHBURU5LZW1JelZubFpNbFo2U1dwd1lrbHBOSFZNTTA1NVdYazVTMk15T1hWVmJrSnFVbGMxYm1GWE5XeE1ibEo2U1d3d2MwbHROV2hpVjFaNlNXcHdZbGhUZDJsaVYwWjNZMGRzZFZvelRXbFBhVWszVDNwek4wOTZkRUpSVlVaQ1RFaE9SMUZWUlRCU1JIUkNVVlZOTVZKRGVIUlNSVVpDVDBWVk4xRlZSakZTYW14R1QzcHpOMUl3UmtoU2VuUkNVVlZPU1V4Rk1VSlJWMFZ6V1ZWR1FsbDVlRlJSVlVaU1RFUlNRMUZWUm01UmFuUktVVlZrY1ZKRWRGSlJWVTVHVEVWMFFsRlZjM05TVlVaQ1VsTjRSRkZWUmtSUE1VWkNVVEZKYzFOVlJrSlRVM2hFVVZWR1JFeEdaRUpSVm1OelVqQkdRbEo1ZUVaUlZVWkdURVZPUWxGVlRUZFRWVVpFWlVWSmMxRXdSa0pSZW5SS1VWVldSVTk2Y3pkUE1EbENVMVZqTjFOVlJrUlRRM2hLVVZWR1NreEZUa0pSVlRoelZsVkdRbUpWVFRkVlZVWkVUbFZOYzFOVlJrSlRVM2hFVVZWR1JFeEdaRUpSVm1OelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTldWVVpDWVZWUmMxRXdSa0pSZVhoRVVWVkdSRTh3YkVKUmVrNUdURVZPUWxGVlRUZFRWVVY1VVRCUmMxUlZSa0pVVTNoRVVWVkdSRXhGWkVKUlZtdHpVbFZHUWxKVGVFWlJWVVpTVHpGR1FsRjZUa05NUld4Q1VWVnJjMUpWUmtKU1UzaEtVVlZHU2t4Rk9VSlJWVGh6VWxWR1FsSlRlRXhSVlVaTVRFWldRbEZXVlhOU1ZVWkNVbFIwV2xGVlRuTlJlWGhPVVZWR1RreEZiRUpSVld0elV6QkdRbE41ZUVSUlZVWkVURVJTUkZGVlJUQlJlWGhFVVZWR1JFeEZUa0pSVlUwM1ZUQkdSRXd3VVRkVlZVWkdVa040U2xGVlJrcE1SWFJDVVZWemMxRXdSa0pSZVhoUVVWVkdVRXhGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWV1FsRlZWVGRYVlVaRVpFVkpjMU5WUmtKVFUzaEdVVlZHUmt4RlZrSlJWVlUzV2pCS1FsRXdOSE5VTUVaQ1ZIbDRTbEZWUmtwTVJVNUNVVlZOYzFkVlJrSlhVM2hFVVZWR1JFeEZaRUpSVldOelVsVkdRbEpUZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVVhwMGFGRlZUblZSZW5SYVVWVk9SVXhGT1VKUlZUaHpVMVZHUWxOVGVFUlJWVVpFVEVac1FsRldhM05STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlblJVVVZWTmRsRnFkRkpSVlZaRlRFVnNRbEZWYTNOU1ZVWkNVbE40UmxGVlJrWlBNV3hDVVRBMGMxUXdSa0pVZVhoS1VWVkdTa3hGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVEVWa1FsRlVhRU5NUlZaQ1VWVlZjMUpWUmtKU1UzaEVVVlZHUkV4RlRrSlJWVTAzVlRCR1JHVnJVVGRWVlVaRVVrTjRVRkZWUmxCTVJXeENVVlZyYzFFd1JrSlJlWGhxVVZWR2FreEZUa0pSVlUxelVqQkdRazlGU1hOUk1FWkNVWGw0UkZGVlJrUlBNR3hDVVhwa1JVeEZUa0pSVlUwM1UxVkdSbEpFY3pkUGVuTTNWREJHVEZKNmRFcFJWVTVKVEVac1FsRldhemRWVlVaRVZtbDRVRkZWUmxCTVJYUkNVVlZ6YzFKVlJrSlNVM2hJVVZWR1NFeEZWa0pSVlZWelVqQkdRbEo1ZUVaUlZVWkdURVZzUWxGVmEzTlNWVVpDVWxONFNGRlZSa2hNUlZaQ1VWVlZjMUpWUmtKU1ZIUmFVVlZPZFZGNWVFcFJWVVpLVHpKa1ExRlZUa2RNUlRGQ1VWVXdjMUV3UmtSVGFYaHNVVlZHYkV4RlZrSlJNbGx6VmxWR1FsWlRlRVpSVlU1WFRFZE9RbEZYVFhOU1ZVWkVXbWw0U0ZGVlJraE1SVEZDVVZVd2MxbFZSa0paVTNoRVVWVkdSRXhIYkVOUlZVWndVV2w0UkZGVlJrUk1SV1JDVVZWamMxSlZSa0pTVTNoSVVWVkdTRXhGVmtKUlZWVnpVMVZHUWxOVGVFUlJWVVpFVEVaa1FsRldZM05STUVaQ1VYbDRSRkZWUmtSUE1tUkRVVlZXTUZKVGVFcFJWVVpLVEVaV1FsRldWWE5TVlVaQ1VsUjBkbEZyUmtSYVEzaE9VVlZHVGt4SFJrSlJWMFZ6VVRCR1FsRjVlSEpSYTBaQ1lUQkpjMUV3UmtKUmVYaHFVVlZHYWt4RlRrSlJWVTF6VVRCR1FsRjZkSFpSYTBaRVpHdFJjMVF3UmtKVWVYaElVVlZHU0V4RlRrSlJWVTF6V2xWR1FrNXJUWE5STUVaQ1VYbDRSRkZWUmtSUE1teERVVlZOZWxKRWRHNVJhMFpHVWtONFVGRlZSbEJNUld4Q1VWVnJjMUV3UmtKUmVYaE1VVlZHVEV4RlZrSlJWVlZ6V2xWR1FscFRlRVpSVlVaR1RFVldRbEZWVlRkaU1FcENVVE5DUkV4RmJFSlJWV3MzWkRCS1FsRXdXWE5VVlVaQ1ZGTjRhRkZWUm1oTVJVNUNVVlZOYzJFd1NrSlJWM1JEVEVWT1FsRlZUWE5aTUVaQ1dYbDRSRkZWUmtSTVJVNUNVVlZOTjJOVlNrSlJNMmhGVHpJNVExRlZSa1JNUlRsQ1VWVTRjMU13UmtKVGVYaEdVVlZHUms4elpFTlJWVTVyVEVVNVFsRlZPSE5hVlVaQ1dsTjRSRkZWUmtSTVJYUkNVVlZ6YzFFd1JrSlJlWGhFVVZWR1JFOHpSa05SVlUxMlVXcDBkbEZyUmtSU1EzaFFVVlZHVUV4SFZrSlJWMVZ6VWxWR1FsSlRlRVJSVlVaRVR6SmtRMUZWVFhwUmFYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkR2hSVlU1TFR6RnNRbEZWVFhOVU1FWkNWSGw0VEZGVlJreE1SVlpDVVZWVk4xb3dTa0pSTWxGelZEQkdRbFI1ZUVoUlZVWklURVZPUWxGVlRYTlRNRVpDVTNsNFJGRlZSa1JNUlU1Q1VWVk5OMWxWUmtSaWEwazNWVlZHUkZORGVFUlJWVVpFVEVWT1FsRlZUVGRUVlVaRVUybDRSRkZWUmtSUE1HeENZVlZLVUV4RmRFSlJWWE56VVRCR1FsRjVlRnBSVlVaYVRFVk9RbEV6YUVOTVJXeENVVk4wUTB4RlZrSlJlVGxEVEVWV1FsRllSa1pQTVVaQ1VsaEtSa3hFYUVOUlZVVTBVV3AwVWxGVlRUVlJhWGhLVVZWR1NrOHhiRUpSTUZselkxVldRbEZZUmtaUE1XeENVVE5LUmt4R1JrSlJWa1UzVjFWR1JGVnBlRTVSVlVaT1RFWk9RbEZXVFhOU01FWkNVbmw0VGxGVlJrNU1SVGxDVVZVNGMxRXdSa0pSZVhoSVVWVkdTRTh4YkVKUk1uQkVURWhrUlZGVlJqTlNSSFJhVVZWT05GSkRlRXBSVlVaS1RFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhocVVWVkdha3hGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVE53UkV4RlRrSlJWVTAzVjFWR1JsSnBkM2xSYTBaQ1RXdEpOMWRWUmtSTk1FbHpVMVZHUWxOVGVFWlJWVVpHVEVWV1FsRlZWVGRhTUVwQ1VUQTBjMVF3UmtKVWVYaEdVVlZHUmt4RlRrSlJWVTF6VTFWR1FsTlRlRVpSVlVaR1RFWk9RbEZXVFhOUk1FWkNVWGw0UkZGVlJrUlBNa1pDVVhwV1EwOHhiRUpSTUZGelZEQkdRbFI1ZUZSUlZVWlVURVZPUWxGVlRUZFZNRVpFWWtWSk4xVlZSa0pSZVhoUVVWVkdVRXhGZEVKUlZYTnpVbFZHUWxKVWRGcFJWVTVyVEVWc1FsRlZhM05TVlVaQ1VsTjRSbEZWUmtaUE1tUkRVVlZPVDB4Rk9VSlJWVGh6VWxWR1FsSlRlRVJSVlVaRVRFVjBRbEZWYzNOUk1FWkNVWGw0UkZGVlJrUlBNa1pDVVRKNFEwOHhiRUpTVlZGelZGVkdRbFJUZUV4UlZVWk1URVZPUWxGVlRUZFZNRVpFV1dwMFNsRlZUa2xNUlU1Q1VWVk5OMU5WUmtaU1JITTNWREJHUmxKNmRFcFJWVTVNVEVkT1FsRlhUWE5STUVaRVkwVkpjMUl3UmtKT1JVazNWVlZHUms1VlNYTlVNRVpDVkhsNFNsRlZSa3BNUlRsQ1VWVTRjMUV3UmtKUmVYaEVVVlZHUkV4Rk9VSlJWVGh6VWxWR1FsSlRlRVpSVlVaR1R6RnNRbEY2WkVOTVJXeENVVlZyYzFFd1JrSlJlWGhRVVZWR1VFeEZUa0pSVlUxelVqQkdRbEo1ZUVaUlZVWkdURVZPUWxGVlRYTlRWVVpDVTFONFJsRlZSa1pNUldSQ1VWVmpjMUpWUmtKU1UzaEdVVlZHUms4eVpFTlJWVTAxVVdsNGVGSlZSa0pqVlZVM1dqQktRbEV6U2taTVIyeEVVVlZHY0ZGNmRHNVJhMFpFWVd0TmMxUXdSa0pVZVhoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVHpGc1FsRXlXWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFWVlJrUlVRM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEVwUlZVNU5URVZPUWxGVlRUZFRWVVpHVWtSek4wOTZjemRVTUVaTVVucDBTbEZWVGt4TVJYUkNVVlZ6YzFFd1JrSlJlWGhRVVZWR1VFeEZUa0pSTWpWRFRFWk9RbEZYZEVSTVJWWkNVVEo0UkV4RlZrSlJWMlJHVHpGR1FsSlhhRVpNUld4Q1VUQlZjMUV3UmtKUmVYaFVVVlZHVkU4eGJFSlJNVmx6VXpCR1FsTjVlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVWGw0VkZGVlJsUk1SVTVDVVZWTk4xZFZSa1JsUlVselZEQkdRbFI1ZUZSUlZVWlVURVYwUWxGVmMzTlZWVVpDVlZONFJsRlZUVE5SYW5SYVVWVk9Ra3hGTVVKUlZUQnpVekJHUWxONWVFaFJWVVpJVEVWc1FsRlZhM05oVlU1Q1VWZGtRMHhGVGtKUk1taEVURVJLUTFGVlJsWk1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhIVGtKUlYwMXpVbFZHUkU0d1NYTk9hMDVDVVZSYVJFeEZPVUpSVlRoelZUQkdRbFY1ZUVaUlZVWkdURVZXUWxGNU9VVk1SVlpDVVZWVmMxUXdSa0pVZVhoR1VWVkdSa3hHVGtKUlZrMXpVbFZHUWxKVGVFUlJWVTR5VVdsNFJGRlZSa1JQTVd4Q1VUQlpjMVF3UmtKVWVYaEdVVlZHUmt4RlRrSlJWVTF6VXpCR1FsTjVlRVpSVlVaR1RFVldRbEZWVlhOU1ZVWkNVbE40UmxGVlJrWk1SazVDVVZaTmMxSlZSa0pTVTNoUVVWVkdVRXhGVmtKUlZWVnpVekJHUWxONWVFWlJWVVpHVEVWMFFsRlZjM05TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOTjFVd1JrUk9WVkUzVlZWR1JsSkRlRXBSVlVaS1RFVTVRbEZWT0hOVk1FWkNWWGw0UkZGVlJrUk1SVEZDVVZVd2MxTXdSa0pUZVhoU1VWVkdVa3hGVmtKUlZWVTNWMVZHUkdWRlRYTlVWVVpDVkZONFRGRlZSa3hNUldSQ1VWVmpjMU5WUmtKVFUzaHdVVEJHUWxvd1NYTlJNRVpFWVVWTmMwMXJTa0pSVmxWelVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRYTlpNRVpDV1hsNFJsRlZUVE5SYVhkNVVUQkdRazFyVFhOVU1FWkNWSGw0VkZGVlJsUk1SVTVDVVZWTmMxUlZSa0pVVTNoR1VWVkdSa3hGVmtKUk0wSkdURVZXUWxGVlZYTlVNRVpDVkhsNFJsRlZSa1pNUms1Q1VWWk5jMUpWUmtKU1UzaEVVVlZPTWxGcGVFUlJWVVpFVHpGc1FsRXdXWE5VTUVaQ1ZIbDRSbEZWUmtaTVJVNUNVVlZOYzFNd1JrSlRlWGhHVVZWR1JreEZWa0pSVlZWelVsVkdRbEpUZUVaUlZVWkdURVpPUWxGV1RYTlJNRVpDVVhsNFJsRlZSa1pNUlZaQ1VWVlZjMVF3UmtKVWVYaEdVVlZHUmt4RmRFSlJWWE56VWxWR1FsSlRlRXhSVlVaTVRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUlBNVTVDVVhrNVJVOHhSa0pTVlZGelZGVkdRbFJUZUVoUlZVWklURWhHUTFGVlJuQlJlWGhVVVZWR1ZFeEZUa0pSVlZWelVUQkdRbEY2ZEZKUlZVNHdVa040VGxGVlJrNU1SV1JDVVZWamMxSXdSa0ppTUUwM1YxVkdSRTB3VFhOU1ZVWkNVbE40UmxGVlJrWk1SV1JDVVZWamMxRXdSa0pSZVhoR1VWVkdSazh4YkVKUk1WbHpWREJHUWxSNWVFWlJWVVpHVEVWa1FsRlZZM05STUVaQ1VYbDRVRkZWUmxCUE1VNUNVVE5LUTB4RlRrSlJWVTAzVlZWR1JGSnBlRXBSVlVaS1RFVjBRbEZWYzNOU01FWkNTekJKYzFOVlJrSlRVM2hFVVZWR1JFOHhSa0pTVkdSRVRFVnNRbEZWYXpkWFZVWkVVbWw0VGxGVlJrNU1SV3hDVVZWcmMxRXdSa0pSZVhoc1VWVkdiRXhGVGtKUlZVMXpVakJHUWxKNWVFWlJWVVpHVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSUE1VNUNVVE5TUkU4eFJrSlJWVTF6VkRCR1FsUjVlRTVSVlVaT1RFVldRbEZWVlRkWFZVWkVXbWw0ZWxKVlJrSmpNRlUzVjFWR1JHUkZWWE5aTUVaQ1dYcDBXbEZWVG10TVJYUkNVVlZ6YzFJd1JrSlNlWGhPVVZWR1RreEZUa0pSVlUwM1ZUQkdSR0ZGU1RkVlZVWkdVa040U2xGVlJrcE1SWFJDVVZWemMxSlZSa0pTVkhSYVVWVk9WVXhJUmtWUlZVWjRVa1IwV2xGVlRubFNRM2hRVVZWR1VFeEZaRUpSVldOelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRUZFhWVVpFWWtWSmMxTlZSa0pUVTNoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFeFJWVVpNVEVWV1FsRlZWVGRhTUVwQ1VUSlJjMUl3UmtKU2VYaEVVVlZHUkV4RmRFSlJWWE56VWpCR1FsSjVkM0pSYTBaQ1dYbDRSRkZWUmtSTVJYUkNVVlZ6YzFFd1JrSlJlWGhFVVZWR1JFOHlSa0pSTWpWRVR6Rk9RbEV3V1RkVlZVWkdVa040VUZGVlJsQk1SVlpDVVZWVmMxRXdSa0pSZVhoTVVWVkdURXhGVmtKUlZWVnpVakJHUWtzd1NYTlJNRVpDVVhsNFJGRlZSa1JQTUd4Q1VUTkNSVXhGVGtKUlZVMDNVMVZHUmxKRWN6ZFBlblJRVVZWc1NFOHdiRUpSTUhOelV6QkdRbE41ZUVSUlZVWkVURWRXUWxGWFZYTlJNRVpFVFRCSmMxSXdSa0pPUlVselVsVkdSRTVWU1hOU01FWkNZakJOTjFWVlJrWmpSVTF6VkZWR1FsUlRlRVJSVlU1TFRFVjBRbEZWYzNOU1ZVWkVWRU40VmxGVlJsWk1SVlpDVVRGWmMxa3dSa0paZVhoR1VWVk9iVXhGWkVKUlZXTnpWRlZHUWxSVGVHaFJWVVpvVEVWT1FsRlZUWE5oVlVwQ1VWZHNRMHhGVGtKUlZVMXpVakJHUWxKNWVFWlJWVVpHVEVWa1FsRlZZM05TVlVaQ1VsTjRTbEZWUmtwTVJVNUNVVlZOYzFZd1JrSldlWGhFVVZWR1JFeEZUa0pSVlUwM1ZWVkdSbVJGVlhObFZWWkNVVmhzUms4eFJrSlJNM0JHVEVka1ExRlZSbTVSYW5SU1VWVk9iMUZwZUdoUlZVWm9URVZPUWxGVlRYTmlWVXBDVVZjeFEweEZUa0pSVlUxelVqQkdRbEo1ZUVaUlZVWkdURVZrUWxGVlkzTlNWVVpDVWxONFZsRlZSbFpNUlU1Q1VWVk5jMUV3UmtKUmVuUlNVVlZXTkZKRGVEVlNWVVpDWlZWVk4xVlZSa1JsYTFWelpWVktRbEZZYkVOUE1VWkNVVE53UTB4Rk1VSlJWVEJ6V1ZWR1FsbFRlRVJSVlVaRVRFZDBRMUZWUm5KUmFYaEVVVlZHUkV4SFRrSlJWMDF6VVRCR1FsRjVlRVJSVlVaRVR6RkdRbEpZV2tWTVNGWkdVVlZHTVZKVWRGSlJWVTR5VWxOM01sRnJSa0pPYTBrM1ZWVkdSRTR3U1hOVFZVWkNVMU40VEZGVlJreE1SVlpDVVZWVk4xZFZSa1JXUTNoT1VWVkdUa3hGZEVKUlZYTnpVVEJHUWxGNmRGUlJWVTVwVHpCc1FsRXdaM05STUVaQ1VYcDBTbEZWVmtWUGVuTTNUM3B6TjFRd1JrNVNlblJLVVZWT1RFeEZNVUpSVlRCelVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTmhWVXBDVVZkc1EweEZUa0pSTTBKRVRFVmtRbEZVVWtOTVJWWkNVWHBXUTB4RlpFSlJWemxFVEVWV1FsRXpRa1JNUjFaQ1VWaE9SVTh4UmtKVldGSkZURVV4UWxGVk1ITlpNRVpDV1hsNFNGRlZSbkJSZVhoR1VWVkdSa3hGVGtKUlZVMDNWVlZHUkdWRlVYTlRWVVpDVTFONFRGRlZSa3hNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkU4eFJrSlJNbkJEVEVWc1FsRlZhM05XVlVaQ1ZsTjRTRkZWUmtoTVJYUkNVVlZ6YzFFd1JrSlJlblJTVVZWV01sRnBlRE5TVlVaQ1pEQlZOMVZWUmtSbFJWVnpVekJHUWxONWVFNVJWVVpPVEVaV1FsRldWWE5UVlVaQ1UxTjRiRkZWUm14TVJWWkNVVlZWTjFkVlJrUmxSVTF6VVRCR1FsRjVlRXhSVlVaTVRFVldRbEZWVlhOV1ZVWkNWbE40UkZGVlJrUk1SV1JDVVZWamMxUlZSa0pVVTNob1VWVkdhRXhGVGtKUlZVMXpXVEJHUWxsNWVFUlJWVTR3VWtONFNGRlZSa2hNUlZaQ1VUQm5jMUl3UmtKU2VYaEdVVlZPU1V4R1ZrSlJWbFZ6VWxWR1JGWnBlR3BSVlVacVRFVk9RbEV5V1hOUk1FWkNVWHAwV2xGVlRrZE1SV3hDVVZWcmMxWlZSa0pXVTNoR1VWVkdSazh5WkVOUlZVNXJURVV4UWxGVk1EZFpWVVpFVlVSMFZGRlZUa2RQTVVaQ1VUQlJjMVF3UmtKVWVYaEVVVlZHUkV4RmRFSlJWWE56VWxWR1FsSlRlRlpSVlVaV1RFVldRbEZWVlhOWk1FWkNXWGw0UkZGVlJrUk1SVGxDVVZVNGMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZVMDNVMVZHUkdSclVYTlJNRVpDVVhwMFNsRlZWa1ZQZW5NM1QzcDBVRkZWZEVoUE1HeENVVEJ6YzFSVlJrSlVVM2hFVVZWR1JFeEhUa0pSVjAxelVUQkdSRTB3U1hOU01FWkNUa1ZKYzFKVlJrUk9WVWx6VWpCR1FtSXdUWE5TVlVaRVkwVk5jMVpWUmtKTE1FMXpVbFZHUkV3d1RYTlpNRVpDVGtWTk4xVlZSa1pPVlUxelZEQkdRbFI1ZUVwUlZVWktURVU1UWxGVk9ITlJNRVpDVVhsNFJGRlZSa1JNUlRsQ1VWVTRjMUpWUmtKU1UzaEdVVlZHUms4eGJFSlJlbVJEVEVVeFFsRlZNSE5TTUVaQ1VubDRTRkZWUlRKUmFYaEVVVlZHUkV4RlpFSlJWMFZ6VWxWR1FsSlRlRVpSVlVaR1R6SmtRMUZWVGpCU1EzaE9VVlZHVGt4RmRFSlJWWE56VWpCR1FsSjVlRWhSVlVaSVRFVnNRbEZWYTNOU01FWkNVbmw0UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pSZW5SdVVXdEdSRXd3U1hOVFZVWkNVMU40VEZGVlJreE1SVlpDVVZWVk4ySXdTa0pSTVZGelVqQkdRbEo1ZUVSUlZVWkVURVYwUWxGVmMzTlNNRVpDVW5sM2NsRnJSa0paZVhoRVVWVkdSRXhGZEVKUlZYTnpVVEJHUWxGNWVFUlJWVVpFVHpKc1ExRlZUblZSZW5SdVVXdEdSRkpEZHpKUk1FWkNUbXROTjFvd1NrSlJlbVJFVEVVNVFsRlZPSE5STUVaQ1VYbDRSRkZWUmtSTVJYUkNVVlZ6YzFKVlJrSlNVM2hLVVZWR1NreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekZzUWxFemNFTk1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVldSMHhGTVVKUlZUQnpVMVZHUWxOVGVFaFJWVVUwVVdsNFJGRlZUakJSZVhob1VWVkZkMUY1ZUVaUlZVMTRVWGw0UmxGVlJrWlBNbVJEVVZWT1IweEZiRUpSVld0elVqQkdRbEo1ZUVSUlZVWkVURVYwUWxGVmMzTlNWVVpDVWxSMGRsRnJSa1JaYVhoSVVWVkdTRXhGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWMFFsRlZjM05STUVaQ1VYbDRSRkZWUmtSUE1teERVVlZPYjFGcWRIaFJhMFpDVkZSMGRsRnJSa1JVUTNoS1VWVkdTa3hIUmtKUlYwVnpVbFZHUWxKVWRETlJhMFpFWVd0SmMxTlZSa0pUVTNoUVVWVkdVRXhIUmtKUlYwVnpVekJHUWxONWVGWlJWVVpXVEVWV1FsRlZWVGRPUlVwQ1VUTmFSRXhGWkVKUlZXTnpVVEJHUkZKRGVFcFJWVVpLVEVkc1JGRlZSbTVSYVhoRVVWVk9jMUZwZDNsUmEwWkNWbE40UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoU1VWVkdVa3hGVmtKUk0xcERURVJLUlZGVlJYbFNSSFJ1VVRCR1JHVnJVWE5aVlVaQ1dWTjRVRkZWUmxCTVIwWkNVVmRGYzJKVlNrSlJWekZEVEVVNVFsRlZPSE5STUVaRVpXdFJjMUl3UmtKU2VYaEVVVlZPUzB4RlZrSlJWVlZ6VWxWR1JGUkRlRVpSVlVaR1RFVTVRbEZWT0hOU1ZVWkNVbE40U0ZGVlJraE1SVlpDVVZWVmMxRXdSa1JoYTBselVUQkdSRkpwZUVSUlZVWkVUek5zUTFGVlRrbFBNMlJEVVZWT1JVeEhUa0pSVjAxelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlpWVVpDV1ZONFJGRlZSa1JNUlU1Q1VWVk5OMk5WU2tKUk0wSkVUekk1UTFGVlZrVk1SM1JGVVZWR2NsSkVkSFpSYTBaRVlrVlJjMVF3UmtKVWVYaEVVVlZHUkV4RlRrSlJWVTF6VTFWR1FsTlRlRVpSVlVaR1RFVjBRbEZWYzNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4yRlZTa0pSTTJoRFR6RnNRbEV3WjNOUk1FWkNVWGw0UkZGVlJrUlBNV3hDVWxWWmMxTlZSa0pUVkhSdVVXdEdSRkpwZUZaUlZVWldURVZPUWxGVlRYTlNNRVpDVW5sNFJsRlZSa1pNUldSQ1VWVmpjMUpWUmtKU1UzaEtVVlZHU2t4RlZrSlJWVlZ6VWpCR1FsSjVlRVJSVlVaRVRFVk9RbEZWVFRkWlZVWkVZV3ROTjFkVlJrSlJlWGhRVVZWR1VFeEZkRUpSVlhOelVsVkdRbEpVZEc1UmEwWkVXa040U0ZGVlJraE1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSRXhGVGtKUlZVMDNXVlZHUkZkcWRGSlJWVTVKVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1HeENVVEIzYzFFd1JrSlJlblJLVVZWV1JVOTZjemRVTUVaSVVucDBTbEZWVGt4TVJURkNVVlV3YzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVlUxellUQktRbEZYZEVOTVJVNUNVVE5LUkV4R1JrSlJXRTVFVHpGR1FsSllVa1JNUlhSQ1VWVnpjMVJWUmtKVVUzaFFVVlZHVUV4RmJFSlJWV3R6VlZWR1FsVlRlRVpSVlVaR1R6RnNRbEY2YkVOTVJURkNVVlV3YzFOVlJrSlRVM2hRVVZWR1VFeEZUa0pSVlUxelVUQkdRbEY1ZUZCUlZVWlFURVZXUWxGVlZYTlVWVVpDVkZONFJsRlZSa1pNUlZaQ1VWVlZOMW93U2tKUk0wSkVURVU1UWxGVk9ITlJNRVpDVVhsNFJGRlZSa1JNUldSQ1VWVmpjMUpWUmtKU1UzaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVEZDVVZVd2MxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHhiRUpSTTBKRlRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNVTVDVVRCdk4xTlZSa1JUUTNoRVVWVkdSRTh3YkVKU1ZWRTNUM3AwVUZGVlpFaFBNR3hDVVRCemMxUlZSa0pVVTNoRVVWVkdSRXhITVVOUlZVWjBVV2w0UkZGVlRtOVJlWGhJVVZWRk1GRnBlRVpSVlUweFVXbDRTRkZWUm5aUmVYaEdVVlZPZDFGNWVGWlJWVVowVVdwMFVsRlZWblZSYVhoS1VWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNWVGSlJWVVpTVEVWc1FsRlZhM05TTUVaQ1VubDRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEZPVUpSVlRoelUxVkdRbE5UZUVoUlZVWklURVZPUWxGVlRYTlNWVVpDVWxSMFdsRlZUWHBSZVhoT1VWVkdUa3hGYkVKUlZXdHpZVlZPUWxGWFpFTk1SVTVDVVROb1EweEVTa05SVlVaV1RFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1Sa1pDVVZaRmMxSlZSa1JrYTBseldqQldRbEZYWkVaTVJUbENVVlU0YzFFd1JrUmphMVZ6VWpCR1FsSjVlRVJSVlU1TFRFVldRbEZWVlhOU1ZVWkVVME40UmxGVlJrWk1SVGxDVVZVNGMxSlZSa0pTVTNoSVVWVkdTRXhGVmtKUlZWVnpVVEJHUkdGclNYTlJNRVpDVVhwMFZGRlZUa2xQTVVaQ1VUQlJjMU5WUmtKVFUzaEVVVlZHUkV4R1ZrSlJWbFZ6VWxWR1FsSlVkRnBSVlU1dFRFVXhRbEZWTUhOVFZVWkNVMU40Y0ZFd1JrSmFNRWx6VVRCR1JHVkZTWE5OYTBwQ1VWWlZjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VlZWR1FsVlRlRVpSVlU0eVVXbDNkMUV3UmtKTlJVMXpWREJHUWxSNWVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSbEZWUmtaTVJWWkNVVE5vUlV4RlZrSlJWVlZ6VkRCR1FsUjVlRVpSVlVaR1RFVmtRbEZWWTNOU1ZVWkNVbE40UkZGVlRuRlJhWGhFVVZWR1JFOHhUa0pSTUdjM1UxVkdSRk5EZUVSUlZVWkVUekJPUWxFd1dUZFJWVVo1VjFWUmMyTXdUa0pqVm14RVR6QkdRbEpWVVhOVk1FWkNWWGw0VUZGVlJsQk1SVTVDVVZWTmMxUXdSa0phTUUwM1UxVkdSRXd3VFhOVU1FWkNWSGw0U2xGVlJrcE1SVTVDVVZWTmMxVXdSa0pWZVhoRVVWVkdSRXhGT1VKUlZUaHpVbFZHUWxKVGVFcFJWVVpLVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFGVlJrUk5WVTF6VVRCR1FsRjVTamtpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2V5QjJZV3gxWlRvZ2RISjFaU0I5S1R0Y2JtVjRjRzl5ZEhNdVkzSmxZWFJsUVhONWJtTk5hV1JrYkdWM1lYSmxJRDBnZG05cFpDQXdPMXh1THlvcVhHNGdLaUJLYzI5dVVuQmpSVzVuYVc1bElHOXViSGtnWVdOalpYQjBjeUJqWVd4c1ltRmpheTFpWVhObFpDQnRhV1JrYkdWM1lYSmxJR1JwY21WamRHeDVMbHh1SUNvZ1kzSmxZWFJsUVhONWJtTk5hV1JrYkdWM1lYSmxJR1Y0YVhOMGN5QjBieUJsYm1GaWJHVWdZMjl1YzNWdFpYSnpJSFJ2SUhCaGMzTWdhVzRnWVhONWJtTWdiV2xrWkd4bGQyRnlaVnh1SUNvZ1puVnVZM1JwYjI1ekxseHVJQ3BjYmlBcUlFRnplVzVqSUcxcFpHUnNaWGRoY21VZ2FHRjJaU0J1YnlCY0ltVnVaRndpSUdaMWJtTjBhVzl1TGlCSmJuTjBaV0ZrTENCMGFHVjVJRndpWlc1a1hDSWdhV1lnZEdobGVTQnlaWFIxY201Y2JpQXFJSGRwZEdodmRYUWdZMkZzYkdsdVp5QmNJbTVsZUhSY0lpNGdVbUYwYUdWeUlIUm9ZVzRnY0dGemMybHVaeUJwYmlCbGVIQnNhV05wZENCeVpYUjFjbTRnYUdGdVpHeGxjbk1zWEc0Z0tpQmhjM2x1WXlCdGFXUmtiR1YzWVhKbElHTmhiaUJ6YVcxd2JIa2dZWGRoYVhRZ1hDSnVaWGgwWENJc0lHRnVaQ0J3WlhKbWIzSnRJRzl3WlhKaGRHbHZibk1nYjI0Z2RHaGxYRzRnS2lCeVpYTndiMjV6WlNCdlltcGxZM1FnZDJobGJpQmxlR1ZqZFhScGIyNGdjbVZ6ZFcxbGN5NWNiaUFxWEc0Z0tpQlVieUJoWTJOdmJYQnNhWE5vSUhSb2FYTXNJR055WldGMFpVRnplVzVqVFdsa1pHeGxkMkZ5WlNCd1lYTnpaWE1nZEdobElHRnplVzVqSUcxcFpHUnNaWGRoY21VZ1lWeHVJQ29nZDNKaGNIQmxaQ0JjSW01bGVIUmNJaUJtZFc1amRHbHZiaTRnVkdoaGRDQm1kVzVqZEdsdmJpQmpZV3hzY3lCMGFHVWdhVzUwWlhKdVlXd2dTbk52YmxKd1kwVnVaMmx1WlZ4dUlDb2dYQ0p1WlhoMFhDSWdablZ1WTNScGIyNGdkMmwwYUNCaElISmxkSFZ5YmlCb1lXNWtiR1Z5SUhSb1lYUWdjbVZ6YjJ4MlpYTWdZU0J3Y205dGFYTmxJSGRvWlc0Z1kyRnNiR1ZrTGx4dUlDcGNiaUFxSUZSb1pTQnlaWFIxY200Z2FHRnVaR3hsY2lCM2FXeHNJR0ZzZDJGNWN5QmlaU0JqWVd4c1pXUXVJRWwwY3lCeVpYTnZiSFYwYVc5dUlHOW1JSFJvWlNCd2NtOXRhWE5sWEc0Z0tpQmxibUZpYkdWeklIUm9aU0JqYjI1MGNtOXNJR1pzYjNjZ1pHVnpZM0pwWW1Wa0lHRmliM1psTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJqY21WaGRHVkJjM2x1WTAxcFpHUnNaWGRoY21Vb1lYTjVibU5OYVdSa2JHVjNZWEpsS1NCN1hHNGdJQ0FnY21WMGRYSnVJR0Z6ZVc1aklDaHlaWEVzSUhKbGN5d2dibVY0ZEN3Z1pXNWtLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDOHZJRzVsZUhSUWNtOXRhWE5sSUdseklIUm9aU0JyWlhrZ2RHOGdkR2hsSUdsdGNHeGxiV1Z1ZEdGMGFXOXVYRzRnSUNBZ0lDQWdJQzh2SUdsMElHbHpJSEpsYzI5c2RtVmtJR0o1SUhSb1pTQnlaWFIxY200Z2FHRnVaR3hsY2lCd1lYTnpaV1FnZEc4Z2RHaGxYRzRnSUNBZ0lDQWdJQzh2SUZ3aWJtVjRkRndpSUdaMWJtTjBhVzl1WEc0Z0lDQWdJQ0FnSUd4bGRDQnlaWE52YkhabFRtVjRkRkJ5YjIxcGMyVTdYRzRnSUNBZ0lDQWdJR052Ym5OMElHNWxlSFJRY205dGFYTmxJRDBnYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1VcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1WT1pYaDBVSEp2YldselpTQTlJSEpsYzI5c2RtVTdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCc1pYUWdjbVYwZFhKdVNHRnVaR3hsY2tOaGJHeGlZV05ySUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnYkdWMElHNWxlSFJYWVhORFlXeHNaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnTHk4Z1ZHaHBjeUIzYVd4c0lHSmxJR05oYkd4bFpDQmllU0IwYUdVZ1kyOXVjM1Z0WlhJbmN5QmhjM2x1WXlCdGFXUmtiR1YzWVhKbExseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCaGMzbHVZMDVsZUhRZ1BTQmhjM2x1WXlBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGgwVjJGelEyRnNiR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRmRsSUhCaGMzTWdZU0J5WlhSMWNtNGdhR0Z1Wkd4bGNpQjBieUJ1WlhoMEtDa3VJRmRvWlc0Z2FYUWdhWE1nWTJGc2JHVmtJR0o1SUhSb1pTQmxibWRwYm1Vc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCMGFHVWdZMjl1YzNWdFpYSW5jeUJoYzNsdVl5QnRhV1JrYkdWM1lYSmxJSGRwYkd3Z2NtVnpkVzFsSUdWNFpXTjFkR2x1Wnk1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0J1YjJSbEwyTmhiR3hpWVdOckxYSmxkSFZ5Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdibVY0ZENnb2NuVnVVbVYwZFhKdVNHRnVaR3hsY25ORFlXeHNZbUZqYXlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZSb2FYTWdZMkZzYkdKaFkyc2dZMjl0WlhNZ1puSnZiU0JLYzI5dVVuQmpSVzVuYVc1bExsOXlkVzVTWlhSMWNtNUlZVzVrYkdWeWMxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmtoaGJtUnNaWEpEWVd4c1ltRmpheUE5SUhKMWJsSmxkSFZ5YmtoaGJtUnNaWEp6UTJGc2JHSmhZMnM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaVTVsZUhSUWNtOXRhWE5sS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0YzWVdsMElHNWxlSFJRY205dGFYTmxPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lYZGhhWFFnWVhONWJtTk5hV1JrYkdWM1lYSmxLSEpsY1N3Z2NtVnpMQ0JoYzNsdVkwNWxlSFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c1bGVIUlhZWE5EWVd4c1pXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoZDJGcGRDQnVaWGgwVUhKdmJXbHpaVHNnTHk4Z2QyVWdiWFZ6ZENCM1lXbDBJSFZ1ZEdsc0lIUm9aU0J5WlhSMWNtNGdhR0Z1Wkd4bGNpQnBjeUJqWVd4c1pXUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY201SVlXNWtiR1Z5UTJGc2JHSmhZMnNvYm5Wc2JDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxibVFvYm5Wc2JDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMkYwWTJnZ0tHVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVjBkWEp1U0dGdVpHeGxja05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVTR0Z1Wkd4bGNrTmhiR3hpWVdOcktHVnljbTl5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdVpDaGxjbkp2Y2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dWZWeHVaWGh3YjNKMGN5NWpjbVZoZEdWQmMzbHVZMDFwWkdSc1pYZGhjbVVnUFNCamNtVmhkR1ZCYzNsdVkwMXBaR1JzWlhkaGNtVTdYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxa1lYUmhPbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNDdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcHRZVmQ0YkVscWIybFpNMHBzV1ZoU2JGRllUalZpYlU1T1lWZFNhMkpIVmpOWldFcHNURzF3ZWtscGQybGpNamt4WTIxT2JGVnRPWFprUTBrMlNXbEpjMGx1VG5aa1dFcHFXbGhOYVU5c2MybE1hVFIyWXpOS2Frd3lUbmxhVjBZd1dsVkdlbVZYTldwVVYyeHJXa2Q0YkdReVJubGFVelV3WTNsS1pFeERTblZaVnpGc1kzbEpObGN4TUhOSmJURm9ZMGhDY0dKdFpIcEphbTlwVDNwek4xRlZSbTVSYTBVM1QzcHpOMDk2Y3pkUGVuTTNUM3B6TjA5NmN6ZFNNRVp1VVd0ak4xRlZSa1JUUTNoVVVWVkdibEZwZUhoUmEwWkNZMVZKYzFFd1JrUmlhMDF6V2xWR1FrNXJUVGRUVlVaR1RqQk5jMVF3UmtKVWVYaE1VVlZHVEV4RlZrSlJWVlZ6VWpCR1FsSjVlRVpSVlVaR1RFVmtRbEZWWTNOU1ZVWkNVbE40U2xGVlJrcE1SVlpDVVZWVmMxSXdSa0pTZVhoR1VWVkdSa3hGVmtKUlZWVTNWVlZHUkdKclRYTkxNRTVDVVZOMFJFOHhSa0pSZVRsRVRFaEdSVkZWUm5oU1JIUlNVVlZPZVZKRGVISlJhMFpDWVRCSk4xVlZSa1JpUlVselUxVkdRbE5UZUhKUmEwWkNUMFZKYzFFd1JrSlJlblJTVVZWT2RWRjVlRTVSVlVaT1RFWmtRbEZXWTNOU01FWkNVbmw0U2xGVlJrcE1SVGxDVVZVNGMxRXdSa0pSZVhoRVVWVkdSRXhGT1VKUlZUaHpVbFZHUWxKVGVFWlJWVVpHVHpGc1FsRjZSa1JNUjNSRFVWVkdjbEZwZUVoUlZVWklURVU1UWxGVk9ITlJNRVpDVVhwMFVsRlZUWFpSYVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVlpKVEVWc1FsRlZhM05qVlVwQ1VWaEdRMHhGWkVKUlZtdHpVMVZHUWxOVGVFUlJWVVpFVHpGR1FsRjZSa1JNUld4Q1VWVnJjMWxWUmtKWlUzaElVVlZHU0V4RmRFSlJWWE56VVRCR1FsRjZkRkpSVlZWNFVXbDNkMUpGUmtKTlJWRTNWVlZHUkUxVlVYTlVWVVpDVkZONFZGRlZSbFJNUldSQ1VWVmpjMU13UmtKVGVYaEtVVlZHU2t4RlZrSlJWVlUzVjFWR1JFMHdTWE5aVlVaQ1dWTjRTRkZWUmtoTVJXeENVVlZyYzFFd1JrSlJlblJhVVZWV2VWRnBlREZTVlVaQ1pGVlZOMWRWUmtSa2ExVnpaVlZTUWxGWWJFVlBNV3hDVVROd1JVeEhaRVZSVlVadVVrUjBXbEZWVG05U1EzaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjVlRFZSYTBaQ1pWVkpjMUpWUmtKU1UzaEdVVlZHUms4eVpFTlJWVTV4VVhsM01GSkZSa0pPUlZFM1dqQktRbEY2VmtWTVNFWkRVVlZHZUZGcGVFaFJWVVpJVEVoc1ExRlZSalZSYVhoRVVWVkdSRTh5WkVOUlZVNXpVa040Y2xGclJrSmhNRWx6VWxWR1FsSlRlRVJSVlVaRVR6RnNRbEV6V2tOTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHhiRUpSTUdkelZGVkdRbFJUZUZoUlZVWllURVZPUWxGVlRUZFZWVVpFWTBWSmMxRXdSa0pSZVhoRVVWVkdSRTh4UmtKU1ZWbHpVMVZHUWxOVWRGcFJWVTVIVEVVeFFsRlZNSE5hVlVaQ1dsTjRSRkZWUmtSTVJXUkNVVlZqYzFKVlJrSlNVM2hJVVZWR1NFeEZWa0pSVlZWelZUQkdRbFY1ZUVSUlZVWkVURVZPUWxGVlRUZFhWVVpHVFRCTmMxTlZSa0pUVTNob1VWVkdhRXhGVmtKUlZWVTNXakJLUWxFeWNFTk1SVEZDVVZVd2MxWXdSa0pXZVhoRVVWVkdSRXhGVGtKUlZVMXpZVEJTUWxGWGRFVlBNbVJEVVZWT2QxSlRlSGhSYTBaQ1N6Qk5jMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjZkR2hSVlU0MFVrUjBjRkZyUmtKVVZIUnVVV3RHUkZSRGVFaFJWVVpJVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOTjFsVlJrUlhSSFJVVVZWT1IwOHhSa0pSVlUxelZEQkdRbFI1ZUV4UlZVWk1URVZXUWxGVlZUZFhWVVpFV2tONFNsRlZSa3BNU0VaRFVWVkdlRkZwZUVaUlZVWkdUekprUTFGVlRqUlJhWGg0VVd0R1Frc3dUWE5STUVaQ1VYbDRURkZWUmt4TVJVNUNVVlZOYzFFd1JrSlJlblJvVVZWT05sSkVkSEJSYTBaQ1ZGUjBibEZyUmtSVVEzaElVVlZHU0V4RlRrSlJWVTF6VXpCR1FsTjVlRVJSVlVaRVRFVk9RbEZWVFRkWlZVWkVWMnAwVkZGVlRrZFBNR3hDVVRCbmMxRXdSa0pSZVhoRVVWVkdSRTh3UmtKUk1HOXpVVEJHUWxGNmRFSlJVemxFVWtONGVsSkZSWEpSTUUxcFpsRTlQU0lzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN0lIWmhiSFZsT2lCMGNuVmxJSDBwTzF4dVpYaHdiM0owY3k1amNtVmhkR1ZUWTJGbVptOXNaRTFwWkdSc1pYZGhjbVVnUFNCMmIybGtJREE3WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZUWTJGbVptOXNaRTFwWkdSc1pYZGhjbVVvYUdGdVpHeGxjbk1wSUh0Y2JpQWdJQ0J5WlhSMWNtNGdLSEpsY1N3Z2NtVnpMQ0J1WlhoMExDQmxibVFwSUQwK0lIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2FHRnVaR3hsY2lBOUlHaGhibVJzWlhKelczSmxjUzV0WlhSb2IyUmRPMXh1SUNBZ0lDQWdJQ0F2THlCcFppQnVieUJvWVc1a2JHVnlMQ0J5WlhSMWNtNWNiaUFnSUNBZ0lDQWdhV1lnS0doaGJtUnNaWElnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGVIUW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBdkx5QnBaaUJvWVc1a2JHVnlJR2x6SUdadUxDQmpZV3hzSUdGeklHMXBaR1JzWlhkaGNtVmNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJvWVc1a2JHVnlJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYUdGdVpHeGxjaWh5WlhFc0lISmxjeXdnYm1WNGRDd2daVzVrS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXZMeUJwWmlCb1lXNWtiR1Z5SUdseklITnZiV1VnYjNSb1pYSWdkbUZzZFdVc0lIVnpaU0JoY3lCeVpYTjFiSFJjYmlBZ0lDQWdJQ0FnY21WekxuSmxjM1ZzZENBOUlHaGhibVJzWlhJN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbGJtUW9LVHRjYmlBZ0lDQjlPMXh1ZlZ4dVpYaHdiM0owY3k1amNtVmhkR1ZUWTJGbVptOXNaRTFwWkdSc1pYZGhjbVVnUFNCamNtVmhkR1ZUWTJGbVptOXNaRTFwWkdSc1pYZGhjbVU3WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMWtZWFJoT21Gd2NHeHBZMkYwYVc5dUwycHpiMjQ3WW1GelpUWTBMR1Y1U2pKYVdFcDZZVmM1ZFVscWIzcE1RMHB0WVZkNGJFbHFiMmxaTTBwc1dWaFNiRlV5VG1oYWJWcDJZa2RTVG1GWFVtdGlSMVl6V1ZoS2JFeHRjSHBKYVhkcFl6STVNV050VG14VmJUbDJaRU5KTmtscFNYTkpiazUyWkZoS2FscFlUV2xQYkhOcFRHazBkbU16U21wTU1rNTVXbGRHTUZwV1RtcFpWMXB0WWpKNGExUlhiR3RhUjNoc1pESkdlVnBUTlRCamVVcGtURU5LZFZsWE1XeGplVWsyVnpFd2MwbHRNV2hqU0VKd1ltMWtla2xxYjJsUGVuTTNVVlZHU2xGVGVGUlJWVVp1VVdsNE0xRnJSa0prTUVselVUQkdRbEY1ZUZKUlZWWTBVWHAwU2xGVlRrUk1SVGxDVVZVNGMxRXdSa0pSZVhoSVVWVkdTRXhGVmtKUlZWVnpVakJHUWxKNWVFWlJWVVpHVEVWc1FsRlZhM05TVlVaQ1VsTjRTRkZWUmtoTVJWWkNVVlZWYzFKVlJrSlNWSFJTVVZWTk0xRnBlRTVSVlVaT1RFVTVRbEZWT0hOU01FWkNVbmw0VWxGVlJsSk1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNWVFUlJWVVpFVHpGR1FsRXpTa1JNU0dSRFVWVkdNMUZxZEZKUlZVNDBVV2w0U2xGVlJrcE1SVGxDVVZVNGMxTXdSa0pUZVhoVVVWVkdWRXhGVmtKUlZWVTNWMVZHUkdWclNYTlVNRVpDVkhsNFNsRlZSa3BNUlZaQ1VWVlZjMUV3UmtKUmVuUlVVVlZPYlU4eFJrSlJNRkZ6WkZWT1FsRllWa1JQTVVaQ1VUTmFSRXhGYkVKUlZXdHpWREJHUWxSNWVGQlJWVVpRVEVWMFFsRlZjM05XVlVaQ1ZsTjRSbEZWUmtaUE1XeENVVEp3UkV4Rk9VSlJWVGh6VkRCR1FsUjVlRVJSVlVaRVRFVmtRbEZWWTNOU1ZVWkNVbE40U0ZGVlJraE1SVlpDVVZWVmMxTlZSa0pUVTNoR1VWVkdSa3hGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVHpGT1FsRXpTa1JQTVVaQ1VUQlJjMW93VWtKUlYyUkZUekZHUWxGNU9VUk1SV1JDVVZOMFEweEZUa0pSVlUxelZGVkdRbFJUZUVoUlZVWklURVU1UWxGVk9ITlJNRVpDVVhwMFVsRlZUbk5TUTNoUVVWVkdVRXhGWkVKUlZXTnpVbFZHUWxKVGVFUlJWVVpFVHpCc1FsRXlXWE5STUVaQ1VYbDRSRkZWUmtSUE1FWkNVVEJ2YzFFd1JrSlJlblJDVVZkd1ExSkRkekJTUlVad1VXdE5hV1pSUFQwaUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dleUIyWVd4MVpUb2dkSEoxWlNCOUtUdGNibVY0Y0c5eWRITXVaMlYwVlc1cGNYVmxTV1FnUFNCMmIybGtJREE3WEc0dkx5QjFhVzUwTXpJZ0tIUjNieWR6SUdOdmJYQnNaVzFsYm5RcElHMWhlRnh1THk4Z2JXOXlaU0JqYjI1elpYSjJZWFJwZG1VZ2RHaGhiaUJPZFcxaVpYSXVUVUZZWDFOQlJrVmZTVTVVUlVkRlVseHVZMjl1YzNRZ1RVRllJRDBnTkRJNU5EazJOekk1TlR0Y2JteGxkQ0JwWkVOdmRXNTBaWElnUFNCTllYUm9MbVpzYjI5eUtFMWhkR2d1Y21GdVpHOXRLQ2tnS2lCTlFWZ3BPMXh1Wm5WdVkzUnBiMjRnWjJWMFZXNXBjWFZsU1dRb0tTQjdYRzRnSUNBZ2FXUkRiM1Z1ZEdWeUlEMGdLR2xrUTI5MWJuUmxjaUFySURFcElDVWdUVUZZTzF4dUlDQWdJSEpsZEhWeWJpQnBaRU52ZFc1MFpYSTdYRzU5WEc1bGVIQnZjblJ6TG1kbGRGVnVhWEYxWlVsa0lEMGdaMlYwVlc1cGNYVmxTV1E3WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMWtZWFJoT21Gd2NHeHBZMkYwYVc5dUwycHpiMjQ3WW1GelpUWTBMR1Y1U2pKYVdFcDZZVmM1ZFVscWIzcE1RMHB0WVZkNGJFbHFiMmxhTWxZd1ZsYzFjR05ZVm14VFYxRjFZVzVOYVV4RFNucGlNMVo1V1RKV1UySXlPVEJKYW05cFNXbDNhV015T1RGamJVNXNZM2xKTmxkNVNYVk1hVGw2WTIxTmRsb3lWakJXVnpWd1kxaFdiRk5YVVhWa1NFMXBXRk4zYVdKdFJuUmFXRTFwVDJ4MFpFeERTblJaV0VKM1lWYzFibU41U1RaSmFuTTNUekJHUWxGVlJYTmFNRTVDVVZka1JFOHdSa0pSTW1oRVRFZHNSVkZWUm5CU1JIUkNVVlZPY1ZKRGVFNVJWVVpPVEVWa1FsRlZZM05TTUVaQ1VubDRWbEZWUmxaTVJVNUNVVlZOTjFGVlJrUmthMGx6VTFWR1FsTlRlRlJSVlVaVVRFVmtRbEZWWTNOVFZVWkNVMU40UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpWRlZHUWxSVGVFWlJWVVpHVEVWa1FsRlZZM05TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOTjFGVlJrWmhSVkZ6VlRCR1Fsb3dTWE5XTUVaQ1ZucDBTbEZWVGpaUmFYaFVVVlZHVkV4RlpFSlJWV056VVRCR1FsRjVlRlJSVlVaVVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SV1JDVVZWamMxSXdSa0pTZVhoRVVWVkdSRTh3YkVKUk1uaEVURVU1UWxGVk9ITlZNRVpDVlhsNFJGRlZSa1JQTUVaQ1VUSTFRMHhGVGtKUlZVMDNVVlZHU1ZKRGVISlJNRVpJVVhsS09TSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1Wlhod2IzSjBjeTVqY21WaGRHVkpaRkpsYldGd1RXbGtaR3hsZDJGeVpTQTlJSFp2YVdRZ01EdGNibU52Ym5OMElHZGxkRlZ1YVhGMVpVbGtYekVnUFNCeVpYRjFhWEpsS0Z3aUxpOW5aWFJWYm1seGRXVkpaRndpS1R0Y2JtWjFibU4wYVc5dUlHTnlaV0YwWlVsa1VtVnRZWEJOYVdSa2JHVjNZWEpsS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUFvY21WeExDQnlaWE1zSUc1bGVIUXNJRjlsYm1RcElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiM0pwWjJsdVlXeEpaQ0E5SUhKbGNTNXBaRHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdibVYzU1dRZ1BTQm5aWFJWYm1seGRXVkpaRjh4TG1kbGRGVnVhWEYxWlVsa0tDazdYRzRnSUNBZ0lDQWdJSEpsY1M1cFpDQTlJRzVsZDBsa08xeHVJQ0FnSUNBZ0lDQnlaWE11YVdRZ1BTQnVaWGRKWkR0Y2JpQWdJQ0FnSUNBZ2JtVjRkQ2dvWkc5dVpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ4TG1sa0lEMGdiM0pwWjJsdVlXeEpaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjeTVwWkNBOUlHOXlhV2RwYm1Gc1NXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCa2IyNWxLQ2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwN1hHNTlYRzVsZUhCdmNuUnpMbU55WldGMFpVbGtVbVZ0WVhCTmFXUmtiR1YzWVhKbElEMGdZM0psWVhSbFNXUlNaVzFoY0UxcFpHUnNaWGRoY21VN1hHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFrWVhSaE9tRndjR3hwWTJGMGFXOXVMMnB6YjI0N1ltRnpaVFkwTEdWNVNqSmFXRXA2WVZjNWRVbHFiM3BNUTBwdFlWZDRiRWxxYjJsaFYxSlRXbGN4YUdORk1YQmFSMUp6V2xoa2FHTnRWWFZoYmsxcFRFTktlbUl6Vm5sWk1sWlRZakk1TUVscWIybEphWGRwWXpJNU1XTnRUbXhqZVVrMlYzbEpkVXhwT1hwamJVMTJZVmRTVTFwWE1XaGpSVEZ3V2tkU2MxcFlaR2hqYlZWMVpFaE5hVmhUZDJsaWJVWjBXbGhOYVU5c2RHUk1RMHAwV1ZoQ2QyRlhOVzVqZVVrMlNXcHpOMDh3UmtKUlZVVnpTekJPUWxGVVVrUlBNRVpDVW5wV1JFeEdUa0pSVjJSRFRFaFdRMUZWUmpGUmFuUktVVlZPZVZGNWVGQlJWVVpRVEVWT1FsRlZUWE5TTUVaQ1VubDRSbEZWUmtaTVJXUkNVVlZqYzFKVlJrSlNVM2hLVVZWR1NreEZWa0pSVlZWelUxVkdRbE5UZUVaUlZVWkdURVZXUWxGVlZUZFZWVVpFVDFWSmMxUlZSa0pVVTNoV1VWVkdWa3hGWkVKUlZXTnpVakJHUWxKNWVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYcDBVbEZWVFhoUmFYaE9VVlZHVGt4RmRFSlJWWE56VWpCR1FsSjVlRFZSYTBaQ1ZubDRSbEZWUmtaTVJVNUNVVlZOTjFWVlJrUk9WVWx6VWpCR1FsSjVlRVJSVlVaRVRFVldRbEZWVlhOU01FWkNVbmw0VEZGVlJreE1SVTVDVVZWTk4xVlZSa1JhYVhoSVVWVkdTRXhGVGtKUlZVMXpVbFZHUWxKVGVFaFJWVVpJVEVWMFFsRlZjM05STUVaQ1VYcDBVbEZWVG0xTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEZiRUpSVld0elVsVkdRbEpUZUVaUlZVWkdUekZzUWxFeGIzTlNNRVpDVW5sNFJGRlZSa1JNUlZaQ1VWVlZjMUl3UmtKU2VYaFdVVlZHVmt4RlRrSlJWVTAzVjFWR1JHTkZTWE5TTUVaQ1VubDRSRkZWUmtSTVJWWkNVVlZWYzFJd1JrSlNlWGhXVVZWR1ZreEZUa0pSVlUwM1YxVkdSR05GU1hOVFZVWkNVMU40UmxGVlJrWk1SVTVDVVZWTk4xVlZSa1JXUTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRFcFJWVTVOVEVWT1FsRlZUWE5STUVaQ1VYcDBRbEZWVGt0TVJVNUNVVlZOTjFGVlJtRlNRM2QzVWtWR1dsRjVTamtpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYm5aaGNpQmZYMk55WldGMFpVSnBibVJwYm1jZ1BTQW9kR2hwY3lBbUppQjBhR2x6TGw5ZlkzSmxZWFJsUW1sdVpHbHVaeWtnZkh3Z0tFOWlhbVZqZEM1amNtVmhkR1VnUHlBb1puVnVZM1JwYjI0b2J5d2diU3dnYXl3Z2F6SXBJSHRjYmlBZ0lDQnBaaUFvYXpJZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnYXpJZ1BTQnJPMXh1SUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h2TENCck1pd2dleUJsYm5WdFpYSmhZbXhsT2lCMGNuVmxMQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dleUJ5WlhSMWNtNGdiVnRyWFRzZ2ZTQjlLVHRjYm4wcElEb2dLR1oxYm1OMGFXOXVLRzhzSUcwc0lHc3NJR3N5S1NCN1hHNGdJQ0FnYVdZZ0tHc3lJRDA5UFNCMWJtUmxabWx1WldRcElHc3lJRDBnYXp0Y2JpQWdJQ0J2VzJzeVhTQTlJRzFiYTEwN1hHNTlLU2s3WEc1MllYSWdYMTlsZUhCdmNuUlRkR0Z5SUQwZ0tIUm9hWE1nSmlZZ2RHaHBjeTVmWDJWNGNHOXlkRk4wWVhJcElIeDhJR1oxYm1OMGFXOXVLRzBzSUdWNGNHOXlkSE1wSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJ3SUdsdUlHMHBJR2xtSUNod0lDRTlQU0JjSW1SbFptRjFiSFJjSWlBbUppQWhUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLR1Y0Y0c5eWRITXNJSEFwS1NCZlgyTnlaV0YwWlVKcGJtUnBibWNvWlhod2IzSjBjeXdnYlN3Z2NDazdYRzU5TzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVYMTlsZUhCdmNuUlRkR0Z5S0hKbGNYVnBjbVVvWENJdUwybGtVbVZ0WVhCTmFXUmtiR1YzWVhKbFhDSXBMQ0JsZUhCdmNuUnpLVHRjYmw5ZlpYaHdiM0owVTNSaGNpaHlaWEYxYVhKbEtGd2lMaTlqY21WaGRHVkJjM2x1WTAxcFpHUnNaWGRoY21WY0lpa3NJR1Y0Y0c5eWRITXBPMXh1WDE5bGVIQnZjblJUZEdGeUtISmxjWFZwY21Vb1hDSXVMMk55WldGMFpWTmpZV1ptYjJ4a1RXbGtaR3hsZDJGeVpWd2lLU3dnWlhod2IzSjBjeWs3WEc1ZlgyVjRjRzl5ZEZOMFlYSW9jbVZ4ZFdseVpTaGNJaTR2WjJWMFZXNXBjWFZsU1dSY0lpa3NJR1Y0Y0c5eWRITXBPMXh1WDE5bGVIQnZjblJUZEdGeUtISmxjWFZwY21Vb1hDSXVMMHB6YjI1U2NHTkZibWRwYm1WY0lpa3NJR1Y0Y0c5eWRITXBPMXh1WDE5bGVIQnZjblJUZEdGeUtISmxjWFZwY21Vb1hDSXVMMjFsY21kbFRXbGtaR3hsZDJGeVpWd2lLU3dnWlhod2IzSjBjeWs3WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMWtZWFJoT21Gd2NHeHBZMkYwYVc5dUwycHpiMjQ3WW1GelpUWTBMR1Y1U2pKYVdFcDZZVmM1ZFVscWIzcE1RMHB0WVZkNGJFbHFiMmxoVnpWcldsaG5kV0Z1VFdsTVEwcDZZak5XZVZreVZsTmlNamt3U1dwdmFVbHBkMmxqTWpreFkyMU9iR041U1RaWGVVbDFUR2s1ZW1OdFRYWmhWelZyV2xobmRXUklUV2xZVTNkcFltMUdkRnBZVFdsUGJIUmtURU5LZEZsWVFuZGhWelZ1WTNsSk5rbHFjemRQZW5NM1QzcHpOMDk2Y3pkUE1FWkNVVlZGYzJNd1VrSlJWemxFVHpCR1FsRXpRa1JNUkVKRlVWVkdNMUY2ZEVKUlZVNDBVWGwzTWxKRlJrSk5hMDAzVVZWR1JFMHdUWE5hTUZKQ1VWUm9RMDh3UmtKUmVteERURWQwUlZGVlJtNVJlblJDVVZWT2IxRjVlSFpTUlVaQ1lUQk5hV1pSUFQwaUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dleUIyWVd4MVpUb2dkSEoxWlNCOUtUdGNibVY0Y0c5eWRITXViV1Z5WjJWTmFXUmtiR1YzWVhKbElEMGdkbTlwWkNBd08xeHVZMjl1YzNRZ1NuTnZibEp3WTBWdVoybHVaVjh4SUQwZ2NtVnhkV2x5WlNoY0lpNHZTbk52YmxKd1kwVnVaMmx1WlZ3aUtUdGNibVoxYm1OMGFXOXVJRzFsY21kbFRXbGtaR3hsZDJGeVpTaHRhV1JrYkdWM1lYSmxVM1JoWTJzcElIdGNiaUFnSUNCamIyNXpkQ0JsYm1kcGJtVWdQU0J1WlhjZ1NuTnZibEp3WTBWdVoybHVaVjh4TGtwemIyNVNjR05GYm1kcGJtVW9LVHRjYmlBZ0lDQnRhV1JrYkdWM1lYSmxVM1JoWTJzdVptOXlSV0ZqYUNnb2JXbGtaR3hsZDJGeVpTa2dQVDRnWlc1bmFXNWxMbkIxYzJnb2JXbGtaR3hsZDJGeVpTa3BPMXh1SUNBZ0lISmxkSFZ5YmlCbGJtZHBibVV1WVhOTmFXUmtiR1YzWVhKbEtDazdYRzU5WEc1bGVIQnZjblJ6TG0xbGNtZGxUV2xrWkd4bGQyRnlaU0E5SUcxbGNtZGxUV2xrWkd4bGQyRnlaVHRjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXUmhkR0U2WVhCd2JHbGpZWFJwYjI0dmFuTnZianRpWVhObE5qUXNaWGxLTWxwWVNucGhWemwxU1dwdmVreERTbTFoVjNoc1NXcHZhV0pYVm5sYU1sWk9ZVmRTYTJKSFZqTlpXRXBzVEcxd2VrbHBkMmxqTWpreFkyMU9iRlZ0T1haa1EwazJTV2xKYzBsdVRuWmtXRXBxV2xoTmFVOXNjMmxNYVRSMll6Tktha3d5TVd4amJXUnNWRmRzYTFwSGVHeGtNa1o1V2xNMU1HTjVTbVJNUTBwMVdWY3hiR041U1RaWE1UQnpTVzB4YUdOSVFuQmliV1I2U1dwdmFVOTZjemRSVlVaQ1VWTjRkRkpGUmtKaVZWVTNVVlZHUm1KclZYTlZNRVpDV2pCSmMxcFZSa0phVTNoRVVWVkdSRXhIVmtKUldFNUZUekJzUWxFelFrZE1SVEZDVVZVd2MxUlZSa0pVVTNoSVVWVkdTRXhGYkVKUlZXdHpUbXRLUWxGWFJYTlNWVVpDVWxONFJGRlZSa1JQTUd4Q1VUSTFSRXhIVmtKUlYxVnpVVEJHUWxGNWVGQlJWVVpRVEVWT1FsRlZUWE5STUVaQ1VYbDRWbEZWUmxaTVJWWkNVVlZWYzFKVlJrSlNVM2hFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTldWVVpDVmxONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUktVVlZPY1ZKVGVGQlJWVVpRVEVVeFFsRlZNSE5STUVaQ1VYbDRXbEZWUmxwTVJWWkNVVlZWYzFFd1JrSlJlblJDVVZWTmRsRnBlRVJSVlVaRVR6QkdRbE5yVVhOTlJVNUNVMVZOYVdaUlBUMGlMQ0l2S2x4dUtpQnNiMmRzWlhabGJDQXRJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl3YVcxMFpYSnllUzlzYjJkc1pYWmxiRnh1S2x4dUtpQkRiM0I1Y21sbmFIUWdLR01wSURJd01UTWdWR2x0SUZCbGNuSjVYRzRxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCTlNWUWdiR2xqWlc1elpTNWNiaW92WEc0b1puVnVZM1JwYjI0Z0tISnZiM1FzSUdSbFptbHVhWFJwYjI0cElIdGNiaUFnSUNCY0luVnpaU0J6ZEhKcFkzUmNJanRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1JsWm1sdVpTQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQmtaV1pwYm1VdVlXMWtLU0I3WEc0Z0lDQWdJQ0FnSUdSbFptbHVaU2hrWldacGJtbDBhVzl1S1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJ0YjJSMWJHVWdQVDA5SUNkdlltcGxZM1FuSUNZbUlHMXZaSFZzWlM1bGVIQnZjblJ6S1NCN1hHNGdJQ0FnSUNBZ0lHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1pHVm1hVzVwZEdsdmJpZ3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISnZiM1F1Ykc5bklEMGdaR1ZtYVc1cGRHbHZiaWdwTzF4dUlDQWdJSDFjYm4wb2RHaHBjeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUZ3aWRYTmxJSE4wY21samRGd2lPMXh1WEc0Z0lDQWdMeThnVTJ4cFoyaDBiSGtnWkhWaWFXOTFjeUIwY21samEzTWdkRzhnWTNWMElHUnZkMjRnYldsdWFXMXBlbVZrSUdacGJHVWdjMmw2WlZ4dUlDQWdJSFpoY2lCdWIyOXdJRDBnWm5WdVkzUnBiMjRvS1NCN2ZUdGNiaUFnSUNCMllYSWdkVzVrWldacGJtVmtWSGx3WlNBOUlGd2lkVzVrWldacGJtVmtYQ0k3WEc1Y2JpQWdJQ0IyWVhJZ2JHOW5UV1YwYUc5a2N5QTlJRnRjYmlBZ0lDQWdJQ0FnWENKMGNtRmpaVndpTEZ4dUlDQWdJQ0FnSUNCY0ltUmxZblZuWENJc1hHNGdJQ0FnSUNBZ0lGd2lhVzVtYjF3aUxGeHVJQ0FnSUNBZ0lDQmNJbmRoY201Y0lpeGNiaUFnSUNBZ0lDQWdYQ0psY25KdmNsd2lYRzRnSUNBZ1hUdGNibHh1SUNBZ0lDOHZJRU55YjNOekxXSnliM2R6WlhJZ1ltbHVaQ0JsY1hWcGRtRnNaVzUwSUhSb1lYUWdkMjl5YTNNZ1lYUWdiR1ZoYzNRZ1ltRmpheUIwYnlCSlJUWmNiaUFnSUNCbWRXNWpkR2x2YmlCaWFXNWtUV1YwYUc5a0tHOWlhaXdnYldWMGFHOWtUbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYldWMGFHOWtJRDBnYjJKcVcyMWxkR2h2WkU1aGJXVmRPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUcxbGRHaHZaQzVpYVc1a0lEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiV1YwYUc5a0xtSnBibVFvYjJKcUtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlFWjFibU4wYVc5dUxuQnliM1J2ZEhsd1pTNWlhVzVrTG1OaGJHd29iV1YwYUc5a0xDQnZZbW9wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFMXBjM05wYm1jZ1ltbHVaQ0J6YUdsdElHOXlJRWxGT0NBcklFMXZaR1Z5Ym1sNmNpd2dabUZzYkdKaFkyc2dkRzhnZDNKaGNIQnBibWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCR2RXNWpkR2x2Ymk1d2NtOTBiM1I1Y0dVdVlYQndiSGt1WVhCd2JIa29iV1YwYUc5a0xDQmJiMkpxTENCaGNtZDFiV1Z1ZEhOZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdRblZwYkdRZ2RHaGxJR0psYzNRZ2JHOW5aMmx1WnlCdFpYUm9iMlFnY0c5emMybGliR1VnWm05eUlIUm9hWE1nWlc1MlhHNGdJQ0FnTHk4Z1YyaGxjbVYyWlhJZ2NHOXpjMmxpYkdVZ2QyVWdkMkZ1ZENCMGJ5QmlhVzVrTENCdWIzUWdkM0poY0N3Z2RHOGdjSEpsYzJWeWRtVWdjM1JoWTJzZ2RISmhZMlZ6WEc0Z0lDQWdablZ1WTNScGIyNGdjbVZoYkUxbGRHaHZaQ2h0WlhSb2IyUk9ZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h0WlhSb2IyUk9ZVzFsSUQwOVBTQW5aR1ZpZFdjbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdFpYUm9iMlJPWVcxbElEMGdKMnh2WnljN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdOdmJuTnZiR1VnUFQwOUlIVnVaR1ZtYVc1bFpGUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlRzZ0x5OGdUbThnYldWMGFHOWtJSEJ2YzNOcFlteGxMQ0JtYjNJZ2JtOTNJQzBnWm1sNFpXUWdiR0YwWlhJZ1lua2daVzVoWW14bFRHOW5aMmx1WjFkb1pXNURiMjV6YjJ4bFFYSnlhWFpsYzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHTnZibk52YkdWYmJXVjBhRzlrVG1GdFpWMGdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR0pwYm1STlpYUm9iMlFvWTI5dWMyOXNaU3dnYldWMGFHOWtUbUZ0WlNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9ZMjl1YzI5c1pTNXNiMmNnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdKcGJtUk5aWFJvYjJRb1kyOXVjMjlzWlN3Z0oyeHZaeWNwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNXZiM0E3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCVWFHVnpaU0J3Y21sMllYUmxJR1oxYm1OMGFXOXVjeUJoYkhkaGVYTWdibVZsWkNCZ2RHaHBjMkFnZEc4Z1ltVWdjMlYwSUhCeWIzQmxjbXg1WEc1Y2JpQWdJQ0JtZFc1amRHbHZiaUJ5WlhCc1lXTmxURzluWjJsdVowMWxkR2h2WkhNb2JHVjJaV3dzSUd4dloyZGxjazVoYldVcElIdGNiaUFnSUNBZ0lDQWdMeXBxYzJocGJuUWdkbUZzYVdSMGFHbHpPblJ5ZFdVZ0tpOWNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JzYjJkTlpYUm9iMlJ6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdiV1YwYUc5a1RtRnRaU0E5SUd4dlowMWxkR2h2WkhOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpXMjFsZEdodlpFNWhiV1ZkSUQwZ0tHa2dQQ0JzWlhabGJDa2dQMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2YjNBZ09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YldWMGFHOWtSbUZqZEc5eWVTaHRaWFJvYjJST1lXMWxMQ0JzWlhabGJDd2diRzluWjJWeVRtRnRaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJFWldacGJtVWdiRzluTG14dlp5QmhjeUJoYmlCaGJHbGhjeUJtYjNJZ2JHOW5MbVJsWW5WblhHNGdJQ0FnSUNBZ0lIUm9hWE11Ykc5bklEMGdkR2hwY3k1a1pXSjFaenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJKYmlCdmJHUWdTVVVnZG1WeWMybHZibk1zSUhSb1pTQmpiMjV6YjJ4bElHbHpiaWQwSUhCeVpYTmxiblFnZFc1MGFXd2dlVzkxSUdacGNuTjBJRzl3Wlc0Z2FYUXVYRzRnSUNBZ0x5OGdWMlVnWW5WcGJHUWdjbVZoYkUxbGRHaHZaQ2dwSUhKbGNHeGhZMlZ0Wlc1MGN5Qm9aWEpsSUhSb1lYUWdjbVZuWlc1bGNtRjBaU0JzYjJkbmFXNW5JRzFsZEdodlpITmNiaUFnSUNCbWRXNWpkR2x2YmlCbGJtRmliR1ZNYjJkbmFXNW5WMmhsYmtOdmJuTnZiR1ZCY25KcGRtVnpLRzFsZEdodlpFNWhiV1VzSUd4bGRtVnNMQ0JzYjJkblpYSk9ZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHTnZibk52YkdVZ0lUMDlJSFZ1WkdWbWFXNWxaRlI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWEJzWVdObFRHOW5aMmx1WjAxbGRHaHZaSE11WTJGc2JDaDBhR2x6TENCc1pYWmxiQ3dnYkc5bloyVnlUbUZ0WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjMXR0WlhSb2IyUk9ZVzFsWFM1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRUo1SUdSbFptRjFiSFFzSUhkbElIVnpaU0JqYkc5elpXeDVJR0p2ZFc1a0lISmxZV3dnYldWMGFHOWtjeUIzYUdWeVpYWmxjaUJ3YjNOemFXSnNaU3dnWVc1a1hHNGdJQ0FnTHk4Z2IzUm9aWEozYVhObElIZGxJSGRoYVhRZ1ptOXlJR0VnWTI5dWMyOXNaU0IwYnlCaGNIQmxZWElzSUdGdVpDQjBhR1Z1SUhSeWVTQmhaMkZwYmk1Y2JpQWdJQ0JtZFc1amRHbHZiaUJrWldaaGRXeDBUV1YwYUc5a1JtRmpkRzl5ZVNodFpYUm9iMlJPWVcxbExDQnNaWFpsYkN3Z2JHOW5aMlZ5VG1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0F2S21wemFHbHVkQ0IyWVd4cFpIUm9hWE02ZEhKMVpTQXFMMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZoYkUxbGRHaHZaQ2h0WlhSb2IyUk9ZVzFsS1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXNWhZbXhsVEc5bloybHVaMWRvWlc1RGIyNXpiMnhsUVhKeWFYWmxjeTVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdaMWJtTjBhVzl1SUV4dloyZGxjaWh1WVcxbExDQmtaV1poZFd4MFRHVjJaV3dzSUdaaFkzUnZjbmtwSUh0Y2JpQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmlBZ0lDQWdJSFpoY2lCamRYSnlaVzUwVEdWMlpXdzdYRzRnSUNBZ0lDQjJZWElnYzNSdmNtRm5aVXRsZVNBOUlGd2liRzluYkdWMlpXeGNJanRjYmlBZ0lDQWdJR2xtSUNodVlXMWxLU0I3WEc0Z0lDQWdJQ0FnSUhOMGIzSmhaMlZMWlhrZ0t6MGdYQ0k2WENJZ0t5QnVZVzFsTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCbWRXNWpkR2x2YmlCd1pYSnphWE4wVEdWMlpXeEpabEJ2YzNOcFlteGxLR3hsZG1Wc1RuVnRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJR3hsZG1Wc1RtRnRaU0E5SUNoc2IyZE5aWFJvYjJSelcyeGxkbVZzVG5WdFhTQjhmQ0FuYzJsc1pXNTBKeWt1ZEc5VmNIQmxja05oYzJVb0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2QybHVaRzkzSUQwOVBTQjFibVJsWm1sdVpXUlVlWEJsS1NCeVpYUjFjbTQ3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJWYzJVZ2JHOWpZV3hUZEc5eVlXZGxJR2xtSUdGMllXbHNZV0pzWlZ4dUlDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSGRwYm1SdmR5NXNiMk5oYkZOMGIzSmhaMlZiYzNSdmNtRm5aVXRsZVYwZ1BTQnNaWFpsYkU1aGJXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaHBaMjV2Y21VcElIdDlYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QlZjMlVnYzJWemMybHZiaUJqYjI5cmFXVWdZWE1nWm1Gc2JHSmhZMnRjYmlBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhVzVrYjNjdVpHOWpkVzFsYm5RdVkyOXZhMmxsSUQxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJtTnZaR1ZWVWtsRGIyMXdiMjVsYm5Rb2MzUnZjbUZuWlV0bGVTa2dLeUJjSWoxY0lpQXJJR3hsZG1Wc1RtRnRaU0FySUZ3aU8xd2lPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dsbmJtOXlaU2tnZTMxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ1puVnVZM1JwYjI0Z1oyVjBVR1Z5YzJsemRHVmtUR1YyWld3b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlITjBiM0psWkV4bGRtVnNPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQjNhVzVrYjNjZ1BUMDlJSFZ1WkdWbWFXNWxaRlI1Y0dVcElISmxkSFZ5Ymp0Y2JseHVJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMGIzSmxaRXhsZG1Wc0lEMGdkMmx1Wkc5M0xteHZZMkZzVTNSdmNtRm5aVnR6ZEc5eVlXZGxTMlY1WFR0Y2JpQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaHBaMjV2Y21VcElIdDlYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QkdZV3hzWW1GamF5QjBieUJqYjI5cmFXVnpJR2xtSUd4dlkyRnNJSE4wYjNKaFoyVWdaMmwyWlhNZ2RYTWdibTkwYUdsdVoxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYzNSdmNtVmtUR1YyWld3Z1BUMDlJSFZ1WkdWbWFXNWxaRlI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpiMjlyYVdVZ1BTQjNhVzVrYjNjdVpHOWpkVzFsYm5RdVkyOXZhMmxsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR3h2WTJGMGFXOXVJRDBnWTI5dmEybGxMbWx1WkdWNFQyWW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXNWpiMlJsVlZKSlEyOXRjRzl1Wlc1MEtITjBiM0poWjJWTFpYa3BJQ3NnWENJOVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHeHZZMkYwYVc5dUlDRTlQU0F0TVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMGIzSmxaRXhsZG1Wc0lEMGdMMTRvVzE0N1hTc3BMeTVsZUdWaktHTnZiMnRwWlM1emJHbGpaU2hzYjJOaGRHbHZiaWtwV3pGZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaHBaMjV2Y21VcElIdDlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdMeThnU1dZZ2RHaGxJSE4wYjNKbFpDQnNaWFpsYkNCcGN5QnViM1FnZG1Gc2FXUXNJSFJ5WldGMElHbDBJR0Z6SUdsbUlHNXZkR2hwYm1jZ2QyRnpJSE4wYjNKbFpDNWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2MyVnNaaTVzWlhabGJITmJjM1J2Y21Wa1RHVjJaV3hkSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1J2Y21Wa1RHVjJaV3dnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMGIzSmxaRXhsZG1Wc08xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZLbHh1SUNBZ0lDQWdJQ3BjYmlBZ0lDQWdJQ0FxSUZCMVlteHBZeUJzYjJkblpYSWdRVkJKSUMwZ2MyVmxJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl3YVcxMFpYSnllUzlzYjJkc1pYWmxiQ0JtYjNJZ1pHVjBZV2xzYzF4dUlDQWdJQ0FnSUNwY2JpQWdJQ0FnSUNBcUwxeHVYRzRnSUNBZ0lDQnpaV3htTG01aGJXVWdQU0J1WVcxbE8xeHVYRzRnSUNBZ0lDQnpaV3htTG14bGRtVnNjeUE5SUhzZ1hDSlVVa0ZEUlZ3aU9pQXdMQ0JjSWtSRlFsVkhYQ0k2SURFc0lGd2lTVTVHVDF3aU9pQXlMQ0JjSWxkQlVrNWNJam9nTXl4Y2JpQWdJQ0FnSUNBZ0lDQmNJa1ZTVWs5U1hDSTZJRFFzSUZ3aVUwbE1SVTVVWENJNklEVjlPMXh1WEc0Z0lDQWdJQ0J6Wld4bUxtMWxkR2h2WkVaaFkzUnZjbmtnUFNCbVlXTjBiM0o1SUh4OElHUmxabUYxYkhSTlpYUm9iMlJHWVdOMGIzSjVPMXh1WEc0Z0lDQWdJQ0J6Wld4bUxtZGxkRXhsZG1Wc0lEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamRYSnlaVzUwVEdWMlpXdzdYRzRnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0J6Wld4bUxuTmxkRXhsZG1Wc0lEMGdablZ1WTNScGIyNGdLR3hsZG1Wc0xDQndaWEp6YVhOMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCc1pYWmxiQ0E5UFQwZ1hDSnpkSEpwYm1kY0lpQW1KaUJ6Wld4bUxteGxkbVZzYzF0c1pYWmxiQzUwYjFWd2NHVnlRMkZ6WlNncFhTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRtVnNJRDBnYzJWc1ppNXNaWFpsYkhOYmJHVjJaV3d1ZEc5VmNIQmxja05oYzJVb0tWMDdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdiR1YyWld3Z1BUMDlJRndpYm5WdFltVnlYQ0lnSmlZZ2JHVjJaV3dnUGowZ01DQW1KaUJzWlhabGJDQThQU0J6Wld4bUxteGxkbVZzY3k1VFNVeEZUbFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNWeWNtVnVkRXhsZG1Wc0lEMGdiR1YyWld3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdaWEp6YVhOMElDRTlQU0JtWVd4elpTa2dleUFnTHk4Z1pHVm1ZWFZzZEhNZ2RHOGdkSEoxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHVnljMmx6ZEV4bGRtVnNTV1pRYjNOemFXSnNaU2hzWlhabGJDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVndiR0ZqWlV4dloyZHBibWROWlhSb2IyUnpMbU5oYkd3b2MyVnNaaXdnYkdWMlpXd3NJRzVoYldVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHTnZibk52YkdVZ1BUMDlJSFZ1WkdWbWFXNWxaRlI1Y0dVZ0ppWWdiR1YyWld3Z1BDQnpaV3htTG14bGRtVnNjeTVUU1V4RlRsUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJjSWs1dklHTnZibk52YkdVZ1lYWmhhV3hoWW14bElHWnZjaUJzYjJkbmFXNW5YQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QmNJbXh2Wnk1elpYUk1aWFpsYkNncElHTmhiR3hsWkNCM2FYUm9JR2x1ZG1Gc2FXUWdiR1YyWld3NklGd2lJQ3NnYkdWMlpXdzdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ2MyVnNaaTV6WlhSRVpXWmhkV3gwVEdWMlpXd2dQU0JtZFc1amRHbHZiaUFvYkdWMlpXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9JV2RsZEZCbGNuTnBjM1JsWkV4bGRtVnNLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWc1ppNXpaWFJNWlhabGJDaHNaWFpsYkN3Z1ptRnNjMlVwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJSE5sYkdZdVpXNWhZbXhsUVd4c0lEMGdablZ1WTNScGIyNG9jR1Z5YzJsemRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhObGJHWXVjMlYwVEdWMlpXd29jMlZzWmk1c1pYWmxiSE11VkZKQlEwVXNJSEJsY25OcGMzUXBPMXh1SUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnYzJWc1ppNWthWE5oWW14bFFXeHNJRDBnWm5WdVkzUnBiMjRvY0dWeWMybHpkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lITmxiR1l1YzJWMFRHVjJaV3dvYzJWc1ppNXNaWFpsYkhNdVUwbE1SVTVVTENCd1pYSnphWE4wS1R0Y2JpQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDOHZJRWx1YVhScFlXeHBlbVVnZDJsMGFDQjBhR1VnY21sbmFIUWdiR1YyWld4Y2JpQWdJQ0FnSUhaaGNpQnBibWwwYVdGc1RHVjJaV3dnUFNCblpYUlFaWEp6YVhOMFpXUk1aWFpsYkNncE8xeHVJQ0FnSUNBZ2FXWWdLR2x1YVhScFlXeE1aWFpsYkNBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhVzVwZEdsaGJFeGxkbVZzSUQwZ1pHVm1ZWFZzZEV4bGRtVnNJRDA5SUc1MWJHd2dQeUJjSWxkQlVrNWNJaUE2SUdSbFptRjFiSFJNWlhabGJEdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lITmxiR1l1YzJWMFRHVjJaV3dvYVc1cGRHbGhiRXhsZG1Wc0xDQm1ZV3h6WlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUZSdmNDMXNaWFpsYkNCQlVFbGNiaUFnSUNBZ0tseHVJQ0FnSUNBcUwxeHVYRzRnSUNBZ2RtRnlJR1JsWm1GMWJIUk1iMmRuWlhJZ1BTQnVaWGNnVEc5bloyVnlLQ2s3WEc1Y2JpQWdJQ0IyWVhJZ1gyeHZaMmRsY25OQ2VVNWhiV1VnUFNCN2ZUdGNiaUFnSUNCa1pXWmhkV3gwVEc5bloyVnlMbWRsZEV4dloyZGxjaUE5SUdaMWJtTjBhVzl1SUdkbGRFeHZaMmRsY2lodVlXMWxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2JtRnRaU0FoUFQwZ1hDSnpkSEpwYm1kY0lpQjhmQ0J1WVcxbElEMDlQU0JjSWx3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lsbHZkU0J0ZFhOMElITjFjSEJzZVNCaElHNWhiV1VnZDJobGJpQmpjbVZoZEdsdVp5QmhJR3h2WjJkbGNpNWNJaWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjJZWElnYkc5bloyVnlJRDBnWDJ4dloyZGxjbk5DZVU1aGJXVmJibUZ0WlYwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doYkc5bloyVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JHOW5aMlZ5SUQwZ1gyeHZaMmRsY25OQ2VVNWhiV1ZiYm1GdFpWMGdQU0J1WlhjZ1RHOW5aMlZ5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdibUZ0WlN3Z1pHVm1ZWFZzZEV4dloyZGxjaTVuWlhSTVpYWmxiQ2dwTENCa1pXWmhkV3gwVEc5bloyVnlMbTFsZEdodlpFWmhZM1J2Y25rcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnNiMmRuWlhJN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUM4dklFZHlZV0lnZEdobElHTjFjbkpsYm5RZ1oyeHZZbUZzSUd4dlp5QjJZWEpwWVdKc1pTQnBiaUJqWVhObElHOW1JRzkyWlhKM2NtbDBaVnh1SUNBZ0lIWmhjaUJmYkc5bklEMGdLSFI1Y0dWdlppQjNhVzVrYjNjZ0lUMDlJSFZ1WkdWbWFXNWxaRlI1Y0dVcElEOGdkMmx1Wkc5M0xteHZaeUE2SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0JrWldaaGRXeDBURzluWjJWeUxtNXZRMjl1Wm14cFkzUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQjNhVzVrYjNjZ0lUMDlJSFZ1WkdWbWFXNWxaRlI1Y0dVZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBibVJ2ZHk1c2IyY2dQVDA5SUdSbFptRjFiSFJNYjJkblpYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZHBibVJ2ZHk1c2IyY2dQU0JmYkc5bk8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1JsWm1GMWJIUk1iMmRuWlhJN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUdSbFptRjFiSFJNYjJkblpYSXVaMlYwVEc5bloyVnljeUE5SUdaMWJtTjBhVzl1SUdkbGRFeHZaMmRsY25Nb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmZiRzluWjJWeWMwSjVUbUZ0WlR0Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnY21WMGRYSnVJR1JsWm1GMWJIUk1iMmRuWlhJN1hHNTlLU2s3WEc0aUxDSjJZWElnZDNKaGNIQjVJRDBnY21WeGRXbHlaU2duZDNKaGNIQjVKeWxjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZDNKaGNIQjVLRzl1WTJVcFhHNXRiMlIxYkdVdVpYaHdiM0owY3k1emRISnBZM1FnUFNCM2NtRndjSGtvYjI1alpWTjBjbWxqZENsY2JseHViMjVqWlM1d2NtOTBieUE5SUc5dVkyVW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvUm5WdVkzUnBiMjR1Y0hKdmRHOTBlWEJsTENBbmIyNWpaU2NzSUh0Y2JpQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzl1WTJVb2RHaHBjeWxjYmlBZ0lDQjlMRnh1SUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpWeHVJQ0I5S1Z4dVhHNGdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoR2RXNWpkR2x2Ymk1d2NtOTBiM1I1Y0dVc0lDZHZibU5sVTNSeWFXTjBKeXdnZTF4dUlDQWdJSFpoYkhWbE9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiMjVqWlZOMGNtbGpkQ2gwYUdsektWeHVJQ0FnSUgwc1hHNGdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsWEc0Z0lIMHBYRzU5S1Z4dVhHNW1kVzVqZEdsdmJpQnZibU5sSUNobWJpa2dlMXh1SUNCMllYSWdaaUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCcFppQW9aaTVqWVd4c1pXUXBJSEpsZEhWeWJpQm1MblpoYkhWbFhHNGdJQ0FnWmk1allXeHNaV1FnUFNCMGNuVmxYRzRnSUNBZ2NtVjBkWEp1SUdZdWRtRnNkV1VnUFNCbWJpNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wWEc0Z0lIMWNiaUFnWmk1allXeHNaV1FnUFNCbVlXeHpaVnh1SUNCeVpYUjFjbTRnWmx4dWZWeHVYRzVtZFc1amRHbHZiaUJ2Ym1ObFUzUnlhV04wSUNobWJpa2dlMXh1SUNCMllYSWdaaUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCcFppQW9aaTVqWVd4c1pXUXBYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1ppNXZibU5sUlhKeWIzSXBYRzRnSUNBZ1ppNWpZV3hzWldRZ1BTQjBjblZsWEc0Z0lDQWdjbVYwZFhKdUlHWXVkbUZzZFdVZ1BTQm1iaTVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcFhHNGdJSDFjYmlBZ2RtRnlJRzVoYldVZ1BTQm1iaTV1WVcxbElIeDhJQ2RHZFc1amRHbHZiaUIzY21Gd2NHVmtJSGRwZEdnZ1lHOXVZMlZnSjF4dUlDQm1MbTl1WTJWRmNuSnZjaUE5SUc1aGJXVWdLeUJjSWlCemFHOTFiR1J1SjNRZ1ltVWdZMkZzYkdWa0lHMXZjbVVnZEdoaGJpQnZibU5sWENKY2JpQWdaaTVqWVd4c1pXUWdQU0JtWVd4elpWeHVJQ0J5WlhSMWNtNGdabHh1ZlZ4dUlpd2lZMjl1YzNRZ1JIVndiR1Y0VTNSeVpXRnRJRDBnY21WeGRXbHlaU2duY21WaFpHRmliR1V0YzNSeVpXRnRKeWt1UkhWd2JHVjRYRzVqYjI1emRDQnBibWhsY21sMGN5QTlJSEpsY1hWcGNtVW9KM1YwYVd3bktTNXBibWhsY21sMGMxeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRkJ2YzNSTlpYTnpZV2RsVTNSeVpXRnRYRzVjYm1sdWFHVnlhWFJ6S0ZCdmMzUk5aWE56WVdkbFUzUnlaV0Z0TENCRWRYQnNaWGhUZEhKbFlXMHBYRzVjYm1aMWJtTjBhVzl1SUZCdmMzUk5aWE56WVdkbFUzUnlaV0Z0SUNodmNIUnpLU0I3WEc0Z0lFUjFjR3hsZUZOMGNtVmhiUzVqWVd4c0tIUm9hWE1zSUh0Y2JpQWdJQ0J2WW1wbFkzUk5iMlJsT2lCMGNuVmxMRnh1SUNCOUtWeHVYRzRnSUhSb2FYTXVYMjVoYldVZ1BTQnZjSFJ6TG01aGJXVmNiaUFnZEdocGN5NWZkR0Z5WjJWMElEMGdiM0IwY3k1MFlYSm5aWFJjYmlBZ2RHaHBjeTVmZEdGeVoyVjBWMmx1Wkc5M0lEMGdiM0IwY3k1MFlYSm5aWFJYYVc1a2IzY2dmSHdnZDJsdVpHOTNYRzRnSUhSb2FYTXVYMjl5YVdkcGJpQTlJQ2h2Y0hSekxuUmhjbWRsZEZkcGJtUnZkeUEvSUNjcUp5QTZJR3h2WTJGMGFXOXVMbTl5YVdkcGJpbGNibHh1SUNBdkx5QnBibWwwYVdGc2FYcGhkR2x2YmlCbWJHRm5jMXh1SUNCMGFHbHpMbDlwYm1sMElEMGdabUZzYzJWY2JpQWdkR2hwY3k1ZmFHRjJaVk41YmlBOUlHWmhiSE5sWEc1Y2JpQWdkMmx1Wkc5M0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyMWxjM05oWjJVbkxDQjBhR2x6TGw5dmJrMWxjM05oWjJVdVltbHVaQ2gwYUdsektTd2dabUZzYzJVcFhHNGdJQzh2SUhObGJtUWdjM2x1WTI5eWFYcGhkR2x2YmlCdFpYTnpZV2RsWEc0Z0lIUm9hWE11WDNkeWFYUmxLQ2RUV1U0bkxDQnVkV3hzTENCdWIyOXdLVnh1SUNCMGFHbHpMbU52Y21zb0tWeHVmVnh1WEc0dkx5QndjbWwyWVhSbFhHNVFiM04wVFdWemMyRm5aVk4wY21WaGJTNXdjbTkwYjNSNWNHVXVYMjl1VFdWemMyRm5aU0E5SUdaMWJtTjBhVzl1SUNobGRtVnVkQ2tnZTF4dUlDQjJZWElnYlhObklEMGdaWFpsYm5RdVpHRjBZVnh1WEc0Z0lDOHZJSFpoYkdsa1lYUmxJRzFsYzNOaFoyVmNiaUFnYVdZZ0tIUm9hWE11WDI5eWFXZHBiaUFoUFQwZ0p5b25JQ1ltSUdWMlpXNTBMbTl5YVdkcGJpQWhQVDBnZEdocGN5NWZiM0pwWjJsdUtTQnlaWFIxY201Y2JpQWdhV1lnS0dWMlpXNTBMbk52ZFhKalpTQWhQVDBnZEdocGN5NWZkR0Z5WjJWMFYybHVaRzkzS1NCeVpYUjFjbTVjYmlBZ2FXWWdLSFI1Y0dWdlppQnRjMmNnSVQwOUlDZHZZbXBsWTNRbktTQnlaWFIxY201Y2JpQWdhV1lnS0cxelp5NTBZWEpuWlhRZ0lUMDlJSFJvYVhNdVgyNWhiV1VwSUhKbGRIVnlibHh1SUNCcFppQW9JVzF6Wnk1a1lYUmhLU0J5WlhSMWNtNWNibHh1SUNCcFppQW9JWFJvYVhNdVgybHVhWFFwSUh0Y2JpQWdJQ0JwWmlBb2JYTm5MbVJoZEdFZ1BUMDlJQ2RUV1U0bktTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5b1lYWmxVM2x1SUQwZ2RISjFaVnh1SUNBZ0lDQWdkR2hwY3k1ZmQzSnBkR1VvSjBGRFN5Y3NJRzUxYkd3c0lHNXZiM0FwWEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h0YzJjdVpHRjBZU0E5UFQwZ0owRkRTeWNwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMmx1YVhRZ1BTQjBjblZsWEc0Z0lDQWdJQ0JwWmlBb0lYUm9hWE11WDJoaGRtVlRlVzRwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZDNKcGRHVW9KMEZEU3ljc0lHNTFiR3dzSUc1dmIzQXBYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQjBhR2x6TG5WdVkyOXlheWdwWEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJQzh2SUdadmNuZGhjbVFnYldWemMyRm5aVnh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0IwYUdsekxuQjFjMmdvYlhObkxtUmhkR0VwWEc0Z0lDQWdmU0JqWVhSamFDQW9aWEp5S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbVZ0YVhRb0oyVnljbTl5Snl3Z1pYSnlLVnh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzR2THlCemRISmxZVzBnY0d4MWJXSnBibWRjYmxCdmMzUk5aWE56WVdkbFUzUnlaV0Z0TG5CeWIzUnZkSGx3WlM1ZmNtVmhaQ0E5SUc1dmIzQmNibHh1VUc5emRFMWxjM05oWjJWVGRISmxZVzB1Y0hKdmRHOTBlWEJsTGw5M2NtbDBaU0E5SUdaMWJtTjBhVzl1SUNoa1lYUmhMQ0JsYm1OdlpHbHVaeXdnWTJJcElIdGNiaUFnZG1GeUlHMWxjM05oWjJVZ1BTQjdYRzRnSUNBZ2RHRnlaMlYwT2lCMGFHbHpMbDkwWVhKblpYUXNYRzRnSUNBZ1pHRjBZVG9nWkdGMFlTeGNiaUFnZlZ4dUlDQjBhR2x6TGw5MFlYSm5aWFJYYVc1a2IzY3VjRzl6ZEUxbGMzTmhaMlVvYldWemMyRm5aU3dnZEdocGN5NWZiM0pwWjJsdUtWeHVJQ0JqWWlncFhHNTlYRzVjYmk4dklIVjBhV3hjYmx4dVpuVnVZM1JwYjI0Z2JtOXZjQ0FvS1NCN2ZWeHVJaXdpTHk4Z2MyaHBiU0JtYjNJZ2RYTnBibWNnY0hKdlkyVnpjeUJwYmlCaWNtOTNjMlZ5WEc1MllYSWdjSEp2WTJWemN5QTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMzA3WEc1Y2JpOHZJR05oWTJobFpDQm1jbTl0SUhkb1lYUmxkbVZ5SUdkc2IySmhiQ0JwY3lCd2NtVnpaVzUwSUhOdklIUm9ZWFFnZEdWemRDQnlkVzV1WlhKeklIUm9ZWFFnYzNSMVlpQnBkRnh1THk4Z1pHOXVKM1FnWW5KbFlXc2dkR2hwYm1kekxpQWdRblYwSUhkbElHNWxaV1FnZEc4Z2QzSmhjQ0JwZENCcGJpQmhJSFJ5ZVNCallYUmphQ0JwYmlCallYTmxJR2wwSUdselhHNHZMeUIzY21Gd2NHVmtJR2x1SUhOMGNtbGpkQ0J0YjJSbElHTnZaR1VnZDJocFkyZ2daRzlsYzI0bmRDQmtaV1pwYm1VZ1lXNTVJR2RzYjJKaGJITXVJQ0JKZENkeklHbHVjMmxrWlNCaFhHNHZMeUJtZFc1amRHbHZiaUJpWldOaGRYTmxJSFJ5ZVM5allYUmphR1Z6SUdSbGIzQjBhVzFwZW1VZ2FXNGdZMlZ5ZEdGcGJpQmxibWRwYm1WekxseHVYRzUyWVhJZ1kyRmphR1ZrVTJWMFZHbHRaVzkxZER0Y2JuWmhjaUJqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFE3WEc1Y2JtWjFibU4wYVc5dUlHUmxabUYxYkhSVFpYUlVhVzF2ZFhRb0tTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkelpYUlVhVzFsYjNWMElHaGhjeUJ1YjNRZ1ltVmxiaUJrWldacGJtVmtKeWs3WEc1OVhHNW1kVzVqZEdsdmJpQmtaV1poZFd4MFEyeGxZWEpVYVcxbGIzVjBJQ2dwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMk5zWldGeVZHbHRaVzkxZENCb1lYTWdibTkwSUdKbFpXNGdaR1ZtYVc1bFpDY3BPMXh1ZlZ4dUtHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlITmxkRlJwYldWdmRYUWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaFkyaGxaRk5sZEZScGJXVnZkWFFnUFNCelpYUlVhVzFsYjNWME8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGamFHVmtVMlYwVkdsdFpXOTFkQ0E5SUdSbFptRjFiSFJUWlhSVWFXMXZkWFE3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRZ1BTQmtaV1poZFd4MFUyVjBWR2x0YjNWME8xeHVJQ0FnSUgxY2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR05zWldGeVZHbHRaVzkxZENBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBJRDBnWTJ4bFlYSlVhVzFsYjNWME8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwSUQwZ1pHVm1ZWFZzZEVOc1pXRnlWR2x0Wlc5MWREdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQ0FnWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwSUQwZ1pHVm1ZWFZzZEVOc1pXRnlWR2x0Wlc5MWREdGNiaUFnSUNCOVhHNTlJQ2dwS1Z4dVpuVnVZM1JwYjI0Z2NuVnVWR2x0Wlc5MWRDaG1kVzRwSUh0Y2JpQWdJQ0JwWmlBb1kyRmphR1ZrVTJWMFZHbHRaVzkxZENBOVBUMGdjMlYwVkdsdFpXOTFkQ2tnZTF4dUlDQWdJQ0FnSUNBdkwyNXZjbTFoYkNCbGJuWnBjbTl0Wlc1MGN5QnBiaUJ6WVc1bElITnBkSFZoZEdsdmJuTmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITmxkRlJwYldWdmRYUW9ablZ1TENBd0tUdGNiaUFnSUNCOVhHNGdJQ0FnTHk4Z2FXWWdjMlYwVkdsdFpXOTFkQ0IzWVhOdUozUWdZWFpoYVd4aFlteGxJR0oxZENCM1lYTWdiR0YwZEdWeUlHUmxabWx1WldSY2JpQWdJQ0JwWmlBb0tHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRZ1BUMDlJR1JsWm1GMWJIUlRaWFJVYVcxdmRYUWdmSHdnSVdOaFkyaGxaRk5sZEZScGJXVnZkWFFwSUNZbUlITmxkRlJwYldWdmRYUXBJSHRjYmlBZ0lDQWdJQ0FnWTJGamFHVmtVMlYwVkdsdFpXOTFkQ0E5SUhObGRGUnBiV1Z2ZFhRN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCelpYUlVhVzFsYjNWMEtHWjFiaXdnTUNrN1hHNGdJQ0FnZlZ4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDOHZJSGRvWlc0Z2QyaGxiaUJ6YjIxbFltOWtlU0JvWVhNZ2MyTnlaWGRsWkNCM2FYUm9JSE5sZEZScGJXVnZkWFFnWW5WMElHNXZJRWt1UlM0Z2JXRmtaRzVsYzNOY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOaFkyaGxaRk5sZEZScGJXVnZkWFFvWm5WdUxDQXdLVHRjYmlBZ0lDQjlJR05oZEdOb0tHVXBlMXh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1YyaGxiaUIzWlNCaGNtVWdhVzRnU1M1RkxpQmlkWFFnZEdobElITmpjbWx3ZENCb1lYTWdZbVZsYmlCbGRtRnNaV1FnYzI4Z1NTNUZMaUJrYjJWemJpZDBJSFJ5ZFhOMElIUm9aU0JuYkc5aVlXd2diMkpxWldOMElIZG9aVzRnWTJGc2JHVmtJRzV2Y20xaGJHeDVYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTJGamFHVmtVMlYwVkdsdFpXOTFkQzVqWVd4c0tHNTFiR3dzSUdaMWJpd2dNQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1kyRjBZMmdvWlNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCellXMWxJR0Z6SUdGaWIzWmxJR0oxZENCM2FHVnVJR2wwSjNNZ1lTQjJaWEp6YVc5dUlHOW1JRWt1UlM0Z2RHaGhkQ0J0ZFhOMElHaGhkbVVnZEdobElHZHNiMkpoYkNCdlltcGxZM1FnWm05eUlDZDBhR2x6Snl3Z2FHOXdablZzYkhrZ2IzVnlJR052Ym5SbGVIUWdZMjl5Y21WamRDQnZkR2hsY25kcGMyVWdhWFFnZDJsc2JDQjBhSEp2ZHlCaElHZHNiMkpoYkNCbGNuSnZjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOaFkyaGxaRk5sZEZScGJXVnZkWFF1WTJGc2JDaDBhR2x6TENCbWRXNHNJREFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNWNibjFjYm1aMWJtTjBhVzl1SUhKMWJrTnNaV0Z5VkdsdFpXOTFkQ2h0WVhKclpYSXBJSHRjYmlBZ0lDQnBaaUFvWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwSUQwOVBTQmpiR1ZoY2xScGJXVnZkWFFwSUh0Y2JpQWdJQ0FnSUNBZ0x5OXViM0p0WVd3Z1pXNTJhWEp2YldWdWRITWdhVzRnYzJGdVpTQnphWFIxWVhScGIyNXpYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiR1ZoY2xScGJXVnZkWFFvYldGeWEyVnlLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdhV1lnWTJ4bFlYSlVhVzFsYjNWMElIZGhjMjRuZENCaGRtRnBiR0ZpYkdVZ1luVjBJSGRoY3lCc1lYUjBaWElnWkdWbWFXNWxaRnh1SUNBZ0lHbG1JQ2dvWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwSUQwOVBTQmtaV1poZFd4MFEyeGxZWEpVYVcxbGIzVjBJSHg4SUNGallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRcElDWW1JR05zWldGeVZHbHRaVzkxZENrZ2UxeHVJQ0FnSUNBZ0lDQmpZV05vWldSRGJHVmhjbFJwYldWdmRYUWdQU0JqYkdWaGNsUnBiV1Z2ZFhRN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCamJHVmhjbFJwYldWdmRYUW9iV0Z5YTJWeUtUdGNiaUFnSUNCOVhHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdMeThnZDJobGJpQjNhR1Z1SUhOdmJXVmliMlI1SUdoaGN5QnpZM0psZDJWa0lIZHBkR2dnYzJWMFZHbHRaVzkxZENCaWRYUWdibThnU1M1RkxpQnRZV1JrYm1WemMxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMEtHMWhjbXRsY2lrN1hHNGdJQ0FnZlNCallYUmphQ0FvWlNsN1hHNGdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJYYUdWdUlIZGxJR0Z5WlNCcGJpQkpMa1V1SUdKMWRDQjBhR1VnYzJOeWFYQjBJR2hoY3lCaVpXVnVJR1YyWVd4bFpDQnpieUJKTGtVdUlHUnZaWE51SjNRZ0lIUnlkWE4wSUhSb1pTQm5iRzlpWVd3Z2IySnFaV04wSUhkb1pXNGdZMkZzYkdWa0lHNXZjbTFoYkd4NVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBMbU5oYkd3b2JuVnNiQ3dnYldGeWEyVnlLVHRjYmlBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCellXMWxJR0Z6SUdGaWIzWmxJR0oxZENCM2FHVnVJR2wwSjNNZ1lTQjJaWEp6YVc5dUlHOW1JRWt1UlM0Z2RHaGhkQ0J0ZFhOMElHaGhkbVVnZEdobElHZHNiMkpoYkNCdlltcGxZM1FnWm05eUlDZDBhR2x6Snl3Z2FHOXdablZzYkhrZ2IzVnlJR052Ym5SbGVIUWdZMjl5Y21WamRDQnZkR2hsY25kcGMyVWdhWFFnZDJsc2JDQjBhSEp2ZHlCaElHZHNiMkpoYkNCbGNuSnZjaTVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk52YldVZ2RtVnljMmx2Ym5NZ2IyWWdTUzVGTGlCb1lYWmxJR1JwWm1abGNtVnVkQ0J5ZFd4bGN5Qm1iM0lnWTJ4bFlYSlVhVzFsYjNWMElIWnpJSE5sZEZScGJXVnZkWFJjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRdVkyRnNiQ2gwYUdsekxDQnRZWEpyWlhJcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzVjYmx4dWZWeHVkbUZ5SUhGMVpYVmxJRDBnVzEwN1hHNTJZWElnWkhKaGFXNXBibWNnUFNCbVlXeHpaVHRjYm5aaGNpQmpkWEp5Wlc1MFVYVmxkV1U3WEc1MllYSWdjWFZsZFdWSmJtUmxlQ0E5SUMweE8xeHVYRzVtZFc1amRHbHZiaUJqYkdWaGJsVndUbVY0ZEZScFkyc29LU0I3WEc0Z0lDQWdhV1lnS0NGa2NtRnBibWx1WnlCOGZDQWhZM1Z5Y21WdWRGRjFaWFZsS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc0Z0lDQWdaSEpoYVc1cGJtY2dQU0JtWVd4elpUdGNiaUFnSUNCcFppQW9ZM1Z5Y21WdWRGRjFaWFZsTG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNCeGRXVjFaU0E5SUdOMWNuSmxiblJSZFdWMVpTNWpiMjVqWVhRb2NYVmxkV1VwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEYxWlhWbFNXNWtaWGdnUFNBdE1UdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIRjFaWFZsTG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNCa2NtRnBibEYxWlhWbEtDazdYRzRnSUNBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCa2NtRnBibEYxWlhWbEtDa2dlMXh1SUNBZ0lHbG1JQ2hrY21GcGJtbHVaeWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUIwYVcxbGIzVjBJRDBnY25WdVZHbHRaVzkxZENoamJHVmhibFZ3VG1WNGRGUnBZMnNwTzF4dUlDQWdJR1J5WVdsdWFXNW5JRDBnZEhKMVpUdGNibHh1SUNBZ0lIWmhjaUJzWlc0Z1BTQnhkV1YxWlM1c1pXNW5kR2c3WEc0Z0lDQWdkMmhwYkdVb2JHVnVLU0I3WEc0Z0lDQWdJQ0FnSUdOMWNuSmxiblJSZFdWMVpTQTlJSEYxWlhWbE8xeHVJQ0FnSUNBZ0lDQnhkV1YxWlNBOUlGdGRPMXh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9LeXR4ZFdWMVpVbHVaR1Y0SUR3Z2JHVnVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTNWeWNtVnVkRkYxWlhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM1Z5Y21WdWRGRjFaWFZsVzNGMVpYVmxTVzVrWlhoZExuSjFiaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhGMVpYVmxTVzVrWlhnZ1BTQXRNVHRjYmlBZ0lDQWdJQ0FnYkdWdUlEMGdjWFZsZFdVdWJHVnVaM1JvTzF4dUlDQWdJSDFjYmlBZ0lDQmpkWEp5Wlc1MFVYVmxkV1VnUFNCdWRXeHNPMXh1SUNBZ0lHUnlZV2x1YVc1bklEMGdabUZzYzJVN1hHNGdJQ0FnY25WdVEyeGxZWEpVYVcxbGIzVjBLSFJwYldWdmRYUXBPMXh1ZlZ4dVhHNXdjbTlqWlhOekxtNWxlSFJVYVdOcklEMGdablZ1WTNScGIyNGdLR1oxYmlrZ2UxeHVJQ0FnSUhaaGNpQmhjbWR6SUQwZ2JtVjNJRUZ5Y21GNUtHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ0xTQXhLVHRjYmlBZ0lDQnBaaUFvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURFcElIdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURFN0lHa2dQQ0JoY21kMWJXVnVkSE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGeVozTmJhU0F0SURGZElEMGdZWEpuZFcxbGJuUnpXMmxkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEYxWlhWbExuQjFjMmdvYm1WM0lFbDBaVzBvWm5WdUxDQmhjbWR6S1NrN1hHNGdJQ0FnYVdZZ0tIRjFaWFZsTG14bGJtZDBhQ0E5UFQwZ01TQW1KaUFoWkhKaGFXNXBibWNwSUh0Y2JpQWdJQ0FnSUNBZ2NuVnVWR2x0Wlc5MWRDaGtjbUZwYmxGMVpYVmxLVHRjYmlBZ0lDQjlYRzU5TzF4dVhHNHZMeUIyT0NCc2FXdGxjeUJ3Y21Wa2FXTjBhV0pzWlNCdlltcGxZM1J6WEc1bWRXNWpkR2x2YmlCSmRHVnRLR1oxYml3Z1lYSnlZWGtwSUh0Y2JpQWdJQ0IwYUdsekxtWjFiaUE5SUdaMWJqdGNiaUFnSUNCMGFHbHpMbUZ5Y21GNUlEMGdZWEp5WVhrN1hHNTlYRzVKZEdWdExuQnliM1J2ZEhsd1pTNXlkVzRnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2RHaHBjeTVtZFc0dVlYQndiSGtvYm5Wc2JDd2dkR2hwY3k1aGNuSmhlU2s3WEc1OU8xeHVjSEp2WTJWemN5NTBhWFJzWlNBOUlDZGljbTkzYzJWeUp6dGNibkJ5YjJObGMzTXVZbkp2ZDNObGNpQTlJSFJ5ZFdVN1hHNXdjbTlqWlhOekxtVnVkaUE5SUh0OU8xeHVjSEp2WTJWemN5NWhjbWQySUQwZ1cxMDdYRzV3Y205alpYTnpMblpsY25OcGIyNGdQU0FuSnpzZ0x5OGdaVzF3ZEhrZ2MzUnlhVzVuSUhSdklHRjJiMmxrSUhKbFoyVjRjQ0JwYzNOMVpYTmNibkJ5YjJObGMzTXVkbVZ5YzJsdmJuTWdQU0I3ZlR0Y2JseHVablZ1WTNScGIyNGdibTl2Y0NncElIdDlYRzVjYm5CeWIyTmxjM011YjI0Z1BTQnViMjl3TzF4dWNISnZZMlZ6Y3k1aFpHUk1hWE4wWlc1bGNpQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxtOXVZMlVnUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTV2Wm1ZZ1BTQnViMjl3TzF4dWNISnZZMlZ6Y3k1eVpXMXZkbVZNYVhOMFpXNWxjaUE5SUc1dmIzQTdYRzV3Y205alpYTnpMbkpsYlc5MlpVRnNiRXhwYzNSbGJtVnljeUE5SUc1dmIzQTdYRzV3Y205alpYTnpMbVZ0YVhRZ1BTQnViMjl3TzF4dWNISnZZMlZ6Y3k1d2NtVndaVzVrVEdsemRHVnVaWElnUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTV3Y21Wd1pXNWtUMjVqWlV4cGMzUmxibVZ5SUQwZ2JtOXZjRHRjYmx4dWNISnZZMlZ6Y3k1c2FYTjBaVzVsY25NZ1BTQm1kVzVqZEdsdmJpQW9ibUZ0WlNrZ2V5QnlaWFIxY200Z1cxMGdmVnh1WEc1d2NtOWpaWE56TG1KcGJtUnBibWNnUFNCbWRXNWpkR2x2YmlBb2JtRnRaU2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25jSEp2WTJWemN5NWlhVzVrYVc1bklHbHpJRzV2ZENCemRYQndiM0owWldRbktUdGNibjA3WEc1Y2JuQnliMk5sYzNNdVkzZGtJRDBnWm5WdVkzUnBiMjRnS0NrZ2V5QnlaWFIxY200Z0p5OG5JSDA3WEc1d2NtOWpaWE56TG1Ob1pHbHlJRDBnWm5WdVkzUnBiMjRnS0dScGNpa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmNISnZZMlZ6Y3k1amFHUnBjaUJwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtKeWs3WEc1OU8xeHVjSEp2WTJWemN5NTFiV0Z6YXlBOUlHWjFibU4wYVc5dUtDa2dleUJ5WlhSMWNtNGdNRHNnZlR0Y2JpSXNJblpoY2lCdmJtTmxJRDBnY21WeGRXbHlaU2duYjI1alpTY3BYRzUyWVhJZ1pXOXpJRDBnY21WeGRXbHlaU2duWlc1a0xXOW1MWE4wY21WaGJTY3BYRzUyWVhJZ1puTWdQU0J5WlhGMWFYSmxLQ2RtY3ljcElDOHZJSGRsSUc5dWJIa2dibVZsWkNCbWN5QjBieUJuWlhRZ2RHaGxJRkpsWVdSVGRISmxZVzBnWVc1a0lGZHlhWFJsVTNSeVpXRnRJSEJ5YjNSdmRIbHdaWE5jYmx4dWRtRnlJRzV2YjNBZ1BTQm1kVzVqZEdsdmJpQW9LU0I3ZlZ4dWRtRnlJR0Z1WTJsbGJuUWdQU0F2WG5ZL1hGd3VNQzh1ZEdWemRDaHdjbTlqWlhOekxuWmxjbk5wYjI0cFhHNWNiblpoY2lCcGMwWnVJRDBnWm5WdVkzUnBiMjRnS0dadUtTQjdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdabTRnUFQwOUlDZG1kVzVqZEdsdmJpZGNibjFjYmx4dWRtRnlJR2x6UmxNZ1BTQm1kVzVqZEdsdmJpQW9jM1J5WldGdEtTQjdYRzRnSUdsbUlDZ2hZVzVqYVdWdWRDa2djbVYwZFhKdUlHWmhiSE5sSUM4dklHNWxkMlZ5SUc1dlpHVWdkbVZ5YzJsdmJpQmtieUJ1YjNRZ2JtVmxaQ0IwYnlCallYSmxJR0ZpYjNWMElHWnpJR2x6SUdFZ2MzQmxZMmxoYkNCM1lYbGNiaUFnYVdZZ0tDRm1jeWtnY21WMGRYSnVJR1poYkhObElDOHZJR0p5YjNkelpYSmNiaUFnY21WMGRYSnVJQ2h6ZEhKbFlXMGdhVzV6ZEdGdVkyVnZaaUFvWm5NdVVtVmhaRk4wY21WaGJTQjhmQ0J1YjI5d0tTQjhmQ0J6ZEhKbFlXMGdhVzV6ZEdGdVkyVnZaaUFvWm5NdVYzSnBkR1ZUZEhKbFlXMGdmSHdnYm05dmNDa3BJQ1ltSUdselJtNG9jM1J5WldGdExtTnNiM05sS1Z4dWZWeHVYRzUyWVhJZ2FYTlNaWEYxWlhOMElEMGdablZ1WTNScGIyNGdLSE4wY21WaGJTa2dlMXh1SUNCeVpYUjFjbTRnYzNSeVpXRnRMbk5sZEVobFlXUmxjaUFtSmlCcGMwWnVLSE4wY21WaGJTNWhZbTl5ZENsY2JuMWNibHh1ZG1GeUlHUmxjM1J5YjNsbGNpQTlJR1oxYm1OMGFXOXVJQ2h6ZEhKbFlXMHNJSEpsWVdScGJtY3NJSGR5YVhScGJtY3NJR05oYkd4aVlXTnJLU0I3WEc0Z0lHTmhiR3hpWVdOcklEMGdiMjVqWlNoallXeHNZbUZqYXlsY2JseHVJQ0IyWVhJZ1kyeHZjMlZrSUQwZ1ptRnNjMlZjYmlBZ2MzUnlaV0Z0TG05dUtDZGpiRzl6WlNjc0lHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQmpiRzl6WldRZ1BTQjBjblZsWEc0Z0lIMHBYRzVjYmlBZ1pXOXpLSE4wY21WaGJTd2dlM0psWVdSaFlteGxPaUJ5WldGa2FXNW5MQ0IzY21sMFlXSnNaVG9nZDNKcGRHbHVaMzBzSUdaMWJtTjBhVzl1SUNobGNuSXBJSHRjYmlBZ0lDQnBaaUFvWlhKeUtTQnlaWFIxY200Z1kyRnNiR0poWTJzb1pYSnlLVnh1SUNBZ0lHTnNiM05sWkNBOUlIUnlkV1ZjYmlBZ0lDQmpZV3hzWW1GamF5Z3BYRzRnSUgwcFhHNWNiaUFnZG1GeUlHUmxjM1J5YjNsbFpDQTlJR1poYkhObFhHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9aWEp5S1NCN1hHNGdJQ0FnYVdZZ0tHTnNiM05sWkNrZ2NtVjBkWEp1WEc0Z0lDQWdhV1lnS0dSbGMzUnliM2xsWkNrZ2NtVjBkWEp1WEc0Z0lDQWdaR1Z6ZEhKdmVXVmtJRDBnZEhKMVpWeHVYRzRnSUNBZ2FXWWdLR2x6UmxNb2MzUnlaV0Z0S1NrZ2NtVjBkWEp1SUhOMGNtVmhiUzVqYkc5elpTaHViMjl3S1NBdkx5QjFjMlVnWTJ4dmMyVWdabTl5SUdaeklITjBjbVZoYlhNZ2RHOGdZWFp2YVdRZ1ptUWdiR1ZoYTNOY2JpQWdJQ0JwWmlBb2FYTlNaWEYxWlhOMEtITjBjbVZoYlNrcElISmxkSFZ5YmlCemRISmxZVzB1WVdKdmNuUW9LU0F2THlCeVpYRjFaWE4wTG1SbGMzUnliM2tnYW5WemRDQmtieUF1Wlc1a0lDMGdMbUZpYjNKMElHbHpJSGRvWVhRZ2QyVWdkMkZ1ZEZ4dVhHNGdJQ0FnYVdZZ0tHbHpSbTRvYzNSeVpXRnRMbVJsYzNSeWIza3BLU0J5WlhSMWNtNGdjM1J5WldGdExtUmxjM1J5YjNrb0tWeHVYRzRnSUNBZ1kyRnNiR0poWTJzb1pYSnlJSHg4SUc1bGR5QkZjbkp2Y2lnbmMzUnlaV0Z0SUhkaGN5QmtaWE4wY205NVpXUW5LU2xjYmlBZ2ZWeHVmVnh1WEc1MllYSWdZMkZzYkNBOUlHWjFibU4wYVc5dUlDaG1iaWtnZTF4dUlDQm1iaWdwWEc1OVhHNWNiblpoY2lCd2FYQmxJRDBnWm5WdVkzUnBiMjRnS0daeWIyMHNJSFJ2S1NCN1hHNGdJSEpsZEhWeWJpQm1jbTl0TG5CcGNHVW9kRzhwWEc1OVhHNWNiblpoY2lCd2RXMXdJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0IyWVhJZ2MzUnlaV0Z0Y3lBOUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tHRnlaM1Z0Wlc1MGN5bGNiaUFnZG1GeUlHTmhiR3hpWVdOcklEMGdhWE5HYmloemRISmxZVzF6VzNOMGNtVmhiWE11YkdWdVozUm9JQzBnTVYwZ2ZId2dibTl2Y0NrZ0ppWWdjM1J5WldGdGN5NXdiM0FvS1NCOGZDQnViMjl3WEc1Y2JpQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29jM1J5WldGdGMxc3dYU2twSUhOMGNtVmhiWE1nUFNCemRISmxZVzF6V3pCZFhHNGdJR2xtSUNoemRISmxZVzF6TG14bGJtZDBhQ0E4SURJcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmNIVnRjQ0J5WlhGMWFYSmxjeUIwZDI4Z2MzUnlaV0Z0Y3lCd1pYSWdiV2x1YVcxMWJTY3BYRzVjYmlBZ2RtRnlJR1Z5Y205eVhHNGdJSFpoY2lCa1pYTjBjbTk1Y3lBOUlITjBjbVZoYlhNdWJXRndLR1oxYm1OMGFXOXVJQ2h6ZEhKbFlXMHNJR2twSUh0Y2JpQWdJQ0IyWVhJZ2NtVmhaR2x1WnlBOUlHa2dQQ0J6ZEhKbFlXMXpMbXhsYm1kMGFDQXRJREZjYmlBZ0lDQjJZWElnZDNKcGRHbHVaeUE5SUdrZ1BpQXdYRzRnSUNBZ2NtVjBkWEp1SUdSbGMzUnliM2xsY2loemRISmxZVzBzSUhKbFlXUnBibWNzSUhkeWFYUnBibWNzSUdaMWJtTjBhVzl1SUNobGNuSXBJSHRjYmlBZ0lDQWdJR2xtSUNnaFpYSnliM0lwSUdWeWNtOXlJRDBnWlhKeVhHNGdJQ0FnSUNCcFppQW9aWEp5S1NCa1pYTjBjbTk1Y3k1bWIzSkZZV05vS0dOaGJHd3BYRzRnSUNBZ0lDQnBaaUFvY21WaFpHbHVaeWtnY21WMGRYSnVYRzRnSUNBZ0lDQmtaWE4wY205NWN5NW1iM0pGWVdOb0tHTmhiR3dwWEc0Z0lDQWdJQ0JqWVd4c1ltRmpheWhsY25KdmNpbGNiaUFnSUNCOUtWeHVJQ0I5S1Z4dVhHNGdJSEpsZEhWeWJpQnpkSEpsWVcxekxuSmxaSFZqWlNod2FYQmxLVnh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIQjFiWEJjYmlJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpOXNhV0l2WDNOMGNtVmhiVjlrZFhCc1pYZ3Vhbk1uS1R0Y2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCS2IzbGxiblFzSUVsdVl5NGdZVzVrSUc5MGFHVnlJRTV2WkdVZ1kyOXVkSEpwWW5WMGIzSnpMbHh1THk5Y2JpOHZJRkJsY20xcGMzTnBiMjRnYVhNZ2FHVnlaV0o1SUdkeVlXNTBaV1FzSUdaeVpXVWdiMllnWTJoaGNtZGxMQ0IwYnlCaGJua2djR1Z5YzI5dUlHOWlkR0ZwYm1sdVp5QmhYRzR2THlCamIzQjVJRzltSUhSb2FYTWdjMjltZEhkaGNtVWdZVzVrSUdGemMyOWphV0YwWldRZ1pHOWpkVzFsYm5SaGRHbHZiaUJtYVd4bGN5QW9kR2hsWEc0dkx5QmNJbE52Wm5SM1lYSmxYQ0lwTENCMGJ5QmtaV0ZzSUdsdUlIUm9aU0JUYjJaMGQyRnlaU0IzYVhSb2IzVjBJSEpsYzNSeWFXTjBhVzl1TENCcGJtTnNkV1JwYm1kY2JpOHZJSGRwZEdodmRYUWdiR2x0YVhSaGRHbHZiaUIwYUdVZ2NtbG5hSFJ6SUhSdklIVnpaU3dnWTI5d2VTd2diVzlrYVdaNUxDQnRaWEpuWlN3Z2NIVmliR2x6YUN4Y2JpOHZJR1JwYzNSeWFXSjFkR1VzSUhOMVlteHBZMlZ1YzJVc0lHRnVaQzl2Y2lCelpXeHNJR052Y0dsbGN5QnZaaUIwYUdVZ1UyOW1kSGRoY21Vc0lHRnVaQ0IwYnlCd1pYSnRhWFJjYmk4dklIQmxjbk52Ym5NZ2RHOGdkMmh2YlNCMGFHVWdVMjltZEhkaGNtVWdhWE1nWm5WeWJtbHphR1ZrSUhSdklHUnZJSE52TENCemRXSnFaV04wSUhSdklIUm9aVnh1THk4Z1ptOXNiRzkzYVc1bklHTnZibVJwZEdsdmJuTTZYRzR2TDF4dUx5OGdWR2hsSUdGaWIzWmxJR052Y0hseWFXZG9kQ0J1YjNScFkyVWdZVzVrSUhSb2FYTWdjR1Z5YldsemMybHZiaUJ1YjNScFkyVWdjMmhoYkd3Z1ltVWdhVzVqYkhWa1pXUmNiaTh2SUdsdUlHRnNiQ0JqYjNCcFpYTWdiM0lnYzNWaWMzUmhiblJwWVd3Z2NHOXlkR2x2Ym5NZ2IyWWdkR2hsSUZOdlpuUjNZWEpsTGx4dUx5OWNiaTh2SUZSSVJTQlRUMFpVVjBGU1JTQkpVeUJRVWs5V1NVUkZSQ0JjSWtGVElFbFRYQ0lzSUZkSlZFaFBWVlFnVjBGU1VrRk9WRmtnVDBZZ1FVNVpJRXRKVGtRc0lFVllVRkpGVTFOY2JpOHZJRTlTSUVsTlVFeEpSVVFzSUVsT1EweFZSRWxPUnlCQ1ZWUWdUazlVSUV4SlRVbFVSVVFnVkU4Z1ZFaEZJRmRCVWxKQlRsUkpSVk1nVDBaY2JpOHZJRTFGVWtOSVFVNVVRVUpKVEVsVVdTd2dSa2xVVGtWVFV5QkdUMUlnUVNCUVFWSlVTVU5WVEVGU0lGQlZVbEJQVTBVZ1FVNUVJRTVQVGtsT1JsSkpUa2RGVFVWT1ZDNGdTVTVjYmk4dklFNVBJRVZXUlU1VUlGTklRVXhNSUZSSVJTQkJWVlJJVDFKVElFOVNJRU5QVUZsU1NVZElWQ0JJVDB4RVJWSlRJRUpGSUV4SlFVSk1SU0JHVDFJZ1FVNVpJRU5NUVVsTkxGeHVMeThnUkVGTlFVZEZVeUJQVWlCUFZFaEZVaUJNU1VGQ1NVeEpWRmtzSUZkSVJWUklSVklnU1U0Z1FVNGdRVU5VU1U5T0lFOUdJRU5QVGxSU1FVTlVMQ0JVVDFKVUlFOVNYRzR2THlCUFZFaEZVbGRKVTBVc0lFRlNTVk5KVGtjZ1JsSlBUU3dnVDFWVUlFOUdJRTlTSUVsT0lFTlBUazVGUTFSSlQwNGdWMGxVU0NCVVNFVWdVMDlHVkZkQlVrVWdUMUlnVkVoRlhHNHZMeUJWVTBVZ1QxSWdUMVJJUlZJZ1JFVkJURWxPUjFNZ1NVNGdWRWhGSUZOUFJsUlhRVkpGTGx4dVhHNHZMeUJoSUdSMWNHeGxlQ0J6ZEhKbFlXMGdhWE1nYW5WemRDQmhJSE4wY21WaGJTQjBhR0YwSUdseklHSnZkR2dnY21WaFpHRmliR1VnWVc1a0lIZHlhWFJoWW14bExseHVMeThnVTJsdVkyVWdTbE1nWkc5bGMyNG5kQ0JvWVhabElHMTFiSFJwY0d4bElIQnliM1J2ZEhsd1lXd2dhVzVvWlhKcGRHRnVZMlVzSUhSb2FYTWdZMnhoYzNOY2JpOHZJSEJ5YjNSdmRIbHdZV3hzZVNCcGJtaGxjbWwwY3lCbWNtOXRJRkpsWVdSaFlteGxMQ0JoYm1RZ2RHaGxiaUJ3WVhKaGMybDBhV05oYkd4NUlHWnliMjFjYmk4dklGZHlhWFJoWW14bExseHVYRzRuZFhObElITjBjbWxqZENjN1hHNWNiaThxUEhKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzVjYm5aaGNpQndibUVnUFNCeVpYRjFhWEpsS0Nkd2NtOWpaWE56TFc1bGVIUnBZMnN0WVhKbmN5Y3BPMXh1THlvOEwzSmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JpOHFQSEpsY0d4aFkyVnRaVzUwUGlvdlhHNTJZWElnYjJKcVpXTjBTMlY1Y3lBOUlFOWlhbVZqZEM1clpYbHpJSHg4SUdaMWJtTjBhVzl1SUNodlltb3BJSHRjYmlBZ2RtRnlJR3RsZVhNZ1BTQmJYVHRjYmlBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUc5aWFpa2dlMXh1SUNBZ0lHdGxlWE11Y0hWemFDaHJaWGtwTzF4dUlDQjljbVYwZFhKdUlHdGxlWE03WEc1OU8xeHVMeW84TDNKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnUkhWd2JHVjRPMXh1WEc0dktqeHlaWEJzWVdObGJXVnVkRDRxTDF4dWRtRnlJSFYwYVd3Z1BTQlBZbXBsWTNRdVkzSmxZWFJsS0hKbGNYVnBjbVVvSjJOdmNtVXRkWFJwYkMxcGN5Y3BLVHRjYm5WMGFXd3VhVzVvWlhKcGRITWdQU0J5WlhGMWFYSmxLQ2RwYm1obGNtbDBjeWNwTzF4dUx5bzhMM0psY0d4aFkyVnRaVzUwUGlvdlhHNWNiblpoY2lCU1pXRmtZV0pzWlNBOUlISmxjWFZwY21Vb0p5NHZYM04wY21WaGJWOXlaV0ZrWVdKc1pTY3BPMXh1ZG1GeUlGZHlhWFJoWW14bElEMGdjbVZ4ZFdseVpTZ25MaTlmYzNSeVpXRnRYM2R5YVhSaFlteGxKeWs3WEc1Y2JuVjBhV3d1YVc1b1pYSnBkSE1vUkhWd2JHVjRMQ0JTWldGa1lXSnNaU2s3WEc1Y2JudGNiaUFnTHk4Z1lYWnZhV1FnYzJOdmNHVWdZM0psWlhBc0lIUm9aU0JyWlhseklHRnljbUY1SUdOaGJpQjBhR1Z1SUdKbElHTnZiR3hsWTNSbFpGeHVJQ0IyWVhJZ2EyVjVjeUE5SUc5aWFtVmpkRXRsZVhNb1YzSnBkR0ZpYkdVdWNISnZkRzkwZVhCbEtUdGNiaUFnWm05eUlDaDJZWElnZGlBOUlEQTdJSFlnUENCclpYbHpMbXhsYm1kMGFEc2dkaXNyS1NCN1hHNGdJQ0FnZG1GeUlHMWxkR2h2WkNBOUlHdGxlWE5iZGwwN1hHNGdJQ0FnYVdZZ0tDRkVkWEJzWlhndWNISnZkRzkwZVhCbFcyMWxkR2h2WkYwcElFUjFjR3hsZUM1d2NtOTBiM1I1Y0dWYmJXVjBhRzlrWFNBOUlGZHlhWFJoWW14bExuQnliM1J2ZEhsd1pWdHRaWFJvYjJSZE8xeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJRVIxY0d4bGVDaHZjSFJwYjI1ektTQjdYRzRnSUdsbUlDZ2hLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQkVkWEJzWlhncEtTQnlaWFIxY200Z2JtVjNJRVIxY0d4bGVDaHZjSFJwYjI1ektUdGNibHh1SUNCU1pXRmtZV0pzWlM1allXeHNLSFJvYVhNc0lHOXdkR2x2Ym5NcE8xeHVJQ0JYY21sMFlXSnNaUzVqWVd4c0tIUm9hWE1zSUc5d2RHbHZibk1wTzF4dVhHNGdJR2xtSUNodmNIUnBiMjV6SUNZbUlHOXdkR2x2Ym5NdWNtVmhaR0ZpYkdVZ1BUMDlJR1poYkhObEtTQjBhR2x6TG5KbFlXUmhZbXhsSUQwZ1ptRnNjMlU3WEc1Y2JpQWdhV1lnS0c5d2RHbHZibk1nSmlZZ2IzQjBhVzl1Y3k1M2NtbDBZV0pzWlNBOVBUMGdabUZzYzJVcElIUm9hWE11ZDNKcGRHRmliR1VnUFNCbVlXeHpaVHRjYmx4dUlDQjBhR2x6TG1Gc2JHOTNTR0ZzWms5d1pXNGdQU0IwY25WbE8xeHVJQ0JwWmlBb2IzQjBhVzl1Y3lBbUppQnZjSFJwYjI1ekxtRnNiRzkzU0dGc1prOXdaVzRnUFQwOUlHWmhiSE5sS1NCMGFHbHpMbUZzYkc5M1NHRnNaazl3Wlc0Z1BTQm1ZV3h6WlR0Y2JseHVJQ0IwYUdsekxtOXVZMlVvSjJWdVpDY3NJRzl1Wlc1a0tUdGNibjFjYmx4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRVIxY0d4bGVDNXdjbTkwYjNSNWNHVXNJQ2QzY21sMFlXSnNaVWhwWjJoWFlYUmxjazFoY21zbkxDQjdYRzRnSUM4dklHMWhhMmx1WnlCcGRDQmxlSEJzYVdOcGRDQjBhR2x6SUhCeWIzQmxjblI1SUdseklHNXZkQ0JsYm5WdFpYSmhZbXhsWEc0Z0lDOHZJR0psWTJGMWMyVWdiM1JvWlhKM2FYTmxJSE52YldVZ2NISnZkRzkwZVhCbElHMWhibWx3ZFd4aGRHbHZiaUJwYmx4dUlDQXZMeUIxYzJWeWJHRnVaQ0IzYVd4c0lHWmhhV3hjYmlBZ1pXNTFiV1Z5WVdKc1pUb2dabUZzYzJVc1hHNGdJR2RsZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkzY21sMFlXSnNaVk4wWVhSbExtaHBaMmhYWVhSbGNrMWhjbXM3WEc0Z0lIMWNibjBwTzF4dVhHNHZMeUIwYUdVZ2JtOHRhR0ZzWmkxdmNHVnVJR1Z1Wm05eVkyVnlYRzVtZFc1amRHbHZiaUJ2Ym1WdVpDZ3BJSHRjYmlBZ0x5OGdhV1lnZDJVZ1lXeHNiM2NnYUdGc1ppMXZjR1Z1SUhOMFlYUmxMQ0J2Y2lCcFppQjBhR1VnZDNKcGRHRmliR1VnYzJsa1pTQmxibVJsWkN4Y2JpQWdMeThnZEdobGJpQjNaU2R5WlNCdmF5NWNiaUFnYVdZZ0tIUm9hWE11WVd4c2IzZElZV3htVDNCbGJpQjhmQ0IwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsTG1WdVpHVmtLU0J5WlhSMWNtNDdYRzVjYmlBZ0x5OGdibThnYlc5eVpTQmtZWFJoSUdOaGJpQmlaU0IzY21sMGRHVnVMbHh1SUNBdkx5QkNkWFFnWVd4c2IzY2diVzl5WlNCM2NtbDBaWE1nZEc4Z2FHRndjR1Z1SUdsdUlIUm9hWE1nZEdsamF5NWNiaUFnY0c1aExtNWxlSFJVYVdOcktHOXVSVzVrVGxRc0lIUm9hWE1wTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ2YmtWdVpFNVVLSE5sYkdZcElIdGNiaUFnYzJWc1ppNWxibVFvS1R0Y2JuMWNibHh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtFUjFjR3hsZUM1d2NtOTBiM1I1Y0dVc0lDZGtaWE4wY205NVpXUW5MQ0I3WEc0Z0lHZGxkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxJRDA5UFNCMWJtUmxabWx1WldRZ2ZId2dkR2hwY3k1ZmQzSnBkR0ZpYkdWVGRHRjBaU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbExtUmxjM1J5YjNsbFpDQW1KaUIwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsTG1SbGMzUnliM2xsWkR0Y2JpQWdmU3hjYmlBZ2MyVjBPaUJtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQXZMeUIzWlNCcFoyNXZjbVVnZEdobElIWmhiSFZsSUdsbUlIUm9aU0J6ZEhKbFlXMWNiaUFnSUNBdkx5Qm9ZWE1nYm05MElHSmxaVzRnYVc1cGRHbGhiR2w2WldRZ2VXVjBYRzRnSUNBZ2FXWWdLSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1VnUFQwOUlIVnVaR1ZtYVc1bFpDQjhmQ0IwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QmlZV05yZDJGeVpDQmpiMjF3WVhScFltbHNhWFI1TENCMGFHVWdkWE5sY2lCcGN5QmxlSEJzYVdOcGRHeDVYRzRnSUNBZ0x5OGdiV0Z1WVdkcGJtY2daR1Z6ZEhKdmVXVmtYRzRnSUNBZ2RHaHBjeTVmY21WaFpHRmliR1ZUZEdGMFpTNWtaWE4wY205NVpXUWdQU0IyWVd4MVpUdGNiaUFnSUNCMGFHbHpMbDkzY21sMFlXSnNaVk4wWVhSbExtUmxjM1J5YjNsbFpDQTlJSFpoYkhWbE8xeHVJQ0I5WEc1OUtUdGNibHh1UkhWd2JHVjRMbkJ5YjNSdmRIbHdaUzVmWkdWemRISnZlU0E5SUdaMWJtTjBhVzl1SUNobGNuSXNJR05pS1NCN1hHNGdJSFJvYVhNdWNIVnphQ2h1ZFd4c0tUdGNiaUFnZEdocGN5NWxibVFvS1R0Y2JseHVJQ0J3Ym1FdWJtVjRkRlJwWTJzb1kySXNJR1Z5Y2lrN1hHNTlPeUlzSWk4dklFTnZjSGx5YVdkb2RDQktiM2xsYm5Rc0lFbHVZeTRnWVc1a0lHOTBhR1Z5SUU1dlpHVWdZMjl1ZEhKcFluVjBiM0p6TGx4dUx5OWNiaTh2SUZCbGNtMXBjM05wYjI0Z2FYTWdhR1Z5WldKNUlHZHlZVzUwWldRc0lHWnlaV1VnYjJZZ1kyaGhjbWRsTENCMGJ5QmhibmtnY0dWeWMyOXVJRzlpZEdGcGJtbHVaeUJoWEc0dkx5QmpiM0I1SUc5bUlIUm9hWE1nYzI5bWRIZGhjbVVnWVc1a0lHRnpjMjlqYVdGMFpXUWdaRzlqZFcxbGJuUmhkR2x2YmlCbWFXeGxjeUFvZEdobFhHNHZMeUJjSWxOdlpuUjNZWEpsWENJcExDQjBieUJrWldGc0lHbHVJSFJvWlNCVGIyWjBkMkZ5WlNCM2FYUm9iM1YwSUhKbGMzUnlhV04wYVc5dUxDQnBibU5zZFdScGJtZGNiaTh2SUhkcGRHaHZkWFFnYkdsdGFYUmhkR2x2YmlCMGFHVWdjbWxuYUhSeklIUnZJSFZ6WlN3Z1kyOXdlU3dnYlc5a2FXWjVMQ0J0WlhKblpTd2djSFZpYkdsemFDeGNiaTh2SUdScGMzUnlhV0oxZEdVc0lITjFZbXhwWTJWdWMyVXNJR0Z1WkM5dmNpQnpaV3hzSUdOdmNHbGxjeUJ2WmlCMGFHVWdVMjltZEhkaGNtVXNJR0Z1WkNCMGJ5QndaWEp0YVhSY2JpOHZJSEJsY25OdmJuTWdkRzhnZDJodmJTQjBhR1VnVTI5bWRIZGhjbVVnYVhNZ1puVnlibWx6YUdWa0lIUnZJR1J2SUhOdkxDQnpkV0pxWldOMElIUnZJSFJvWlZ4dUx5OGdabTlzYkc5M2FXNW5JR052Ym1ScGRHbHZibk02WEc0dkwxeHVMeThnVkdobElHRmliM1psSUdOdmNIbHlhV2RvZENCdWIzUnBZMlVnWVc1a0lIUm9hWE1nY0dWeWJXbHpjMmx2YmlCdWIzUnBZMlVnYzJoaGJHd2dZbVVnYVc1amJIVmtaV1JjYmk4dklHbHVJR0ZzYkNCamIzQnBaWE1nYjNJZ2MzVmljM1JoYm5ScFlXd2djRzl5ZEdsdmJuTWdiMllnZEdobElGTnZablIzWVhKbExseHVMeTljYmk4dklGUklSU0JUVDBaVVYwRlNSU0JKVXlCUVVrOVdTVVJGUkNCY0lrRlRJRWxUWENJc0lGZEpWRWhQVlZRZ1YwRlNVa0ZPVkZrZ1QwWWdRVTVaSUV0SlRrUXNJRVZZVUZKRlUxTmNiaTh2SUU5U0lFbE5VRXhKUlVRc0lFbE9RMHhWUkVsT1J5QkNWVlFnVGs5VUlFeEpUVWxVUlVRZ1ZFOGdWRWhGSUZkQlVsSkJUbFJKUlZNZ1QwWmNiaTh2SUUxRlVrTklRVTVVUVVKSlRFbFVXU3dnUmtsVVRrVlRVeUJHVDFJZ1FTQlFRVkpVU1VOVlRFRlNJRkJWVWxCUFUwVWdRVTVFSUU1UFRrbE9SbEpKVGtkRlRVVk9WQzRnU1U1Y2JpOHZJRTVQSUVWV1JVNVVJRk5JUVV4TUlGUklSU0JCVlZSSVQxSlRJRTlTSUVOUFVGbFNTVWRJVkNCSVQweEVSVkpUSUVKRklFeEpRVUpNUlNCR1QxSWdRVTVaSUVOTVFVbE5MRnh1THk4Z1JFRk5RVWRGVXlCUFVpQlBWRWhGVWlCTVNVRkNTVXhKVkZrc0lGZElSVlJJUlZJZ1NVNGdRVTRnUVVOVVNVOU9JRTlHSUVOUFRsUlNRVU5VTENCVVQxSlVJRTlTWEc0dkx5QlBWRWhGVWxkSlUwVXNJRUZTU1ZOSlRrY2dSbEpQVFN3Z1QxVlVJRTlHSUU5U0lFbE9JRU5QVGs1RlExUkpUMDRnVjBsVVNDQlVTRVVnVTA5R1ZGZEJVa1VnVDFJZ1ZFaEZYRzR2THlCVlUwVWdUMUlnVDFSSVJWSWdSRVZCVEVsT1IxTWdTVTRnVkVoRklGTlBSbFJYUVZKRkxseHVYRzR2THlCaElIQmhjM04wYUhKdmRXZG9JSE4wY21WaGJTNWNiaTh2SUdKaGMybGpZV3hzZVNCcWRYTjBJSFJvWlNCdGIzTjBJRzFwYm1sdFlXd2djMjl5ZENCdlppQlVjbUZ1YzJadmNtMGdjM1J5WldGdExseHVMeThnUlhabGNua2dkM0pwZEhSbGJpQmphSFZ1YXlCblpYUnpJRzkxZEhCMWRDQmhjeTFwY3k1Y2JseHVKM1Z6WlNCemRISnBZM1FuTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGQmhjM05VYUhKdmRXZG9PMXh1WEc1MllYSWdWSEpoYm5ObWIzSnRJRDBnY21WeGRXbHlaU2duTGk5ZmMzUnlaV0Z0WDNSeVlXNXpabTl5YlNjcE8xeHVYRzR2S2p4eVpYQnNZV05sYldWdWRENHFMMXh1ZG1GeUlIVjBhV3dnUFNCUFltcGxZM1F1WTNKbFlYUmxLSEpsY1hWcGNtVW9KMk52Y21VdGRYUnBiQzFwY3ljcEtUdGNiblYwYVd3dWFXNW9aWEpwZEhNZ1BTQnlaWEYxYVhKbEtDZHBibWhsY21sMGN5Y3BPMXh1THlvOEwzSmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JuVjBhV3d1YVc1b1pYSnBkSE1vVUdGemMxUm9jbTkxWjJnc0lGUnlZVzV6Wm05eWJTazdYRzVjYm1aMWJtTjBhVzl1SUZCaGMzTlVhSEp2ZFdkb0tHOXdkR2x2Ym5NcElIdGNiaUFnYVdZZ0tDRW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlGQmhjM05VYUhKdmRXZG9LU2tnY21WMGRYSnVJRzVsZHlCUVlYTnpWR2h5YjNWbmFDaHZjSFJwYjI1ektUdGNibHh1SUNCVWNtRnVjMlp2Y20wdVkyRnNiQ2gwYUdsekxDQnZjSFJwYjI1ektUdGNibjFjYmx4dVVHRnpjMVJvY205MVoyZ3VjSEp2ZEc5MGVYQmxMbDkwY21GdWMyWnZjbTBnUFNCbWRXNWpkR2x2YmlBb1kyaDFibXNzSUdWdVkyOWthVzVuTENCallpa2dlMXh1SUNCallpaHVkV3hzTENCamFIVnVheWs3WEc1OU95SXNJaTh2SUVOdmNIbHlhV2RvZENCS2IzbGxiblFzSUVsdVl5NGdZVzVrSUc5MGFHVnlJRTV2WkdVZ1kyOXVkSEpwWW5WMGIzSnpMbHh1THk5Y2JpOHZJRkJsY20xcGMzTnBiMjRnYVhNZ2FHVnlaV0o1SUdkeVlXNTBaV1FzSUdaeVpXVWdiMllnWTJoaGNtZGxMQ0IwYnlCaGJua2djR1Z5YzI5dUlHOWlkR0ZwYm1sdVp5QmhYRzR2THlCamIzQjVJRzltSUhSb2FYTWdjMjltZEhkaGNtVWdZVzVrSUdGemMyOWphV0YwWldRZ1pHOWpkVzFsYm5SaGRHbHZiaUJtYVd4bGN5QW9kR2hsWEc0dkx5QmNJbE52Wm5SM1lYSmxYQ0lwTENCMGJ5QmtaV0ZzSUdsdUlIUm9aU0JUYjJaMGQyRnlaU0IzYVhSb2IzVjBJSEpsYzNSeWFXTjBhVzl1TENCcGJtTnNkV1JwYm1kY2JpOHZJSGRwZEdodmRYUWdiR2x0YVhSaGRHbHZiaUIwYUdVZ2NtbG5hSFJ6SUhSdklIVnpaU3dnWTI5d2VTd2diVzlrYVdaNUxDQnRaWEpuWlN3Z2NIVmliR2x6YUN4Y2JpOHZJR1JwYzNSeWFXSjFkR1VzSUhOMVlteHBZMlZ1YzJVc0lHRnVaQzl2Y2lCelpXeHNJR052Y0dsbGN5QnZaaUIwYUdVZ1UyOW1kSGRoY21Vc0lHRnVaQ0IwYnlCd1pYSnRhWFJjYmk4dklIQmxjbk52Ym5NZ2RHOGdkMmh2YlNCMGFHVWdVMjltZEhkaGNtVWdhWE1nWm5WeWJtbHphR1ZrSUhSdklHUnZJSE52TENCemRXSnFaV04wSUhSdklIUm9aVnh1THk4Z1ptOXNiRzkzYVc1bklHTnZibVJwZEdsdmJuTTZYRzR2TDF4dUx5OGdWR2hsSUdGaWIzWmxJR052Y0hseWFXZG9kQ0J1YjNScFkyVWdZVzVrSUhSb2FYTWdjR1Z5YldsemMybHZiaUJ1YjNScFkyVWdjMmhoYkd3Z1ltVWdhVzVqYkhWa1pXUmNiaTh2SUdsdUlHRnNiQ0JqYjNCcFpYTWdiM0lnYzNWaWMzUmhiblJwWVd3Z2NHOXlkR2x2Ym5NZ2IyWWdkR2hsSUZOdlpuUjNZWEpsTGx4dUx5OWNiaTh2SUZSSVJTQlRUMFpVVjBGU1JTQkpVeUJRVWs5V1NVUkZSQ0JjSWtGVElFbFRYQ0lzSUZkSlZFaFBWVlFnVjBGU1VrRk9WRmtnVDBZZ1FVNVpJRXRKVGtRc0lFVllVRkpGVTFOY2JpOHZJRTlTSUVsTlVFeEpSVVFzSUVsT1EweFZSRWxPUnlCQ1ZWUWdUazlVSUV4SlRVbFVSVVFnVkU4Z1ZFaEZJRmRCVWxKQlRsUkpSVk1nVDBaY2JpOHZJRTFGVWtOSVFVNVVRVUpKVEVsVVdTd2dSa2xVVGtWVFV5QkdUMUlnUVNCUVFWSlVTVU5WVEVGU0lGQlZVbEJQVTBVZ1FVNUVJRTVQVGtsT1JsSkpUa2RGVFVWT1ZDNGdTVTVjYmk4dklFNVBJRVZXUlU1VUlGTklRVXhNSUZSSVJTQkJWVlJJVDFKVElFOVNJRU5QVUZsU1NVZElWQ0JJVDB4RVJWSlRJRUpGSUV4SlFVSk1SU0JHVDFJZ1FVNVpJRU5NUVVsTkxGeHVMeThnUkVGTlFVZEZVeUJQVWlCUFZFaEZVaUJNU1VGQ1NVeEpWRmtzSUZkSVJWUklSVklnU1U0Z1FVNGdRVU5VU1U5T0lFOUdJRU5QVGxSU1FVTlVMQ0JVVDFKVUlFOVNYRzR2THlCUFZFaEZVbGRKVTBVc0lFRlNTVk5KVGtjZ1JsSlBUU3dnVDFWVUlFOUdJRTlTSUVsT0lFTlBUazVGUTFSSlQwNGdWMGxVU0NCVVNFVWdVMDlHVkZkQlVrVWdUMUlnVkVoRlhHNHZMeUJWVTBVZ1QxSWdUMVJJUlZJZ1JFVkJURWxPUjFNZ1NVNGdWRWhGSUZOUFJsUlhRVkpGTGx4dVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JpOHFQSEpsY0d4aFkyVnRaVzUwUGlvdlhHNWNiblpoY2lCd2JtRWdQU0J5WlhGMWFYSmxLQ2R3Y205alpYTnpMVzVsZUhScFkyc3RZWEpuY3ljcE8xeHVMeW84TDNKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVW1WaFpHRmliR1U3WEc1Y2JpOHFQSEpsY0d4aFkyVnRaVzUwUGlvdlhHNTJZWElnYVhOQmNuSmhlU0E5SUhKbGNYVnBjbVVvSjJsellYSnlZWGtuS1R0Y2JpOHFQQzl5WlhCc1lXTmxiV1Z1ZEQ0cUwxeHVYRzR2S2p4eVpYQnNZV05sYldWdWRENHFMMXh1ZG1GeUlFUjFjR3hsZUR0Y2JpOHFQQzl5WlhCc1lXTmxiV1Z1ZEQ0cUwxeHVYRzVTWldGa1lXSnNaUzVTWldGa1lXSnNaVk4wWVhSbElEMGdVbVZoWkdGaWJHVlRkR0YwWlR0Y2JseHVMeW84Y21Wd2JHRmpaVzFsYm5RK0tpOWNiblpoY2lCRlJTQTlJSEpsY1hWcGNtVW9KMlYyWlc1MGN5Y3BMa1YyWlc1MFJXMXBkSFJsY2p0Y2JseHVkbUZ5SUVWRmJHbHpkR1Z1WlhKRGIzVnVkQ0E5SUdaMWJtTjBhVzl1SUNobGJXbDBkR1Z5TENCMGVYQmxLU0I3WEc0Z0lISmxkSFZ5YmlCbGJXbDBkR1Z5TG14cGMzUmxibVZ5Y3loMGVYQmxLUzVzWlc1bmRHZzdYRzU5TzF4dUx5bzhMM0psY0d4aFkyVnRaVzUwUGlvdlhHNWNiaThxUEhKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzUyWVhJZ1UzUnlaV0Z0SUQwZ2NtVnhkV2x5WlNnbkxpOXBiblJsY201aGJDOXpkSEpsWVcxekwzTjBjbVZoYlNjcE8xeHVMeW84TDNKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzVjYmk4cVBISmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JuWmhjaUJDZFdabVpYSWdQU0J5WlhGMWFYSmxLQ2R6WVdabExXSjFabVpsY2ljcExrSjFabVpsY2p0Y2JuWmhjaUJQZFhKVmFXNTBPRUZ5Y21GNUlEMGdaMnh2WW1Gc0xsVnBiblE0UVhKeVlYa2dmSHdnWm5WdVkzUnBiMjRnS0NrZ2UzMDdYRzVtZFc1amRHbHZiaUJmZFdsdWREaEJjbkpoZVZSdlFuVm1abVZ5S0dOb2RXNXJLU0I3WEc0Z0lISmxkSFZ5YmlCQ2RXWm1aWEl1Wm5KdmJTaGphSFZ1YXlrN1hHNTlYRzVtZFc1amRHbHZiaUJmYVhOVmFXNTBPRUZ5Y21GNUtHOWlhaWtnZTF4dUlDQnlaWFIxY200Z1FuVm1abVZ5TG1selFuVm1abVZ5S0c5aWFpa2dmSHdnYjJKcUlHbHVjM1JoYm1ObGIyWWdUM1Z5VldsdWREaEJjbkpoZVR0Y2JuMWNibHh1THlvOEwzSmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JpOHFQSEpsY0d4aFkyVnRaVzUwUGlvdlhHNTJZWElnZFhScGJDQTlJRTlpYW1WamRDNWpjbVZoZEdVb2NtVnhkV2x5WlNnblkyOXlaUzExZEdsc0xXbHpKeWtwTzF4dWRYUnBiQzVwYm1obGNtbDBjeUE5SUhKbGNYVnBjbVVvSjJsdWFHVnlhWFJ6SnlrN1hHNHZLand2Y21Wd2JHRmpaVzFsYm5RK0tpOWNibHh1THlvOGNtVndiR0ZqWlcxbGJuUStLaTljYm5aaGNpQmtaV0oxWjFWMGFXd2dQU0J5WlhGMWFYSmxLQ2QxZEdsc0p5azdYRzUyWVhJZ1pHVmlkV2NnUFNCMmIybGtJREE3WEc1cFppQW9aR1ZpZFdkVmRHbHNJQ1ltSUdSbFluVm5WWFJwYkM1a1pXSjFaMnh2WnlrZ2UxeHVJQ0JrWldKMVp5QTlJR1JsWW5WblZYUnBiQzVrWldKMVoyeHZaeWduYzNSeVpXRnRKeWs3WEc1OUlHVnNjMlVnZTF4dUlDQmtaV0oxWnlBOUlHWjFibU4wYVc5dUlDZ3BJSHQ5TzF4dWZWeHVMeW84TDNKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzVjYm5aaGNpQkNkV1ptWlhKTWFYTjBJRDBnY21WeGRXbHlaU2duTGk5cGJuUmxjbTVoYkM5emRISmxZVzF6TDBKMVptWmxja3hwYzNRbktUdGNiblpoY2lCa1pYTjBjbTk1U1cxd2JDQTlJSEpsY1hWcGNtVW9KeTR2YVc1MFpYSnVZV3d2YzNSeVpXRnRjeTlrWlhOMGNtOTVKeWs3WEc1MllYSWdVM1J5YVc1blJHVmpiMlJsY2p0Y2JseHVkWFJwYkM1cGJtaGxjbWwwY3loU1pXRmtZV0pzWlN3Z1UzUnlaV0Z0S1R0Y2JseHVkbUZ5SUd0UWNtOTRlVVYyWlc1MGN5QTlJRnNuWlhKeWIzSW5MQ0FuWTJ4dmMyVW5MQ0FuWkdWemRISnZlU2NzSUNkd1lYVnpaU2NzSUNkeVpYTjFiV1VuWFR0Y2JseHVablZ1WTNScGIyNGdjSEpsY0dWdVpFeHBjM1JsYm1WeUtHVnRhWFIwWlhJc0lHVjJaVzUwTENCbWJpa2dlMXh1SUNBdkx5QlRZV1JzZVNCMGFHbHpJR2x6SUc1dmRDQmpZV05vWldGaWJHVWdZWE1nYzI5dFpTQnNhV0p5WVhKcFpYTWdZblZ1Wkd4bElIUm9aV2x5SUc5M2JseHVJQ0F2THlCbGRtVnVkQ0JsYldsMGRHVnlJR2x0Y0d4bGJXVnVkR0YwYVc5dUlIZHBkR2dnZEdobGJTNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCbGJXbDBkR1Z5TG5CeVpYQmxibVJNYVhOMFpXNWxjaUE5UFQwZ0oyWjFibU4wYVc5dUp5a2djbVYwZFhKdUlHVnRhWFIwWlhJdWNISmxjR1Z1WkV4cGMzUmxibVZ5S0dWMlpXNTBMQ0JtYmlrN1hHNWNiaUFnTHk4Z1ZHaHBjeUJwY3lCaElHaGhZMnNnZEc4Z2JXRnJaU0J6ZFhKbElIUm9ZWFFnYjNWeUlHVnljbTl5SUdoaGJtUnNaWElnYVhNZ1lYUjBZV05vWldRZ1ltVm1iM0psSUdGdWVWeHVJQ0F2THlCMWMyVnliR0Z1WkNCdmJtVnpMaUFnVGtWV1JWSWdSRThnVkVoSlV5NGdWR2hwY3lCcGN5Qm9aWEpsSUc5dWJIa2dZbVZqWVhWelpTQjBhR2x6SUdOdlpHVWdibVZsWkhOY2JpQWdMeThnZEc4Z1kyOXVkR2x1ZFdVZ2RHOGdkMjl5YXlCM2FYUm9JRzlzWkdWeUlIWmxjbk5wYjI1eklHOW1JRTV2WkdVdWFuTWdkR2hoZENCa2J5QnViM1FnYVc1amJIVmtaVnh1SUNBdkx5QjBhR1VnY0hKbGNHVnVaRXhwYzNSbGJtVnlLQ2tnYldWMGFHOWtMaUJVYUdVZ1oyOWhiQ0JwY3lCMGJ5QmxkbVZ1ZEhWaGJHeDVJSEpsYlc5MlpTQjBhR2x6SUdoaFkyc3VYRzRnSUdsbUlDZ2haVzFwZEhSbGNpNWZaWFpsYm5SeklIeDhJQ0ZsYldsMGRHVnlMbDlsZG1WdWRITmJaWFpsYm5SZEtTQmxiV2wwZEdWeUxtOXVLR1YyWlc1MExDQm1iaWs3Wld4elpTQnBaaUFvYVhOQmNuSmhlU2hsYldsMGRHVnlMbDlsZG1WdWRITmJaWFpsYm5SZEtTa2daVzFwZEhSbGNpNWZaWFpsYm5SelcyVjJaVzUwWFM1MWJuTm9hV1owS0dadUtUdGxiSE5sSUdWdGFYUjBaWEl1WDJWMlpXNTBjMXRsZG1WdWRGMGdQU0JiWm00c0lHVnRhWFIwWlhJdVgyVjJaVzUwYzF0bGRtVnVkRjFkTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJTWldGa1lXSnNaVk4wWVhSbEtHOXdkR2x2Ym5Nc0lITjBjbVZoYlNrZ2UxeHVJQ0JFZFhCc1pYZ2dQU0JFZFhCc1pYZ2dmSHdnY21WeGRXbHlaU2duTGk5ZmMzUnlaV0Z0WDJSMWNHeGxlQ2NwTzF4dVhHNGdJRzl3ZEdsdmJuTWdQU0J2Y0hScGIyNXpJSHg4SUh0OU8xeHVYRzRnSUM4dklFUjFjR3hsZUNCemRISmxZVzF6SUdGeVpTQmliM1JvSUhKbFlXUmhZbXhsSUdGdVpDQjNjbWwwWVdKc1pTd2dZblYwSUhOb1lYSmxYRzRnSUM4dklIUm9aU0J6WVcxbElHOXdkR2x2Ym5NZ2IySnFaV04wTGx4dUlDQXZMeUJJYjNkbGRtVnlMQ0J6YjIxbElHTmhjMlZ6SUhKbGNYVnBjbVVnYzJWMGRHbHVaeUJ2Y0hScGIyNXpJSFJ2SUdScFptWmxjbVZ1ZEZ4dUlDQXZMeUIyWVd4MVpYTWdabTl5SUhSb1pTQnlaV0ZrWVdKc1pTQmhibVFnZEdobElIZHlhWFJoWW14bElITnBaR1Z6SUc5bUlIUm9aU0JrZFhCc1pYZ2djM1J5WldGdExseHVJQ0F2THlCVWFHVnpaU0J2Y0hScGIyNXpJR05oYmlCaVpTQndjbTkyYVdSbFpDQnpaWEJoY21GMFpXeDVJR0Z6SUhKbFlXUmhZbXhsV0ZoWUlHRnVaQ0IzY21sMFlXSnNaVmhZV0M1Y2JpQWdkbUZ5SUdselJIVndiR1Y0SUQwZ2MzUnlaV0Z0SUdsdWMzUmhibU5sYjJZZ1JIVndiR1Y0TzF4dVhHNGdJQzh2SUc5aWFtVmpkQ0J6ZEhKbFlXMGdabXhoWnk0Z1ZYTmxaQ0IwYnlCdFlXdGxJSEpsWVdRb2Jpa2dhV2R1YjNKbElHNGdZVzVrSUhSdlhHNGdJQzh2SUcxaGEyVWdZV3hzSUhSb1pTQmlkV1ptWlhJZ2JXVnlaMmx1WnlCaGJtUWdiR1Z1WjNSb0lHTm9aV05yY3lCbmJ5QmhkMkY1WEc0Z0lIUm9hWE11YjJKcVpXTjBUVzlrWlNBOUlDRWhiM0IwYVc5dWN5NXZZbXBsWTNSTmIyUmxPMXh1WEc0Z0lHbG1JQ2hwYzBSMWNHeGxlQ2tnZEdocGN5NXZZbXBsWTNSTmIyUmxJRDBnZEdocGN5NXZZbXBsWTNSTmIyUmxJSHg4SUNFaGIzQjBhVzl1Y3k1eVpXRmtZV0pzWlU5aWFtVmpkRTF2WkdVN1hHNWNiaUFnTHk4Z2RHaGxJSEJ2YVc1MElHRjBJSGRvYVdOb0lHbDBJSE4wYjNCeklHTmhiR3hwYm1jZ1gzSmxZV1FvS1NCMGJ5Qm1hV3hzSUhSb1pTQmlkV1ptWlhKY2JpQWdMeThnVG05MFpUb2dNQ0JwY3lCaElIWmhiR2xrSUhaaGJIVmxMQ0J0WldGdWN5QmNJbVJ2YmlkMElHTmhiR3dnWDNKbFlXUWdjSEpsWlcxd2RHbDJaV3g1SUdWMlpYSmNJbHh1SUNCMllYSWdhSGR0SUQwZ2IzQjBhVzl1Y3k1b2FXZG9WMkYwWlhKTllYSnJPMXh1SUNCMllYSWdjbVZoWkdGaWJHVklkMjBnUFNCdmNIUnBiMjV6TG5KbFlXUmhZbXhsU0dsbmFGZGhkR1Z5VFdGeWF6dGNiaUFnZG1GeUlHUmxabUYxYkhSSWQyMGdQU0IwYUdsekxtOWlhbVZqZEUxdlpHVWdQeUF4TmlBNklERTJJQ29nTVRBeU5EdGNibHh1SUNCcFppQW9hSGR0SUh4OElHaDNiU0E5UFQwZ01Da2dkR2hwY3k1b2FXZG9WMkYwWlhKTllYSnJJRDBnYUhkdE8yVnNjMlVnYVdZZ0tHbHpSSFZ3YkdWNElDWW1JQ2h5WldGa1lXSnNaVWgzYlNCOGZDQnlaV0ZrWVdKc1pVaDNiU0E5UFQwZ01Da3BJSFJvYVhNdWFHbG5hRmRoZEdWeVRXRnlheUE5SUhKbFlXUmhZbXhsU0hkdE8yVnNjMlVnZEdocGN5NW9hV2RvVjJGMFpYSk5ZWEpySUQwZ1pHVm1ZWFZzZEVoM2JUdGNibHh1SUNBdkx5QmpZWE4wSUhSdklHbHVkSE11WEc0Z0lIUm9hWE11YUdsbmFGZGhkR1Z5VFdGeWF5QTlJRTFoZEdndVpteHZiM0lvZEdocGN5NW9hV2RvVjJGMFpYSk5ZWEpyS1R0Y2JseHVJQ0F2THlCQklHeHBibXRsWkNCc2FYTjBJR2x6SUhWelpXUWdkRzhnYzNSdmNtVWdaR0YwWVNCamFIVnVhM01nYVc1emRHVmhaQ0J2WmlCaGJpQmhjbkpoZVNCaVpXTmhkWE5sSUhSb1pWeHVJQ0F2THlCc2FXNXJaV1FnYkdsemRDQmpZVzRnY21WdGIzWmxJR1ZzWlcxbGJuUnpJR1p5YjIwZ2RHaGxJR0psWjJsdWJtbHVaeUJtWVhOMFpYSWdkR2hoYmx4dUlDQXZMeUJoY25KaGVTNXphR2xtZENncFhHNGdJSFJvYVhNdVluVm1abVZ5SUQwZ2JtVjNJRUoxWm1abGNreHBjM1FvS1R0Y2JpQWdkR2hwY3k1c1pXNW5kR2dnUFNBd08xeHVJQ0IwYUdsekxuQnBjR1Z6SUQwZ2JuVnNiRHRjYmlBZ2RHaHBjeTV3YVhCbGMwTnZkVzUwSUQwZ01EdGNiaUFnZEdocGN5NW1iRzkzYVc1bklEMGdiblZzYkR0Y2JpQWdkR2hwY3k1bGJtUmxaQ0E5SUdaaGJITmxPMXh1SUNCMGFHbHpMbVZ1WkVWdGFYUjBaV1FnUFNCbVlXeHpaVHRjYmlBZ2RHaHBjeTV5WldGa2FXNW5JRDBnWm1Gc2MyVTdYRzVjYmlBZ0x5OGdZU0JtYkdGbklIUnZJR0psSUdGaWJHVWdkRzhnZEdWc2JDQnBaaUIwYUdVZ1pYWmxiblFnSjNKbFlXUmhZbXhsSnk4blpHRjBZU2NnYVhNZ1pXMXBkSFJsWkZ4dUlDQXZMeUJwYlcxbFpHbGhkR1ZzZVN3Z2IzSWdiMjRnWVNCc1lYUmxjaUIwYVdOckxpQWdWMlVnYzJWMElIUm9hWE1nZEc4Z2RISjFaU0JoZENCbWFYSnpkQ3dnWW1WallYVnpaVnh1SUNBdkx5QmhibmtnWVdOMGFXOXVjeUIwYUdGMElITm9iM1ZzWkc0bmRDQm9ZWEJ3Wlc0Z2RXNTBhV3dnWENKc1lYUmxjbHdpSUhOb2IzVnNaQ0JuWlc1bGNtRnNiSGtnWVd4emIxeHVJQ0F2THlCdWIzUWdhR0Z3Y0dWdUlHSmxabTl5WlNCMGFHVWdabWx5YzNRZ2NtVmhaQ0JqWVd4c0xseHVJQ0IwYUdsekxuTjVibU1nUFNCMGNuVmxPMXh1WEc0Z0lDOHZJSGRvWlc1bGRtVnlJSGRsSUhKbGRIVnliaUJ1ZFd4c0xDQjBhR1Z1SUhkbElITmxkQ0JoSUdac1lXY2dkRzhnYzJGNVhHNGdJQzh2SUhSb1lYUWdkMlVuY21VZ1lYZGhhWFJwYm1jZ1lTQW5jbVZoWkdGaWJHVW5JR1YyWlc1MElHVnRhWE56YVc5dUxseHVJQ0IwYUdsekxtNWxaV1JTWldGa1lXSnNaU0E5SUdaaGJITmxPMXh1SUNCMGFHbHpMbVZ0YVhSMFpXUlNaV0ZrWVdKc1pTQTlJR1poYkhObE8xeHVJQ0IwYUdsekxuSmxZV1JoWW14bFRHbHpkR1Z1YVc1bklEMGdabUZzYzJVN1hHNGdJSFJvYVhNdWNtVnpkVzFsVTJOb1pXUjFiR1ZrSUQwZ1ptRnNjMlU3WEc1Y2JpQWdMeThnYUdGeklHbDBJR0psWlc0Z1pHVnpkSEp2ZVdWa1hHNGdJSFJvYVhNdVpHVnpkSEp2ZVdWa0lEMGdabUZzYzJVN1hHNWNiaUFnTHk4Z1EzSjVjSFJ2SUdseklHdHBibVFnYjJZZ2IyeGtJR0Z1WkNCamNuVnpkSGt1SUNCSWFYTjBiM0pwWTJGc2JIa3NJR2wwY3lCa1pXWmhkV3gwSUhOMGNtbHVaMXh1SUNBdkx5QmxibU52WkdsdVp5QnBjeUFuWW1sdVlYSjVKeUJ6YnlCM1pTQm9ZWFpsSUhSdklHMWhhMlVnZEdocGN5QmpiMjVtYVdkMWNtRmliR1V1WEc0Z0lDOHZJRVYyWlhKNWRHaHBibWNnWld4elpTQnBiaUIwYUdVZ2RXNXBkbVZ5YzJVZ2RYTmxjeUFuZFhSbU9DY3NJSFJvYjNWbmFDNWNiaUFnZEdocGN5NWtaV1poZFd4MFJXNWpiMlJwYm1jZ1BTQnZjSFJwYjI1ekxtUmxabUYxYkhSRmJtTnZaR2x1WnlCOGZDQW5kWFJtT0NjN1hHNWNiaUFnTHk4Z2RHaGxJRzUxYldKbGNpQnZaaUIzY21sMFpYSnpJSFJvWVhRZ1lYSmxJR0YzWVdsMGFXNW5JR0VnWkhKaGFXNGdaWFpsYm5RZ2FXNGdMbkJwY0dVb0tYTmNiaUFnZEdocGN5NWhkMkZwZEVSeVlXbHVJRDBnTUR0Y2JseHVJQ0F2THlCcFppQjBjblZsTENCaElHMWhlV0psVW1WaFpFMXZjbVVnYUdGeklHSmxaVzRnYzJOb1pXUjFiR1ZrWEc0Z0lIUm9hWE11Y21WaFpHbHVaMDF2Y21VZ1BTQm1ZV3h6WlR0Y2JseHVJQ0IwYUdsekxtUmxZMjlrWlhJZ1BTQnVkV3hzTzF4dUlDQjBhR2x6TG1WdVkyOWthVzVuSUQwZ2JuVnNiRHRjYmlBZ2FXWWdLRzl3ZEdsdmJuTXVaVzVqYjJScGJtY3BJSHRjYmlBZ0lDQnBaaUFvSVZOMGNtbHVaMFJsWTI5a1pYSXBJRk4wY21sdVowUmxZMjlrWlhJZ1BTQnlaWEYxYVhKbEtDZHpkSEpwYm1kZlpHVmpiMlJsY2k4bktTNVRkSEpwYm1kRVpXTnZaR1Z5TzF4dUlDQWdJSFJvYVhNdVpHVmpiMlJsY2lBOUlHNWxkeUJUZEhKcGJtZEVaV052WkdWeUtHOXdkR2x2Ym5NdVpXNWpiMlJwYm1jcE8xeHVJQ0FnSUhSb2FYTXVaVzVqYjJScGJtY2dQU0J2Y0hScGIyNXpMbVZ1WTI5a2FXNW5PMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUZKbFlXUmhZbXhsS0c5d2RHbHZibk1wSUh0Y2JpQWdSSFZ3YkdWNElEMGdSSFZ3YkdWNElIeDhJSEpsY1hWcGNtVW9KeTR2WDNOMGNtVmhiVjlrZFhCc1pYZ25LVHRjYmx4dUlDQnBaaUFvSVNoMGFHbHpJR2x1YzNSaGJtTmxiMllnVW1WaFpHRmliR1VwS1NCeVpYUjFjbTRnYm1WM0lGSmxZV1JoWW14bEtHOXdkR2x2Ym5NcE8xeHVYRzRnSUhSb2FYTXVYM0psWVdSaFlteGxVM1JoZEdVZ1BTQnVaWGNnVW1WaFpHRmliR1ZUZEdGMFpTaHZjSFJwYjI1ekxDQjBhR2x6S1R0Y2JseHVJQ0F2THlCc1pXZGhZM2xjYmlBZ2RHaHBjeTV5WldGa1lXSnNaU0E5SUhSeWRXVTdYRzVjYmlBZ2FXWWdLRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JRzl3ZEdsdmJuTXVjbVZoWkNBOVBUMGdKMloxYm1OMGFXOXVKeWtnZEdocGN5NWZjbVZoWkNBOUlHOXdkR2x2Ym5NdWNtVmhaRHRjYmx4dUlDQWdJR2xtSUNoMGVYQmxiMllnYjNCMGFXOXVjeTVrWlhOMGNtOTVJRDA5UFNBblpuVnVZM1JwYjI0bktTQjBhR2x6TGw5a1pYTjBjbTk1SUQwZ2IzQjBhVzl1Y3k1a1pYTjBjbTk1TzF4dUlDQjlYRzVjYmlBZ1UzUnlaV0Z0TG1OaGJHd29kR2hwY3lrN1hHNTlYRzVjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaFNaV0ZrWVdKc1pTNXdjbTkwYjNSNWNHVXNJQ2RrWlhOMGNtOTVaV1FuTENCN1hHNGdJR2RsZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lHbG1JQ2gwYUdsekxsOXlaV0ZrWVdKc1pWTjBZWFJsSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVXVaR1Z6ZEhKdmVXVmtPMXh1SUNCOUxGeHVJQ0J6WlhRNklHWjFibU4wYVc5dUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUM4dklIZGxJR2xuYm05eVpTQjBhR1VnZG1Gc2RXVWdhV1lnZEdobElITjBjbVZoYlZ4dUlDQWdJQzh2SUdoaGN5QnViM1FnWW1WbGJpQnBibWwwYVdGc2FYcGxaQ0I1WlhSY2JpQWdJQ0JwWmlBb0lYUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QmlZV05yZDJGeVpDQmpiMjF3WVhScFltbHNhWFI1TENCMGFHVWdkWE5sY2lCcGN5QmxlSEJzYVdOcGRHeDVYRzRnSUNBZ0x5OGdiV0Z1WVdkcGJtY2daR1Z6ZEhKdmVXVmtYRzRnSUNBZ2RHaHBjeTVmY21WaFpHRmliR1ZUZEdGMFpTNWtaWE4wY205NVpXUWdQU0IyWVd4MVpUdGNiaUFnZlZ4dWZTazdYRzVjYmxKbFlXUmhZbXhsTG5CeWIzUnZkSGx3WlM1a1pYTjBjbTk1SUQwZ1pHVnpkSEp2ZVVsdGNHd3VaR1Z6ZEhKdmVUdGNibEpsWVdSaFlteGxMbkJ5YjNSdmRIbHdaUzVmZFc1a1pYTjBjbTk1SUQwZ1pHVnpkSEp2ZVVsdGNHd3VkVzVrWlhOMGNtOTVPMXh1VW1WaFpHRmliR1V1Y0hKdmRHOTBlWEJsTGw5a1pYTjBjbTk1SUQwZ1puVnVZM1JwYjI0Z0tHVnljaXdnWTJJcElIdGNiaUFnZEdocGN5NXdkWE5vS0c1MWJHd3BPMXh1SUNCallpaGxjbklwTzF4dWZUdGNibHh1THk4Z1RXRnVkV0ZzYkhrZ2MyaHZkbVVnYzI5dFpYUm9hVzVuSUdsdWRHOGdkR2hsSUhKbFlXUW9LU0JpZFdabVpYSXVYRzR2THlCVWFHbHpJSEpsZEhWeWJuTWdkSEoxWlNCcFppQjBhR1VnYUdsbmFGZGhkR1Z5VFdGeWF5Qm9ZWE1nYm05MElHSmxaVzRnYUdsMElIbGxkQ3hjYmk4dklITnBiV2xzWVhJZ2RHOGdhRzkzSUZkeWFYUmhZbXhsTG5keWFYUmxLQ2tnY21WMGRYSnVjeUIwY25WbElHbG1JSGx2ZFNCemFHOTFiR1JjYmk4dklIZHlhWFJsS0NrZ2MyOXRaU0J0YjNKbExseHVVbVZoWkdGaWJHVXVjSEp2ZEc5MGVYQmxMbkIxYzJnZ1BTQm1kVzVqZEdsdmJpQW9ZMmgxYm1zc0lHVnVZMjlrYVc1bktTQjdYRzRnSUhaaGNpQnpkR0YwWlNBOUlIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVTdYRzRnSUhaaGNpQnphMmx3UTJoMWJtdERhR1ZqYXp0Y2JseHVJQ0JwWmlBb0lYTjBZWFJsTG05aWFtVmpkRTF2WkdVcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHTm9kVzVySUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdaVzVqYjJScGJtY2dQU0JsYm1OdlpHbHVaeUI4ZkNCemRHRjBaUzVrWldaaGRXeDBSVzVqYjJScGJtYzdYRzRnSUNBZ0lDQnBaaUFvWlc1amIyUnBibWNnSVQwOUlITjBZWFJsTG1WdVkyOWthVzVuS1NCN1hHNGdJQ0FnSUNBZ0lHTm9kVzVySUQwZ1FuVm1abVZ5TG1aeWIyMG9ZMmgxYm1zc0lHVnVZMjlrYVc1bktUdGNiaUFnSUNBZ0lDQWdaVzVqYjJScGJtY2dQU0FuSnp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhOcmFYQkRhSFZ1YTBOb1pXTnJJRDBnZEhKMVpUdGNiaUFnSUNCOVhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2MydHBjRU5vZFc1clEyaGxZMnNnUFNCMGNuVmxPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSEpsWVdSaFlteGxRV1JrUTJoMWJtc29kR2hwY3l3Z1kyaDFibXNzSUdWdVkyOWthVzVuTENCbVlXeHpaU3dnYzJ0cGNFTm9kVzVyUTJobFkyc3BPMXh1ZlR0Y2JseHVMeThnVlc1emFHbG1kQ0J6YUc5MWJHUWdLbUZzZDJGNWN5b2dZbVVnYzI5dFpYUm9hVzVuSUdScGNtVmpkR3g1SUc5MWRDQnZaaUJ5WldGa0tDbGNibEpsWVdSaFlteGxMbkJ5YjNSdmRIbHdaUzUxYm5Ob2FXWjBJRDBnWm5WdVkzUnBiMjRnS0dOb2RXNXJLU0I3WEc0Z0lISmxkSFZ5YmlCeVpXRmtZV0pzWlVGa1pFTm9kVzVyS0hSb2FYTXNJR05vZFc1ckxDQnVkV3hzTENCMGNuVmxMQ0JtWVd4elpTazdYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQnlaV0ZrWVdKc1pVRmtaRU5vZFc1cktITjBjbVZoYlN3Z1kyaDFibXNzSUdWdVkyOWthVzVuTENCaFpHUlViMFp5YjI1MExDQnphMmx3UTJoMWJtdERhR1ZqYXlrZ2UxeHVJQ0IyWVhJZ2MzUmhkR1VnUFNCemRISmxZVzB1WDNKbFlXUmhZbXhsVTNSaGRHVTdYRzRnSUdsbUlDaGphSFZ1YXlBOVBUMGdiblZzYkNrZ2UxeHVJQ0FnSUhOMFlYUmxMbkpsWVdScGJtY2dQU0JtWVd4elpUdGNiaUFnSUNCdmJrVnZaa05vZFc1cktITjBjbVZoYlN3Z2MzUmhkR1VwTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhaaGNpQmxjanRjYmlBZ0lDQnBaaUFvSVhOcmFYQkRhSFZ1YTBOb1pXTnJLU0JsY2lBOUlHTm9kVzVyU1c1MllXeHBaQ2h6ZEdGMFpTd2dZMmgxYm1zcE8xeHVJQ0FnSUdsbUlDaGxjaWtnZTF4dUlDQWdJQ0FnYzNSeVpXRnRMbVZ0YVhRb0oyVnljbTl5Snl3Z1pYSXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9jM1JoZEdVdWIySnFaV04wVFc5a1pTQjhmQ0JqYUhWdWF5QW1KaUJqYUhWdWF5NXNaVzVuZEdnZ1BpQXdLU0I3WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdOb2RXNXJJQ0U5UFNBbmMzUnlhVzVuSnlBbUppQWhjM1JoZEdVdWIySnFaV04wVFc5a1pTQW1KaUJQWW1wbFkzUXVaMlYwVUhKdmRHOTBlWEJsVDJZb1kyaDFibXNwSUNFOVBTQkNkV1ptWlhJdWNISnZkRzkwZVhCbEtTQjdYRzRnSUNBZ0lDQWdJR05vZFc1cklEMGdYM1ZwYm5RNFFYSnlZWGxVYjBKMVptWmxjaWhqYUhWdWF5azdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNoaFpHUlViMFp5YjI1MEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoemRHRjBaUzVsYm1SRmJXbDBkR1ZrS1NCemRISmxZVzB1WlcxcGRDZ25aWEp5YjNJbkxDQnVaWGNnUlhKeWIzSW9KM04wY21WaGJTNTFibk5vYVdaMEtDa2dZV1owWlhJZ1pXNWtJR1YyWlc1MEp5a3BPMlZzYzJVZ1lXUmtRMmgxYm1zb2MzUnlaV0Z0TENCemRHRjBaU3dnWTJoMWJtc3NJSFJ5ZFdVcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHpkR0YwWlM1bGJtUmxaQ2tnZTF4dUlDQWdJQ0FnSUNCemRISmxZVzB1WlcxcGRDZ25aWEp5YjNJbkxDQnVaWGNnUlhKeWIzSW9KM04wY21WaGJTNXdkWE5vS0NrZ1lXWjBaWElnUlU5R0p5a3BPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjM1JoZEdVdWNtVmhaR2x1WnlBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCcFppQW9jM1JoZEdVdVpHVmpiMlJsY2lBbUppQWhaVzVqYjJScGJtY3BJSHRjYmlBZ0lDQWdJQ0FnSUNCamFIVnVheUE5SUhOMFlYUmxMbVJsWTI5a1pYSXVkM0pwZEdVb1kyaDFibXNwTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGMFpTNXZZbXBsWTNSTmIyUmxJSHg4SUdOb2RXNXJMbXhsYm1kMGFDQWhQVDBnTUNrZ1lXUmtRMmgxYm1zb2MzUnlaV0Z0TENCemRHRjBaU3dnWTJoMWJtc3NJR1poYkhObEtUdGxiSE5sSUcxaGVXSmxVbVZoWkUxdmNtVW9jM1J5WldGdExDQnpkR0YwWlNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdZV1JrUTJoMWJtc29jM1J5WldGdExDQnpkR0YwWlN3Z1kyaDFibXNzSUdaaGJITmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQnBaaUFvSVdGa1pGUnZSbkp2Ym5RcElIdGNiaUFnSUNBZ0lITjBZWFJsTG5KbFlXUnBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdibVZsWkUxdmNtVkVZWFJoS0hOMFlYUmxLVHRjYm4xY2JseHVablZ1WTNScGIyNGdZV1JrUTJoMWJtc29jM1J5WldGdExDQnpkR0YwWlN3Z1kyaDFibXNzSUdGa1pGUnZSbkp2Ym5RcElIdGNiaUFnYVdZZ0tITjBZWFJsTG1ac2IzZHBibWNnSmlZZ2MzUmhkR1V1YkdWdVozUm9JRDA5UFNBd0lDWW1JQ0Z6ZEdGMFpTNXplVzVqS1NCN1hHNGdJQ0FnYzNSeVpXRnRMbVZ0YVhRb0oyUmhkR0VuTENCamFIVnVheWs3WEc0Z0lDQWdjM1J5WldGdExuSmxZV1FvTUNrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ0x5OGdkWEJrWVhSbElIUm9aU0JpZFdabVpYSWdhVzVtYnk1Y2JpQWdJQ0J6ZEdGMFpTNXNaVzVuZEdnZ0t6MGdjM1JoZEdVdWIySnFaV04wVFc5a1pTQS9JREVnT2lCamFIVnVheTVzWlc1bmRHZzdYRzRnSUNBZ2FXWWdLR0ZrWkZSdlJuSnZiblFwSUhOMFlYUmxMbUoxWm1abGNpNTFibk5vYVdaMEtHTm9kVzVyS1R0bGJITmxJSE4wWVhSbExtSjFabVpsY2k1d2RYTm9LR05vZFc1cktUdGNibHh1SUNBZ0lHbG1JQ2h6ZEdGMFpTNXVaV1ZrVW1WaFpHRmliR1VwSUdWdGFYUlNaV0ZrWVdKc1pTaHpkSEpsWVcwcE8xeHVJQ0I5WEc0Z0lHMWhlV0psVW1WaFpFMXZjbVVvYzNSeVpXRnRMQ0J6ZEdGMFpTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHTm9kVzVyU1c1MllXeHBaQ2h6ZEdGMFpTd2dZMmgxYm1zcElIdGNiaUFnZG1GeUlHVnlPMXh1SUNCcFppQW9JVjlwYzFWcGJuUTRRWEp5WVhrb1kyaDFibXNwSUNZbUlIUjVjR1Z2WmlCamFIVnVheUFoUFQwZ0ozTjBjbWx1WnljZ0ppWWdZMmgxYm1zZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlBaGMzUmhkR1V1YjJKcVpXTjBUVzlrWlNrZ2UxeHVJQ0FnSUdWeUlEMGdibVYzSUZSNWNHVkZjbkp2Y2lnblNXNTJZV3hwWkNCdWIyNHRjM1J5YVc1bkwySjFabVpsY2lCamFIVnVheWNwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJsY2p0Y2JuMWNibHh1THk4Z2FXWWdhWFFuY3lCd1lYTjBJSFJvWlNCb2FXZG9JSGRoZEdWeUlHMWhjbXNzSUhkbElHTmhiaUJ3ZFhOb0lHbHVJSE52YldVZ2JXOXlaUzVjYmk4dklFRnNjMjhzSUdsbUlIZGxJR2hoZG1VZ2JtOGdaR0YwWVNCNVpYUXNJSGRsSUdOaGJpQnpkR0Z1WkNCemIyMWxYRzR2THlCdGIzSmxJR0o1ZEdWekxpQWdWR2hwY3lCcGN5QjBieUIzYjNKcklHRnliM1Z1WkNCallYTmxjeUIzYUdWeVpTQm9kMjA5TUN4Y2JpOHZJSE4xWTJnZ1lYTWdkR2hsSUhKbGNHd3VJQ0JCYkhOdkxDQnBaaUIwYUdVZ2NIVnphQ2dwSUhSeWFXZG5aWEpsWkNCaFhHNHZMeUJ5WldGa1lXSnNaU0JsZG1WdWRDd2dZVzVrSUhSb1pTQjFjMlZ5SUdOaGJHeGxaQ0J5WldGa0tHeGhjbWRsVG5WdFltVnlLU0J6ZFdOb0lIUm9ZWFJjYmk4dklHNWxaV1JTWldGa1lXSnNaU0IzWVhNZ2MyVjBMQ0IwYUdWdUlIZGxJRzkxWjJoMElIUnZJSEIxYzJnZ2JXOXlaU3dnYzI4Z2RHaGhkQ0JoYm05MGFHVnlYRzR2THlBbmNtVmhaR0ZpYkdVbklHVjJaVzUwSUhkcGJHd2dZbVVnZEhKcFoyZGxjbVZrTGx4dVpuVnVZM1JwYjI0Z2JtVmxaRTF2Y21WRVlYUmhLSE4wWVhSbEtTQjdYRzRnSUhKbGRIVnliaUFoYzNSaGRHVXVaVzVrWldRZ0ppWWdLSE4wWVhSbExtNWxaV1JTWldGa1lXSnNaU0I4ZkNCemRHRjBaUzVzWlc1bmRHZ2dQQ0J6ZEdGMFpTNW9hV2RvVjJGMFpYSk5ZWEpySUh4OElITjBZWFJsTG14bGJtZDBhQ0E5UFQwZ01DazdYRzU5WEc1Y2JsSmxZV1JoWW14bExuQnliM1J2ZEhsd1pTNXBjMUJoZFhObFpDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdjbVYwZFhKdUlIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVXVabXh2ZDJsdVp5QTlQVDBnWm1Gc2MyVTdYRzU5TzF4dVhHNHZMeUJpWVdOcmQyRnlaSE1nWTI5dGNHRjBhV0pwYkdsMGVTNWNibEpsWVdSaFlteGxMbkJ5YjNSdmRIbHdaUzV6WlhSRmJtTnZaR2x1WnlBOUlHWjFibU4wYVc5dUlDaGxibU1wSUh0Y2JpQWdhV1lnS0NGVGRISnBibWRFWldOdlpHVnlLU0JUZEhKcGJtZEVaV052WkdWeUlEMGdjbVZ4ZFdseVpTZ25jM1J5YVc1blgyUmxZMjlrWlhJdkp5a3VVM1J5YVc1blJHVmpiMlJsY2p0Y2JpQWdkR2hwY3k1ZmNtVmhaR0ZpYkdWVGRHRjBaUzVrWldOdlpHVnlJRDBnYm1WM0lGTjBjbWx1WjBSbFkyOWtaWElvWlc1aktUdGNiaUFnZEdocGN5NWZjbVZoWkdGaWJHVlRkR0YwWlM1bGJtTnZaR2x1WnlBOUlHVnVZenRjYmlBZ2NtVjBkWEp1SUhSb2FYTTdYRzU5TzF4dVhHNHZMeUJFYjI0bmRDQnlZV2x6WlNCMGFHVWdhSGR0SUQ0Z09FMUNYRzUyWVhJZ1RVRllYMGhYVFNBOUlEQjRPREF3TURBd08xeHVablZ1WTNScGIyNGdZMjl0Y0hWMFpVNWxkMGhwWjJoWFlYUmxjazFoY21zb2Jpa2dlMXh1SUNCcFppQW9iaUErUFNCTlFWaGZTRmROS1NCN1hHNGdJQ0FnYmlBOUlFMUJXRjlJVjAwN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ0x5OGdSMlYwSUhSb1pTQnVaWGgwSUdocFoyaGxjM1FnY0c5M1pYSWdiMllnTWlCMGJ5QndjbVYyWlc1MElHbHVZM0psWVhOcGJtY2dhSGR0SUdWNFkyVnpjMmwyWld4NUlHbHVYRzRnSUNBZ0x5OGdkR2x1ZVNCaGJXOTFiblJ6WEc0Z0lDQWdiaTB0TzF4dUlDQWdJRzRnZkQwZ2JpQStQajRnTVR0Y2JpQWdJQ0J1SUh3OUlHNGdQajQrSURJN1hHNGdJQ0FnYmlCOFBTQnVJRDQrUGlBME8xeHVJQ0FnSUc0Z2ZEMGdiaUErUGo0Z09EdGNiaUFnSUNCdUlIdzlJRzRnUGo0K0lERTJPMXh1SUNBZ0lHNHJLenRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdianRjYm4xY2JseHVMeThnVkdocGN5Qm1kVzVqZEdsdmJpQnBjeUJrWlhOcFoyNWxaQ0IwYnlCaVpTQnBibXhwYm1GaWJHVXNJSE52SUhCc1pXRnpaU0IwWVd0bElHTmhjbVVnZDJobGJpQnRZV3RwYm1kY2JpOHZJR05vWVc1blpYTWdkRzhnZEdobElHWjFibU4wYVc5dUlHSnZaSGt1WEc1bWRXNWpkR2x2YmlCb2IzZE5kV05vVkc5U1pXRmtLRzRzSUhOMFlYUmxLU0I3WEc0Z0lHbG1JQ2h1SUR3OUlEQWdmSHdnYzNSaGRHVXViR1Z1WjNSb0lEMDlQU0F3SUNZbUlITjBZWFJsTG1WdVpHVmtLU0J5WlhSMWNtNGdNRHRjYmlBZ2FXWWdLSE4wWVhSbExtOWlhbVZqZEUxdlpHVXBJSEpsZEhWeWJpQXhPMXh1SUNCcFppQW9iaUFoUFQwZ2Jpa2dlMXh1SUNBZ0lDOHZJRTl1YkhrZ1pteHZkeUJ2Ym1VZ1luVm1abVZ5SUdGMElHRWdkR2x0WlZ4dUlDQWdJR2xtSUNoemRHRjBaUzVtYkc5M2FXNW5JQ1ltSUhOMFlYUmxMbXhsYm1kMGFDa2djbVYwZFhKdUlITjBZWFJsTG1KMVptWmxjaTVvWldGa0xtUmhkR0V1YkdWdVozUm9PMlZzYzJVZ2NtVjBkWEp1SUhOMFlYUmxMbXhsYm1kMGFEdGNiaUFnZlZ4dUlDQXZMeUJKWmlCM1pTZHlaU0JoYzJ0cGJtY2dabTl5SUcxdmNtVWdkR2hoYmlCMGFHVWdZM1Z5Y21WdWRDQm9kMjBzSUhSb1pXNGdjbUZwYzJVZ2RHaGxJR2gzYlM1Y2JpQWdhV1lnS0c0Z1BpQnpkR0YwWlM1b2FXZG9WMkYwWlhKTllYSnJLU0J6ZEdGMFpTNW9hV2RvVjJGMFpYSk5ZWEpySUQwZ1kyOXRjSFYwWlU1bGQwaHBaMmhYWVhSbGNrMWhjbXNvYmlrN1hHNGdJR2xtSUNodUlEdzlJSE4wWVhSbExteGxibWQwYUNrZ2NtVjBkWEp1SUc0N1hHNGdJQzh2SUVSdmJpZDBJR2hoZG1VZ1pXNXZkV2RvWEc0Z0lHbG1JQ2doYzNSaGRHVXVaVzVrWldRcElIdGNiaUFnSUNCemRHRjBaUzV1WldWa1VtVmhaR0ZpYkdVZ1BTQjBjblZsTzF4dUlDQWdJSEpsZEhWeWJpQXdPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQnpkR0YwWlM1c1pXNW5kR2c3WEc1OVhHNWNiaTh2SUhsdmRTQmpZVzRnYjNabGNuSnBaR1VnWldsMGFHVnlJSFJvYVhNZ2JXVjBhRzlrTENCdmNpQjBhR1VnWVhONWJtTWdYM0psWVdRb2Jpa2dZbVZzYjNjdVhHNVNaV0ZrWVdKc1pTNXdjbTkwYjNSNWNHVXVjbVZoWkNBOUlHWjFibU4wYVc5dUlDaHVLU0I3WEc0Z0lHUmxZblZuS0NkeVpXRmtKeXdnYmlrN1hHNGdJRzRnUFNCd1lYSnpaVWx1ZENodUxDQXhNQ2s3WEc0Z0lIWmhjaUJ6ZEdGMFpTQTlJSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1U3WEc0Z0lIWmhjaUJ1VDNKcFp5QTlJRzQ3WEc1Y2JpQWdhV1lnS0c0Z0lUMDlJREFwSUhOMFlYUmxMbVZ0YVhSMFpXUlNaV0ZrWVdKc1pTQTlJR1poYkhObE8xeHVYRzRnSUM4dklHbG1JSGRsSjNKbElHUnZhVzVuSUhKbFlXUW9NQ2tnZEc4Z2RISnBaMmRsY2lCaElISmxZV1JoWW14bElHVjJaVzUwTENCaWRYUWdkMlZjYmlBZ0x5OGdZV3h5WldGa2VTQm9ZWFpsSUdFZ1luVnVZMmdnYjJZZ1pHRjBZU0JwYmlCMGFHVWdZblZtWm1WeUxDQjBhR1Z1SUdwMWMzUWdkSEpwWjJkbGNseHVJQ0F2THlCMGFHVWdKM0psWVdSaFlteGxKeUJsZG1WdWRDQmhibVFnYlc5MlpTQnZiaTVjYmlBZ2FXWWdLRzRnUFQwOUlEQWdKaVlnYzNSaGRHVXVibVZsWkZKbFlXUmhZbXhsSUNZbUlDaHpkR0YwWlM1c1pXNW5kR2dnUGowZ2MzUmhkR1V1YUdsbmFGZGhkR1Z5VFdGeWF5QjhmQ0J6ZEdGMFpTNWxibVJsWkNrcElIdGNiaUFnSUNCa1pXSjFaeWduY21WaFpEb2daVzFwZEZKbFlXUmhZbXhsSnl3Z2MzUmhkR1V1YkdWdVozUm9MQ0J6ZEdGMFpTNWxibVJsWkNrN1hHNGdJQ0FnYVdZZ0tITjBZWFJsTG14bGJtZDBhQ0E5UFQwZ01DQW1KaUJ6ZEdGMFpTNWxibVJsWkNrZ1pXNWtVbVZoWkdGaWJHVW9kR2hwY3lrN1pXeHpaU0JsYldsMFVtVmhaR0ZpYkdVb2RHaHBjeWs3WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lIMWNibHh1SUNCdUlEMGdhRzkzVFhWamFGUnZVbVZoWkNodUxDQnpkR0YwWlNrN1hHNWNiaUFnTHk4Z2FXWWdkMlVuZG1VZ1pXNWtaV1FzSUdGdVpDQjNaU2R5WlNCdWIzY2dZMnhsWVhJc0lIUm9aVzRnWm1sdWFYTm9JR2wwSUhWd0xseHVJQ0JwWmlBb2JpQTlQVDBnTUNBbUppQnpkR0YwWlM1bGJtUmxaQ2tnZTF4dUlDQWdJR2xtSUNoemRHRjBaUzVzWlc1bmRHZ2dQVDA5SURBcElHVnVaRkpsWVdSaFlteGxLSFJvYVhNcE8xeHVJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0I5WEc1Y2JpQWdMeThnUVd4c0lIUm9aU0JoWTNSMVlXd2dZMmgxYm1zZ1oyVnVaWEpoZEdsdmJpQnNiMmRwWXlCdVpXVmtjeUIwYnlCaVpWeHVJQ0F2THlBcVltVnNiM2NxSUhSb1pTQmpZV3hzSUhSdklGOXlaV0ZrTGlBZ1ZHaGxJSEpsWVhOdmJpQnBjeUIwYUdGMElHbHVJR05sY25SaGFXNWNiaUFnTHk4Z2MzbHVkR2hsZEdsaklITjBjbVZoYlNCallYTmxjeXdnYzNWamFDQmhjeUJ3WVhOemRHaHliM1ZuYUNCemRISmxZVzF6TENCZmNtVmhaRnh1SUNBdkx5QnRZWGtnWW1VZ1lTQmpiMjF3YkdWMFpXeDVJSE41Ym1Ob2NtOXViM1Z6SUc5d1pYSmhkR2x2YmlCM2FHbGphQ0J0WVhrZ1kyaGhibWRsWEc0Z0lDOHZJSFJvWlNCemRHRjBaU0J2WmlCMGFHVWdjbVZoWkNCaWRXWm1aWElzSUhCeWIzWnBaR2x1WnlCbGJtOTFaMmdnWkdGMFlTQjNhR1Z1WEc0Z0lDOHZJR0psWm05eVpTQjBhR1Z5WlNCM1lYTWdLbTV2ZENvZ1pXNXZkV2RvTGx4dUlDQXZMMXh1SUNBdkx5QlRieXdnZEdobElITjBaWEJ6SUdGeVpUcGNiaUFnTHk4Z01TNGdSbWxuZFhKbElHOTFkQ0IzYUdGMElIUm9aU0J6ZEdGMFpTQnZaaUIwYUdsdVozTWdkMmxzYkNCaVpTQmhablJsY2lCM1pTQmtiMXh1SUNBdkx5QmhJSEpsWVdRZ1puSnZiU0IwYUdVZ1luVm1abVZ5TGx4dUlDQXZMMXh1SUNBdkx5QXlMaUJKWmlCMGFHRjBJSEpsYzNWc2RHbHVaeUJ6ZEdGMFpTQjNhV3hzSUhSeWFXZG5aWElnWVNCZmNtVmhaQ3dnZEdobGJpQmpZV3hzSUY5eVpXRmtMbHh1SUNBdkx5Qk9iM1JsSUhSb1lYUWdkR2hwY3lCdFlYa2dZbVVnWVhONWJtTm9jbTl1YjNWekxDQnZjaUJ6ZVc1amFISnZibTkxY3k0Z0lGbGxjeXdnYVhRZ2FYTmNiaUFnTHk4Z1pHVmxjR3g1SUhWbmJIa2dkRzhnZDNKcGRHVWdRVkJKY3lCMGFHbHpJSGRoZVN3Z1luVjBJSFJvWVhRZ2MzUnBiR3dnWkc5bGMyNG5kQ0J0WldGdVhHNGdJQzh2SUhSb1lYUWdkR2hsSUZKbFlXUmhZbXhsSUdOc1lYTnpJSE5vYjNWc1pDQmlaV2hoZG1VZ2FXMXdjbTl3WlhKc2VTd2dZWE1nYzNSeVpXRnRjeUJoY21WY2JpQWdMeThnWkdWemFXZHVaV1FnZEc4Z1ltVWdjM2x1WXk5aGMzbHVZeUJoWjI1dmMzUnBZeTVjYmlBZ0x5OGdWR0ZyWlNCdWIzUmxJR2xtSUhSb1pTQmZjbVZoWkNCallXeHNJR2x6SUhONWJtTWdiM0lnWVhONWJtTWdLR2xsTENCcFppQjBhR1VnY21WaFpDQmpZV3hzWEc0Z0lDOHZJR2hoY3lCeVpYUjFjbTVsWkNCNVpYUXBMQ0J6YnlCMGFHRjBJSGRsSUd0dWIzY2dkMmhsZEdobGNpQnZjaUJ1YjNRZ2FYUW5jeUJ6WVdabElIUnZJR1Z0YVhSY2JpQWdMeThnSjNKbFlXUmhZbXhsSnlCbGRHTXVYRzRnSUM4dlhHNGdJQzh2SURNdUlFRmpkSFZoYkd4NUlIQjFiR3dnZEdobElISmxjWFZsYzNSbFpDQmphSFZ1YTNNZ2IzVjBJRzltSUhSb1pTQmlkV1ptWlhJZ1lXNWtJSEpsZEhWeWJpNWNibHh1SUNBdkx5QnBaaUIzWlNCdVpXVmtJR0VnY21WaFpHRmliR1VnWlhabGJuUXNJSFJvWlc0Z2QyVWdibVZsWkNCMGJ5QmtieUJ6YjIxbElISmxZV1JwYm1jdVhHNGdJSFpoY2lCa2IxSmxZV1FnUFNCemRHRjBaUzV1WldWa1VtVmhaR0ZpYkdVN1hHNGdJR1JsWW5WbktDZHVaV1ZrSUhKbFlXUmhZbXhsSnl3Z1pHOVNaV0ZrS1R0Y2JseHVJQ0F2THlCcFppQjNaU0JqZFhKeVpXNTBiSGtnYUdGMlpTQnNaWE56SUhSb1lXNGdkR2hsSUdocFoyaFhZWFJsY2sxaGNtc3NJSFJvWlc0Z1lXeHpieUJ5WldGa0lITnZiV1ZjYmlBZ2FXWWdLSE4wWVhSbExteGxibWQwYUNBOVBUMGdNQ0I4ZkNCemRHRjBaUzVzWlc1bmRHZ2dMU0J1SUR3Z2MzUmhkR1V1YUdsbmFGZGhkR1Z5VFdGeWF5a2dlMXh1SUNBZ0lHUnZVbVZoWkNBOUlIUnlkV1U3WEc0Z0lDQWdaR1ZpZFdjb0oyeGxibWQwYUNCc1pYTnpJSFJvWVc0Z2QyRjBaWEp0WVhKckp5d2daRzlTWldGa0tUdGNiaUFnZlZ4dVhHNGdJQzh2SUdodmQyVjJaWElzSUdsbUlIZGxKM1psSUdWdVpHVmtMQ0IwYUdWdUlIUm9aWEpsSjNNZ2JtOGdjRzlwYm5Rc0lHRnVaQ0JwWmlCM1pTZHlaU0JoYkhKbFlXUjVYRzRnSUM4dklISmxZV1JwYm1jc0lIUm9aVzRnYVhRbmN5QjFibTVsWTJWemMyRnllUzVjYmlBZ2FXWWdLSE4wWVhSbExtVnVaR1ZrSUh4OElITjBZWFJsTG5KbFlXUnBibWNwSUh0Y2JpQWdJQ0JrYjFKbFlXUWdQU0JtWVd4elpUdGNiaUFnSUNCa1pXSjFaeWduY21WaFpHbHVaeUJ2Y2lCbGJtUmxaQ2NzSUdSdlVtVmhaQ2s3WEc0Z0lIMGdaV3h6WlNCcFppQW9aRzlTWldGa0tTQjdYRzRnSUNBZ1pHVmlkV2NvSjJSdklISmxZV1FuS1R0Y2JpQWdJQ0J6ZEdGMFpTNXlaV0ZrYVc1bklEMGdkSEoxWlR0Y2JpQWdJQ0J6ZEdGMFpTNXplVzVqSUQwZ2RISjFaVHRjYmlBZ0lDQXZMeUJwWmlCMGFHVWdiR1Z1WjNSb0lHbHpJR04xY25KbGJuUnNlU0I2WlhKdkxDQjBhR1Z1SUhkbElDcHVaV1ZrS2lCaElISmxZV1JoWW14bElHVjJaVzUwTGx4dUlDQWdJR2xtSUNoemRHRjBaUzVzWlc1bmRHZ2dQVDA5SURBcElITjBZWFJsTG01bFpXUlNaV0ZrWVdKc1pTQTlJSFJ5ZFdVN1hHNGdJQ0FnTHk4Z1kyRnNiQ0JwYm5SbGNtNWhiQ0J5WldGa0lHMWxkR2h2WkZ4dUlDQWdJSFJvYVhNdVgzSmxZV1FvYzNSaGRHVXVhR2xuYUZkaGRHVnlUV0Z5YXlrN1hHNGdJQ0FnYzNSaGRHVXVjM2x1WXlBOUlHWmhiSE5sTzF4dUlDQWdJQzh2SUVsbUlGOXlaV0ZrSUhCMWMyaGxaQ0JrWVhSaElITjVibU5vY205dWIzVnpiSGtzSUhSb1pXNGdZSEpsWVdScGJtZGdJSGRwYkd3Z1ltVWdabUZzYzJVc1hHNGdJQ0FnTHk4Z1lXNWtJSGRsSUc1bFpXUWdkRzhnY21VdFpYWmhiSFZoZEdVZ2FHOTNJRzExWTJnZ1pHRjBZU0IzWlNCallXNGdjbVYwZFhKdUlIUnZJSFJvWlNCMWMyVnlMbHh1SUNBZ0lHbG1JQ2doYzNSaGRHVXVjbVZoWkdsdVp5a2diaUE5SUdodmQwMTFZMmhVYjFKbFlXUW9iazl5YVdjc0lITjBZWFJsS1R0Y2JpQWdmVnh1WEc0Z0lIWmhjaUJ5WlhRN1hHNGdJR2xtSUNodUlENGdNQ2tnY21WMElEMGdabkp2YlV4cGMzUW9iaXdnYzNSaGRHVXBPMlZzYzJVZ2NtVjBJRDBnYm5Wc2JEdGNibHh1SUNCcFppQW9jbVYwSUQwOVBTQnVkV3hzS1NCN1hHNGdJQ0FnYzNSaGRHVXVibVZsWkZKbFlXUmhZbXhsSUQwZ2RISjFaVHRjYmlBZ0lDQnVJRDBnTUR0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCemRHRjBaUzVzWlc1bmRHZ2dMVDBnYmp0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2h6ZEdGMFpTNXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0F2THlCSlppQjNaU0JvWVhabElHNXZkR2hwYm1jZ2FXNGdkR2hsSUdKMVptWmxjaXdnZEdobGJpQjNaU0IzWVc1MElIUnZJR3R1YjNkY2JpQWdJQ0F2THlCaGN5QnpiMjl1SUdGeklIZGxJQ3BrYnlvZ1oyVjBJSE52YldWMGFHbHVaeUJwYm5SdklIUm9aU0JpZFdabVpYSXVYRzRnSUNBZ2FXWWdLQ0Z6ZEdGMFpTNWxibVJsWkNrZ2MzUmhkR1V1Ym1WbFpGSmxZV1JoWW14bElEMGdkSEoxWlR0Y2JseHVJQ0FnSUM4dklFbG1JSGRsSUhSeWFXVmtJSFJ2SUhKbFlXUW9LU0J3WVhOMElIUm9aU0JGVDBZc0lIUm9aVzRnWlcxcGRDQmxibVFnYjI0Z2RHaGxJRzVsZUhRZ2RHbGpheTVjYmlBZ0lDQnBaaUFvYms5eWFXY2dJVDA5SUc0Z0ppWWdjM1JoZEdVdVpXNWtaV1FwSUdWdVpGSmxZV1JoWW14bEtIUm9hWE1wTzF4dUlDQjlYRzVjYmlBZ2FXWWdLSEpsZENBaFBUMGdiblZzYkNrZ2RHaHBjeTVsYldsMEtDZGtZWFJoSnl3Z2NtVjBLVHRjYmx4dUlDQnlaWFIxY200Z2NtVjBPMXh1ZlR0Y2JseHVablZ1WTNScGIyNGdiMjVGYjJaRGFIVnVheWh6ZEhKbFlXMHNJSE4wWVhSbEtTQjdYRzRnSUdsbUlDaHpkR0YwWlM1bGJtUmxaQ2tnY21WMGRYSnVPMXh1SUNCcFppQW9jM1JoZEdVdVpHVmpiMlJsY2lrZ2UxeHVJQ0FnSUhaaGNpQmphSFZ1YXlBOUlITjBZWFJsTG1SbFkyOWtaWEl1Wlc1a0tDazdYRzRnSUNBZ2FXWWdLR05vZFc1cklDWW1JR05vZFc1ckxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ2MzUmhkR1V1WW5WbVptVnlMbkIxYzJnb1kyaDFibXNwTzF4dUlDQWdJQ0FnYzNSaGRHVXViR1Z1WjNSb0lDczlJSE4wWVhSbExtOWlhbVZqZEUxdlpHVWdQeUF4SURvZ1kyaDFibXN1YkdWdVozUm9PMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnpkR0YwWlM1bGJtUmxaQ0E5SUhSeWRXVTdYRzVjYmlBZ0x5OGdaVzFwZENBbmNtVmhaR0ZpYkdVbklHNXZkeUIwYnlCdFlXdGxJSE4xY21VZ2FYUWdaMlYwY3lCd2FXTnJaV1FnZFhBdVhHNGdJR1Z0YVhSU1pXRmtZV0pzWlNoemRISmxZVzBwTzF4dWZWeHVYRzR2THlCRWIyNG5kQ0JsYldsMElISmxZV1JoWW14bElISnBaMmgwSUdGM1lYa2dhVzRnYzNsdVl5QnRiMlJsTENCaVpXTmhkWE5sSUhSb2FYTWdZMkZ1SUhSeWFXZG5aWEpjYmk4dklHRnViM1JvWlhJZ2NtVmhaQ2dwSUdOaGJHd2dQVDRnYzNSaFkyc2diM1psY21ac2IzY3VJQ0JVYUdseklIZGhlU3dnYVhRZ2JXbG5hSFFnZEhKcFoyZGxjbHh1THk4Z1lTQnVaWGgwVkdsamF5QnlaV04xY25OcGIyNGdkMkZ5Ym1sdVp5d2dZblYwSUhSb1lYUW5jeUJ1YjNRZ2MyOGdZbUZrTGx4dVpuVnVZM1JwYjI0Z1pXMXBkRkpsWVdSaFlteGxLSE4wY21WaGJTa2dlMXh1SUNCMllYSWdjM1JoZEdVZ1BTQnpkSEpsWVcwdVgzSmxZV1JoWW14bFUzUmhkR1U3WEc0Z0lITjBZWFJsTG01bFpXUlNaV0ZrWVdKc1pTQTlJR1poYkhObE8xeHVJQ0JwWmlBb0lYTjBZWFJsTG1WdGFYUjBaV1JTWldGa1lXSnNaU2tnZTF4dUlDQWdJR1JsWW5WbktDZGxiV2wwVW1WaFpHRmliR1VuTENCemRHRjBaUzVtYkc5M2FXNW5LVHRjYmlBZ0lDQnpkR0YwWlM1bGJXbDBkR1ZrVW1WaFpHRmliR1VnUFNCMGNuVmxPMXh1SUNBZ0lHbG1JQ2h6ZEdGMFpTNXplVzVqS1NCd2JtRXVibVY0ZEZScFkyc29aVzFwZEZKbFlXUmhZbXhsWHl3Z2MzUnlaV0Z0S1R0bGJITmxJR1Z0YVhSU1pXRmtZV0pzWlY4b2MzUnlaV0Z0S1R0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmxiV2wwVW1WaFpHRmliR1ZmS0hOMGNtVmhiU2tnZTF4dUlDQmtaV0oxWnlnblpXMXBkQ0J5WldGa1lXSnNaU2NwTzF4dUlDQnpkSEpsWVcwdVpXMXBkQ2duY21WaFpHRmliR1VuS1R0Y2JpQWdabXh2ZHloemRISmxZVzBwTzF4dWZWeHVYRzR2THlCaGRDQjBhR2x6SUhCdmFXNTBMQ0IwYUdVZ2RYTmxjaUJvWVhNZ2NISmxjM1Z0WVdKc2VTQnpaV1Z1SUhSb1pTQW5jbVZoWkdGaWJHVW5JR1YyWlc1MExGeHVMeThnWVc1a0lHTmhiR3hsWkNCeVpXRmtLQ2tnZEc4Z1kyOXVjM1Z0WlNCemIyMWxJR1JoZEdFdUlDQjBhR0YwSUcxaGVTQm9ZWFpsSUhSeWFXZG5aWEpsWkZ4dUx5OGdhVzRnZEhWeWJpQmhibTkwYUdWeUlGOXlaV0ZrS0c0cElHTmhiR3dzSUdsdUlIZG9hV05vSUdOaGMyVWdjbVZoWkdsdVp5QTlJSFJ5ZFdVZ2FXWmNiaTh2SUdsMEozTWdhVzRnY0hKdlozSmxjM011WEc0dkx5QkliM2RsZG1WeUxDQnBaaUIzWlNkeVpTQnViM1FnWlc1a1pXUXNJRzl5SUhKbFlXUnBibWNzSUdGdVpDQjBhR1VnYkdWdVozUm9JRHdnYUhkdExGeHVMeThnZEdobGJpQm5ieUJoYUdWaFpDQmhibVFnZEhKNUlIUnZJSEpsWVdRZ2MyOXRaU0J0YjNKbElIQnlaV1Z0Y0hScGRtVnNlUzVjYm1aMWJtTjBhVzl1SUcxaGVXSmxVbVZoWkUxdmNtVW9jM1J5WldGdExDQnpkR0YwWlNrZ2UxeHVJQ0JwWmlBb0lYTjBZWFJsTG5KbFlXUnBibWROYjNKbEtTQjdYRzRnSUNBZ2MzUmhkR1V1Y21WaFpHbHVaMDF2Y21VZ1BTQjBjblZsTzF4dUlDQWdJSEJ1WVM1dVpYaDBWR2xqYXlodFlYbGlaVkpsWVdSTmIzSmxYeXdnYzNSeVpXRnRMQ0J6ZEdGMFpTazdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnYldGNVltVlNaV0ZrVFc5eVpWOG9jM1J5WldGdExDQnpkR0YwWlNrZ2UxeHVJQ0IyWVhJZ2JHVnVJRDBnYzNSaGRHVXViR1Z1WjNSb08xeHVJQ0IzYUdsc1pTQW9JWE4wWVhSbExuSmxZV1JwYm1jZ0ppWWdJWE4wWVhSbExtWnNiM2RwYm1jZ0ppWWdJWE4wWVhSbExtVnVaR1ZrSUNZbUlITjBZWFJsTG14bGJtZDBhQ0E4SUhOMFlYUmxMbWhwWjJoWFlYUmxjazFoY21zcElIdGNiaUFnSUNCa1pXSjFaeWduYldGNVltVlNaV0ZrVFc5eVpTQnlaV0ZrSURBbktUdGNiaUFnSUNCemRISmxZVzB1Y21WaFpDZ3dLVHRjYmlBZ0lDQnBaaUFvYkdWdUlEMDlQU0J6ZEdGMFpTNXNaVzVuZEdncFhHNGdJQ0FnSUNBdkx5QmthV1J1SjNRZ1oyVjBJR0Z1ZVNCa1lYUmhMQ0J6ZEc5d0lITndhVzV1YVc1bkxseHVJQ0FnSUNBZ1luSmxZV3M3Wld4elpTQnNaVzRnUFNCemRHRjBaUzVzWlc1bmRHZzdYRzRnSUgxY2JpQWdjM1JoZEdVdWNtVmhaR2x1WjAxdmNtVWdQU0JtWVd4elpUdGNibjFjYmx4dUx5OGdZV0p6ZEhKaFkzUWdiV1YwYUc5a0xpQWdkRzhnWW1VZ2IzWmxjbkpwWkdSbGJpQnBiaUJ6Y0dWamFXWnBZeUJwYlhCc1pXMWxiblJoZEdsdmJpQmpiR0Z6YzJWekxseHVMeThnWTJGc2JDQmpZaWhsY2l3Z1pHRjBZU2tnZDJobGNtVWdaR0YwWVNCcGN5QThQU0J1SUdsdUlHeGxibWQwYUM1Y2JpOHZJR1p2Y2lCMmFYSjBkV0ZzSUNodWIyNHRjM1J5YVc1bkxDQnViMjR0WW5WbVptVnlLU0J6ZEhKbFlXMXpMQ0JjSW14bGJtZDBhRndpSUdseklITnZiV1YzYUdGMFhHNHZMeUJoY21KcGRISmhjbmtzSUdGdVpDQndaWEpvWVhCeklHNXZkQ0IyWlhKNUlHMWxZVzVwYm1kbWRXd3VYRzVTWldGa1lXSnNaUzV3Y205MGIzUjVjR1V1WDNKbFlXUWdQU0JtZFc1amRHbHZiaUFvYmlrZ2UxeHVJQ0IwYUdsekxtVnRhWFFvSjJWeWNtOXlKeXdnYm1WM0lFVnljbTl5S0NkZmNtVmhaQ2dwSUdseklHNXZkQ0JwYlhCc1pXMWxiblJsWkNjcEtUdGNibjA3WEc1Y2JsSmxZV1JoWW14bExuQnliM1J2ZEhsd1pTNXdhWEJsSUQwZ1puVnVZM1JwYjI0Z0tHUmxjM1FzSUhCcGNHVlBjSFJ6S1NCN1hHNGdJSFpoY2lCemNtTWdQU0IwYUdsek8xeHVJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbE8xeHVYRzRnSUhOM2FYUmphQ0FvYzNSaGRHVXVjR2x3WlhORGIzVnVkQ2tnZTF4dUlDQWdJR05oYzJVZ01EcGNiaUFnSUNBZ0lITjBZWFJsTG5CcGNHVnpJRDBnWkdWemREdGNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJR05oYzJVZ01UcGNiaUFnSUNBZ0lITjBZWFJsTG5CcGNHVnpJRDBnVzNOMFlYUmxMbkJwY0dWekxDQmtaWE4wWFR0Y2JpQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNCemRHRjBaUzV3YVhCbGN5NXdkWE5vS0dSbGMzUXBPMXh1SUNBZ0lDQWdZbkpsWVdzN1hHNGdJSDFjYmlBZ2MzUmhkR1V1Y0dsd1pYTkRiM1Z1ZENBclBTQXhPMXh1SUNCa1pXSjFaeWduY0dsd1pTQmpiM1Z1ZEQwbFpDQnZjSFJ6UFNWcUp5d2djM1JoZEdVdWNHbHdaWE5EYjNWdWRDd2djR2x3WlU5d2RITXBPMXh1WEc0Z0lIWmhjaUJrYjBWdVpDQTlJQ2doY0dsd1pVOXdkSE1nZkh3Z2NHbHdaVTl3ZEhNdVpXNWtJQ0U5UFNCbVlXeHpaU2tnSmlZZ1pHVnpkQ0FoUFQwZ2NISnZZMlZ6Y3k1emRHUnZkWFFnSmlZZ1pHVnpkQ0FoUFQwZ2NISnZZMlZ6Y3k1emRHUmxjbkk3WEc1Y2JpQWdkbUZ5SUdWdVpFWnVJRDBnWkc5RmJtUWdQeUJ2Ym1WdVpDQTZJSFZ1Y0dsd1pUdGNiaUFnYVdZZ0tITjBZWFJsTG1WdVpFVnRhWFIwWldRcElIQnVZUzV1WlhoMFZHbGpheWhsYm1SR2JpazdaV3h6WlNCemNtTXViMjVqWlNnblpXNWtKeXdnWlc1a1JtNHBPMXh1WEc0Z0lHUmxjM1F1YjI0b0ozVnVjR2x3WlNjc0lHOXVkVzV3YVhCbEtUdGNiaUFnWm5WdVkzUnBiMjRnYjI1MWJuQnBjR1VvY21WaFpHRmliR1VzSUhWdWNHbHdaVWx1Wm04cElIdGNiaUFnSUNCa1pXSjFaeWduYjI1MWJuQnBjR1VuS1R0Y2JpQWdJQ0JwWmlBb2NtVmhaR0ZpYkdVZ1BUMDlJSE55WXlrZ2UxeHVJQ0FnSUNBZ2FXWWdLSFZ1Y0dsd1pVbHVabThnSmlZZ2RXNXdhWEJsU1c1bWJ5NW9ZWE5WYm5CcGNHVmtJRDA5UFNCbVlXeHpaU2tnZTF4dUlDQWdJQ0FnSUNCMWJuQnBjR1ZKYm1adkxtaGhjMVZ1Y0dsd1pXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQmpiR1ZoYm5Wd0tDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdiMjVsYm1Rb0tTQjdYRzRnSUNBZ1pHVmlkV2NvSjI5dVpXNWtKeWs3WEc0Z0lDQWdaR1Z6ZEM1bGJtUW9LVHRjYmlBZ2ZWeHVYRzRnSUM4dklIZG9aVzRnZEdobElHUmxjM1FnWkhKaGFXNXpMQ0JwZENCeVpXUjFZMlZ6SUhSb1pTQmhkMkZwZEVSeVlXbHVJR052ZFc1MFpYSmNiaUFnTHk4Z2IyNGdkR2hsSUhOdmRYSmpaUzRnSUZSb2FYTWdkMjkxYkdRZ1ltVWdiVzl5WlNCbGJHVm5ZVzUwSUhkcGRHZ2dZU0F1YjI1alpTZ3BYRzRnSUM4dklHaGhibVJzWlhJZ2FXNGdabXh2ZHlncExDQmlkWFFnWVdSa2FXNW5JR0Z1WkNCeVpXMXZkbWx1WnlCeVpYQmxZWFJsWkd4NUlHbHpYRzRnSUM4dklIUnZieUJ6Ykc5M0xseHVJQ0IyWVhJZ2IyNWtjbUZwYmlBOUlIQnBjR1ZQYmtSeVlXbHVLSE55WXlrN1hHNGdJR1JsYzNRdWIyNG9KMlJ5WVdsdUp5d2diMjVrY21GcGJpazdYRzVjYmlBZ2RtRnlJR05zWldGdVpXUlZjQ0E5SUdaaGJITmxPMXh1SUNCbWRXNWpkR2x2YmlCamJHVmhiblZ3S0NrZ2UxeHVJQ0FnSUdSbFluVm5LQ2RqYkdWaGJuVndKeWs3WEc0Z0lDQWdMeThnWTJ4bFlXNTFjQ0JsZG1WdWRDQm9ZVzVrYkdWeWN5QnZibU5sSUhSb1pTQndhWEJsSUdseklHSnliMnRsYmx4dUlDQWdJR1JsYzNRdWNtVnRiM1psVEdsemRHVnVaWElvSjJOc2IzTmxKeXdnYjI1amJHOXpaU2s3WEc0Z0lDQWdaR1Z6ZEM1eVpXMXZkbVZNYVhOMFpXNWxjaWduWm1sdWFYTm9KeXdnYjI1bWFXNXBjMmdwTzF4dUlDQWdJR1JsYzNRdWNtVnRiM1psVEdsemRHVnVaWElvSjJSeVlXbHVKeXdnYjI1a2NtRnBiaWs3WEc0Z0lDQWdaR1Z6ZEM1eVpXMXZkbVZNYVhOMFpXNWxjaWduWlhKeWIzSW5MQ0J2Ym1WeWNtOXlLVHRjYmlBZ0lDQmtaWE4wTG5KbGJXOTJaVXhwYzNSbGJtVnlLQ2QxYm5CcGNHVW5MQ0J2Ym5WdWNHbHdaU2s3WEc0Z0lDQWdjM0pqTG5KbGJXOTJaVXhwYzNSbGJtVnlLQ2RsYm1RbkxDQnZibVZ1WkNrN1hHNGdJQ0FnYzNKakxuSmxiVzkyWlV4cGMzUmxibVZ5S0NkbGJtUW5MQ0IxYm5CcGNHVXBPMXh1SUNBZ0lITnlZeTV5WlcxdmRtVk1hWE4wWlc1bGNpZ25aR0YwWVNjc0lHOXVaR0YwWVNrN1hHNWNiaUFnSUNCamJHVmhibVZrVlhBZ1BTQjBjblZsTzF4dVhHNGdJQ0FnTHk4Z2FXWWdkR2hsSUhKbFlXUmxjaUJwY3lCM1lXbDBhVzVuSUdadmNpQmhJR1J5WVdsdUlHVjJaVzUwSUdaeWIyMGdkR2hwYzF4dUlDQWdJQzh2SUhOd1pXTnBabWxqSUhkeWFYUmxjaXdnZEdobGJpQnBkQ0IzYjNWc1pDQmpZWFZ6WlNCcGRDQjBieUJ1WlhabGNpQnpkR0Z5ZEZ4dUlDQWdJQzh2SUdac2IzZHBibWNnWVdkaGFXNHVYRzRnSUNBZ0x5OGdVMjhzSUdsbUlIUm9hWE1nYVhNZ1lYZGhhWFJwYm1jZ1lTQmtjbUZwYml3Z2RHaGxiaUIzWlNCcWRYTjBJR05oYkd3Z2FYUWdibTkzTGx4dUlDQWdJQzh2SUVsbUlIZGxJR1J2YmlkMElHdHViM2NzSUhSb1pXNGdZWE56ZFcxbElIUm9ZWFFnZDJVZ1lYSmxJSGRoYVhScGJtY2dabTl5SUc5dVpTNWNiaUFnSUNCcFppQW9jM1JoZEdVdVlYZGhhWFJFY21GcGJpQW1KaUFvSVdSbGMzUXVYM2R5YVhSaFlteGxVM1JoZEdVZ2ZId2daR1Z6ZEM1ZmQzSnBkR0ZpYkdWVGRHRjBaUzV1WldWa1JISmhhVzRwS1NCdmJtUnlZV2x1S0NrN1hHNGdJSDFjYmx4dUlDQXZMeUJKWmlCMGFHVWdkWE5sY2lCd2RYTm9aWE1nYlc5eVpTQmtZWFJoSUhkb2FXeGxJSGRsSjNKbElIZHlhWFJwYm1jZ2RHOGdaR1Z6ZENCMGFHVnVJSGRsSjJ4c0lHVnVaQ0IxY0Z4dUlDQXZMeUJwYmlCdmJtUmhkR0VnWVdkaGFXNHVJRWh2ZDJWMlpYSXNJSGRsSUc5dWJIa2dkMkZ1ZENCMGJ5QnBibU55WldGelpTQmhkMkZwZEVSeVlXbHVJRzl1WTJVZ1ltVmpZWFZ6WlZ4dUlDQXZMeUJrWlhOMElIZHBiR3dnYjI1c2VTQmxiV2wwSUc5dVpTQW5aSEpoYVc0bklHVjJaVzUwSUdadmNpQjBhR1VnYlhWc2RHbHdiR1VnZDNKcGRHVnpMbHh1SUNBdkx5QTlQaUJKYm5SeWIyUjFZMlVnWVNCbmRXRnlaQ0J2YmlCcGJtTnlaV0Z6YVc1bklHRjNZV2wwUkhKaGFXNHVYRzRnSUhaaGNpQnBibU55WldGelpXUkJkMkZwZEVSeVlXbHVJRDBnWm1Gc2MyVTdYRzRnSUhOeVl5NXZiaWduWkdGMFlTY3NJRzl1WkdGMFlTazdYRzRnSUdaMWJtTjBhVzl1SUc5dVpHRjBZU2hqYUhWdWF5a2dlMXh1SUNBZ0lHUmxZblZuS0NkdmJtUmhkR0VuS1R0Y2JpQWdJQ0JwYm1OeVpXRnpaV1JCZDJGcGRFUnlZV2x1SUQwZ1ptRnNjMlU3WEc0Z0lDQWdkbUZ5SUhKbGRDQTlJR1JsYzNRdWQzSnBkR1VvWTJoMWJtc3BPMXh1SUNBZ0lHbG1JQ2htWVd4elpTQTlQVDBnY21WMElDWW1JQ0ZwYm1OeVpXRnpaV1JCZDJGcGRFUnlZV2x1S1NCN1hHNGdJQ0FnSUNBdkx5QkpaaUIwYUdVZ2RYTmxjaUIxYm5CcGNHVmtJR1IxY21sdVp5QmdaR1Z6ZEM1M2NtbDBaU2dwWUN3Z2FYUWdhWE1nY0c5emMybGliR1ZjYmlBZ0lDQWdJQzh2SUhSdklHZGxkQ0J6ZEhWamF5QnBiaUJoSUhCbGNtMWhibVZ1ZEd4NUlIQmhkWE5sWkNCemRHRjBaU0JwWmlCMGFHRjBJSGR5YVhSbFhHNGdJQ0FnSUNBdkx5QmhiSE52SUhKbGRIVnlibVZrSUdaaGJITmxMbHh1SUNBZ0lDQWdMeThnUFQ0Z1EyaGxZMnNnZDJobGRHaGxjaUJnWkdWemRHQWdhWE1nYzNScGJHd2dZU0J3YVhCcGJtY2daR1Z6ZEdsdVlYUnBiMjR1WEc0Z0lDQWdJQ0JwWmlBb0tITjBZWFJsTG5CcGNHVnpRMjkxYm5RZ1BUMDlJREVnSmlZZ2MzUmhkR1V1Y0dsd1pYTWdQVDA5SUdSbGMzUWdmSHdnYzNSaGRHVXVjR2x3WlhORGIzVnVkQ0ErSURFZ0ppWWdhVzVrWlhoUFppaHpkR0YwWlM1d2FYQmxjeXdnWkdWemRDa2dJVDA5SUMweEtTQW1KaUFoWTJ4bFlXNWxaRlZ3S1NCN1hHNGdJQ0FnSUNBZ0lHUmxZblZuS0NkbVlXeHpaU0IzY21sMFpTQnlaWE53YjI1elpTd2djR0YxYzJVbkxDQnpjbU11WDNKbFlXUmhZbXhsVTNSaGRHVXVZWGRoYVhSRWNtRnBiaWs3WEc0Z0lDQWdJQ0FnSUhOeVl5NWZjbVZoWkdGaWJHVlRkR0YwWlM1aGQyRnBkRVJ5WVdsdUt5czdYRzRnSUNBZ0lDQWdJR2x1WTNKbFlYTmxaRUYzWVdsMFJISmhhVzRnUFNCMGNuVmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjM0pqTG5CaGRYTmxLQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHk4Z2FXWWdkR2hsSUdSbGMzUWdhR0Z6SUdGdUlHVnljbTl5TENCMGFHVnVJSE4wYjNBZ2NHbHdhVzVuSUdsdWRHOGdhWFF1WEc0Z0lDOHZJR2h2ZDJWMlpYSXNJR1J2YmlkMElITjFjSEJ5WlhOeklIUm9aU0IwYUhKdmQybHVaeUJpWldoaGRtbHZjaUJtYjNJZ2RHaHBjeTVjYmlBZ1puVnVZM1JwYjI0Z2IyNWxjbkp2Y2lobGNpa2dlMXh1SUNBZ0lHUmxZblZuS0NkdmJtVnljbTl5Snl3Z1pYSXBPMXh1SUNBZ0lIVnVjR2x3WlNncE8xeHVJQ0FnSUdSbGMzUXVjbVZ0YjNabFRHbHpkR1Z1WlhJb0oyVnljbTl5Snl3Z2IyNWxjbkp2Y2lrN1hHNGdJQ0FnYVdZZ0tFVkZiR2x6ZEdWdVpYSkRiM1Z1ZENoa1pYTjBMQ0FuWlhKeWIzSW5LU0E5UFQwZ01Da2daR1Z6ZEM1bGJXbDBLQ2RsY25KdmNpY3NJR1Z5S1R0Y2JpQWdmVnh1WEc0Z0lDOHZJRTFoYTJVZ2MzVnlaU0J2ZFhJZ1pYSnliM0lnYUdGdVpHeGxjaUJwY3lCaGRIUmhZMmhsWkNCaVpXWnZjbVVnZFhObGNteGhibVFnYjI1bGN5NWNiaUFnY0hKbGNHVnVaRXhwYzNSbGJtVnlLR1JsYzNRc0lDZGxjbkp2Y2ljc0lHOXVaWEp5YjNJcE8xeHVYRzRnSUM4dklFSnZkR2dnWTJ4dmMyVWdZVzVrSUdacGJtbHphQ0J6YUc5MWJHUWdkSEpwWjJkbGNpQjFibkJwY0dVc0lHSjFkQ0J2Ym14NUlHOXVZMlV1WEc0Z0lHWjFibU4wYVc5dUlHOXVZMnh2YzJVb0tTQjdYRzRnSUNBZ1pHVnpkQzV5WlcxdmRtVk1hWE4wWlc1bGNpZ25abWx1YVhOb0p5d2diMjVtYVc1cGMyZ3BPMXh1SUNBZ0lIVnVjR2x3WlNncE8xeHVJQ0I5WEc0Z0lHUmxjM1F1YjI1alpTZ25ZMnh2YzJVbkxDQnZibU5zYjNObEtUdGNiaUFnWm5WdVkzUnBiMjRnYjI1bWFXNXBjMmdvS1NCN1hHNGdJQ0FnWkdWaWRXY29KMjl1Wm1sdWFYTm9KeWs3WEc0Z0lDQWdaR1Z6ZEM1eVpXMXZkbVZNYVhOMFpXNWxjaWduWTJ4dmMyVW5MQ0J2Ym1Oc2IzTmxLVHRjYmlBZ0lDQjFibkJwY0dVb0tUdGNiaUFnZlZ4dUlDQmtaWE4wTG05dVkyVW9KMlpwYm1semFDY3NJRzl1Wm1sdWFYTm9LVHRjYmx4dUlDQm1kVzVqZEdsdmJpQjFibkJwY0dVb0tTQjdYRzRnSUNBZ1pHVmlkV2NvSjNWdWNHbHdaU2NwTzF4dUlDQWdJSE55WXk1MWJuQnBjR1VvWkdWemRDazdYRzRnSUgxY2JseHVJQ0F2THlCMFpXeHNJSFJvWlNCa1pYTjBJSFJvWVhRZ2FYUW5jeUJpWldsdVp5QndhWEJsWkNCMGIxeHVJQ0JrWlhOMExtVnRhWFFvSjNCcGNHVW5MQ0J6Y21NcE8xeHVYRzRnSUM4dklITjBZWEowSUhSb1pTQm1iRzkzSUdsbUlHbDBJR2hoYzI0bmRDQmlaV1Z1SUhOMFlYSjBaV1FnWVd4eVpXRmtlUzVjYmlBZ2FXWWdLQ0Z6ZEdGMFpTNW1iRzkzYVc1bktTQjdYRzRnSUNBZ1pHVmlkV2NvSjNCcGNHVWdjbVZ6ZFcxbEp5azdYRzRnSUNBZ2MzSmpMbkpsYzNWdFpTZ3BPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR1JsYzNRN1hHNTlPMXh1WEc1bWRXNWpkR2x2YmlCd2FYQmxUMjVFY21GcGJpaHpjbU1wSUh0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQjJZWElnYzNSaGRHVWdQU0J6Y21NdVgzSmxZV1JoWW14bFUzUmhkR1U3WEc0Z0lDQWdaR1ZpZFdjb0ozQnBjR1ZQYmtSeVlXbHVKeXdnYzNSaGRHVXVZWGRoYVhSRWNtRnBiaWs3WEc0Z0lDQWdhV1lnS0hOMFlYUmxMbUYzWVdsMFJISmhhVzRwSUhOMFlYUmxMbUYzWVdsMFJISmhhVzR0TFR0Y2JpQWdJQ0JwWmlBb2MzUmhkR1V1WVhkaGFYUkVjbUZwYmlBOVBUMGdNQ0FtSmlCRlJXeHBjM1JsYm1WeVEyOTFiblFvYzNKakxDQW5aR0YwWVNjcEtTQjdYRzRnSUNBZ0lDQnpkR0YwWlM1bWJHOTNhVzVuSUQwZ2RISjFaVHRjYmlBZ0lDQWdJR1pzYjNjb2MzSmpLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNTlYRzVjYmxKbFlXUmhZbXhsTG5CeWIzUnZkSGx3WlM1MWJuQnBjR1VnUFNCbWRXNWpkR2x2YmlBb1pHVnpkQ2tnZTF4dUlDQjJZWElnYzNSaGRHVWdQU0IwYUdsekxsOXlaV0ZrWVdKc1pWTjBZWFJsTzF4dUlDQjJZWElnZFc1d2FYQmxTVzVtYnlBOUlIc2dhR0Z6Vlc1d2FYQmxaRG9nWm1Gc2MyVWdmVHRjYmx4dUlDQXZMeUJwWmlCM1pTZHlaU0J1YjNRZ2NHbHdhVzVuSUdGdWVYZG9aWEpsTENCMGFHVnVJR1J2SUc1dmRHaHBibWN1WEc0Z0lHbG1JQ2h6ZEdGMFpTNXdhWEJsYzBOdmRXNTBJRDA5UFNBd0tTQnlaWFIxY200Z2RHaHBjenRjYmx4dUlDQXZMeUJxZFhOMElHOXVaU0JrWlhOMGFXNWhkR2x2Ymk0Z0lHMXZjM1FnWTI5dGJXOXVJR05oYzJVdVhHNGdJR2xtSUNoemRHRjBaUzV3YVhCbGMwTnZkVzUwSUQwOVBTQXhLU0I3WEc0Z0lDQWdMeThnY0dGemMyVmtJR2x1SUc5dVpTd2dZblYwSUdsMEozTWdibTkwSUhSb1pTQnlhV2RvZENCdmJtVXVYRzRnSUNBZ2FXWWdLR1JsYzNRZ0ppWWdaR1Z6ZENBaFBUMGdjM1JoZEdVdWNHbHdaWE1wSUhKbGRIVnliaUIwYUdsek8xeHVYRzRnSUNBZ2FXWWdLQ0ZrWlhOMEtTQmtaWE4wSUQwZ2MzUmhkR1V1Y0dsd1pYTTdYRzVjYmlBZ0lDQXZMeUJuYjNRZ1lTQnRZWFJqYUM1Y2JpQWdJQ0J6ZEdGMFpTNXdhWEJsY3lBOUlHNTFiR3c3WEc0Z0lDQWdjM1JoZEdVdWNHbHdaWE5EYjNWdWRDQTlJREE3WEc0Z0lDQWdjM1JoZEdVdVpteHZkMmx1WnlBOUlHWmhiSE5sTzF4dUlDQWdJR2xtSUNoa1pYTjBLU0JrWlhOMExtVnRhWFFvSjNWdWNHbHdaU2NzSUhSb2FYTXNJSFZ1Y0dsd1pVbHVabThwTzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQjlYRzVjYmlBZ0x5OGdjMnh2ZHlCallYTmxMaUJ0ZFd4MGFYQnNaU0J3YVhCbElHUmxjM1JwYm1GMGFXOXVjeTVjYmx4dUlDQnBaaUFvSVdSbGMzUXBJSHRjYmlBZ0lDQXZMeUJ5WlcxdmRtVWdZV3hzTGx4dUlDQWdJSFpoY2lCa1pYTjBjeUE5SUhOMFlYUmxMbkJwY0dWek8xeHVJQ0FnSUhaaGNpQnNaVzRnUFNCemRHRjBaUzV3YVhCbGMwTnZkVzUwTzF4dUlDQWdJSE4wWVhSbExuQnBjR1Z6SUQwZ2JuVnNiRHRjYmlBZ0lDQnpkR0YwWlM1d2FYQmxjME52ZFc1MElEMGdNRHRjYmlBZ0lDQnpkR0YwWlM1bWJHOTNhVzVuSUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUd4bGJqc2dhU3NyS1NCN1hHNGdJQ0FnSUNCa1pYTjBjMXRwWFM1bGJXbDBLQ2QxYm5CcGNHVW5MQ0IwYUdsekxDQjFibkJwY0dWSmJtWnZLVHRjYmlBZ0lDQjljbVYwZFhKdUlIUm9hWE03WEc0Z0lIMWNibHh1SUNBdkx5QjBjbmtnZEc4Z1ptbHVaQ0IwYUdVZ2NtbG5hSFFnYjI1bExseHVJQ0IyWVhJZ2FXNWtaWGdnUFNCcGJtUmxlRTltS0hOMFlYUmxMbkJwY0dWekxDQmtaWE4wS1R0Y2JpQWdhV1lnS0dsdVpHVjRJRDA5UFNBdE1Ta2djbVYwZFhKdUlIUm9hWE03WEc1Y2JpQWdjM1JoZEdVdWNHbHdaWE11YzNCc2FXTmxLR2x1WkdWNExDQXhLVHRjYmlBZ2MzUmhkR1V1Y0dsd1pYTkRiM1Z1ZENBdFBTQXhPMXh1SUNCcFppQW9jM1JoZEdVdWNHbHdaWE5EYjNWdWRDQTlQVDBnTVNrZ2MzUmhkR1V1Y0dsd1pYTWdQU0J6ZEdGMFpTNXdhWEJsYzFzd1hUdGNibHh1SUNCa1pYTjBMbVZ0YVhRb0ozVnVjR2x3WlNjc0lIUm9hWE1zSUhWdWNHbHdaVWx1Wm04cE8xeHVYRzRnSUhKbGRIVnliaUIwYUdsek8xeHVmVHRjYmx4dUx5OGdjMlYwSUhWd0lHUmhkR0VnWlhabGJuUnpJR2xtSUhSb1pYa2dZWEpsSUdGemEyVmtJR1p2Y2x4dUx5OGdSVzV6ZFhKbElISmxZV1JoWW14bElHeHBjM1JsYm1WeWN5QmxkbVZ1ZEhWaGJHeDVJR2RsZENCemIyMWxkR2hwYm1kY2JsSmxZV1JoWW14bExuQnliM1J2ZEhsd1pTNXZiaUE5SUdaMWJtTjBhVzl1SUNobGRpd2dabTRwSUh0Y2JpQWdkbUZ5SUhKbGN5QTlJRk4wY21WaGJTNXdjbTkwYjNSNWNHVXViMjR1WTJGc2JDaDBhR2x6TENCbGRpd2dabTRwTzF4dVhHNGdJR2xtSUNobGRpQTlQVDBnSjJSaGRHRW5LU0I3WEc0Z0lDQWdMeThnVTNSaGNuUWdabXh2ZDJsdVp5QnZiaUJ1WlhoMElIUnBZMnNnYVdZZ2MzUnlaV0Z0SUdsemJpZDBJR1Y0Y0d4cFkybDBiSGtnY0dGMWMyVmtYRzRnSUNBZ2FXWWdLSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1V1Wm14dmQybHVaeUFoUFQwZ1ptRnNjMlVwSUhSb2FYTXVjbVZ6ZFcxbEtDazdYRzRnSUgwZ1pXeHpaU0JwWmlBb1pYWWdQVDA5SUNkeVpXRmtZV0pzWlNjcElIdGNiaUFnSUNCMllYSWdjM1JoZEdVZ1BTQjBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxPMXh1SUNBZ0lHbG1JQ2doYzNSaGRHVXVaVzVrUlcxcGRIUmxaQ0FtSmlBaGMzUmhkR1V1Y21WaFpHRmliR1ZNYVhOMFpXNXBibWNwSUh0Y2JpQWdJQ0FnSUhOMFlYUmxMbkpsWVdSaFlteGxUR2x6ZEdWdWFXNW5JRDBnYzNSaGRHVXVibVZsWkZKbFlXUmhZbXhsSUQwZ2RISjFaVHRjYmlBZ0lDQWdJSE4wWVhSbExtVnRhWFIwWldSU1pXRmtZV0pzWlNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnYVdZZ0tDRnpkR0YwWlM1eVpXRmthVzVuS1NCN1hHNGdJQ0FnSUNBZ0lIQnVZUzV1WlhoMFZHbGpheWh1VW1WaFpHbHVaMDVsZUhSVWFXTnJMQ0IwYUdsektUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jM1JoZEdVdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lHVnRhWFJTWldGa1lXSnNaU2gwYUdsektUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2NtVnpPMXh1ZlR0Y2JsSmxZV1JoWW14bExuQnliM1J2ZEhsd1pTNWhaR1JNYVhOMFpXNWxjaUE5SUZKbFlXUmhZbXhsTG5CeWIzUnZkSGx3WlM1dmJqdGNibHh1Wm5WdVkzUnBiMjRnYmxKbFlXUnBibWRPWlhoMFZHbGpheWh6Wld4bUtTQjdYRzRnSUdSbFluVm5LQ2R5WldGa1lXSnNaU0J1WlhoMGRHbGpheUJ5WldGa0lEQW5LVHRjYmlBZ2MyVnNaaTV5WldGa0tEQXBPMXh1ZlZ4dVhHNHZMeUJ3WVhWelpTZ3BJR0Z1WkNCeVpYTjFiV1VvS1NCaGNtVWdjbVZ0Ym1GdWRITWdiMllnZEdobElHeGxaMkZqZVNCeVpXRmtZV0pzWlNCemRISmxZVzBnUVZCSlhHNHZMeUJKWmlCMGFHVWdkWE5sY2lCMWMyVnpJSFJvWlcwc0lIUm9aVzRnYzNkcGRHTm9JR2x1ZEc4Z2IyeGtJRzF2WkdVdVhHNVNaV0ZrWVdKc1pTNXdjbTkwYjNSNWNHVXVjbVZ6ZFcxbElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQjJZWElnYzNSaGRHVWdQU0IwYUdsekxsOXlaV0ZrWVdKc1pWTjBZWFJsTzF4dUlDQnBaaUFvSVhOMFlYUmxMbVpzYjNkcGJtY3BJSHRjYmlBZ0lDQmtaV0oxWnlnbmNtVnpkVzFsSnlrN1hHNGdJQ0FnYzNSaGRHVXVabXh2ZDJsdVp5QTlJSFJ5ZFdVN1hHNGdJQ0FnY21WemRXMWxLSFJvYVhNc0lITjBZWFJsS1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnZEdocGN6dGNibjA3WEc1Y2JtWjFibU4wYVc5dUlISmxjM1Z0WlNoemRISmxZVzBzSUhOMFlYUmxLU0I3WEc0Z0lHbG1JQ2doYzNSaGRHVXVjbVZ6ZFcxbFUyTm9aV1IxYkdWa0tTQjdYRzRnSUNBZ2MzUmhkR1V1Y21WemRXMWxVMk5vWldSMWJHVmtJRDBnZEhKMVpUdGNiaUFnSUNCd2JtRXVibVY0ZEZScFkyc29jbVZ6ZFcxbFh5d2djM1J5WldGdExDQnpkR0YwWlNrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdjbVZ6ZFcxbFh5aHpkSEpsWVcwc0lITjBZWFJsS1NCN1hHNGdJR2xtSUNnaGMzUmhkR1V1Y21WaFpHbHVaeWtnZTF4dUlDQWdJR1JsWW5WbktDZHlaWE4xYldVZ2NtVmhaQ0F3SnlrN1hHNGdJQ0FnYzNSeVpXRnRMbkpsWVdRb01DazdYRzRnSUgxY2JseHVJQ0J6ZEdGMFpTNXlaWE4xYldWVFkyaGxaSFZzWldRZ1BTQm1ZV3h6WlR0Y2JpQWdjM1JoZEdVdVlYZGhhWFJFY21GcGJpQTlJREE3WEc0Z0lITjBjbVZoYlM1bGJXbDBLQ2R5WlhOMWJXVW5LVHRjYmlBZ1pteHZkeWh6ZEhKbFlXMHBPMXh1SUNCcFppQW9jM1JoZEdVdVpteHZkMmx1WnlBbUppQWhjM1JoZEdVdWNtVmhaR2x1WnlrZ2MzUnlaV0Z0TG5KbFlXUW9NQ2s3WEc1OVhHNWNibEpsWVdSaFlteGxMbkJ5YjNSdmRIbHdaUzV3WVhWelpTQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdaR1ZpZFdjb0oyTmhiR3dnY0dGMWMyVWdabXh2ZDJsdVp6MGxhaWNzSUhSb2FYTXVYM0psWVdSaFlteGxVM1JoZEdVdVpteHZkMmx1WnlrN1hHNGdJR2xtSUNobVlXeHpaU0FoUFQwZ2RHaHBjeTVmY21WaFpHRmliR1ZUZEdGMFpTNW1iRzkzYVc1bktTQjdYRzRnSUNBZ1pHVmlkV2NvSjNCaGRYTmxKeWs3WEc0Z0lDQWdkR2hwY3k1ZmNtVmhaR0ZpYkdWVGRHRjBaUzVtYkc5M2FXNW5JRDBnWm1Gc2MyVTdYRzRnSUNBZ2RHaHBjeTVsYldsMEtDZHdZWFZ6WlNjcE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCMGFHbHpPMXh1ZlR0Y2JseHVablZ1WTNScGIyNGdabXh2ZHloemRISmxZVzBwSUh0Y2JpQWdkbUZ5SUhOMFlYUmxJRDBnYzNSeVpXRnRMbDl5WldGa1lXSnNaVk4wWVhSbE8xeHVJQ0JrWldKMVp5Z25abXh2ZHljc0lITjBZWFJsTG1ac2IzZHBibWNwTzF4dUlDQjNhR2xzWlNBb2MzUmhkR1V1Wm14dmQybHVaeUFtSmlCemRISmxZVzB1Y21WaFpDZ3BJQ0U5UFNCdWRXeHNLU0I3ZlZ4dWZWeHVYRzR2THlCM2NtRndJR0Z1SUc5c1pDMXpkSGxzWlNCemRISmxZVzBnWVhNZ2RHaGxJR0Z6ZVc1aklHUmhkR0VnYzI5MWNtTmxMbHh1THk4Z1ZHaHBjeUJwY3lBcWJtOTBLaUJ3WVhKMElHOW1JSFJvWlNCeVpXRmtZV0pzWlNCemRISmxZVzBnYVc1MFpYSm1ZV05sTGx4dUx5OGdTWFFnYVhNZ1lXNGdkV2RzZVNCMWJtWnZjblIxYm1GMFpTQnRaWE56SUc5bUlHaHBjM1J2Y25rdVhHNVNaV0ZrWVdKc1pTNXdjbTkwYjNSNWNHVXVkM0poY0NBOUlHWjFibU4wYVc5dUlDaHpkSEpsWVcwcElIdGNiaUFnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQjJZWElnYzNSaGRHVWdQU0IwYUdsekxsOXlaV0ZrWVdKc1pWTjBZWFJsTzF4dUlDQjJZWElnY0dGMWMyVmtJRDBnWm1Gc2MyVTdYRzVjYmlBZ2MzUnlaV0Z0TG05dUtDZGxibVFuTENCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ1pHVmlkV2NvSjNkeVlYQndaV1FnWlc1a0p5azdYRzRnSUNBZ2FXWWdLSE4wWVhSbExtUmxZMjlrWlhJZ0ppWWdJWE4wWVhSbExtVnVaR1ZrS1NCN1hHNGdJQ0FnSUNCMllYSWdZMmgxYm1zZ1BTQnpkR0YwWlM1a1pXTnZaR1Z5TG1WdVpDZ3BPMXh1SUNBZ0lDQWdhV1lnS0dOb2RXNXJJQ1ltSUdOb2RXNXJMbXhsYm1kMGFDa2dYM1JvYVhNdWNIVnphQ2hqYUhWdWF5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1gzUm9hWE11Y0hWemFDaHVkV3hzS1R0Y2JpQWdmU2s3WEc1Y2JpQWdjM1J5WldGdExtOXVLQ2RrWVhSaEp5d2dablZ1WTNScGIyNGdLR05vZFc1cktTQjdYRzRnSUNBZ1pHVmlkV2NvSjNkeVlYQndaV1FnWkdGMFlTY3BPMXh1SUNBZ0lHbG1JQ2h6ZEdGMFpTNWtaV052WkdWeUtTQmphSFZ1YXlBOUlITjBZWFJsTG1SbFkyOWtaWEl1ZDNKcGRHVW9ZMmgxYm1zcE8xeHVYRzRnSUNBZ0x5OGdaRzl1SjNRZ2MydHBjQ0J2ZG1WeUlHWmhiSE41SUhaaGJIVmxjeUJwYmlCdlltcGxZM1JOYjJSbFhHNGdJQ0FnYVdZZ0tITjBZWFJsTG05aWFtVmpkRTF2WkdVZ0ppWWdLR05vZFc1cklEMDlQU0J1ZFd4c0lIeDhJR05vZFc1cklEMDlQU0IxYm1SbFptbHVaV1FwS1NCeVpYUjFjbTQ3Wld4elpTQnBaaUFvSVhOMFlYUmxMbTlpYW1WamRFMXZaR1VnSmlZZ0tDRmphSFZ1YXlCOGZDQWhZMmgxYm1zdWJHVnVaM1JvS1NrZ2NtVjBkWEp1TzF4dVhHNGdJQ0FnZG1GeUlISmxkQ0E5SUY5MGFHbHpMbkIxYzJnb1kyaDFibXNwTzF4dUlDQWdJR2xtSUNnaGNtVjBLU0I3WEc0Z0lDQWdJQ0J3WVhWelpXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ2MzUnlaV0Z0TG5CaGRYTmxLQ2s3WEc0Z0lDQWdmVnh1SUNCOUtUdGNibHh1SUNBdkx5QndjbTk0ZVNCaGJHd2dkR2hsSUc5MGFHVnlJRzFsZEdodlpITXVYRzRnSUM4dklHbHRjRzl5ZEdGdWRDQjNhR1Z1SUhkeVlYQndhVzVuSUdacGJIUmxjbk1nWVc1a0lHUjFjR3hsZUdWekxseHVJQ0JtYjNJZ0tIWmhjaUJwSUdsdUlITjBjbVZoYlNrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6VzJsZElEMDlQU0IxYm1SbFptbHVaV1FnSmlZZ2RIbHdaVzltSUhOMGNtVmhiVnRwWFNBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnZEdocGMxdHBYU0E5SUdaMWJtTjBhVzl1SUNodFpYUm9iMlFwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1J5WldGdFcyMWxkR2h2WkYwdVlYQndiSGtvYzNSeVpXRnRMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ2ZTaHBLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2THlCd2NtOTRlU0JqWlhKMFlXbHVJR2x0Y0c5eWRHRnVkQ0JsZG1WdWRITXVYRzRnSUdadmNpQW9kbUZ5SUc0Z1BTQXdPeUJ1SUR3Z2ExQnliM2g1UlhabGJuUnpMbXhsYm1kMGFEc2diaXNyS1NCN1hHNGdJQ0FnYzNSeVpXRnRMbTl1S0d0UWNtOTRlVVYyWlc1MGMxdHVYU3dnZEdocGN5NWxiV2wwTG1KcGJtUW9kR2hwY3l3Z2ExQnliM2g1UlhabGJuUnpXMjVkS1NrN1hHNGdJSDFjYmx4dUlDQXZMeUIzYUdWdUlIZGxJSFJ5ZVNCMGJ5QmpiMjV6ZFcxbElITnZiV1VnYlc5eVpTQmllWFJsY3l3Z2MybHRjR3g1SUhWdWNHRjFjMlVnZEdobFhHNGdJQzh2SUhWdVpHVnliSGxwYm1jZ2MzUnlaV0Z0TGx4dUlDQjBhR2x6TGw5eVpXRmtJRDBnWm5WdVkzUnBiMjRnS0c0cElIdGNiaUFnSUNCa1pXSjFaeWduZDNKaGNIQmxaQ0JmY21WaFpDY3NJRzRwTzF4dUlDQWdJR2xtSUNod1lYVnpaV1FwSUh0Y2JpQWdJQ0FnSUhCaGRYTmxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdjM1J5WldGdExuSmxjM1Z0WlNncE8xeHVJQ0FnSUgxY2JpQWdmVHRjYmx4dUlDQnlaWFIxY200Z2RHaHBjenRjYm4wN1hHNWNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoU1pXRmtZV0pzWlM1d2NtOTBiM1I1Y0dVc0lDZHlaV0ZrWVdKc1pVaHBaMmhYWVhSbGNrMWhjbXNuTENCN1hHNGdJQzh2SUcxaGEybHVaeUJwZENCbGVIQnNhV05wZENCMGFHbHpJSEJ5YjNCbGNuUjVJR2x6SUc1dmRDQmxiblZ0WlhKaFlteGxYRzRnSUM4dklHSmxZMkYxYzJVZ2IzUm9aWEozYVhObElITnZiV1VnY0hKdmRHOTBlWEJsSUcxaGJtbHdkV3hoZEdsdmJpQnBibHh1SUNBdkx5QjFjMlZ5YkdGdVpDQjNhV3hzSUdaaGFXeGNiaUFnWlc1MWJXVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lHZGxkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaV0ZrWVdKc1pWTjBZWFJsTG1ocFoyaFhZWFJsY2sxaGNtczdYRzRnSUgxY2JuMHBPMXh1WEc0dkx5QmxlSEJ2YzJWa0lHWnZjaUIwWlhOMGFXNW5JSEIxY25CdmMyVnpJRzl1YkhrdVhHNVNaV0ZrWVdKc1pTNWZabkp2YlV4cGMzUWdQU0JtY205dFRHbHpkRHRjYmx4dUx5OGdVR3gxWTJzZ2IyWm1JRzRnWW5sMFpYTWdabkp2YlNCaGJpQmhjbkpoZVNCdlppQmlkV1ptWlhKekxseHVMeThnVEdWdVozUm9JR2x6SUhSb1pTQmpiMjFpYVc1bFpDQnNaVzVuZEdoeklHOW1JR0ZzYkNCMGFHVWdZblZtWm1WeWN5QnBiaUIwYUdVZ2JHbHpkQzVjYmk4dklGUm9hWE1nWm5WdVkzUnBiMjRnYVhNZ1pHVnphV2R1WldRZ2RHOGdZbVVnYVc1c2FXNWhZbXhsTENCemJ5QndiR1ZoYzJVZ2RHRnJaU0JqWVhKbElIZG9aVzRnYldGcmFXNW5YRzR2THlCamFHRnVaMlZ6SUhSdklIUm9aU0JtZFc1amRHbHZiaUJpYjJSNUxseHVablZ1WTNScGIyNGdabkp2YlV4cGMzUW9iaXdnYzNSaGRHVXBJSHRjYmlBZ0x5OGdibTkwYUdsdVp5QmlkV1ptWlhKbFpGeHVJQ0JwWmlBb2MzUmhkR1V1YkdWdVozUm9JRDA5UFNBd0tTQnlaWFIxY200Z2JuVnNiRHRjYmx4dUlDQjJZWElnY21WME8xeHVJQ0JwWmlBb2MzUmhkR1V1YjJKcVpXTjBUVzlrWlNrZ2NtVjBJRDBnYzNSaGRHVXVZblZtWm1WeUxuTm9hV1owS0NrN1pXeHpaU0JwWmlBb0lXNGdmSHdnYmlBK1BTQnpkR0YwWlM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0F2THlCeVpXRmtJR2wwSUdGc2JDd2dkSEoxYm1OaGRHVWdkR2hsSUd4cGMzUmNiaUFnSUNCcFppQW9jM1JoZEdVdVpHVmpiMlJsY2lrZ2NtVjBJRDBnYzNSaGRHVXVZblZtWm1WeUxtcHZhVzRvSnljcE8yVnNjMlVnYVdZZ0tITjBZWFJsTG1KMVptWmxjaTVzWlc1bmRHZ2dQVDA5SURFcElISmxkQ0E5SUhOMFlYUmxMbUoxWm1abGNpNW9aV0ZrTG1SaGRHRTdaV3h6WlNCeVpYUWdQU0J6ZEdGMFpTNWlkV1ptWlhJdVkyOXVZMkYwS0hOMFlYUmxMbXhsYm1kMGFDazdYRzRnSUNBZ2MzUmhkR1V1WW5WbVptVnlMbU5zWldGeUtDazdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdMeThnY21WaFpDQndZWEowSUc5bUlHeHBjM1JjYmlBZ0lDQnlaWFFnUFNCbWNtOXRUR2x6ZEZCaGNuUnBZV3dvYml3Z2MzUmhkR1V1WW5WbVptVnlMQ0J6ZEdGMFpTNWtaV052WkdWeUtUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQnlaWFE3WEc1OVhHNWNiaTh2SUVWNGRISmhZM1J6SUc5dWJIa2daVzV2ZFdkb0lHSjFabVpsY21Wa0lHUmhkR0VnZEc4Z2MyRjBhWE5tZVNCMGFHVWdZVzF2ZFc1MElISmxjWFZsYzNSbFpDNWNiaTh2SUZSb2FYTWdablZ1WTNScGIyNGdhWE1nWkdWemFXZHVaV1FnZEc4Z1ltVWdhVzVzYVc1aFlteGxMQ0J6YnlCd2JHVmhjMlVnZEdGclpTQmpZWEpsSUhkb1pXNGdiV0ZyYVc1blhHNHZMeUJqYUdGdVoyVnpJSFJ2SUhSb1pTQm1kVzVqZEdsdmJpQmliMlI1TGx4dVpuVnVZM1JwYjI0Z1puSnZiVXhwYzNSUVlYSjBhV0ZzS0c0c0lHeHBjM1FzSUdoaGMxTjBjbWx1WjNNcElIdGNiaUFnZG1GeUlISmxkRHRjYmlBZ2FXWWdLRzRnUENCc2FYTjBMbWhsWVdRdVpHRjBZUzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQXZMeUJ6YkdsalpTQnBjeUIwYUdVZ2MyRnRaU0JtYjNJZ1luVm1abVZ5Y3lCaGJtUWdjM1J5YVc1bmMxeHVJQ0FnSUhKbGRDQTlJR3hwYzNRdWFHVmhaQzVrWVhSaExuTnNhV05sS0RBc0lHNHBPMXh1SUNBZ0lHeHBjM1F1YUdWaFpDNWtZWFJoSUQwZ2JHbHpkQzVvWldGa0xtUmhkR0V1YzJ4cFkyVW9iaWs3WEc0Z0lIMGdaV3h6WlNCcFppQW9iaUE5UFQwZ2JHbHpkQzVvWldGa0xtUmhkR0V1YkdWdVozUm9LU0I3WEc0Z0lDQWdMeThnWm1seWMzUWdZMmgxYm1zZ2FYTWdZU0J3WlhKbVpXTjBJRzFoZEdOb1hHNGdJQ0FnY21WMElEMGdiR2x6ZEM1emFHbG1kQ2dwTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUM4dklISmxjM1ZzZENCemNHRnVjeUJ0YjNKbElIUm9ZVzRnYjI1bElHSjFabVpsY2x4dUlDQWdJSEpsZENBOUlHaGhjMU4wY21sdVozTWdQeUJqYjNCNVJuSnZiVUoxWm1abGNsTjBjbWx1WnlodUxDQnNhWE4wS1NBNklHTnZjSGxHY205dFFuVm1abVZ5S0c0c0lHeHBjM1FwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ5WlhRN1hHNTlYRzVjYmk4dklFTnZjR2xsY3lCaElITndaV05wWm1sbFpDQmhiVzkxYm5RZ2IyWWdZMmhoY21GamRHVnljeUJtY205dElIUm9aU0JzYVhOMElHOW1JR0oxWm1abGNtVmtJR1JoZEdGY2JpOHZJR05vZFc1cmN5NWNiaTh2SUZSb2FYTWdablZ1WTNScGIyNGdhWE1nWkdWemFXZHVaV1FnZEc4Z1ltVWdhVzVzYVc1aFlteGxMQ0J6YnlCd2JHVmhjMlVnZEdGclpTQmpZWEpsSUhkb1pXNGdiV0ZyYVc1blhHNHZMeUJqYUdGdVoyVnpJSFJ2SUhSb1pTQm1kVzVqZEdsdmJpQmliMlI1TGx4dVpuVnVZM1JwYjI0Z1kyOXdlVVp5YjIxQ2RXWm1aWEpUZEhKcGJtY29iaXdnYkdsemRDa2dlMXh1SUNCMllYSWdjQ0E5SUd4cGMzUXVhR1ZoWkR0Y2JpQWdkbUZ5SUdNZ1BTQXhPMXh1SUNCMllYSWdjbVYwSUQwZ2NDNWtZWFJoTzF4dUlDQnVJQzA5SUhKbGRDNXNaVzVuZEdnN1hHNGdJSGRvYVd4bElDaHdJRDBnY0M1dVpYaDBLU0I3WEc0Z0lDQWdkbUZ5SUhOMGNpQTlJSEF1WkdGMFlUdGNiaUFnSUNCMllYSWdibUlnUFNCdUlENGdjM1J5TG14bGJtZDBhQ0EvSUhOMGNpNXNaVzVuZEdnZ09pQnVPMXh1SUNBZ0lHbG1JQ2h1WWlBOVBUMGdjM1J5TG14bGJtZDBhQ2tnY21WMElDczlJSE4wY2p0bGJITmxJSEpsZENBclBTQnpkSEl1YzJ4cFkyVW9NQ3dnYmlrN1hHNGdJQ0FnYmlBdFBTQnVZanRjYmlBZ0lDQnBaaUFvYmlBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnYVdZZ0tHNWlJRDA5UFNCemRISXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJQ3NyWXp0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEF1Ym1WNGRDa2diR2x6ZEM1b1pXRmtJRDBnY0M1dVpYaDBPMlZzYzJVZ2JHbHpkQzVvWldGa0lEMGdiR2x6ZEM1MFlXbHNJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHeHBjM1F1YUdWaFpDQTlJSEE3WEc0Z0lDQWdJQ0FnSUhBdVpHRjBZU0E5SUhOMGNpNXpiR2xqWlNodVlpazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0I5WEc0Z0lDQWdLeXRqTzF4dUlDQjlYRzRnSUd4cGMzUXViR1Z1WjNSb0lDMDlJR003WEc0Z0lISmxkSFZ5YmlCeVpYUTdYRzU5WEc1Y2JpOHZJRU52Y0dsbGN5QmhJSE53WldOcFptbGxaQ0JoYlc5MWJuUWdiMllnWW5sMFpYTWdabkp2YlNCMGFHVWdiR2x6ZENCdlppQmlkV1ptWlhKbFpDQmtZWFJoSUdOb2RXNXJjeTVjYmk4dklGUm9hWE1nWm5WdVkzUnBiMjRnYVhNZ1pHVnphV2R1WldRZ2RHOGdZbVVnYVc1c2FXNWhZbXhsTENCemJ5QndiR1ZoYzJVZ2RHRnJaU0JqWVhKbElIZG9aVzRnYldGcmFXNW5YRzR2THlCamFHRnVaMlZ6SUhSdklIUm9aU0JtZFc1amRHbHZiaUJpYjJSNUxseHVablZ1WTNScGIyNGdZMjl3ZVVaeWIyMUNkV1ptWlhJb2Jpd2diR2x6ZENrZ2UxeHVJQ0IyWVhJZ2NtVjBJRDBnUW5WbVptVnlMbUZzYkc5alZXNXpZV1psS0c0cE8xeHVJQ0IyWVhJZ2NDQTlJR3hwYzNRdWFHVmhaRHRjYmlBZ2RtRnlJR01nUFNBeE8xeHVJQ0J3TG1SaGRHRXVZMjl3ZVNoeVpYUXBPMXh1SUNCdUlDMDlJSEF1WkdGMFlTNXNaVzVuZEdnN1hHNGdJSGRvYVd4bElDaHdJRDBnY0M1dVpYaDBLU0I3WEc0Z0lDQWdkbUZ5SUdKMVppQTlJSEF1WkdGMFlUdGNiaUFnSUNCMllYSWdibUlnUFNCdUlENGdZblZtTG14bGJtZDBhQ0EvSUdKMVppNXNaVzVuZEdnZ09pQnVPMXh1SUNBZ0lHSjFaaTVqYjNCNUtISmxkQ3dnY21WMExteGxibWQwYUNBdElHNHNJREFzSUc1aUtUdGNiaUFnSUNCdUlDMDlJRzVpTzF4dUlDQWdJR2xtSUNodUlEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCcFppQW9ibUlnUFQwOUlHSjFaaTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnS3l0ak8xeHVJQ0FnSUNBZ0lDQnBaaUFvY0M1dVpYaDBLU0JzYVhOMExtaGxZV1FnUFNCd0xtNWxlSFE3Wld4elpTQnNhWE4wTG1obFlXUWdQU0JzYVhOMExuUmhhV3dnUFNCdWRXeHNPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdiR2x6ZEM1b1pXRmtJRDBnY0R0Y2JpQWdJQ0FnSUNBZ2NDNWtZWFJoSUQwZ1luVm1Mbk5zYVdObEtHNWlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUgxY2JpQWdJQ0FySzJNN1hHNGdJSDFjYmlBZ2JHbHpkQzVzWlc1bmRHZ2dMVDBnWXp0Y2JpQWdjbVYwZFhKdUlISmxkRHRjYm4xY2JseHVablZ1WTNScGIyNGdaVzVrVW1WaFpHRmliR1VvYzNSeVpXRnRLU0I3WEc0Z0lIWmhjaUJ6ZEdGMFpTQTlJSE4wY21WaGJTNWZjbVZoWkdGaWJHVlRkR0YwWlR0Y2JseHVJQ0F2THlCSlppQjNaU0JuWlhRZ2FHVnlaU0JpWldadmNtVWdZMjl1YzNWdGFXNW5JR0ZzYkNCMGFHVWdZbmwwWlhNc0lIUm9aVzRnZEdoaGRDQnBjeUJoWEc0Z0lDOHZJR0oxWnlCcGJpQnViMlJsTGlBZ1UyaHZkV3hrSUc1bGRtVnlJR2hoY0hCbGJpNWNiaUFnYVdZZ0tITjBZWFJsTG14bGJtZDBhQ0ErSURBcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblhDSmxibVJTWldGa1lXSnNaU2dwWENJZ1kyRnNiR1ZrSUc5dUlHNXZiaTFsYlhCMGVTQnpkSEpsWVcwbktUdGNibHh1SUNCcFppQW9JWE4wWVhSbExtVnVaRVZ0YVhSMFpXUXBJSHRjYmlBZ0lDQnpkR0YwWlM1bGJtUmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ2NHNWhMbTVsZUhSVWFXTnJLR1Z1WkZKbFlXUmhZbXhsVGxRc0lITjBZWFJsTENCemRISmxZVzBwTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHVnVaRkpsWVdSaFlteGxUbFFvYzNSaGRHVXNJSE4wY21WaGJTa2dlMXh1SUNBdkx5QkRhR1ZqYXlCMGFHRjBJSGRsSUdScFpHNG5kQ0JuWlhRZ2IyNWxJR3hoYzNRZ2RXNXphR2xtZEM1Y2JpQWdhV1lnS0NGemRHRjBaUzVsYm1SRmJXbDBkR1ZrSUNZbUlITjBZWFJsTG14bGJtZDBhQ0E5UFQwZ01Da2dlMXh1SUNBZ0lITjBZWFJsTG1WdVpFVnRhWFIwWldRZ1BTQjBjblZsTzF4dUlDQWdJSE4wY21WaGJTNXlaV0ZrWVdKc1pTQTlJR1poYkhObE8xeHVJQ0FnSUhOMGNtVmhiUzVsYldsMEtDZGxibVFuS1R0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBibVJsZUU5bUtIaHpMQ0I0S1NCN1hHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnNJRDBnZUhNdWJHVnVaM1JvT3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ2FXWWdLSGh6VzJsZElEMDlQU0I0S1NCeVpYUjFjbTRnYVR0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnTFRFN1hHNTlJaXdpTHk4Z1EyOXdlWEpwWjJoMElFcHZlV1Z1ZEN3Z1NXNWpMaUJoYm1RZ2IzUm9aWElnVG05a1pTQmpiMjUwY21saWRYUnZjbk11WEc0dkwxeHVMeThnVUdWeWJXbHpjMmx2YmlCcGN5Qm9aWEpsWW5rZ1ozSmhiblJsWkN3Z1puSmxaU0J2WmlCamFHRnlaMlVzSUhSdklHRnVlU0J3WlhKemIyNGdiMkowWVdsdWFXNW5JR0ZjYmk4dklHTnZjSGtnYjJZZ2RHaHBjeUJ6YjJaMGQyRnlaU0JoYm1RZ1lYTnpiMk5wWVhSbFpDQmtiMk4xYldWdWRHRjBhVzl1SUdacGJHVnpJQ2gwYUdWY2JpOHZJRndpVTI5bWRIZGhjbVZjSWlrc0lIUnZJR1JsWVd3Z2FXNGdkR2hsSUZOdlpuUjNZWEpsSUhkcGRHaHZkWFFnY21WemRISnBZM1JwYjI0c0lHbHVZMngxWkdsdVoxeHVMeThnZDJsMGFHOTFkQ0JzYVcxcGRHRjBhVzl1SUhSb1pTQnlhV2RvZEhNZ2RHOGdkWE5sTENCamIzQjVMQ0J0YjJScFpua3NJRzFsY21kbExDQndkV0pzYVhOb0xGeHVMeThnWkdsemRISnBZblYwWlN3Z2MzVmliR2xqWlc1elpTd2dZVzVrTDI5eUlITmxiR3dnWTI5d2FXVnpJRzltSUhSb1pTQlRiMlowZDJGeVpTd2dZVzVrSUhSdklIQmxjbTFwZEZ4dUx5OGdjR1Z5YzI5dWN5QjBieUIzYUc5dElIUm9aU0JUYjJaMGQyRnlaU0JwY3lCbWRYSnVhWE5vWldRZ2RHOGdaRzhnYzI4c0lITjFZbXBsWTNRZ2RHOGdkR2hsWEc0dkx5Qm1iMnhzYjNkcGJtY2dZMjl1WkdsMGFXOXVjenBjYmk4dlhHNHZMeUJVYUdVZ1lXSnZkbVVnWTI5d2VYSnBaMmgwSUc1dmRHbGpaU0JoYm1RZ2RHaHBjeUJ3WlhKdGFYTnphVzl1SUc1dmRHbGpaU0J6YUdGc2JDQmlaU0JwYm1Oc2RXUmxaRnh1THk4Z2FXNGdZV3hzSUdOdmNHbGxjeUJ2Y2lCemRXSnpkR0Z1ZEdsaGJDQndiM0owYVc5dWN5QnZaaUIwYUdVZ1UyOW1kSGRoY21VdVhHNHZMMXh1THk4Z1ZFaEZJRk5QUmxSWFFWSkZJRWxUSUZCU1QxWkpSRVZFSUZ3aVFWTWdTVk5jSWl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVV1NCUFJpQkJUbGtnUzBsT1JDd2dSVmhRVWtWVFUxeHVMeThnVDFJZ1NVMVFURWxGUkN3Z1NVNURURlZFU1U1SElFSlZWQ0JPVDFRZ1RFbE5TVlJGUkNCVVR5QlVTRVVnVjBGU1VrRk9WRWxGVXlCUFJseHVMeThnVFVWU1EwaEJUbFJCUWtsTVNWUlpMQ0JHU1ZST1JWTlRJRVpQVWlCQklGQkJVbFJKUTFWTVFWSWdVRlZTVUU5VFJTQkJUa1FnVGs5T1NVNUdVa2xPUjBWTlJVNVVMaUJKVGx4dUx5OGdUazhnUlZaRlRsUWdVMGhCVEV3Z1ZFaEZJRUZWVkVoUFVsTWdUMUlnUTA5UVdWSkpSMGhVSUVoUFRFUkZVbE1nUWtVZ1RFbEJRa3hGSUVaUFVpQkJUbGtnUTB4QlNVMHNYRzR2THlCRVFVMUJSMFZUSUU5U0lFOVVTRVZTSUV4SlFVSkpURWxVV1N3Z1YwaEZWRWhGVWlCSlRpQkJUaUJCUTFSSlQwNGdUMFlnUTA5T1ZGSkJRMVFzSUZSUFVsUWdUMUpjYmk4dklFOVVTRVZTVjBsVFJTd2dRVkpKVTBsT1J5QkdVazlOTENCUFZWUWdUMFlnVDFJZ1NVNGdRMDlPVGtWRFZFbFBUaUJYU1ZSSUlGUklSU0JUVDBaVVYwRlNSU0JQVWlCVVNFVmNiaTh2SUZWVFJTQlBVaUJQVkVoRlVpQkVSVUZNU1U1SFV5QkpUaUJVU0VVZ1UwOUdWRmRCVWtVdVhHNWNiaTh2SUdFZ2RISmhibk5tYjNKdElITjBjbVZoYlNCcGN5QmhJSEpsWVdSaFlteGxMM2R5YVhSaFlteGxJSE4wY21WaGJTQjNhR1Z5WlNCNWIzVWdaRzljYmk4dklITnZiV1YwYUdsdVp5QjNhWFJvSUhSb1pTQmtZWFJoTGlBZ1UyOXRaWFJwYldWeklHbDBKM01nWTJGc2JHVmtJR0VnWENKbWFXeDBaWEpjSWl4Y2JpOHZJR0oxZENCMGFHRjBKM01nYm05MElHRWdaM0psWVhRZ2JtRnRaU0JtYjNJZ2FYUXNJSE5wYm1ObElIUm9ZWFFnYVcxd2JHbGxjeUJoSUhSb2FXNW5JSGRvWlhKbFhHNHZMeUJ6YjIxbElHSnBkSE1nY0dGemN5QjBhSEp2ZFdkb0xDQmhibVFnYjNSb1pYSnpJR0Z5WlNCemFXMXdiSGtnYVdkdWIzSmxaQzRnSUNoVWFHRjBJSGR2ZFd4a1hHNHZMeUJpWlNCaElIWmhiR2xrSUdWNFlXMXdiR1VnYjJZZ1lTQjBjbUZ1YzJadmNtMHNJRzltSUdOdmRYSnpaUzRwWEc0dkwxeHVMeThnVjJocGJHVWdkR2hsSUc5MWRIQjFkQ0JwY3lCallYVnpZV3hzZVNCeVpXeGhkR1ZrSUhSdklIUm9aU0JwYm5CMWRDd2dhWFFuY3lCdWIzUWdZVnh1THk4Z2JtVmpaWE56WVhKcGJIa2djM2x0YldWMGNtbGpJRzl5SUhONWJtTm9jbTl1YjNWeklIUnlZVzV6Wm05eWJXRjBhVzl1TGlBZ1JtOXlJR1Y0WVcxd2JHVXNYRzR2THlCaElIcHNhV0lnYzNSeVpXRnRJRzFwWjJoMElIUmhhMlVnYlhWc2RHbHdiR1VnY0d4aGFXNHRkR1Y0ZENCM2NtbDBaWE1vS1N3Z1lXNWtJSFJvWlc1Y2JpOHZJR1Z0YVhRZ1lTQnphVzVuYkdVZ1kyOXRjSEpsYzNObFpDQmphSFZ1YXlCemIyMWxJSFJwYldVZ2FXNGdkR2hsSUdaMWRIVnlaUzVjYmk4dlhHNHZMeUJJWlhKbEozTWdhRzkzSUhSb2FYTWdkMjl5YTNNNlhHNHZMMXh1THk4Z1ZHaGxJRlJ5WVc1elptOXliU0J6ZEhKbFlXMGdhR0Z6SUdGc2JDQjBhR1VnWVhOd1pXTjBjeUJ2WmlCMGFHVWdjbVZoWkdGaWJHVWdZVzVrSUhkeWFYUmhZbXhsWEc0dkx5QnpkSEpsWVcwZ1kyeGhjM05sY3k0Z0lGZG9aVzRnZVc5MUlIZHlhWFJsS0dOb2RXNXJLU3dnZEdoaGRDQmpZV3hzY3lCZmQzSnBkR1VvWTJoMWJtc3NZMklwWEc0dkx5QnBiblJsY201aGJHeDVMQ0JoYm1RZ2NtVjBkWEp1Y3lCbVlXeHpaU0JwWmlCMGFHVnlaU2R6SUdFZ2JHOTBJRzltSUhCbGJtUnBibWNnZDNKcGRHVnpYRzR2THlCaWRXWm1aWEpsWkNCMWNDNGdJRmRvWlc0Z2VXOTFJR05oYkd3Z2NtVmhaQ2dwTENCMGFHRjBJR05oYkd4eklGOXlaV0ZrS0c0cElIVnVkR2xzWEc0dkx5QjBhR1Z5WlNkeklHVnViM1ZuYUNCd1pXNWthVzVuSUhKbFlXUmhZbXhsSUdSaGRHRWdZblZtWm1WeVpXUWdkWEF1WEc0dkwxeHVMeThnU1c0Z1lTQjBjbUZ1YzJadmNtMGdjM1J5WldGdExDQjBhR1VnZDNKcGRIUmxiaUJrWVhSaElHbHpJSEJzWVdObFpDQnBiaUJoSUdKMVptWmxjaTRnSUZkb1pXNWNiaTh2SUY5eVpXRmtLRzRwSUdseklHTmhiR3hsWkN3Z2FYUWdkSEpoYm5ObWIzSnRjeUIwYUdVZ2NYVmxkV1ZrSUhWd0lHUmhkR0VzSUdOaGJHeHBibWNnZEdobFhHNHZMeUJpZFdabVpYSmxaQ0JmZDNKcGRHVWdZMkluY3lCaGN5QnBkQ0JqYjI1emRXMWxjeUJqYUhWdWEzTXVJQ0JKWmlCamIyNXpkVzFwYm1jZ1lTQnphVzVuYkdWY2JpOHZJSGR5YVhSMFpXNGdZMmgxYm1zZ2QyOTFiR1FnY21WemRXeDBJR2x1SUcxMWJIUnBjR3hsSUc5MWRIQjFkQ0JqYUhWdWEzTXNJSFJvWlc0Z2RHaGxJR1pwY25OMFhHNHZMeUJ2ZFhSd2RYUjBaV1FnWW1sMElHTmhiR3h6SUhSb1pTQnlaV0ZrWTJJc0lHRnVaQ0J6ZFdKelpYRjFaVzUwSUdOb2RXNXJjeUJxZFhOMElHZHZJR2x1ZEc5Y2JpOHZJSFJvWlNCeVpXRmtJR0oxWm1abGNpd2dZVzVrSUhkcGJHd2dZMkYxYzJVZ2FYUWdkRzhnWlcxcGRDQW5jbVZoWkdGaWJHVW5JR2xtSUc1bFkyVnpjMkZ5ZVM1Y2JpOHZYRzR2THlCVWFHbHpJSGRoZVN3Z1ltRmpheTF3Y21WemMzVnlaU0JwY3lCaFkzUjFZV3hzZVNCa1pYUmxjbTFwYm1Wa0lHSjVJSFJvWlNCeVpXRmthVzVuSUhOcFpHVXNYRzR2THlCemFXNWpaU0JmY21WaFpDQm9ZWE1nZEc4Z1ltVWdZMkZzYkdWa0lIUnZJSE4wWVhKMElIQnliMk5sYzNOcGJtY2dZU0J1WlhjZ1kyaDFibXN1SUNCSWIzZGxkbVZ5TEZ4dUx5OGdZU0J3WVhSb2IyeHZaMmxqWVd3Z2FXNW1iR0YwWlNCMGVYQmxJRzltSUhSeVlXNXpabTl5YlNCallXNGdZMkYxYzJVZ1pYaGpaWE56YVhabElHSjFabVpsY21sdVoxeHVMeThnYUdWeVpTNGdJRVp2Y2lCbGVHRnRjR3hsTENCcGJXRm5hVzVsSUdFZ2MzUnlaV0Z0SUhkb1pYSmxJR1YyWlhKNUlHSjVkR1VnYjJZZ2FXNXdkWFFnYVhOY2JpOHZJR2x1ZEdWeWNISmxkR1ZrSUdGeklHRnVJR2x1ZEdWblpYSWdabkp2YlNBd0xUSTFOU3dnWVc1a0lIUm9aVzRnY21WemRXeDBjeUJwYmlCMGFHRjBJRzFoYm5sY2JpOHZJR0o1ZEdWeklHOW1JRzkxZEhCMWRDNGdJRmR5YVhScGJtY2dkR2hsSURRZ1lubDBaWE1nZTJabUxHWm1MR1ptTEdabWZTQjNiM1ZzWkNCeVpYTjFiSFFnYVc1Y2JpOHZJREZyWWlCdlppQmtZWFJoSUdKbGFXNW5JRzkxZEhCMWRDNGdJRWx1SUhSb2FYTWdZMkZ6WlN3Z2VXOTFJR052ZFd4a0lIZHlhWFJsSUdFZ2RtVnllU0J6YldGc2JGeHVMeThnWVcxdmRXNTBJRzltSUdsdWNIVjBMQ0JoYm1RZ1pXNWtJSFZ3SUhkcGRHZ2dZU0IyWlhKNUlHeGhjbWRsSUdGdGIzVnVkQ0J2WmlCdmRYUndkWFF1SUNCSmJseHVMeThnYzNWamFDQmhJSEJoZEdodmJHOW5hV05oYkNCcGJtWnNZWFJwYm1jZ2JXVmphR0Z1YVhOdExDQjBhR1Z5WlNka0lHSmxJRzV2SUhkaGVTQjBieUIwWld4c1hHNHZMeUIwYUdVZ2MzbHpkR1Z0SUhSdklITjBiM0FnWkc5cGJtY2dkR2hsSUhSeVlXNXpabTl5YlM0Z0lFRWdjMmx1WjJ4bElEUk5RaUIzY21sMFpTQmpiM1ZzWkZ4dUx5OGdZMkYxYzJVZ2RHaGxJSE41YzNSbGJTQjBieUJ5ZFc0Z2IzVjBJRzltSUcxbGJXOXllUzVjYmk4dlhHNHZMeUJJYjNkbGRtVnlMQ0JsZG1WdUlHbHVJSE4xWTJnZ1lTQndZWFJvYjJ4dloybGpZV3dnWTJGelpTd2diMjVzZVNCaElITnBibWRzWlNCM2NtbDBkR1Z1SUdOb2RXNXJYRzR2THlCM2IzVnNaQ0JpWlNCamIyNXpkVzFsWkN3Z1lXNWtJSFJvWlc0Z2RHaGxJSEpsYzNRZ2QyOTFiR1FnZDJGcGRDQW9kVzR0ZEhKaGJuTm1iM0p0WldRcElIVnVkR2xzWEc0dkx5QjBhR1VnY21WemRXeDBjeUJ2WmlCMGFHVWdjSEpsZG1sdmRYTWdkSEpoYm5ObWIzSnRaV1FnWTJoMWJtc2dkMlZ5WlNCamIyNXpkVzFsWkM1Y2JseHVKM1Z6WlNCemRISnBZM1FuTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGUnlZVzV6Wm05eWJUdGNibHh1ZG1GeUlFUjFjR3hsZUNBOUlISmxjWFZwY21Vb0p5NHZYM04wY21WaGJWOWtkWEJzWlhnbktUdGNibHh1THlvOGNtVndiR0ZqWlcxbGJuUStLaTljYm5aaGNpQjFkR2xzSUQwZ1QySnFaV04wTG1OeVpXRjBaU2h5WlhGMWFYSmxLQ2RqYjNKbExYVjBhV3d0YVhNbktTazdYRzUxZEdsc0xtbHVhR1Z5YVhSeklEMGdjbVZ4ZFdseVpTZ25hVzVvWlhKcGRITW5LVHRjYmk4cVBDOXlaWEJzWVdObGJXVnVkRDRxTDF4dVhHNTFkR2xzTG1sdWFHVnlhWFJ6S0ZSeVlXNXpabTl5YlN3Z1JIVndiR1Y0S1R0Y2JseHVablZ1WTNScGIyNGdZV1owWlhKVWNtRnVjMlp2Y20wb1pYSXNJR1JoZEdFcElIdGNiaUFnZG1GeUlIUnpJRDBnZEdocGN5NWZkSEpoYm5ObWIzSnRVM1JoZEdVN1hHNGdJSFJ6TG5SeVlXNXpabTl5YldsdVp5QTlJR1poYkhObE8xeHVYRzRnSUhaaGNpQmpZaUE5SUhSekxuZHlhWFJsWTJJN1hHNWNiaUFnYVdZZ0tDRmpZaWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1WdGFYUW9KMlZ5Y205eUp5d2dibVYzSUVWeWNtOXlLQ2QzY21sMFpTQmpZV3hzWW1GamF5QmpZV3hzWldRZ2JYVnNkR2x3YkdVZ2RHbHRaWE1uS1NrN1hHNGdJSDFjYmx4dUlDQjBjeTUzY21sMFpXTm9kVzVySUQwZ2JuVnNiRHRjYmlBZ2RITXVkM0pwZEdWallpQTlJRzUxYkd3N1hHNWNiaUFnYVdZZ0tHUmhkR0VnSVQwZ2JuVnNiQ2tnTHk4Z2MybHVaMnhsSUdWeGRXRnNjeUJqYUdWamF5Qm1iM0lnWW05MGFDQmdiblZzYkdBZ1lXNWtJR0IxYm1SbFptbHVaV1JnWEc0Z0lDQWdkR2hwY3k1d2RYTm9LR1JoZEdFcE8xeHVYRzRnSUdOaUtHVnlLVHRjYmx4dUlDQjJZWElnY25NZ1BTQjBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxPMXh1SUNCeWN5NXlaV0ZrYVc1bklEMGdabUZzYzJVN1hHNGdJR2xtSUNoeWN5NXVaV1ZrVW1WaFpHRmliR1VnZkh3Z2NuTXViR1Z1WjNSb0lEd2djbk11YUdsbmFGZGhkR1Z5VFdGeWF5a2dlMXh1SUNBZ0lIUm9hWE11WDNKbFlXUW9jbk11YUdsbmFGZGhkR1Z5VFdGeWF5azdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnVkhKaGJuTm1iM0p0S0c5d2RHbHZibk1wSUh0Y2JpQWdhV1lnS0NFb2RHaHBjeUJwYm5OMFlXNWpaVzltSUZSeVlXNXpabTl5YlNrcElISmxkSFZ5YmlCdVpYY2dWSEpoYm5ObWIzSnRLRzl3ZEdsdmJuTXBPMXh1WEc0Z0lFUjFjR3hsZUM1allXeHNLSFJvYVhNc0lHOXdkR2x2Ym5NcE8xeHVYRzRnSUhSb2FYTXVYM1J5WVc1elptOXliVk4wWVhSbElEMGdlMXh1SUNBZ0lHRm1kR1Z5VkhKaGJuTm1iM0p0T2lCaFpuUmxjbFJ5WVc1elptOXliUzVpYVc1a0tIUm9hWE1wTEZ4dUlDQWdJRzVsWldSVWNtRnVjMlp2Y20wNklHWmhiSE5sTEZ4dUlDQWdJSFJ5WVc1elptOXliV2x1WnpvZ1ptRnNjMlVzWEc0Z0lDQWdkM0pwZEdWallqb2diblZzYkN4Y2JpQWdJQ0IzY21sMFpXTm9kVzVyT2lCdWRXeHNMRnh1SUNBZ0lIZHlhWFJsWlc1amIyUnBibWM2SUc1MWJHeGNiaUFnZlR0Y2JseHVJQ0F2THlCemRHRnlkQ0J2ZFhRZ1lYTnJhVzVuSUdadmNpQmhJSEpsWVdSaFlteGxJR1YyWlc1MElHOXVZMlVnWkdGMFlTQnBjeUIwY21GdWMyWnZjbTFsWkM1Y2JpQWdkR2hwY3k1ZmNtVmhaR0ZpYkdWVGRHRjBaUzV1WldWa1VtVmhaR0ZpYkdVZ1BTQjBjblZsTzF4dVhHNGdJQzh2SUhkbElHaGhkbVVnYVcxd2JHVnRaVzUwWldRZ2RHaGxJRjl5WldGa0lHMWxkR2h2WkN3Z1lXNWtJR1J2Ym1VZ2RHaGxJRzkwYUdWeUlIUm9hVzVuYzF4dUlDQXZMeUIwYUdGMElGSmxZV1JoWW14bElIZGhiblJ6SUdKbFptOXlaU0IwYUdVZ1ptbHljM1FnWDNKbFlXUWdZMkZzYkN3Z2MyOGdkVzV6WlhRZ2RHaGxYRzRnSUM4dklITjVibU1nWjNWaGNtUWdabXhoWnk1Y2JpQWdkR2hwY3k1ZmNtVmhaR0ZpYkdWVGRHRjBaUzV6ZVc1aklEMGdabUZzYzJVN1hHNWNiaUFnYVdZZ0tHOXdkR2x2Ym5NcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHOXdkR2x2Ym5NdWRISmhibk5tYjNKdElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCMGFHbHpMbDkwY21GdWMyWnZjbTBnUFNCdmNIUnBiMjV6TG5SeVlXNXpabTl5YlR0Y2JseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2IzQjBhVzl1Y3k1bWJIVnphQ0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dkR2hwY3k1ZlpteDFjMmdnUFNCdmNIUnBiMjV6TG1ac2RYTm9PMXh1SUNCOVhHNWNiaUFnTHk4Z1YyaGxiaUIwYUdVZ2QzSnBkR0ZpYkdVZ2MybGtaU0JtYVc1cGMyaGxjeXdnZEdobGJpQm1iSFZ6YUNCdmRYUWdZVzU1ZEdocGJtY2djbVZ0WVdsdWFXNW5MbHh1SUNCMGFHbHpMbTl1S0Nkd2NtVm1hVzVwYzJnbkxDQndjbVZtYVc1cGMyZ3BPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQndjbVZtYVc1cGMyZ29LU0I3WEc0Z0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCMGFHbHpMbDltYkhWemFDQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUhSb2FYTXVYMlpzZFhOb0tHWjFibU4wYVc5dUlDaGxjaXdnWkdGMFlTa2dlMXh1SUNBZ0lDQWdaRzl1WlNoZmRHaHBjeXdnWlhJc0lHUmhkR0VwTzF4dUlDQWdJSDBwTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdSdmJtVW9kR2hwY3l3Z2JuVnNiQ3dnYm5Wc2JDazdYRzRnSUgxY2JuMWNibHh1VkhKaGJuTm1iM0p0TG5CeWIzUnZkSGx3WlM1d2RYTm9JRDBnWm5WdVkzUnBiMjRnS0dOb2RXNXJMQ0JsYm1OdlpHbHVaeWtnZTF4dUlDQjBhR2x6TGw5MGNtRnVjMlp2Y20xVGRHRjBaUzV1WldWa1ZISmhibk5tYjNKdElEMGdabUZzYzJVN1hHNGdJSEpsZEhWeWJpQkVkWEJzWlhndWNISnZkRzkwZVhCbExuQjFjMmd1WTJGc2JDaDBhR2x6TENCamFIVnVheXdnWlc1amIyUnBibWNwTzF4dWZUdGNibHh1THk4Z1ZHaHBjeUJwY3lCMGFHVWdjR0Z5ZENCM2FHVnlaU0I1YjNVZ1pHOGdjM1IxWm1ZaFhHNHZMeUJ2ZG1WeWNtbGtaU0IwYUdseklHWjFibU4wYVc5dUlHbHVJR2x0Y0d4bGJXVnVkR0YwYVc5dUlHTnNZWE56WlhNdVhHNHZMeUFuWTJoMWJtc25JR2x6SUdGdUlHbHVjSFYwSUdOb2RXNXJMbHh1THk5Y2JpOHZJRU5oYkd3Z1lIQjFjMmdvYm1WM1EyaDFibXNwWUNCMGJ5QndZWE56SUdGc2IyNW5JSFJ5WVc1elptOXliV1ZrSUc5MWRIQjFkRnh1THk4Z2RHOGdkR2hsSUhKbFlXUmhZbXhsSUhOcFpHVXVJQ0JaYjNVZ2JXRjVJR05oYkd3Z0ozQjFjMmduSUhwbGNtOGdiM0lnYlc5eVpTQjBhVzFsY3k1Y2JpOHZYRzR2THlCRFlXeHNJR0JqWWlobGNuSXBZQ0IzYUdWdUlIbHZkU0JoY21VZ1pHOXVaU0IzYVhSb0lIUm9hWE1nWTJoMWJtc3VJQ0JKWmlCNWIzVWdjR0Z6YzF4dUx5OGdZVzRnWlhKeWIzSXNJSFJvWlc0Z2RHaGhkQ2RzYkNCd2RYUWdkR2hsSUdoMWNuUWdiMjRnZEdobElIZG9iMnhsSUc5d1pYSmhkR2x2Ymk0Z0lFbG1JSGx2ZFZ4dUx5OGdibVYyWlhJZ1kyRnNiQ0JqWWlncExDQjBhR1Z1SUhsdmRTZHNiQ0J1WlhabGNpQm5aWFFnWVc1dmRHaGxjaUJqYUhWdWF5NWNibFJ5WVc1elptOXliUzV3Y205MGIzUjVjR1V1WDNSeVlXNXpabTl5YlNBOUlHWjFibU4wYVc5dUlDaGphSFZ1YXl3Z1pXNWpiMlJwYm1jc0lHTmlLU0I3WEc0Z0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblgzUnlZVzV6Wm05eWJTZ3BJR2x6SUc1dmRDQnBiWEJzWlcxbGJuUmxaQ2NwTzF4dWZUdGNibHh1VkhKaGJuTm1iM0p0TG5CeWIzUnZkSGx3WlM1ZmQzSnBkR1VnUFNCbWRXNWpkR2x2YmlBb1kyaDFibXNzSUdWdVkyOWthVzVuTENCallpa2dlMXh1SUNCMllYSWdkSE1nUFNCMGFHbHpMbDkwY21GdWMyWnZjbTFUZEdGMFpUdGNiaUFnZEhNdWQzSnBkR1ZqWWlBOUlHTmlPMXh1SUNCMGN5NTNjbWwwWldOb2RXNXJJRDBnWTJoMWJtczdYRzRnSUhSekxuZHlhWFJsWlc1amIyUnBibWNnUFNCbGJtTnZaR2x1Wnp0Y2JpQWdhV1lnS0NGMGN5NTBjbUZ1YzJadmNtMXBibWNwSUh0Y2JpQWdJQ0IyWVhJZ2NuTWdQU0IwYUdsekxsOXlaV0ZrWVdKc1pWTjBZWFJsTzF4dUlDQWdJR2xtSUNoMGN5NXVaV1ZrVkhKaGJuTm1iM0p0SUh4OElISnpMbTVsWldSU1pXRmtZV0pzWlNCOGZDQnljeTVzWlc1bmRHZ2dQQ0J5Y3k1b2FXZG9WMkYwWlhKTllYSnJLU0IwYUdsekxsOXlaV0ZrS0hKekxtaHBaMmhYWVhSbGNrMWhjbXNwTzF4dUlDQjlYRzU5TzF4dVhHNHZMeUJFYjJWemJpZDBJRzFoZEhSbGNpQjNhR0YwSUhSb1pTQmhjbWR6SUdGeVpTQm9aWEpsTGx4dUx5OGdYM1J5WVc1elptOXliU0JrYjJWeklHRnNiQ0IwYUdVZ2QyOXlheTVjYmk4dklGUm9ZWFFnZDJVZ1oyOTBJR2hsY21VZ2JXVmhibk1nZEdoaGRDQjBhR1VnY21WaFpHRmliR1VnYzJsa1pTQjNZVzUwY3lCdGIzSmxJR1JoZEdFdVhHNVVjbUZ1YzJadmNtMHVjSEp2ZEc5MGVYQmxMbDl5WldGa0lEMGdablZ1WTNScGIyNGdLRzRwSUh0Y2JpQWdkbUZ5SUhSeklEMGdkR2hwY3k1ZmRISmhibk5tYjNKdFUzUmhkR1U3WEc1Y2JpQWdhV1lnS0hSekxuZHlhWFJsWTJoMWJtc2dJVDA5SUc1MWJHd2dKaVlnZEhNdWQzSnBkR1ZqWWlBbUppQWhkSE11ZEhKaGJuTm1iM0p0YVc1bktTQjdYRzRnSUNBZ2RITXVkSEpoYm5ObWIzSnRhVzVuSUQwZ2RISjFaVHRjYmlBZ0lDQjBhR2x6TGw5MGNtRnVjMlp2Y20wb2RITXVkM0pwZEdWamFIVnVheXdnZEhNdWQzSnBkR1ZsYm1OdlpHbHVaeXdnZEhNdVlXWjBaWEpVY21GdWMyWnZjbTBwTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUM4dklHMWhjbXNnZEdoaGRDQjNaU0J1WldWa0lHRWdkSEpoYm5ObWIzSnRMQ0J6YnlCMGFHRjBJR0Z1ZVNCa1lYUmhJSFJvWVhRZ1kyOXRaWE1nYVc1Y2JpQWdJQ0F2THlCM2FXeHNJR2RsZENCd2NtOWpaWE56WldRc0lHNXZkeUIwYUdGMElIZGxKM1psSUdGemEyVmtJR1p2Y2lCcGRDNWNiaUFnSUNCMGN5NXVaV1ZrVkhKaGJuTm1iM0p0SUQwZ2RISjFaVHRjYmlBZ2ZWeHVmVHRjYmx4dVZISmhibk5tYjNKdExuQnliM1J2ZEhsd1pTNWZaR1Z6ZEhKdmVTQTlJR1oxYm1OMGFXOXVJQ2hsY25Jc0lHTmlLU0I3WEc0Z0lIWmhjaUJmZEdocGN6SWdQU0IwYUdsek8xeHVYRzRnSUVSMWNHeGxlQzV3Y205MGIzUjVjR1V1WDJSbGMzUnliM2t1WTJGc2JDaDBhR2x6TENCbGNuSXNJR1oxYm1OMGFXOXVJQ2hsY25JeUtTQjdYRzRnSUNBZ1kySW9aWEp5TWlrN1hHNGdJQ0FnWDNSb2FYTXlMbVZ0YVhRb0oyTnNiM05sSnlrN1hHNGdJSDBwTzF4dWZUdGNibHh1Wm5WdVkzUnBiMjRnWkc5dVpTaHpkSEpsWVcwc0lHVnlMQ0JrWVhSaEtTQjdYRzRnSUdsbUlDaGxjaWtnY21WMGRYSnVJSE4wY21WaGJTNWxiV2wwS0NkbGNuSnZjaWNzSUdWeUtUdGNibHh1SUNCcFppQW9aR0YwWVNBaFBTQnVkV3hzS1NBdkx5QnphVzVuYkdVZ1pYRjFZV3h6SUdOb1pXTnJJR1p2Y2lCaWIzUm9JR0J1ZFd4c1lDQmhibVFnWUhWdVpHVm1hVzVsWkdCY2JpQWdJQ0J6ZEhKbFlXMHVjSFZ6YUNoa1lYUmhLVHRjYmx4dUlDQXZMeUJwWmlCMGFHVnlaU2R6SUc1dmRHaHBibWNnYVc0Z2RHaGxJSGR5YVhSbElHSjFabVpsY2l3Z2RHaGxiaUIwYUdGMElHMWxZVzV6WEc0Z0lDOHZJSFJvWVhRZ2JtOTBhR2x1WnlCdGIzSmxJSGRwYkd3Z1pYWmxjaUJpWlNCd2NtOTJhV1JsWkZ4dUlDQnBaaUFvYzNSeVpXRnRMbDkzY21sMFlXSnNaVk4wWVhSbExteGxibWQwYUNrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkRFlXeHNhVzVuSUhSeVlXNXpabTl5YlNCa2IyNWxJSGRvWlc0Z2QzTXViR1Z1WjNSb0lDRTlJREFuS1R0Y2JseHVJQ0JwWmlBb2MzUnlaV0Z0TGw5MGNtRnVjMlp2Y20xVGRHRjBaUzUwY21GdWMyWnZjbTFwYm1jcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblEyRnNiR2x1WnlCMGNtRnVjMlp2Y20wZ1pHOXVaU0IzYUdWdUlITjBhV3hzSUhSeVlXNXpabTl5YldsdVp5Y3BPMXh1WEc0Z0lISmxkSFZ5YmlCemRISmxZVzB1Y0hWemFDaHVkV3hzS1R0Y2JuMGlMQ0l2THlCRGIzQjVjbWxuYUhRZ1NtOTVaVzUwTENCSmJtTXVJR0Z1WkNCdmRHaGxjaUJPYjJSbElHTnZiblJ5YVdKMWRHOXljeTVjYmk4dlhHNHZMeUJRWlhKdGFYTnphVzl1SUdseklHaGxjbVZpZVNCbmNtRnVkR1ZrTENCbWNtVmxJRzltSUdOb1lYSm5aU3dnZEc4Z1lXNTVJSEJsY25OdmJpQnZZblJoYVc1cGJtY2dZVnh1THk4Z1kyOXdlU0J2WmlCMGFHbHpJSE52Wm5SM1lYSmxJR0Z1WkNCaGMzTnZZMmxoZEdWa0lHUnZZM1Z0Wlc1MFlYUnBiMjRnWm1sc1pYTWdLSFJvWlZ4dUx5OGdYQ0pUYjJaMGQyRnlaVndpS1N3Z2RHOGdaR1ZoYkNCcGJpQjBhR1VnVTI5bWRIZGhjbVVnZDJsMGFHOTFkQ0J5WlhOMGNtbGpkR2x2Yml3Z2FXNWpiSFZrYVc1blhHNHZMeUIzYVhSb2IzVjBJR3hwYldsMFlYUnBiMjRnZEdobElISnBaMmgwY3lCMGJ5QjFjMlVzSUdOdmNIa3NJRzF2WkdsbWVTd2diV1Z5WjJVc0lIQjFZbXhwYzJnc1hHNHZMeUJrYVhOMGNtbGlkWFJsTENCemRXSnNhV05sYm5ObExDQmhibVF2YjNJZ2MyVnNiQ0JqYjNCcFpYTWdiMllnZEdobElGTnZablIzWVhKbExDQmhibVFnZEc4Z2NHVnliV2wwWEc0dkx5QndaWEp6YjI1eklIUnZJSGRvYjIwZ2RHaGxJRk52Wm5SM1lYSmxJR2x6SUdaMWNtNXBjMmhsWkNCMGJ5QmtieUJ6Ynl3Z2MzVmlhbVZqZENCMGJ5QjBhR1ZjYmk4dklHWnZiR3h2ZDJsdVp5QmpiMjVrYVhScGIyNXpPbHh1THk5Y2JpOHZJRlJvWlNCaFltOTJaU0JqYjNCNWNtbG5hSFFnYm05MGFXTmxJR0Z1WkNCMGFHbHpJSEJsY20xcGMzTnBiMjRnYm05MGFXTmxJSE5vWVd4c0lHSmxJR2x1WTJ4MVpHVmtYRzR2THlCcGJpQmhiR3dnWTI5d2FXVnpJRzl5SUhOMVluTjBZVzUwYVdGc0lIQnZjblJwYjI1eklHOW1JSFJvWlNCVGIyWjBkMkZ5WlM1Y2JpOHZYRzR2THlCVVNFVWdVMDlHVkZkQlVrVWdTVk1nVUZKUFZrbEVSVVFnWENKQlV5QkpVMXdpTENCWFNWUklUMVZVSUZkQlVsSkJUbFJaSUU5R0lFRk9XU0JMU1U1RUxDQkZXRkJTUlZOVFhHNHZMeUJQVWlCSlRWQk1TVVZFTENCSlRrTk1WVVJKVGtjZ1FsVlVJRTVQVkNCTVNVMUpWRVZFSUZSUElGUklSU0JYUVZKU1FVNVVTVVZUSUU5R1hHNHZMeUJOUlZKRFNFRk9WRUZDU1V4SlZGa3NJRVpKVkU1RlUxTWdSazlTSUVFZ1VFRlNWRWxEVlV4QlVpQlFWVkpRVDFORklFRk9SQ0JPVDA1SlRrWlNTVTVIUlUxRlRsUXVJRWxPWEc0dkx5Qk9UeUJGVmtWT1ZDQlRTRUZNVENCVVNFVWdRVlZVU0U5U1V5QlBVaUJEVDFCWlVrbEhTRlFnU0U5TVJFVlNVeUJDUlNCTVNVRkNURVVnUms5U0lFRk9XU0JEVEVGSlRTeGNiaTh2SUVSQlRVRkhSVk1nVDFJZ1QxUklSVklnVEVsQlFrbE1TVlJaTENCWFNFVlVTRVZTSUVsT0lFRk9JRUZEVkVsUFRpQlBSaUJEVDA1VVVrRkRWQ3dnVkU5U1ZDQlBVbHh1THk4Z1QxUklSVkpYU1ZORkxDQkJVa2xUU1U1SElFWlNUMDBzSUU5VlZDQlBSaUJQVWlCSlRpQkRUMDVPUlVOVVNVOU9JRmRKVkVnZ1ZFaEZJRk5QUmxSWFFWSkZJRTlTSUZSSVJWeHVMeThnVlZORklFOVNJRTlVU0VWU0lFUkZRVXhKVGtkVElFbE9JRlJJUlNCVFQwWlVWMEZTUlM1Y2JseHVMeThnUVNCaWFYUWdjMmx0Y0d4bGNpQjBhR0Z1SUhKbFlXUmhZbXhsSUhOMGNtVmhiWE11WEc0dkx5QkpiWEJzWlcxbGJuUWdZVzRnWVhONWJtTWdMbDkzY21sMFpTaGphSFZ1YXl3Z1pXNWpiMlJwYm1jc0lHTmlLU3dnWVc1a0lHbDBKMnhzSUdoaGJtUnNaU0JoYkd4Y2JpOHZJSFJvWlNCa2NtRnBiaUJsZG1WdWRDQmxiV2x6YzJsdmJpQmhibVFnWW5WbVptVnlhVzVuTGx4dVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JpOHFQSEpsY0d4aFkyVnRaVzUwUGlvdlhHNWNiblpoY2lCd2JtRWdQU0J5WlhGMWFYSmxLQ2R3Y205alpYTnpMVzVsZUhScFkyc3RZWEpuY3ljcE8xeHVMeW84TDNKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVjNKcGRHRmliR1U3WEc1Y2JpOHFJRHh5WlhCc1lXTmxiV1Z1ZEQ0Z0tpOWNibVoxYm1OMGFXOXVJRmR5YVhSbFVtVnhLR05vZFc1ckxDQmxibU52WkdsdVp5d2dZMklwSUh0Y2JpQWdkR2hwY3k1amFIVnVheUE5SUdOb2RXNXJPMXh1SUNCMGFHbHpMbVZ1WTI5a2FXNW5JRDBnWlc1amIyUnBibWM3WEc0Z0lIUm9hWE11WTJGc2JHSmhZMnNnUFNCallqdGNiaUFnZEdocGN5NXVaWGgwSUQwZ2JuVnNiRHRjYm4xY2JseHVMeThnU1hRZ2MyVmxiWE1nWVNCc2FXNXJaV1FnYkdsemRDQmlkWFFnYVhRZ2FYTWdibTkwWEc0dkx5QjBhR1Z5WlNCM2FXeHNJR0psSUc5dWJIa2dNaUJ2WmlCMGFHVnpaU0JtYjNJZ1pXRmphQ0J6ZEhKbFlXMWNibVoxYm1OMGFXOXVJRU52Y210bFpGSmxjWFZsYzNRb2MzUmhkR1VwSUh0Y2JpQWdkbUZ5SUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNCMGFHbHpMbTVsZUhRZ1BTQnVkV3hzTzF4dUlDQjBhR2x6TG1WdWRISjVJRDBnYm5Wc2JEdGNiaUFnZEdocGN5NW1hVzVwYzJnZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdiMjVEYjNKclpXUkdhVzVwYzJnb1gzUm9hWE1zSUhOMFlYUmxLVHRjYmlBZ2ZUdGNibjFjYmk4cUlEd3ZjbVZ3YkdGalpXMWxiblErSUNvdlhHNWNiaThxUEhKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzUyWVhJZ1lYTjVibU5YY21sMFpTQTlJQ0Z3Y205alpYTnpMbUp5YjNkelpYSWdKaVlnV3lkMk1DNHhNQ2NzSUNkMk1DNDVMaWRkTG1sdVpHVjRUMllvY0hKdlkyVnpjeTUyWlhKemFXOXVMbk5zYVdObEtEQXNJRFVwS1NBK0lDMHhJRDhnYzJWMFNXMXRaV1JwWVhSbElEb2djRzVoTG01bGVIUlVhV05yTzF4dUx5bzhMM0psY0d4aFkyVnRaVzUwUGlvdlhHNWNiaThxUEhKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzUyWVhJZ1JIVndiR1Y0TzF4dUx5bzhMM0psY0d4aFkyVnRaVzUwUGlvdlhHNWNibGR5YVhSaFlteGxMbGR5YVhSaFlteGxVM1JoZEdVZ1BTQlhjbWwwWVdKc1pWTjBZWFJsTzF4dVhHNHZLanh5WlhCc1lXTmxiV1Z1ZEQ0cUwxeHVkbUZ5SUhWMGFXd2dQU0JQWW1wbFkzUXVZM0psWVhSbEtISmxjWFZwY21Vb0oyTnZjbVV0ZFhScGJDMXBjeWNwS1R0Y2JuVjBhV3d1YVc1b1pYSnBkSE1nUFNCeVpYRjFhWEpsS0NkcGJtaGxjbWwwY3ljcE8xeHVMeW84TDNKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzVjYmk4cVBISmxjR3hoWTJWdFpXNTBQaW92WEc1MllYSWdhVzUwWlhKdVlXeFZkR2xzSUQwZ2UxeHVJQ0JrWlhCeVpXTmhkR1U2SUhKbGNYVnBjbVVvSjNWMGFXd3RaR1Z3Y21WallYUmxKeWxjYm4wN1hHNHZLand2Y21Wd2JHRmpaVzFsYm5RK0tpOWNibHh1THlvOGNtVndiR0ZqWlcxbGJuUStLaTljYm5aaGNpQlRkSEpsWVcwZ1BTQnlaWEYxYVhKbEtDY3VMMmx1ZEdWeWJtRnNMM04wY21WaGJYTXZjM1J5WldGdEp5azdYRzR2S2p3dmNtVndiR0ZqWlcxbGJuUStLaTljYmx4dUx5bzhjbVZ3YkdGalpXMWxiblErS2k5Y2JseHVkbUZ5SUVKMVptWmxjaUE5SUhKbGNYVnBjbVVvSjNOaFptVXRZblZtWm1WeUp5a3VRblZtWm1WeU8xeHVkbUZ5SUU5MWNsVnBiblE0UVhKeVlYa2dQU0JuYkc5aVlXd3VWV2x1ZERoQmNuSmhlU0I4ZkNCbWRXNWpkR2x2YmlBb0tTQjdmVHRjYm1aMWJtTjBhVzl1SUY5MWFXNTBPRUZ5Y21GNVZHOUNkV1ptWlhJb1kyaDFibXNwSUh0Y2JpQWdjbVYwZFhKdUlFSjFabVpsY2k1bWNtOXRLR05vZFc1cktUdGNibjFjYm1aMWJtTjBhVzl1SUY5cGMxVnBiblE0UVhKeVlYa29iMkpxS1NCN1hHNGdJSEpsZEhWeWJpQkNkV1ptWlhJdWFYTkNkV1ptWlhJb2IySnFLU0I4ZkNCdlltb2dhVzV6ZEdGdVkyVnZaaUJQZFhKVmFXNTBPRUZ5Y21GNU8xeHVmVnh1WEc0dktqd3ZjbVZ3YkdGalpXMWxiblErS2k5Y2JseHVkbUZ5SUdSbGMzUnliM2xKYlhCc0lEMGdjbVZ4ZFdseVpTZ25MaTlwYm5SbGNtNWhiQzl6ZEhKbFlXMXpMMlJsYzNSeWIza25LVHRjYmx4dWRYUnBiQzVwYm1obGNtbDBjeWhYY21sMFlXSnNaU3dnVTNSeVpXRnRLVHRjYmx4dVpuVnVZM1JwYjI0Z2JtOXdLQ2tnZTMxY2JseHVablZ1WTNScGIyNGdWM0pwZEdGaWJHVlRkR0YwWlNodmNIUnBiMjV6TENCemRISmxZVzBwSUh0Y2JpQWdSSFZ3YkdWNElEMGdSSFZ3YkdWNElIeDhJSEpsY1hWcGNtVW9KeTR2WDNOMGNtVmhiVjlrZFhCc1pYZ25LVHRjYmx4dUlDQnZjSFJwYjI1eklEMGdiM0IwYVc5dWN5QjhmQ0I3ZlR0Y2JseHVJQ0F2THlCRWRYQnNaWGdnYzNSeVpXRnRjeUJoY21VZ1ltOTBhQ0J5WldGa1lXSnNaU0JoYm1RZ2QzSnBkR0ZpYkdVc0lHSjFkQ0J6YUdGeVpWeHVJQ0F2THlCMGFHVWdjMkZ0WlNCdmNIUnBiMjV6SUc5aWFtVmpkQzVjYmlBZ0x5OGdTRzkzWlhabGNpd2djMjl0WlNCallYTmxjeUJ5WlhGMWFYSmxJSE5sZEhScGJtY2diM0IwYVc5dWN5QjBieUJrYVdabVpYSmxiblJjYmlBZ0x5OGdkbUZzZFdWeklHWnZjaUIwYUdVZ2NtVmhaR0ZpYkdVZ1lXNWtJSFJvWlNCM2NtbDBZV0pzWlNCemFXUmxjeUJ2WmlCMGFHVWdaSFZ3YkdWNElITjBjbVZoYlM1Y2JpQWdMeThnVkdobGMyVWdiM0IwYVc5dWN5QmpZVzRnWW1VZ2NISnZkbWxrWldRZ2MyVndZWEpoZEdWc2VTQmhjeUJ5WldGa1lXSnNaVmhZV0NCaGJtUWdkM0pwZEdGaWJHVllXRmd1WEc0Z0lIWmhjaUJwYzBSMWNHeGxlQ0E5SUhOMGNtVmhiU0JwYm5OMFlXNWpaVzltSUVSMWNHeGxlRHRjYmx4dUlDQXZMeUJ2WW1wbFkzUWdjM1J5WldGdElHWnNZV2NnZEc4Z2FXNWthV05oZEdVZ2QyaGxkR2hsY2lCdmNpQnViM1FnZEdocGN5QnpkSEpsWVcxY2JpQWdMeThnWTI5dWRHRnBibk1nWW5WbVptVnljeUJ2Y2lCdlltcGxZM1J6TGx4dUlDQjBhR2x6TG05aWFtVmpkRTF2WkdVZ1BTQWhJVzl3ZEdsdmJuTXViMkpxWldOMFRXOWtaVHRjYmx4dUlDQnBaaUFvYVhORWRYQnNaWGdwSUhSb2FYTXViMkpxWldOMFRXOWtaU0E5SUhSb2FYTXViMkpxWldOMFRXOWtaU0I4ZkNBaElXOXdkR2x2Ym5NdWQzSnBkR0ZpYkdWUFltcGxZM1JOYjJSbE8xeHVYRzRnSUM4dklIUm9aU0J3YjJsdWRDQmhkQ0IzYUdsamFDQjNjbWwwWlNncElITjBZWEowY3lCeVpYUjFjbTVwYm1jZ1ptRnNjMlZjYmlBZ0x5OGdUbTkwWlRvZ01DQnBjeUJoSUhaaGJHbGtJSFpoYkhWbExDQnRaV0Z1Y3lCMGFHRjBJSGRsSUdGc2QyRjVjeUJ5WlhSMWNtNGdabUZzYzJVZ2FXWmNiaUFnTHk4Z2RHaGxJR1Z1ZEdseVpTQmlkV1ptWlhJZ2FYTWdibTkwSUdac2RYTm9aV1FnYVcxdFpXUnBZWFJsYkhrZ2IyNGdkM0pwZEdVb0tWeHVJQ0IyWVhJZ2FIZHRJRDBnYjNCMGFXOXVjeTVvYVdkb1YyRjBaWEpOWVhKck8xeHVJQ0IyWVhJZ2QzSnBkR0ZpYkdWSWQyMGdQU0J2Y0hScGIyNXpMbmR5YVhSaFlteGxTR2xuYUZkaGRHVnlUV0Z5YXp0Y2JpQWdkbUZ5SUdSbFptRjFiSFJJZDIwZ1BTQjBhR2x6TG05aWFtVmpkRTF2WkdVZ1B5QXhOaUE2SURFMklDb2dNVEF5TkR0Y2JseHVJQ0JwWmlBb2FIZHRJSHg4SUdoM2JTQTlQVDBnTUNrZ2RHaHBjeTVvYVdkb1YyRjBaWEpOWVhKcklEMGdhSGR0TzJWc2MyVWdhV1lnS0dselJIVndiR1Y0SUNZbUlDaDNjbWwwWVdKc1pVaDNiU0I4ZkNCM2NtbDBZV0pzWlVoM2JTQTlQVDBnTUNrcElIUm9hWE11YUdsbmFGZGhkR1Z5VFdGeWF5QTlJSGR5YVhSaFlteGxTSGR0TzJWc2MyVWdkR2hwY3k1b2FXZG9WMkYwWlhKTllYSnJJRDBnWkdWbVlYVnNkRWgzYlR0Y2JseHVJQ0F2THlCallYTjBJSFJ2SUdsdWRITXVYRzRnSUhSb2FYTXVhR2xuYUZkaGRHVnlUV0Z5YXlBOUlFMWhkR2d1Wm14dmIzSW9kR2hwY3k1b2FXZG9WMkYwWlhKTllYSnJLVHRjYmx4dUlDQXZMeUJwWmlCZlptbHVZV3dnYUdGeklHSmxaVzRnWTJGc2JHVmtYRzRnSUhSb2FYTXVabWx1WVd4RFlXeHNaV1FnUFNCbVlXeHpaVHRjYmx4dUlDQXZMeUJrY21GcGJpQmxkbVZ1ZENCbWJHRm5MbHh1SUNCMGFHbHpMbTVsWldSRWNtRnBiaUE5SUdaaGJITmxPMXh1SUNBdkx5QmhkQ0IwYUdVZ2MzUmhjblFnYjJZZ1kyRnNiR2x1WnlCbGJtUW9LVnh1SUNCMGFHbHpMbVZ1WkdsdVp5QTlJR1poYkhObE8xeHVJQ0F2THlCM2FHVnVJR1Z1WkNncElHaGhjeUJpWldWdUlHTmhiR3hsWkN3Z1lXNWtJSEpsZEhWeWJtVmtYRzRnSUhSb2FYTXVaVzVrWldRZ1BTQm1ZV3h6WlR0Y2JpQWdMeThnZDJobGJpQW5abWx1YVhOb0p5QnBjeUJsYldsMGRHVmtYRzRnSUhSb2FYTXVabWx1YVhOb1pXUWdQU0JtWVd4elpUdGNibHh1SUNBdkx5Qm9ZWE1nYVhRZ1ltVmxiaUJrWlhOMGNtOTVaV1JjYmlBZ2RHaHBjeTVrWlhOMGNtOTVaV1FnUFNCbVlXeHpaVHRjYmx4dUlDQXZMeUJ6YUc5MWJHUWdkMlVnWkdWamIyUmxJSE4wY21sdVozTWdhVzUwYnlCaWRXWm1aWEp6SUdKbFptOXlaU0J3WVhOemFXNW5JSFJ2SUY5M2NtbDBaVDljYmlBZ0x5OGdkR2hwY3lCcGN5Qm9aWEpsSUhOdklIUm9ZWFFnYzI5dFpTQnViMlJsTFdOdmNtVWdjM1J5WldGdGN5QmpZVzRnYjNCMGFXMXBlbVVnYzNSeWFXNW5YRzRnSUM4dklHaGhibVJzYVc1bklHRjBJR0VnYkc5M1pYSWdiR1YyWld3dVhHNGdJSFpoY2lCdWIwUmxZMjlrWlNBOUlHOXdkR2x2Ym5NdVpHVmpiMlJsVTNSeWFXNW5jeUE5UFQwZ1ptRnNjMlU3WEc0Z0lIUm9hWE11WkdWamIyUmxVM1J5YVc1bmN5QTlJQ0Z1YjBSbFkyOWtaVHRjYmx4dUlDQXZMeUJEY25sd2RHOGdhWE1nYTJsdVpDQnZaaUJ2YkdRZ1lXNWtJR055ZFhOMGVTNGdJRWhwYzNSdmNtbGpZV3hzZVN3Z2FYUnpJR1JsWm1GMWJIUWdjM1J5YVc1blhHNGdJQzh2SUdWdVkyOWthVzVuSUdseklDZGlhVzVoY25rbklITnZJSGRsSUdoaGRtVWdkRzhnYldGclpTQjBhR2x6SUdOdmJtWnBaM1Z5WVdKc1pTNWNiaUFnTHk4Z1JYWmxjbmwwYUdsdVp5QmxiSE5sSUdsdUlIUm9aU0IxYm1sMlpYSnpaU0IxYzJWeklDZDFkR1k0Snl3Z2RHaHZkV2RvTGx4dUlDQjBhR2x6TG1SbFptRjFiSFJGYm1OdlpHbHVaeUE5SUc5d2RHbHZibk11WkdWbVlYVnNkRVZ1WTI5a2FXNW5JSHg4SUNkMWRHWTRKenRjYmx4dUlDQXZMeUJ1YjNRZ1lXNGdZV04wZFdGc0lHSjFabVpsY2lCM1pTQnJaV1Z3SUhSeVlXTnJJRzltTENCaWRYUWdZU0J0WldGemRYSmxiV1Z1ZEZ4dUlDQXZMeUJ2WmlCb2IzY2diWFZqYUNCM1pTZHlaU0IzWVdsMGFXNW5JSFJ2SUdkbGRDQndkWE5vWldRZ2RHOGdjMjl0WlNCMWJtUmxjbXg1YVc1blhHNGdJQzh2SUhOdlkydGxkQ0J2Y2lCbWFXeGxMbHh1SUNCMGFHbHpMbXhsYm1kMGFDQTlJREE3WEc1Y2JpQWdMeThnWVNCbWJHRm5JSFJ2SUhObFpTQjNhR1Z1SUhkbEozSmxJR2x1SUhSb1pTQnRhV1JrYkdVZ2IyWWdZU0IzY21sMFpTNWNiaUFnZEdocGN5NTNjbWwwYVc1bklEMGdabUZzYzJVN1hHNWNiaUFnTHk4Z2QyaGxiaUIwY25WbElHRnNiQ0IzY21sMFpYTWdkMmxzYkNCaVpTQmlkV1ptWlhKbFpDQjFiblJwYkNBdWRXNWpiM0pyS0NrZ1kyRnNiRnh1SUNCMGFHbHpMbU52Y210bFpDQTlJREE3WEc1Y2JpQWdMeThnWVNCbWJHRm5JSFJ2SUdKbElHRmliR1VnZEc4Z2RHVnNiQ0JwWmlCMGFHVWdiMjUzY21sMFpTQmpZaUJwY3lCallXeHNaV1FnYVcxdFpXUnBZWFJsYkhrc1hHNGdJQzh2SUc5eUlHOXVJR0VnYkdGMFpYSWdkR2xqYXk0Z0lGZGxJSE5sZENCMGFHbHpJSFJ2SUhSeWRXVWdZWFFnWm1seWMzUXNJR0psWTJGMWMyVWdZVzU1WEc0Z0lDOHZJR0ZqZEdsdmJuTWdkR2hoZENCemFHOTFiR1J1SjNRZ2FHRndjR1Z1SUhWdWRHbHNJRndpYkdGMFpYSmNJaUJ6YUc5MWJHUWdaMlZ1WlhKaGJHeDVJR0ZzYzI5Y2JpQWdMeThnYm05MElHaGhjSEJsYmlCaVpXWnZjbVVnZEdobElHWnBjbk4wSUhkeWFYUmxJR05oYkd3dVhHNGdJSFJvYVhNdWMzbHVZeUE5SUhSeWRXVTdYRzVjYmlBZ0x5OGdZU0JtYkdGbklIUnZJR3R1YjNjZ2FXWWdkMlVuY21VZ2NISnZZMlZ6YzJsdVp5QndjbVYyYVc5MWMyeDVJR0oxWm1abGNtVmtJR2wwWlcxekxDQjNhR2xqYUZ4dUlDQXZMeUJ0WVhrZ1kyRnNiQ0IwYUdVZ1gzZHlhWFJsS0NrZ1kyRnNiR0poWTJzZ2FXNGdkR2hsSUhOaGJXVWdkR2xqYXl3Z2MyOGdkR2hoZENCM1pTQmtiMjRuZEZ4dUlDQXZMeUJsYm1RZ2RYQWdhVzRnWVc0Z2IzWmxjbXhoY0hCbFpDQnZibmR5YVhSbElITnBkSFZoZEdsdmJpNWNiaUFnZEdocGN5NWlkV1ptWlhKUWNtOWpaWE56YVc1bklEMGdabUZzYzJVN1hHNWNiaUFnTHk4Z2RHaGxJR05oYkd4aVlXTnJJSFJvWVhRbmN5QndZWE56WldRZ2RHOGdYM2R5YVhSbEtHTm9kVzVyTEdOaUtWeHVJQ0IwYUdsekxtOXVkM0pwZEdVZ1BTQm1kVzVqZEdsdmJpQW9aWElwSUh0Y2JpQWdJQ0J2Ym5keWFYUmxLSE4wY21WaGJTd2daWElwTzF4dUlDQjlPMXh1WEc0Z0lDOHZJSFJvWlNCallXeHNZbUZqYXlCMGFHRjBJSFJvWlNCMWMyVnlJSE4xY0hCc2FXVnpJSFJ2SUhkeWFYUmxLR05vZFc1ckxHVnVZMjlrYVc1bkxHTmlLVnh1SUNCMGFHbHpMbmR5YVhSbFkySWdQU0J1ZFd4c08xeHVYRzRnSUM4dklIUm9aU0JoYlc5MWJuUWdkR2hoZENCcGN5QmlaV2x1WnlCM2NtbDBkR1Z1SUhkb1pXNGdYM2R5YVhSbElHbHpJR05oYkd4bFpDNWNiaUFnZEdocGN5NTNjbWwwWld4bGJpQTlJREE3WEc1Y2JpQWdkR2hwY3k1aWRXWm1aWEpsWkZKbGNYVmxjM1FnUFNCdWRXeHNPMXh1SUNCMGFHbHpMbXhoYzNSQ2RXWm1aWEpsWkZKbGNYVmxjM1FnUFNCdWRXeHNPMXh1WEc0Z0lDOHZJRzUxYldKbGNpQnZaaUJ3Wlc1a2FXNW5JSFZ6WlhJdGMzVndjR3hwWldRZ2QzSnBkR1VnWTJGc2JHSmhZMnR6WEc0Z0lDOHZJSFJvYVhNZ2JYVnpkQ0JpWlNBd0lHSmxabTl5WlNBblptbHVhWE5vSnlCallXNGdZbVVnWlcxcGRIUmxaRnh1SUNCMGFHbHpMbkJsYm1ScGJtZGpZaUE5SURBN1hHNWNiaUFnTHk4Z1pXMXBkQ0J3Y21WbWFXNXBjMmdnYVdZZ2RHaGxJRzl1YkhrZ2RHaHBibWNnZDJVbmNtVWdkMkZwZEdsdVp5Qm1iM0lnYVhNZ1gzZHlhWFJsSUdOaWMxeHVJQ0F2THlCVWFHbHpJR2x6SUhKbGJHVjJZVzUwSUdadmNpQnplVzVqYUhKdmJtOTFjeUJVY21GdWMyWnZjbTBnYzNSeVpXRnRjMXh1SUNCMGFHbHpMbkJ5WldacGJtbHphR1ZrSUQwZ1ptRnNjMlU3WEc1Y2JpQWdMeThnVkhKMVpTQnBaaUIwYUdVZ1pYSnliM0lnZDJGeklHRnNjbVZoWkhrZ1pXMXBkSFJsWkNCaGJtUWdjMmh2ZFd4a0lHNXZkQ0JpWlNCMGFISnZkMjRnWVdkaGFXNWNiaUFnZEdocGN5NWxjbkp2Y2tWdGFYUjBaV1FnUFNCbVlXeHpaVHRjYmx4dUlDQXZMeUJqYjNWdWRDQmlkV1ptWlhKbFpDQnlaWEYxWlhOMGMxeHVJQ0IwYUdsekxtSjFabVpsY21Wa1VtVnhkV1Z6ZEVOdmRXNTBJRDBnTUR0Y2JseHVJQ0F2THlCaGJHeHZZMkYwWlNCMGFHVWdabWx5YzNRZ1EyOXlhMlZrVW1WeGRXVnpkQ3dnZEdobGNtVWdhWE1nWVd4M1lYbHpYRzRnSUM4dklHOXVaU0JoYkd4dlkyRjBaV1FnWVc1a0lHWnlaV1VnZEc4Z2RYTmxMQ0JoYm1RZ2QyVWdiV0ZwYm5SaGFXNGdZWFFnYlc5emRDQjBkMjljYmlBZ2RHaHBjeTVqYjNKclpXUlNaWEYxWlhOMGMwWnlaV1VnUFNCdVpYY2dRMjl5YTJWa1VtVnhkV1Z6ZENoMGFHbHpLVHRjYm4xY2JseHVWM0pwZEdGaWJHVlRkR0YwWlM1d2NtOTBiM1I1Y0dVdVoyVjBRblZtWm1WeUlEMGdablZ1WTNScGIyNGdaMlYwUW5WbVptVnlLQ2tnZTF4dUlDQjJZWElnWTNWeWNtVnVkQ0E5SUhSb2FYTXVZblZtWm1WeVpXUlNaWEYxWlhOME8xeHVJQ0IyWVhJZ2IzVjBJRDBnVzEwN1hHNGdJSGRvYVd4bElDaGpkWEp5Wlc1MEtTQjdYRzRnSUNBZ2IzVjBMbkIxYzJnb1kzVnljbVZ1ZENrN1hHNGdJQ0FnWTNWeWNtVnVkQ0E5SUdOMWNuSmxiblF1Ym1WNGREdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2IzVjBPMXh1ZlR0Y2JseHVLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1YzSnBkR0ZpYkdWVGRHRjBaUzV3Y205MGIzUjVjR1VzSUNkaWRXWm1aWEluTENCN1hHNGdJQ0FnSUNCblpYUTZJR2x1ZEdWeWJtRnNWWFJwYkM1a1pYQnlaV05oZEdVb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1blpYUkNkV1ptWlhJb0tUdGNiaUFnSUNBZ0lIMHNJQ2RmZDNKcGRHRmliR1ZUZEdGMFpTNWlkV1ptWlhJZ2FYTWdaR1Z3Y21WallYUmxaQzRnVlhObElGOTNjbWwwWVdKc1pWTjBZWFJsTG1kbGRFSjFabVpsY2lBbklDc2dKMmx1YzNSbFlXUXVKeXdnSjBSRlVEQXdNRE1uS1Z4dUlDQWdJSDBwTzF4dUlDQjlJR05oZEdOb0lDaGZLU0I3ZlZ4dWZTa29LVHRjYmx4dUx5OGdWR1Z6ZENCZmQzSnBkR0ZpYkdWVGRHRjBaU0JtYjNJZ2FXNW9aWEpwZEdGdVkyVWdkRzhnWVdOamIzVnVkQ0JtYjNJZ1JIVndiR1Y0SUhOMGNtVmhiWE1zWEc0dkx5QjNhRzl6WlNCd2NtOTBiM1I1Y0dVZ1kyaGhhVzRnYjI1c2VTQndiMmx1ZEhNZ2RHOGdVbVZoWkdGaWJHVXVYRzUyWVhJZ2NtVmhiRWhoYzBsdWMzUmhibU5sTzF4dWFXWWdLSFI1Y0dWdlppQlRlVzFpYjJ3Z1BUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ1UzbHRZbTlzTG1oaGMwbHVjM1JoYm1ObElDWW1JSFI1Y0dWdlppQkdkVzVqZEdsdmJpNXdjbTkwYjNSNWNHVmJVM2x0WW05c0xtaGhjMGx1YzNSaGJtTmxYU0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNCeVpXRnNTR0Z6U1c1emRHRnVZMlVnUFNCR2RXNWpkR2x2Ymk1d2NtOTBiM1I1Y0dWYlUzbHRZbTlzTG1oaGMwbHVjM1JoYm1ObFhUdGNiaUFnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtGZHlhWFJoWW14bExDQlRlVzFpYjJ3dWFHRnpTVzV6ZEdGdVkyVXNJSHRjYmlBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z0tHOWlhbVZqZENrZ2UxeHVJQ0FnSUNBZ2FXWWdLSEpsWVd4SVlYTkpibk4wWVc1alpTNWpZV3hzS0hSb2FYTXNJRzlpYW1WamRDa3BJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnYVdZZ0tIUm9hWE1nSVQwOUlGZHlhWFJoWW14bEtTQnlaWFIxY200Z1ptRnNjMlU3WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJ2WW1wbFkzUWdKaVlnYjJKcVpXTjBMbDkzY21sMFlXSnNaVk4wWVhSbElHbHVjM1JoYm1ObGIyWWdWM0pwZEdGaWJHVlRkR0YwWlR0Y2JpQWdJQ0I5WEc0Z0lIMHBPMXh1ZlNCbGJITmxJSHRjYmlBZ2NtVmhiRWhoYzBsdWMzUmhibU5sSUQwZ1puVnVZM1JwYjI0Z0tHOWlhbVZqZENrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ2WW1wbFkzUWdhVzV6ZEdGdVkyVnZaaUIwYUdsek8xeHVJQ0I5TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJYY21sMFlXSnNaU2h2Y0hScGIyNXpLU0I3WEc0Z0lFUjFjR3hsZUNBOUlFUjFjR3hsZUNCOGZDQnlaWEYxYVhKbEtDY3VMMTl6ZEhKbFlXMWZaSFZ3YkdWNEp5azdYRzVjYmlBZ0x5OGdWM0pwZEdGaWJHVWdZM1J2Y2lCcGN5QmhjSEJzYVdWa0lIUnZJRVIxY0d4bGVHVnpMQ0IwYjI4dVhHNGdJQzh2SUdCeVpXRnNTR0Z6U1c1emRHRnVZMlZnSUdseklHNWxZMlZ6YzJGeWVTQmlaV05oZFhObElIVnphVzVuSUhCc1lXbHVJR0JwYm5OMFlXNWpaVzltWUZ4dUlDQXZMeUIzYjNWc1pDQnlaWFIxY200Z1ptRnNjMlVzSUdGeklHNXZJR0JmZDNKcGRHRmliR1ZUZEdGMFpXQWdjSEp2Y0dWeWRIa2dhWE1nWVhSMFlXTm9aV1F1WEc1Y2JpQWdMeThnVkhKNWFXNW5JSFJ2SUhWelpTQjBhR1VnWTNWemRHOXRJR0JwYm5OMFlXNWpaVzltWUNCbWIzSWdWM0pwZEdGaWJHVWdhR1Z5WlNCM2FXeHNJR0ZzYzI4Z1luSmxZV3NnZEdobFhHNGdJQzh2SUU1dlpHVXVhbk1nVEdGNmVWUnlZVzV6Wm05eWJTQnBiWEJzWlcxbGJuUmhkR2x2Yml3Z2QyaHBZMmdnYUdGeklHRWdibTl1TFhSeWFYWnBZV3dnWjJWMGRHVnlJR1p2Y2x4dUlDQXZMeUJnWDNkeWFYUmhZbXhsVTNSaGRHVmdJSFJvWVhRZ2QyOTFiR1FnYkdWaFpDQjBieUJwYm1acGJtbDBaU0J5WldOMWNuTnBiMjR1WEc0Z0lHbG1JQ2doY21WaGJFaGhjMGx1YzNSaGJtTmxMbU5oYkd3b1YzSnBkR0ZpYkdVc0lIUm9hWE1wSUNZbUlDRW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlFUjFjR3hsZUNrcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGZHlhWFJoWW14bEtHOXdkR2x2Ym5NcE8xeHVJQ0I5WEc1Y2JpQWdkR2hwY3k1ZmQzSnBkR0ZpYkdWVGRHRjBaU0E5SUc1bGR5QlhjbWwwWVdKc1pWTjBZWFJsS0c5d2RHbHZibk1zSUhSb2FYTXBPMXh1WEc0Z0lDOHZJR3hsWjJGamVTNWNiaUFnZEdocGN5NTNjbWwwWVdKc1pTQTlJSFJ5ZFdVN1hHNWNiaUFnYVdZZ0tHOXdkR2x2Ym5NcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHOXdkR2x2Ym5NdWQzSnBkR1VnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSFJvYVhNdVgzZHlhWFJsSUQwZ2IzQjBhVzl1Y3k1M2NtbDBaVHRjYmx4dUlDQWdJR2xtSUNoMGVYQmxiMllnYjNCMGFXOXVjeTUzY21sMFpYWWdQVDA5SUNkbWRXNWpkR2x2YmljcElIUm9hWE11WDNkeWFYUmxkaUE5SUc5d2RHbHZibk11ZDNKcGRHVjJPMXh1WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ2Y0hScGIyNXpMbVJsYzNSeWIza2dQVDA5SUNkbWRXNWpkR2x2YmljcElIUm9hWE11WDJSbGMzUnliM2tnUFNCdmNIUnBiMjV6TG1SbGMzUnliM2s3WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUc5d2RHbHZibk11Wm1sdVlXd2dQVDA5SUNkbWRXNWpkR2x2YmljcElIUm9hWE11WDJacGJtRnNJRDBnYjNCMGFXOXVjeTVtYVc1aGJEdGNiaUFnZlZ4dVhHNGdJRk4wY21WaGJTNWpZV3hzS0hSb2FYTXBPMXh1ZlZ4dVhHNHZMeUJQZEdobGNuZHBjMlVnY0dWdmNHeGxJR05oYmlCd2FYQmxJRmR5YVhSaFlteGxJSE4wY21WaGJYTXNJSGRvYVdOb0lHbHpJR3AxYzNRZ2QzSnZibWN1WEc1WGNtbDBZV0pzWlM1d2NtOTBiM1I1Y0dVdWNHbHdaU0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnZEdocGN5NWxiV2wwS0NkbGNuSnZjaWNzSUc1bGR5QkZjbkp2Y2lnblEyRnVibTkwSUhCcGNHVXNJRzV2ZENCeVpXRmtZV0pzWlNjcEtUdGNibjA3WEc1Y2JtWjFibU4wYVc5dUlIZHlhWFJsUVdaMFpYSkZibVFvYzNSeVpXRnRMQ0JqWWlrZ2UxeHVJQ0IyWVhJZ1pYSWdQU0J1WlhjZ1JYSnliM0lvSjNkeWFYUmxJR0ZtZEdWeUlHVnVaQ2NwTzF4dUlDQXZMeUJVVDBSUE9pQmtaV1psY2lCbGNuSnZjaUJsZG1WdWRITWdZMjl1YzJsemRHVnVkR3g1SUdWMlpYSjVkMmhsY21Vc0lHNXZkQ0JxZFhOMElIUm9aU0JqWWx4dUlDQnpkSEpsWVcwdVpXMXBkQ2duWlhKeWIzSW5MQ0JsY2lrN1hHNGdJSEJ1WVM1dVpYaDBWR2xqYXloallpd2daWElwTzF4dWZWeHVYRzR2THlCRGFHVmphM01nZEdoaGRDQmhJSFZ6WlhJdGMzVndjR3hwWldRZ1kyaDFibXNnYVhNZ2RtRnNhV1FzSUdWemNHVmphV0ZzYkhrZ1ptOXlJSFJvWlNCd1lYSjBhV04xYkdGeVhHNHZMeUJ0YjJSbElIUm9aU0J6ZEhKbFlXMGdhWE1nYVc0dUlFTjFjbkpsYm5Sc2VTQjBhR2x6SUcxbFlXNXpJSFJvWVhRZ1lHNTFiR3hnSUdseklHNWxkbVZ5SUdGalkyVndkR1ZrWEc0dkx5QmhibVFnZFc1a1pXWnBibVZrTDI1dmJpMXpkSEpwYm1jZ2RtRnNkV1Z6SUdGeVpTQnZibXg1SUdGc2JHOTNaV1FnYVc0Z2IySnFaV04wSUcxdlpHVXVYRzVtZFc1amRHbHZiaUIyWVd4cFpFTm9kVzVyS0hOMGNtVmhiU3dnYzNSaGRHVXNJR05vZFc1ckxDQmpZaWtnZTF4dUlDQjJZWElnZG1Gc2FXUWdQU0IwY25WbE8xeHVJQ0IyWVhJZ1pYSWdQU0JtWVd4elpUdGNibHh1SUNCcFppQW9ZMmgxYm1zZ1BUMDlJRzUxYkd3cElIdGNiaUFnSUNCbGNpQTlJRzVsZHlCVWVYQmxSWEp5YjNJb0owMWhlU0J1YjNRZ2QzSnBkR1VnYm5Wc2JDQjJZV3gxWlhNZ2RHOGdjM1J5WldGdEp5azdYRzRnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUdOb2RXNXJJQ0U5UFNBbmMzUnlhVzVuSnlBbUppQmphSFZ1YXlBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUNGemRHRjBaUzV2WW1wbFkzUk5iMlJsS1NCN1hHNGdJQ0FnWlhJZ1BTQnVaWGNnVkhsd1pVVnljbTl5S0NkSmJuWmhiR2xrSUc1dmJpMXpkSEpwYm1jdlluVm1abVZ5SUdOb2RXNXJKeWs3WEc0Z0lIMWNiaUFnYVdZZ0tHVnlLU0I3WEc0Z0lDQWdjM1J5WldGdExtVnRhWFFvSjJWeWNtOXlKeXdnWlhJcE8xeHVJQ0FnSUhCdVlTNXVaWGgwVkdsamF5aGpZaXdnWlhJcE8xeHVJQ0FnSUhaaGJHbGtJRDBnWm1Gc2MyVTdYRzRnSUgxY2JpQWdjbVYwZFhKdUlIWmhiR2xrTzF4dWZWeHVYRzVYY21sMFlXSnNaUzV3Y205MGIzUjVjR1V1ZDNKcGRHVWdQU0JtZFc1amRHbHZiaUFvWTJoMWJtc3NJR1Z1WTI5a2FXNW5MQ0JqWWlrZ2UxeHVJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbDkzY21sMFlXSnNaVk4wWVhSbE8xeHVJQ0IyWVhJZ2NtVjBJRDBnWm1Gc2MyVTdYRzRnSUhaaGNpQnBjMEoxWmlBOUlDRnpkR0YwWlM1dlltcGxZM1JOYjJSbElDWW1JRjlwYzFWcGJuUTRRWEp5WVhrb1kyaDFibXNwTzF4dVhHNGdJR2xtSUNocGMwSjFaaUFtSmlBaFFuVm1abVZ5TG1selFuVm1abVZ5S0dOb2RXNXJLU2tnZTF4dUlDQWdJR05vZFc1cklEMGdYM1ZwYm5RNFFYSnlZWGxVYjBKMVptWmxjaWhqYUhWdWF5azdYRzRnSUgxY2JseHVJQ0JwWmlBb2RIbHdaVzltSUdWdVkyOWthVzVuSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdZMklnUFNCbGJtTnZaR2x1Wnp0Y2JpQWdJQ0JsYm1OdlpHbHVaeUE5SUc1MWJHdzdYRzRnSUgxY2JseHVJQ0JwWmlBb2FYTkNkV1lwSUdWdVkyOWthVzVuSUQwZ0oySjFabVpsY2ljN1pXeHpaU0JwWmlBb0lXVnVZMjlrYVc1bktTQmxibU52WkdsdVp5QTlJSE4wWVhSbExtUmxabUYxYkhSRmJtTnZaR2x1Wnp0Y2JseHVJQ0JwWmlBb2RIbHdaVzltSUdOaUlDRTlQU0FuWm5WdVkzUnBiMjRuS1NCallpQTlJRzV2Y0R0Y2JseHVJQ0JwWmlBb2MzUmhkR1V1Wlc1a1pXUXBJSGR5YVhSbFFXWjBaWEpGYm1Rb2RHaHBjeXdnWTJJcE8yVnNjMlVnYVdZZ0tHbHpRblZtSUh4OElIWmhiR2xrUTJoMWJtc29kR2hwY3l3Z2MzUmhkR1VzSUdOb2RXNXJMQ0JqWWlrcElIdGNiaUFnSUNCemRHRjBaUzV3Wlc1a2FXNW5ZMklyS3p0Y2JpQWdJQ0J5WlhRZ1BTQjNjbWwwWlU5eVFuVm1abVZ5S0hSb2FYTXNJSE4wWVhSbExDQnBjMEoxWml3Z1kyaDFibXNzSUdWdVkyOWthVzVuTENCallpazdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdjbVYwTzF4dWZUdGNibHh1VjNKcGRHRmliR1V1Y0hKdmRHOTBlWEJsTG1OdmNtc2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSFpoY2lCemRHRjBaU0E5SUhSb2FYTXVYM2R5YVhSaFlteGxVM1JoZEdVN1hHNWNiaUFnYzNSaGRHVXVZMjl5YTJWa0t5czdYRzU5TzF4dVhHNVhjbWwwWVdKc1pTNXdjbTkwYjNSNWNHVXVkVzVqYjNKcklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQjJZWElnYzNSaGRHVWdQU0IwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsTzF4dVhHNGdJR2xtSUNoemRHRjBaUzVqYjNKclpXUXBJSHRjYmlBZ0lDQnpkR0YwWlM1amIzSnJaV1F0TFR0Y2JseHVJQ0FnSUdsbUlDZ2hjM1JoZEdVdWQzSnBkR2x1WnlBbUppQWhjM1JoZEdVdVkyOXlhMlZrSUNZbUlDRnpkR0YwWlM1bWFXNXBjMmhsWkNBbUppQWhjM1JoZEdVdVluVm1abVZ5VUhKdlkyVnpjMmx1WnlBbUppQnpkR0YwWlM1aWRXWm1aWEpsWkZKbGNYVmxjM1FwSUdOc1pXRnlRblZtWm1WeUtIUm9hWE1zSUhOMFlYUmxLVHRjYmlBZ2ZWeHVmVHRjYmx4dVYzSnBkR0ZpYkdVdWNISnZkRzkwZVhCbExuTmxkRVJsWm1GMWJIUkZibU52WkdsdVp5QTlJR1oxYm1OMGFXOXVJSE5sZEVSbFptRjFiSFJGYm1OdlpHbHVaeWhsYm1OdlpHbHVaeWtnZTF4dUlDQXZMeUJ1YjJSbE9qcFFZWEp6WlVWdVkyOWthVzVuS0NrZ2NtVnhkV2x5WlhNZ2JHOTNaWElnWTJGelpTNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCbGJtTnZaR2x1WnlBOVBUMGdKM04wY21sdVp5Y3BJR1Z1WTI5a2FXNW5JRDBnWlc1amIyUnBibWN1ZEc5TWIzZGxja05oYzJVb0tUdGNiaUFnYVdZZ0tDRW9XeWRvWlhnbkxDQW5kWFJtT0Njc0lDZDFkR1l0T0Njc0lDZGhjMk5wYVNjc0lDZGlhVzVoY25rbkxDQW5ZbUZ6WlRZMEp5d2dKM1ZqY3pJbkxDQW5kV056TFRJbkxDQW5kWFJtTVRac1pTY3NJQ2QxZEdZdE1UWnNaU2NzSUNkeVlYY25YUzVwYm1SbGVFOW1LQ2hsYm1OdlpHbHVaeUFySUNjbktTNTBiMHh2ZDJWeVEyRnpaU2dwS1NBK0lDMHhLU2tnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblZXNXJibTkzYmlCbGJtTnZaR2x1WnpvZ0p5QXJJR1Z1WTI5a2FXNW5LVHRjYmlBZ2RHaHBjeTVmZDNKcGRHRmliR1ZUZEdGMFpTNWtaV1poZFd4MFJXNWpiMlJwYm1jZ1BTQmxibU52WkdsdVp6dGNiaUFnY21WMGRYSnVJSFJvYVhNN1hHNTlPMXh1WEc1bWRXNWpkR2x2YmlCa1pXTnZaR1ZEYUhWdWF5aHpkR0YwWlN3Z1kyaDFibXNzSUdWdVkyOWthVzVuS1NCN1hHNGdJR2xtSUNnaGMzUmhkR1V1YjJKcVpXTjBUVzlrWlNBbUppQnpkR0YwWlM1a1pXTnZaR1ZUZEhKcGJtZHpJQ0U5UFNCbVlXeHpaU0FtSmlCMGVYQmxiMllnWTJoMWJtc2dQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnWTJoMWJtc2dQU0JDZFdabVpYSXVabkp2YlNoamFIVnVheXdnWlc1amIyUnBibWNwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJqYUhWdWF6dGNibjFjYmx4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRmR5YVhSaFlteGxMbkJ5YjNSdmRIbHdaU3dnSjNkeWFYUmhZbXhsU0dsbmFGZGhkR1Z5VFdGeWF5Y3NJSHRjYmlBZ0x5OGdiV0ZyYVc1bklHbDBJR1Y0Y0d4cFkybDBJSFJvYVhNZ2NISnZjR1Z5ZEhrZ2FYTWdibTkwSUdWdWRXMWxjbUZpYkdWY2JpQWdMeThnWW1WallYVnpaU0J2ZEdobGNuZHBjMlVnYzI5dFpTQndjbTkwYjNSNWNHVWdiV0Z1YVhCMWJHRjBhVzl1SUdsdVhHNGdJQzh2SUhWelpYSnNZVzVrSUhkcGJHd2dabUZwYkZ4dUlDQmxiblZ0WlhKaFlteGxPaUJtWVd4elpTeGNiaUFnWjJWME9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDNkeWFYUmhZbXhsVTNSaGRHVXVhR2xuYUZkaGRHVnlUV0Z5YXp0Y2JpQWdmVnh1ZlNrN1hHNWNiaTh2SUdsbUlIZGxKM0psSUdGc2NtVmhaSGtnZDNKcGRHbHVaeUJ6YjIxbGRHaHBibWNzSUhSb1pXNGdhblZ6ZENCd2RYUWdkR2hwYzF4dUx5OGdhVzRnZEdobElIRjFaWFZsTENCaGJtUWdkMkZwZENCdmRYSWdkSFZ5Ymk0Z0lFOTBhR1Z5ZDJselpTd2dZMkZzYkNCZmQzSnBkR1ZjYmk4dklFbG1JSGRsSUhKbGRIVnliaUJtWVd4elpTd2dkR2hsYmlCM1pTQnVaV1ZrSUdFZ1pISmhhVzRnWlhabGJuUXNJSE52SUhObGRDQjBhR0YwSUdac1lXY3VYRzVtZFc1amRHbHZiaUIzY21sMFpVOXlRblZtWm1WeUtITjBjbVZoYlN3Z2MzUmhkR1VzSUdselFuVm1MQ0JqYUhWdWF5d2daVzVqYjJScGJtY3NJR05pS1NCN1hHNGdJR2xtSUNnaGFYTkNkV1lwSUh0Y2JpQWdJQ0IyWVhJZ2JtVjNRMmgxYm1zZ1BTQmtaV052WkdWRGFIVnVheWh6ZEdGMFpTd2dZMmgxYm1zc0lHVnVZMjlrYVc1bktUdGNiaUFnSUNCcFppQW9ZMmgxYm1zZ0lUMDlJRzVsZDBOb2RXNXJLU0I3WEc0Z0lDQWdJQ0JwYzBKMVppQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCbGJtTnZaR2x1WnlBOUlDZGlkV1ptWlhJbk8xeHVJQ0FnSUNBZ1kyaDFibXNnUFNCdVpYZERhSFZ1YXp0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnZG1GeUlHeGxiaUE5SUhOMFlYUmxMbTlpYW1WamRFMXZaR1VnUHlBeElEb2dZMmgxYm1zdWJHVnVaM1JvTzF4dVhHNGdJSE4wWVhSbExteGxibWQwYUNBclBTQnNaVzQ3WEc1Y2JpQWdkbUZ5SUhKbGRDQTlJSE4wWVhSbExteGxibWQwYUNBOElITjBZWFJsTG1ocFoyaFhZWFJsY2sxaGNtczdYRzRnSUM4dklIZGxJRzExYzNRZ1pXNXpkWEpsSUhSb1lYUWdjSEpsZG1sdmRYTWdibVZsWkVSeVlXbHVJSGRwYkd3Z2JtOTBJR0psSUhKbGMyVjBJSFJ2SUdaaGJITmxMbHh1SUNCcFppQW9JWEpsZENrZ2MzUmhkR1V1Ym1WbFpFUnlZV2x1SUQwZ2RISjFaVHRjYmx4dUlDQnBaaUFvYzNSaGRHVXVkM0pwZEdsdVp5QjhmQ0J6ZEdGMFpTNWpiM0pyWldRcElIdGNiaUFnSUNCMllYSWdiR0Z6ZENBOUlITjBZWFJsTG14aGMzUkNkV1ptWlhKbFpGSmxjWFZsYzNRN1hHNGdJQ0FnYzNSaGRHVXViR0Z6ZEVKMVptWmxjbVZrVW1WeGRXVnpkQ0E5SUh0Y2JpQWdJQ0FnSUdOb2RXNXJPaUJqYUhWdWF5eGNiaUFnSUNBZ0lHVnVZMjlrYVc1bk9pQmxibU52WkdsdVp5eGNiaUFnSUNBZ0lHbHpRblZtT2lCcGMwSjFaaXhjYmlBZ0lDQWdJR05oYkd4aVlXTnJPaUJqWWl4Y2JpQWdJQ0FnSUc1bGVIUTZJRzUxYkd4Y2JpQWdJQ0I5TzF4dUlDQWdJR2xtSUNoc1lYTjBLU0I3WEc0Z0lDQWdJQ0JzWVhOMExtNWxlSFFnUFNCemRHRjBaUzVzWVhOMFFuVm1abVZ5WldSU1pYRjFaWE4wTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnpkR0YwWlM1aWRXWm1aWEpsWkZKbGNYVmxjM1FnUFNCemRHRjBaUzVzWVhOMFFuVm1abVZ5WldSU1pYRjFaWE4wTzF4dUlDQWdJSDFjYmlBZ0lDQnpkR0YwWlM1aWRXWm1aWEpsWkZKbGNYVmxjM1JEYjNWdWRDQXJQU0F4TzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdSdlYzSnBkR1VvYzNSeVpXRnRMQ0J6ZEdGMFpTd2dabUZzYzJVc0lHeGxiaXdnWTJoMWJtc3NJR1Z1WTI5a2FXNW5MQ0JqWWlrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2NtVjBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmtiMWR5YVhSbEtITjBjbVZoYlN3Z2MzUmhkR1VzSUhkeWFYUmxkaXdnYkdWdUxDQmphSFZ1YXl3Z1pXNWpiMlJwYm1jc0lHTmlLU0I3WEc0Z0lITjBZWFJsTG5keWFYUmxiR1Z1SUQwZ2JHVnVPMXh1SUNCemRHRjBaUzUzY21sMFpXTmlJRDBnWTJJN1hHNGdJSE4wWVhSbExuZHlhWFJwYm1jZ1BTQjBjblZsTzF4dUlDQnpkR0YwWlM1emVXNWpJRDBnZEhKMVpUdGNiaUFnYVdZZ0tIZHlhWFJsZGlrZ2MzUnlaV0Z0TGw5M2NtbDBaWFlvWTJoMWJtc3NJSE4wWVhSbExtOXVkM0pwZEdVcE8yVnNjMlVnYzNSeVpXRnRMbDkzY21sMFpTaGphSFZ1YXl3Z1pXNWpiMlJwYm1jc0lITjBZWFJsTG05dWQzSnBkR1VwTzF4dUlDQnpkR0YwWlM1emVXNWpJRDBnWm1Gc2MyVTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHOXVkM0pwZEdWRmNuSnZjaWh6ZEhKbFlXMHNJSE4wWVhSbExDQnplVzVqTENCbGNpd2dZMklwSUh0Y2JpQWdMUzF6ZEdGMFpTNXdaVzVrYVc1blkySTdYRzVjYmlBZ2FXWWdLSE41Ym1NcElIdGNiaUFnSUNBdkx5QmtaV1psY2lCMGFHVWdZMkZzYkdKaFkyc2dhV1lnZDJVZ1lYSmxJR0psYVc1bklHTmhiR3hsWkNCemVXNWphSEp2Ym05MWMyeDVYRzRnSUNBZ0x5OGdkRzhnWVhadmFXUWdjR2xzYVc1bklIVndJSFJvYVc1bmN5QnZiaUIwYUdVZ2MzUmhZMnRjYmlBZ0lDQndibUV1Ym1WNGRGUnBZMnNvWTJJc0lHVnlLVHRjYmlBZ0lDQXZMeUIwYUdseklHTmhiaUJsYldsMElHWnBibWx6YUN3Z1lXNWtJR2wwSUhkcGJHd2dZV3gzWVhseklHaGhjSEJsYmx4dUlDQWdJQzh2SUdGbWRHVnlJR1Z5Y205eVhHNGdJQ0FnY0c1aExtNWxlSFJVYVdOcktHWnBibWx6YUUxaGVXSmxMQ0J6ZEhKbFlXMHNJSE4wWVhSbEtUdGNiaUFnSUNCemRISmxZVzB1WDNkeWFYUmhZbXhsVTNSaGRHVXVaWEp5YjNKRmJXbDBkR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQnpkSEpsWVcwdVpXMXBkQ2duWlhKeWIzSW5MQ0JsY2lrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ0x5OGdkR2hsSUdOaGJHeGxjaUJsZUhCbFkzUWdkR2hwY3lCMGJ5Qm9ZWEJ3Wlc0Z1ltVm1iM0psSUdsbVhHNGdJQ0FnTHk4Z2FYUWdhWE1nWVhONWJtTmNiaUFnSUNCallpaGxjaWs3WEc0Z0lDQWdjM1J5WldGdExsOTNjbWwwWVdKc1pWTjBZWFJsTG1WeWNtOXlSVzFwZEhSbFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnYzNSeVpXRnRMbVZ0YVhRb0oyVnljbTl5Snl3Z1pYSXBPMXh1SUNBZ0lDOHZJSFJvYVhNZ1kyRnVJR1Z0YVhRZ1ptbHVhWE5vTENCaWRYUWdabWx1YVhOb0lHMTFjM1JjYmlBZ0lDQXZMeUJoYkhkaGVYTWdabTlzYkc5M0lHVnljbTl5WEc0Z0lDQWdabWx1YVhOb1RXRjVZbVVvYzNSeVpXRnRMQ0J6ZEdGMFpTazdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnYjI1M2NtbDBaVk4wWVhSbFZYQmtZWFJsS0hOMFlYUmxLU0I3WEc0Z0lITjBZWFJsTG5keWFYUnBibWNnUFNCbVlXeHpaVHRjYmlBZ2MzUmhkR1V1ZDNKcGRHVmpZaUE5SUc1MWJHdzdYRzRnSUhOMFlYUmxMbXhsYm1kMGFDQXRQU0J6ZEdGMFpTNTNjbWwwWld4bGJqdGNiaUFnYzNSaGRHVXVkM0pwZEdWc1pXNGdQU0F3TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ2Ym5keWFYUmxLSE4wY21WaGJTd2daWElwSUh0Y2JpQWdkbUZ5SUhOMFlYUmxJRDBnYzNSeVpXRnRMbDkzY21sMFlXSnNaVk4wWVhSbE8xeHVJQ0IyWVhJZ2MzbHVZeUE5SUhOMFlYUmxMbk41Ym1NN1hHNGdJSFpoY2lCallpQTlJSE4wWVhSbExuZHlhWFJsWTJJN1hHNWNiaUFnYjI1M2NtbDBaVk4wWVhSbFZYQmtZWFJsS0hOMFlYUmxLVHRjYmx4dUlDQnBaaUFvWlhJcElHOXVkM0pwZEdWRmNuSnZjaWh6ZEhKbFlXMHNJSE4wWVhSbExDQnplVzVqTENCbGNpd2dZMklwTzJWc2MyVWdlMXh1SUNBZ0lDOHZJRU5vWldOcklHbG1JSGRsSjNKbElHRmpkSFZoYkd4NUlISmxZV1I1SUhSdklHWnBibWx6YUN3Z1luVjBJR1J2YmlkMElHVnRhWFFnZVdWMFhHNGdJQ0FnZG1GeUlHWnBibWx6YUdWa0lEMGdibVZsWkVacGJtbHphQ2h6ZEdGMFpTazdYRzVjYmlBZ0lDQnBaaUFvSVdacGJtbHphR1ZrSUNZbUlDRnpkR0YwWlM1amIzSnJaV1FnSmlZZ0lYTjBZWFJsTG1KMVptWmxjbEJ5YjJObGMzTnBibWNnSmlZZ2MzUmhkR1V1WW5WbVptVnlaV1JTWlhGMVpYTjBLU0I3WEc0Z0lDQWdJQ0JqYkdWaGNrSjFabVpsY2loemRISmxZVzBzSUhOMFlYUmxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvYzNsdVl5a2dlMXh1SUNBZ0lDQWdMeW84Y21Wd2JHRmpaVzFsYm5RK0tpOWNiaUFnSUNBZ0lHRnplVzVqVjNKcGRHVW9ZV1owWlhKWGNtbDBaU3dnYzNSeVpXRnRMQ0J6ZEdGMFpTd2dabWx1YVhOb1pXUXNJR05pS1R0Y2JpQWdJQ0FnSUM4cVBDOXlaWEJzWVdObGJXVnVkRDRxTDF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQmhablJsY2xkeWFYUmxLSE4wY21WaGJTd2djM1JoZEdVc0lHWnBibWx6YUdWa0xDQmpZaWs3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdGbWRHVnlWM0pwZEdVb2MzUnlaV0Z0TENCemRHRjBaU3dnWm1sdWFYTm9aV1FzSUdOaUtTQjdYRzRnSUdsbUlDZ2habWx1YVhOb1pXUXBJRzl1ZDNKcGRHVkVjbUZwYmloemRISmxZVzBzSUhOMFlYUmxLVHRjYmlBZ2MzUmhkR1V1Y0dWdVpHbHVaMk5pTFMwN1hHNGdJR05pS0NrN1hHNGdJR1pwYm1semFFMWhlV0psS0hOMGNtVmhiU3dnYzNSaGRHVXBPMXh1ZlZ4dVhHNHZMeUJOZFhOMElHWnZjbU5sSUdOaGJHeGlZV05ySUhSdklHSmxJR05oYkd4bFpDQnZiaUJ1WlhoMFZHbGpheXdnYzI4Z2RHaGhkQ0IzWlNCa2IyNG5kRnh1THk4Z1pXMXBkQ0FuWkhKaGFXNG5JR0psWm05eVpTQjBhR1VnZDNKcGRHVW9LU0JqYjI1emRXMWxjaUJuWlhSeklIUm9aU0FuWm1Gc2MyVW5JSEpsZEhWeWJseHVMeThnZG1Gc2RXVXNJR0Z1WkNCb1lYTWdZU0JqYUdGdVkyVWdkRzhnWVhSMFlXTm9JR0VnSjJSeVlXbHVKeUJzYVhOMFpXNWxjaTVjYm1aMWJtTjBhVzl1SUc5dWQzSnBkR1ZFY21GcGJpaHpkSEpsWVcwc0lITjBZWFJsS1NCN1hHNGdJR2xtSUNoemRHRjBaUzVzWlc1bmRHZ2dQVDA5SURBZ0ppWWdjM1JoZEdVdWJtVmxaRVJ5WVdsdUtTQjdYRzRnSUNBZ2MzUmhkR1V1Ym1WbFpFUnlZV2x1SUQwZ1ptRnNjMlU3WEc0Z0lDQWdjM1J5WldGdExtVnRhWFFvSjJSeVlXbHVKeWs3WEc0Z0lIMWNibjFjYmx4dUx5OGdhV1lnZEdobGNtVW5jeUJ6YjIxbGRHaHBibWNnYVc0Z2RHaGxJR0oxWm1abGNpQjNZV2wwYVc1bkxDQjBhR1Z1SUhCeWIyTmxjM01nYVhSY2JtWjFibU4wYVc5dUlHTnNaV0Z5UW5WbVptVnlLSE4wY21WaGJTd2djM1JoZEdVcElIdGNiaUFnYzNSaGRHVXVZblZtWm1WeVVISnZZMlZ6YzJsdVp5QTlJSFJ5ZFdVN1hHNGdJSFpoY2lCbGJuUnllU0E5SUhOMFlYUmxMbUoxWm1abGNtVmtVbVZ4ZFdWemREdGNibHh1SUNCcFppQW9jM1J5WldGdExsOTNjbWwwWlhZZ0ppWWdaVzUwY25rZ0ppWWdaVzUwY25rdWJtVjRkQ2tnZTF4dUlDQWdJQzh2SUVaaGMzUWdZMkZ6WlN3Z2QzSnBkR1VnWlhabGNubDBhR2x1WnlCMWMybHVaeUJmZDNKcGRHVjJLQ2xjYmlBZ0lDQjJZWElnYkNBOUlITjBZWFJsTG1KMVptWmxjbVZrVW1WeGRXVnpkRU52ZFc1ME8xeHVJQ0FnSUhaaGNpQmlkV1ptWlhJZ1BTQnVaWGNnUVhKeVlYa29iQ2s3WEc0Z0lDQWdkbUZ5SUdodmJHUmxjaUE5SUhOMFlYUmxMbU52Y210bFpGSmxjWFZsYzNSelJuSmxaVHRjYmlBZ0lDQm9iMnhrWlhJdVpXNTBjbmtnUFNCbGJuUnllVHRjYmx4dUlDQWdJSFpoY2lCamIzVnVkQ0E5SURBN1hHNGdJQ0FnZG1GeUlHRnNiRUoxWm1abGNuTWdQU0IwY25WbE8xeHVJQ0FnSUhkb2FXeGxJQ2hsYm5SeWVTa2dlMXh1SUNBZ0lDQWdZblZtWm1WeVcyTnZkVzUwWFNBOUlHVnVkSEo1TzF4dUlDQWdJQ0FnYVdZZ0tDRmxiblJ5ZVM1cGMwSjFaaWtnWVd4c1FuVm1abVZ5Y3lBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnWlc1MGNua2dQU0JsYm5SeWVTNXVaWGgwTzF4dUlDQWdJQ0FnWTI5MWJuUWdLejBnTVR0Y2JpQWdJQ0I5WEc0Z0lDQWdZblZtWm1WeUxtRnNiRUoxWm1abGNuTWdQU0JoYkd4Q2RXWm1aWEp6TzF4dVhHNGdJQ0FnWkc5WGNtbDBaU2h6ZEhKbFlXMHNJSE4wWVhSbExDQjBjblZsTENCemRHRjBaUzVzWlc1bmRHZ3NJR0oxWm1abGNpd2dKeWNzSUdodmJHUmxjaTVtYVc1cGMyZ3BPMXh1WEc0Z0lDQWdMeThnWkc5WGNtbDBaU0JwY3lCaGJHMXZjM1FnWVd4M1lYbHpJR0Z6ZVc1akxDQmtaV1psY2lCMGFHVnpaU0IwYnlCellYWmxJR0VnWW1sMElHOW1JSFJwYldWY2JpQWdJQ0F2THlCaGN5QjBhR1VnYUc5MElIQmhkR2dnWlc1a2N5QjNhWFJvSUdSdlYzSnBkR1ZjYmlBZ0lDQnpkR0YwWlM1d1pXNWthVzVuWTJJckt6dGNiaUFnSUNCemRHRjBaUzVzWVhOMFFuVm1abVZ5WldSU1pYRjFaWE4wSUQwZ2JuVnNiRHRjYmlBZ0lDQnBaaUFvYUc5c1pHVnlMbTVsZUhRcElIdGNiaUFnSUNBZ0lITjBZWFJsTG1OdmNtdGxaRkpsY1hWbGMzUnpSbkpsWlNBOUlHaHZiR1JsY2k1dVpYaDBPMXh1SUNBZ0lDQWdhRzlzWkdWeUxtNWxlSFFnUFNCdWRXeHNPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCemRHRjBaUzVqYjNKclpXUlNaWEYxWlhOMGMwWnlaV1VnUFNCdVpYY2dRMjl5YTJWa1VtVnhkV1Z6ZENoemRHRjBaU2s3WEc0Z0lDQWdmVnh1SUNBZ0lITjBZWFJsTG1KMVptWmxjbVZrVW1WeGRXVnpkRU52ZFc1MElEMGdNRHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0F2THlCVGJHOTNJR05oYzJVc0lIZHlhWFJsSUdOb2RXNXJjeUJ2Ym1VdFlua3RiMjVsWEc0Z0lDQWdkMmhwYkdVZ0tHVnVkSEo1S1NCN1hHNGdJQ0FnSUNCMllYSWdZMmgxYm1zZ1BTQmxiblJ5ZVM1amFIVnVhenRjYmlBZ0lDQWdJSFpoY2lCbGJtTnZaR2x1WnlBOUlHVnVkSEo1TG1WdVkyOWthVzVuTzF4dUlDQWdJQ0FnZG1GeUlHTmlJRDBnWlc1MGNua3VZMkZzYkdKaFkyczdYRzRnSUNBZ0lDQjJZWElnYkdWdUlEMGdjM1JoZEdVdWIySnFaV04wVFc5a1pTQS9JREVnT2lCamFIVnVheTVzWlc1bmRHZzdYRzVjYmlBZ0lDQWdJR1J2VjNKcGRHVW9jM1J5WldGdExDQnpkR0YwWlN3Z1ptRnNjMlVzSUd4bGJpd2dZMmgxYm1zc0lHVnVZMjlrYVc1bkxDQmpZaWs3WEc0Z0lDQWdJQ0JsYm5SeWVTQTlJR1Z1ZEhKNUxtNWxlSFE3WEc0Z0lDQWdJQ0J6ZEdGMFpTNWlkV1ptWlhKbFpGSmxjWFZsYzNSRGIzVnVkQzB0TzF4dUlDQWdJQ0FnTHk4Z2FXWWdkMlVnWkdsa2JpZDBJR05oYkd3Z2RHaGxJRzl1ZDNKcGRHVWdhVzF0WldScFlYUmxiSGtzSUhSb1pXNWNiaUFnSUNBZ0lDOHZJR2wwSUcxbFlXNXpJSFJvWVhRZ2QyVWdibVZsWkNCMGJ5QjNZV2wwSUhWdWRHbHNJR2wwSUdSdlpYTXVYRzRnSUNBZ0lDQXZMeUJoYkhOdkxDQjBhR0YwSUcxbFlXNXpJSFJvWVhRZ2RHaGxJR05vZFc1cklHRnVaQ0JqWWlCaGNtVWdZM1Z5Y21WdWRHeDVYRzRnSUNBZ0lDQXZMeUJpWldsdVp5QndjbTlqWlhOelpXUXNJSE52SUcxdmRtVWdkR2hsSUdKMVptWmxjaUJqYjNWdWRHVnlJSEJoYzNRZ2RHaGxiUzVjYmlBZ0lDQWdJR2xtSUNoemRHRjBaUzUzY21sMGFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hsYm5SeWVTQTlQVDBnYm5Wc2JDa2djM1JoZEdVdWJHRnpkRUoxWm1abGNtVmtVbVZ4ZFdWemRDQTlJRzUxYkd3N1hHNGdJSDFjYmx4dUlDQnpkR0YwWlM1aWRXWm1aWEpsWkZKbGNYVmxjM1FnUFNCbGJuUnllVHRjYmlBZ2MzUmhkR1V1WW5WbVptVnlVSEp2WTJWemMybHVaeUE5SUdaaGJITmxPMXh1ZlZ4dVhHNVhjbWwwWVdKc1pTNXdjbTkwYjNSNWNHVXVYM2R5YVhSbElEMGdablZ1WTNScGIyNGdLR05vZFc1ckxDQmxibU52WkdsdVp5d2dZMklwSUh0Y2JpQWdZMklvYm1WM0lFVnljbTl5S0NkZmQzSnBkR1VvS1NCcGN5QnViM1FnYVcxd2JHVnRaVzUwWldRbktTazdYRzU5TzF4dVhHNVhjbWwwWVdKc1pTNXdjbTkwYjNSNWNHVXVYM2R5YVhSbGRpQTlJRzUxYkd3N1hHNWNibGR5YVhSaFlteGxMbkJ5YjNSdmRIbHdaUzVsYm1RZ1BTQm1kVzVqZEdsdmJpQW9ZMmgxYm1zc0lHVnVZMjlrYVc1bkxDQmpZaWtnZTF4dUlDQjJZWElnYzNSaGRHVWdQU0IwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsTzF4dVhHNGdJR2xtSUNoMGVYQmxiMllnWTJoMWJtc2dQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNCallpQTlJR05vZFc1ck8xeHVJQ0FnSUdOb2RXNXJJRDBnYm5Wc2JEdGNiaUFnSUNCbGJtTnZaR2x1WnlBOUlHNTFiR3c3WEc0Z0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlHVnVZMjlrYVc1bklEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnWTJJZ1BTQmxibU52WkdsdVp6dGNiaUFnSUNCbGJtTnZaR2x1WnlBOUlHNTFiR3c3WEc0Z0lIMWNibHh1SUNCcFppQW9ZMmgxYm1zZ0lUMDlJRzUxYkd3Z0ppWWdZMmgxYm1zZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZEdocGN5NTNjbWwwWlNoamFIVnVheXdnWlc1amIyUnBibWNwTzF4dVhHNGdJQzh2SUM1bGJtUW9LU0JtZFd4c2VTQjFibU52Y210elhHNGdJR2xtSUNoemRHRjBaUzVqYjNKclpXUXBJSHRjYmlBZ0lDQnpkR0YwWlM1amIzSnJaV1FnUFNBeE8xeHVJQ0FnSUhSb2FYTXVkVzVqYjNKcktDazdYRzRnSUgxY2JseHVJQ0F2THlCcFoyNXZjbVVnZFc1dVpXTmxjM05oY25rZ1pXNWtLQ2tnWTJGc2JITXVYRzRnSUdsbUlDZ2hjM1JoZEdVdVpXNWthVzVuSUNZbUlDRnpkR0YwWlM1bWFXNXBjMmhsWkNrZ1pXNWtWM0pwZEdGaWJHVW9kR2hwY3l3Z2MzUmhkR1VzSUdOaUtUdGNibjA3WEc1Y2JtWjFibU4wYVc5dUlHNWxaV1JHYVc1cGMyZ29jM1JoZEdVcElIdGNiaUFnY21WMGRYSnVJSE4wWVhSbExtVnVaR2x1WnlBbUppQnpkR0YwWlM1c1pXNW5kR2dnUFQwOUlEQWdKaVlnYzNSaGRHVXVZblZtWm1WeVpXUlNaWEYxWlhOMElEMDlQU0J1ZFd4c0lDWW1JQ0Z6ZEdGMFpTNW1hVzVwYzJobFpDQW1KaUFoYzNSaGRHVXVkM0pwZEdsdVp6dGNibjFjYm1aMWJtTjBhVzl1SUdOaGJHeEdhVzVoYkNoemRISmxZVzBzSUhOMFlYUmxLU0I3WEc0Z0lITjBjbVZoYlM1ZlptbHVZV3dvWm5WdVkzUnBiMjRnS0dWeWNpa2dlMXh1SUNBZ0lITjBZWFJsTG5CbGJtUnBibWRqWWkwdE8xeHVJQ0FnSUdsbUlDaGxjbklwSUh0Y2JpQWdJQ0FnSUhOMGNtVmhiUzVsYldsMEtDZGxjbkp2Y2ljc0lHVnljaWs3WEc0Z0lDQWdmVnh1SUNBZ0lITjBZWFJsTG5CeVpXWnBibWx6YUdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0J6ZEhKbFlXMHVaVzFwZENnbmNISmxabWx1YVhOb0p5azdYRzRnSUNBZ1ptbHVhWE5vVFdGNVltVW9jM1J5WldGdExDQnpkR0YwWlNrN1hHNGdJSDBwTzF4dWZWeHVablZ1WTNScGIyNGdjSEpsWm1sdWFYTm9LSE4wY21WaGJTd2djM1JoZEdVcElIdGNiaUFnYVdZZ0tDRnpkR0YwWlM1d2NtVm1hVzVwYzJobFpDQW1KaUFoYzNSaGRHVXVabWx1WVd4RFlXeHNaV1FwSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhOMGNtVmhiUzVmWm1sdVlXd2dQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lITjBZWFJsTG5CbGJtUnBibWRqWWlzck8xeHVJQ0FnSUNBZ2MzUmhkR1V1Wm1sdVlXeERZV3hzWldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnY0c1aExtNWxlSFJVYVdOcktHTmhiR3hHYVc1aGJDd2djM1J5WldGdExDQnpkR0YwWlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSE4wWVhSbExuQnlaV1pwYm1semFHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lITjBjbVZoYlM1bGJXbDBLQ2R3Y21WbWFXNXBjMmduS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1ptbHVhWE5vVFdGNVltVW9jM1J5WldGdExDQnpkR0YwWlNrZ2UxeHVJQ0IyWVhJZ2JtVmxaQ0E5SUc1bFpXUkdhVzVwYzJnb2MzUmhkR1VwTzF4dUlDQnBaaUFvYm1WbFpDa2dlMXh1SUNBZ0lIQnlaV1pwYm1semFDaHpkSEpsWVcwc0lITjBZWFJsS1R0Y2JpQWdJQ0JwWmlBb2MzUmhkR1V1Y0dWdVpHbHVaMk5pSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0J6ZEdGMFpTNW1hVzVwYzJobFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCemRISmxZVzB1WlcxcGRDZ25abWx1YVhOb0p5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdVpXVmtPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmxibVJYY21sMFlXSnNaU2h6ZEhKbFlXMHNJSE4wWVhSbExDQmpZaWtnZTF4dUlDQnpkR0YwWlM1bGJtUnBibWNnUFNCMGNuVmxPMXh1SUNCbWFXNXBjMmhOWVhsaVpTaHpkSEpsWVcwc0lITjBZWFJsS1R0Y2JpQWdhV1lnS0dOaUtTQjdYRzRnSUNBZ2FXWWdLSE4wWVhSbExtWnBibWx6YUdWa0tTQndibUV1Ym1WNGRGUnBZMnNvWTJJcE8yVnNjMlVnYzNSeVpXRnRMbTl1WTJVb0oyWnBibWx6YUNjc0lHTmlLVHRjYmlBZ2ZWeHVJQ0J6ZEdGMFpTNWxibVJsWkNBOUlIUnlkV1U3WEc0Z0lITjBjbVZoYlM1M2NtbDBZV0pzWlNBOUlHWmhiSE5sTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ2YmtOdmNtdGxaRVpwYm1semFDaGpiM0pyVW1WeExDQnpkR0YwWlN3Z1pYSnlLU0I3WEc0Z0lIWmhjaUJsYm5SeWVTQTlJR052Y210U1pYRXVaVzUwY25rN1hHNGdJR052Y210U1pYRXVaVzUwY25rZ1BTQnVkV3hzTzF4dUlDQjNhR2xzWlNBb1pXNTBjbmtwSUh0Y2JpQWdJQ0IyWVhJZ1kySWdQU0JsYm5SeWVTNWpZV3hzWW1GamF6dGNiaUFnSUNCemRHRjBaUzV3Wlc1a2FXNW5ZMkl0TFR0Y2JpQWdJQ0JqWWlobGNuSXBPMXh1SUNBZ0lHVnVkSEo1SUQwZ1pXNTBjbmt1Ym1WNGREdGNiaUFnZlZ4dUlDQnBaaUFvYzNSaGRHVXVZMjl5YTJWa1VtVnhkV1Z6ZEhOR2NtVmxLU0I3WEc0Z0lDQWdjM1JoZEdVdVkyOXlhMlZrVW1WeGRXVnpkSE5HY21WbExtNWxlSFFnUFNCamIzSnJVbVZ4TzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhOMFlYUmxMbU52Y210bFpGSmxjWFZsYzNSelJuSmxaU0E5SUdOdmNtdFNaWEU3WEc0Z0lIMWNibjFjYmx4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRmR5YVhSaFlteGxMbkJ5YjNSdmRIbHdaU3dnSjJSbGMzUnliM2xsWkNjc0lIdGNiaUFnWjJWME9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVYM2R5YVhSaFlteGxVM1JoZEdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmQzSnBkR0ZpYkdWVGRHRjBaUzVrWlhOMGNtOTVaV1E3WEc0Z0lIMHNYRzRnSUhObGREb2dablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUNBZ0x5OGdkMlVnYVdkdWIzSmxJSFJvWlNCMllXeDFaU0JwWmlCMGFHVWdjM1J5WldGdFhHNGdJQ0FnTHk4Z2FHRnpJRzV2ZENCaVpXVnVJR2x1YVhScFlXeHBlbVZrSUhsbGRGeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmQzSnBkR0ZpYkdWVGRHRjBaU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJR0poWTJ0M1lYSmtJR052YlhCaGRHbGlhV3hwZEhrc0lIUm9aU0IxYzJWeUlHbHpJR1Y0Y0d4cFkybDBiSGxjYmlBZ0lDQXZMeUJ0WVc1aFoybHVaeUJrWlhOMGNtOTVaV1JjYmlBZ0lDQjBhR2x6TGw5M2NtbDBZV0pzWlZOMFlYUmxMbVJsYzNSeWIzbGxaQ0E5SUhaaGJIVmxPMXh1SUNCOVhHNTlLVHRjYmx4dVYzSnBkR0ZpYkdVdWNISnZkRzkwZVhCbExtUmxjM1J5YjNrZ1BTQmtaWE4wY205NVNXMXdiQzVrWlhOMGNtOTVPMXh1VjNKcGRHRmliR1V1Y0hKdmRHOTBlWEJsTGw5MWJtUmxjM1J5YjNrZ1BTQmtaWE4wY205NVNXMXdiQzUxYm1SbGMzUnliM2s3WEc1WGNtbDBZV0pzWlM1d2NtOTBiM1I1Y0dVdVgyUmxjM1J5YjNrZ1BTQm1kVzVqZEdsdmJpQW9aWEp5TENCallpa2dlMXh1SUNCMGFHbHpMbVZ1WkNncE8xeHVJQ0JqWWlobGNuSXBPMXh1ZlRzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JtWjFibU4wYVc5dUlGOWpiR0Z6YzBOaGJHeERhR1ZqYXlocGJuTjBZVzVqWlN3Z1EyOXVjM1J5ZFdOMGIzSXBJSHNnYVdZZ0tDRW9hVzV6ZEdGdVkyVWdhVzV6ZEdGdVkyVnZaaUJEYjI1emRISjFZM1J2Y2lrcElIc2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWtOaGJtNXZkQ0JqWVd4c0lHRWdZMnhoYzNNZ1lYTWdZU0JtZFc1amRHbHZibHdpS1RzZ2ZTQjlYRzVjYm5aaGNpQkNkV1ptWlhJZ1BTQnlaWEYxYVhKbEtDZHpZV1psTFdKMVptWmxjaWNwTGtKMVptWmxjanRjYm5aaGNpQjFkR2xzSUQwZ2NtVnhkV2x5WlNnbmRYUnBiQ2NwTzF4dVhHNW1kVzVqZEdsdmJpQmpiM0I1UW5WbVptVnlLSE55WXl3Z2RHRnlaMlYwTENCdlptWnpaWFFwSUh0Y2JpQWdjM0pqTG1OdmNIa29kR0Z5WjJWMExDQnZabVp6WlhRcE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnWm5WdVkzUnBiMjRnUW5WbVptVnlUR2x6ZENncElIdGNiaUFnSUNCZlkyeGhjM05EWVd4c1EyaGxZMnNvZEdocGN5d2dRblZtWm1WeVRHbHpkQ2s3WEc1Y2JpQWdJQ0IwYUdsekxtaGxZV1FnUFNCdWRXeHNPMXh1SUNBZ0lIUm9hWE11ZEdGcGJDQTlJRzUxYkd3N1hHNGdJQ0FnZEdocGN5NXNaVzVuZEdnZ1BTQXdPMXh1SUNCOVhHNWNiaUFnUW5WbVptVnlUR2x6ZEM1d2NtOTBiM1I1Y0dVdWNIVnphQ0E5SUdaMWJtTjBhVzl1SUhCMWMyZ29kaWtnZTF4dUlDQWdJSFpoY2lCbGJuUnllU0E5SUhzZ1pHRjBZVG9nZGl3Z2JtVjRkRG9nYm5Wc2JDQjlPMXh1SUNBZ0lHbG1JQ2gwYUdsekxteGxibWQwYUNBK0lEQXBJSFJvYVhNdWRHRnBiQzV1WlhoMElEMGdaVzUwY25rN1pXeHpaU0IwYUdsekxtaGxZV1FnUFNCbGJuUnllVHRjYmlBZ0lDQjBhR2x6TG5SaGFXd2dQU0JsYm5SeWVUdGNiaUFnSUNBckszUm9hWE11YkdWdVozUm9PMXh1SUNCOU8xeHVYRzRnSUVKMVptWmxja3hwYzNRdWNISnZkRzkwZVhCbExuVnVjMmhwWm5RZ1BTQm1kVzVqZEdsdmJpQjFibk5vYVdaMEtIWXBJSHRjYmlBZ0lDQjJZWElnWlc1MGNua2dQU0I3SUdSaGRHRTZJSFlzSUc1bGVIUTZJSFJvYVhNdWFHVmhaQ0I5TzF4dUlDQWdJR2xtSUNoMGFHbHpMbXhsYm1kMGFDQTlQVDBnTUNrZ2RHaHBjeTUwWVdsc0lEMGdaVzUwY25rN1hHNGdJQ0FnZEdocGN5NW9aV0ZrSUQwZ1pXNTBjbms3WEc0Z0lDQWdLeXQwYUdsekxteGxibWQwYUR0Y2JpQWdmVHRjYmx4dUlDQkNkV1ptWlhKTWFYTjBMbkJ5YjNSdmRIbHdaUzV6YUdsbWRDQTlJR1oxYm1OMGFXOXVJSE5vYVdaMEtDa2dlMXh1SUNBZ0lHbG1JQ2gwYUdsekxteGxibWQwYUNBOVBUMGdNQ2tnY21WMGRYSnVPMXh1SUNBZ0lIWmhjaUJ5WlhRZ1BTQjBhR2x6TG1obFlXUXVaR0YwWVR0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVzWlc1bmRHZ2dQVDA5SURFcElIUm9hWE11YUdWaFpDQTlJSFJvYVhNdWRHRnBiQ0E5SUc1MWJHdzdaV3h6WlNCMGFHbHpMbWhsWVdRZ1BTQjBhR2x6TG1obFlXUXVibVY0ZER0Y2JpQWdJQ0F0TFhSb2FYTXViR1Z1WjNSb08xeHVJQ0FnSUhKbGRIVnliaUJ5WlhRN1hHNGdJSDA3WEc1Y2JpQWdRblZtWm1WeVRHbHpkQzV3Y205MGIzUjVjR1V1WTJ4bFlYSWdQU0JtZFc1amRHbHZiaUJqYkdWaGNpZ3BJSHRjYmlBZ0lDQjBhR2x6TG1obFlXUWdQU0IwYUdsekxuUmhhV3dnUFNCdWRXeHNPMXh1SUNBZ0lIUm9hWE11YkdWdVozUm9JRDBnTUR0Y2JpQWdmVHRjYmx4dUlDQkNkV1ptWlhKTWFYTjBMbkJ5YjNSdmRIbHdaUzVxYjJsdUlEMGdablZ1WTNScGIyNGdhbTlwYmloektTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWJHVnVaM1JvSUQwOVBTQXdLU0J5WlhSMWNtNGdKeWM3WEc0Z0lDQWdkbUZ5SUhBZ1BTQjBhR2x6TG1obFlXUTdYRzRnSUNBZ2RtRnlJSEpsZENBOUlDY25JQ3NnY0M1a1lYUmhPMXh1SUNBZ0lIZG9hV3hsSUNod0lEMGdjQzV1WlhoMEtTQjdYRzRnSUNBZ0lDQnlaWFFnS3owZ2N5QXJJSEF1WkdGMFlUdGNiaUFnSUNCOWNtVjBkWEp1SUhKbGREdGNiaUFnZlR0Y2JseHVJQ0JDZFdabVpYSk1hWE4wTG5CeWIzUnZkSGx3WlM1amIyNWpZWFFnUFNCbWRXNWpkR2x2YmlCamIyNWpZWFFvYmlrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG14bGJtZDBhQ0E5UFQwZ01Da2djbVYwZFhKdUlFSjFabVpsY2k1aGJHeHZZeWd3S1R0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVzWlc1bmRHZ2dQVDA5SURFcElISmxkSFZ5YmlCMGFHbHpMbWhsWVdRdVpHRjBZVHRjYmlBZ0lDQjJZWElnY21WMElEMGdRblZtWm1WeUxtRnNiRzlqVlc1ellXWmxLRzRnUGo0K0lEQXBPMXh1SUNBZ0lIWmhjaUJ3SUQwZ2RHaHBjeTVvWldGa08xeHVJQ0FnSUhaaGNpQnBJRDBnTUR0Y2JpQWdJQ0IzYUdsc1pTQW9jQ2tnZTF4dUlDQWdJQ0FnWTI5d2VVSjFabVpsY2lod0xtUmhkR0VzSUhKbGRDd2dhU2s3WEc0Z0lDQWdJQ0JwSUNzOUlIQXVaR0YwWVM1c1pXNW5kR2c3WEc0Z0lDQWdJQ0J3SUQwZ2NDNXVaWGgwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2NtVjBPMXh1SUNCOU8xeHVYRzRnSUhKbGRIVnliaUJDZFdabVpYSk1hWE4wTzF4dWZTZ3BPMXh1WEc1cFppQW9kWFJwYkNBbUppQjFkR2xzTG1sdWMzQmxZM1FnSmlZZ2RYUnBiQzVwYm5Od1pXTjBMbU4xYzNSdmJTa2dlMXh1SUNCdGIyUjFiR1V1Wlhod2IzSjBjeTV3Y205MGIzUjVjR1ZiZFhScGJDNXBibk53WldOMExtTjFjM1J2YlYwZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkbUZ5SUc5aWFpQTlJSFYwYVd3dWFXNXpjR1ZqZENoN0lHeGxibWQwYURvZ2RHaHBjeTVzWlc1bmRHZ2dmU2s3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WTI5dWMzUnlkV04wYjNJdWJtRnRaU0FySUNjZ0p5QXJJRzlpYWp0Y2JpQWdmVHRjYm4waUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JpOHFQSEpsY0d4aFkyVnRaVzUwUGlvdlhHNWNiblpoY2lCd2JtRWdQU0J5WlhGMWFYSmxLQ2R3Y205alpYTnpMVzVsZUhScFkyc3RZWEpuY3ljcE8xeHVMeW84TDNKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzVjYmk4dklIVnVaRzlqZFcxbGJuUmxaQ0JqWWlncElFRlFTU3dnYm1WbFpHVmtJR1p2Y2lCamIzSmxMQ0J1YjNRZ1ptOXlJSEIxWW14cFl5QkJVRWxjYm1aMWJtTjBhVzl1SUdSbGMzUnliM2tvWlhKeUxDQmpZaWtnZTF4dUlDQjJZWElnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUhaaGNpQnlaV0ZrWVdKc1pVUmxjM1J5YjNsbFpDQTlJSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1VnSmlZZ2RHaHBjeTVmY21WaFpHRmliR1ZUZEdGMFpTNWtaWE4wY205NVpXUTdYRzRnSUhaaGNpQjNjbWwwWVdKc1pVUmxjM1J5YjNsbFpDQTlJSFJvYVhNdVgzZHlhWFJoWW14bFUzUmhkR1VnSmlZZ2RHaHBjeTVmZDNKcGRHRmliR1ZUZEdGMFpTNWtaWE4wY205NVpXUTdYRzVjYmlBZ2FXWWdLSEpsWVdSaFlteGxSR1Z6ZEhKdmVXVmtJSHg4SUhkeWFYUmhZbXhsUkdWemRISnZlV1ZrS1NCN1hHNGdJQ0FnYVdZZ0tHTmlLU0I3WEc0Z0lDQWdJQ0JqWWlobGNuSXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9aWEp5SUNZbUlDZ2hkR2hwY3k1ZmQzSnBkR0ZpYkdWVGRHRjBaU0I4ZkNBaGRHaHBjeTVmZDNKcGRHRmliR1ZUZEdGMFpTNWxjbkp2Y2tWdGFYUjBaV1FwS1NCN1hHNGdJQ0FnSUNCd2JtRXVibVY0ZEZScFkyc29aVzFwZEVWeWNtOXlUbFFzSUhSb2FYTXNJR1Z5Y2lrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQjlYRzVjYmlBZ0x5OGdkMlVnYzJWMElHUmxjM1J5YjNsbFpDQjBieUIwY25WbElHSmxabTl5WlNCbWFYSnBibWNnWlhKeWIzSWdZMkZzYkdKaFkydHpJR2x1SUc5eVpHVnlYRzRnSUM4dklIUnZJRzFoYTJVZ2FYUWdjbVV0Wlc1MGNtRnVZMlVnYzJGbVpTQnBiaUJqWVhObElHUmxjM1J5YjNrb0tTQnBjeUJqWVd4c1pXUWdkMmwwYUdsdUlHTmhiR3hpWVdOcmMxeHVYRzRnSUdsbUlDaDBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxLU0I3WEc0Z0lDQWdkR2hwY3k1ZmNtVmhaR0ZpYkdWVGRHRjBaUzVrWlhOMGNtOTVaV1FnUFNCMGNuVmxPMXh1SUNCOVhHNWNiaUFnTHk4Z2FXWWdkR2hwY3lCcGN5QmhJR1IxY0d4bGVDQnpkSEpsWVcwZ2JXRnlheUIwYUdVZ2QzSnBkR0ZpYkdVZ2NHRnlkQ0JoY3lCa1pYTjBjbTk1WldRZ1lYTWdkMlZzYkZ4dUlDQnBaaUFvZEdocGN5NWZkM0pwZEdGaWJHVlRkR0YwWlNrZ2UxeHVJQ0FnSUhSb2FYTXVYM2R5YVhSaFlteGxVM1JoZEdVdVpHVnpkSEp2ZVdWa0lEMGdkSEoxWlR0Y2JpQWdmVnh1WEc0Z0lIUm9hWE11WDJSbGMzUnliM2tvWlhKeUlIeDhJRzUxYkd3c0lHWjFibU4wYVc5dUlDaGxjbklwSUh0Y2JpQWdJQ0JwWmlBb0lXTmlJQ1ltSUdWeWNpa2dlMXh1SUNBZ0lDQWdjRzVoTG01bGVIUlVhV05yS0dWdGFYUkZjbkp2Y2s1VUxDQmZkR2hwY3l3Z1pYSnlLVHRjYmlBZ0lDQWdJR2xtSUNoZmRHaHBjeTVmZDNKcGRHRmliR1ZUZEdGMFpTa2dlMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NWZkM0pwZEdGaWJHVlRkR0YwWlM1bGNuSnZja1Z0YVhSMFpXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1kySXBJSHRjYmlBZ0lDQWdJR05pS0dWeWNpazdYRzRnSUNBZ2ZWeHVJQ0I5S1R0Y2JseHVJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnZFc1a1pYTjBjbTk1S0NrZ2UxeHVJQ0JwWmlBb2RHaHBjeTVmY21WaFpHRmliR1ZUZEdGMFpTa2dlMXh1SUNBZ0lIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVXVaR1Z6ZEhKdmVXVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ2RHaHBjeTVmY21WaFpHRmliR1ZUZEdGMFpTNXlaV0ZrYVc1bklEMGdabUZzYzJVN1hHNGdJQ0FnZEdocGN5NWZjbVZoWkdGaWJHVlRkR0YwWlM1bGJtUmxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVXVaVzVrUlcxcGRIUmxaQ0E5SUdaaGJITmxPMXh1SUNCOVhHNWNiaUFnYVdZZ0tIUm9hWE11WDNkeWFYUmhZbXhsVTNSaGRHVXBJSHRjYmlBZ0lDQjBhR2x6TGw5M2NtbDBZV0pzWlZOMFlYUmxMbVJsYzNSeWIzbGxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lIUm9hWE11WDNkeWFYUmhZbXhsVTNSaGRHVXVaVzVrWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0IwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsTG1WdVpHbHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lIUm9hWE11WDNkeWFYUmhZbXhsVTNSaGRHVXVabWx1YVhOb1pXUWdQU0JtWVd4elpUdGNiaUFnSUNCMGFHbHpMbDkzY21sMFlXSnNaVk4wWVhSbExtVnljbTl5UlcxcGRIUmxaQ0E5SUdaaGJITmxPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdWdGFYUkZjbkp2Y2s1VUtITmxiR1lzSUdWeWNpa2dlMXh1SUNCelpXeG1MbVZ0YVhRb0oyVnljbTl5Snl3Z1pYSnlLVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdYRzRnSUdSbGMzUnliM2s2SUdSbGMzUnliM2tzWEc0Z0lIVnVaR1Z6ZEhKdmVUb2dkVzVrWlhOMGNtOTVYRzU5T3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnblpYWmxiblJ6SnlrdVJYWmxiblJGYldsMGRHVnlPMXh1SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1cFppQW9kSGx3Wlc5bUlIQnliMk5sYzNNZ1BUMDlJQ2QxYm1SbFptbHVaV1FuSUh4OFhHNGdJQ0FnSVhCeWIyTmxjM011ZG1WeWMybHZiaUI4ZkZ4dUlDQWdJSEJ5YjJObGMzTXVkbVZ5YzJsdmJpNXBibVJsZUU5bUtDZDJNQzRuS1NBOVBUMGdNQ0I4ZkZ4dUlDQWdJSEJ5YjJObGMzTXVkbVZ5YzJsdmJpNXBibVJsZUU5bUtDZDJNUzRuS1NBOVBUMGdNQ0FtSmlCd2NtOWpaWE56TG5abGNuTnBiMjR1YVc1a1pYaFBaaWduZGpFdU9DNG5LU0FoUFQwZ01Da2dlMXh1SUNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhzZ2JtVjRkRlJwWTJzNklHNWxlSFJVYVdOcklIMDdYRzU5SUdWc2MyVWdlMXh1SUNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhCeWIyTmxjM05jYm4xY2JseHVablZ1WTNScGIyNGdibVY0ZEZScFkyc29abTRzSUdGeVp6RXNJR0Z5WnpJc0lHRnlaek1wSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJtYmlBaFBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjF3aVkyRnNiR0poWTJ0Y0lpQmhjbWQxYldWdWRDQnRkWE4wSUdKbElHRWdablZ1WTNScGIyNG5LVHRjYmlBZ2ZWeHVJQ0IyWVhJZ2JHVnVJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHRjYmlBZ2RtRnlJR0Z5WjNNc0lHazdYRzRnSUhOM2FYUmphQ0FvYkdWdUtTQjdYRzRnSUdOaGMyVWdNRHBjYmlBZ1kyRnpaU0F4T2x4dUlDQWdJSEpsZEhWeWJpQndjbTlqWlhOekxtNWxlSFJVYVdOcktHWnVLVHRjYmlBZ1kyRnpaU0F5T2x4dUlDQWdJSEpsZEhWeWJpQndjbTlqWlhOekxtNWxlSFJVYVdOcktHWjFibU4wYVc5dUlHRm1kR1Z5VkdsamEwOXVaU2dwSUh0Y2JpQWdJQ0FnSUdadUxtTmhiR3dvYm5Wc2JDd2dZWEpuTVNrN1hHNGdJQ0FnZlNrN1hHNGdJR05oYzJVZ016cGNiaUFnSUNCeVpYUjFjbTRnY0hKdlkyVnpjeTV1WlhoMFZHbGpheWhtZFc1amRHbHZiaUJoWm5SbGNsUnBZMnRVZDI4b0tTQjdYRzRnSUNBZ0lDQm1iaTVqWVd4c0tHNTFiR3dzSUdGeVp6RXNJR0Z5WnpJcE8xeHVJQ0FnSUgwcE8xeHVJQ0JqWVhObElEUTZYRzRnSUNBZ2NtVjBkWEp1SUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWm5WdVkzUnBiMjRnWVdaMFpYSlVhV05yVkdoeVpXVW9LU0I3WEc0Z0lDQWdJQ0JtYmk1allXeHNLRzUxYkd3c0lHRnlaekVzSUdGeVp6SXNJR0Z5WnpNcE8xeHVJQ0FnSUgwcE8xeHVJQ0JrWldaaGRXeDBPbHh1SUNBZ0lHRnlaM01nUFNCdVpYY2dRWEp5WVhrb2JHVnVJQzBnTVNrN1hHNGdJQ0FnYVNBOUlEQTdYRzRnSUNBZ2QyaHBiR1VnS0drZ1BDQmhjbWR6TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnWVhKbmMxdHBLeXRkSUQwZ1lYSm5kVzFsYm5SelcybGRPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnY0hKdlkyVnpjeTV1WlhoMFZHbGpheWhtZFc1amRHbHZiaUJoWm5SbGNsUnBZMnNvS1NCN1hHNGdJQ0FnSUNCbWJpNWhjSEJzZVNodWRXeHNMQ0JoY21kektUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dWZWeHVYRzRpTENJdktpQmxjMnhwYm5RdFpHbHpZV0pzWlNCdWIyUmxMMjV2TFdSbGNISmxZMkYwWldRdFlYQnBJQ292WEc1MllYSWdZblZtWm1WeUlEMGdjbVZ4ZFdseVpTZ25ZblZtWm1WeUp5bGNiblpoY2lCQ2RXWm1aWElnUFNCaWRXWm1aWEl1UW5WbVptVnlYRzVjYmk4dklHRnNkR1Z5Ym1GMGFYWmxJSFJ2SUhWemFXNW5JRTlpYW1WamRDNXJaWGx6SUdadmNpQnZiR1FnWW5KdmQzTmxjbk5jYm1aMWJtTjBhVzl1SUdOdmNIbFFjbTl3Y3lBb2MzSmpMQ0JrYzNRcElIdGNiaUFnWm05eUlDaDJZWElnYTJWNUlHbHVJSE55WXlrZ2UxeHVJQ0FnSUdSemRGdHJaWGxkSUQwZ2MzSmpXMnRsZVYxY2JpQWdmVnh1ZlZ4dWFXWWdLRUoxWm1abGNpNW1jbTl0SUNZbUlFSjFabVpsY2k1aGJHeHZZeUFtSmlCQ2RXWm1aWEl1WVd4c2IyTlZibk5oWm1VZ0ppWWdRblZtWm1WeUxtRnNiRzlqVlc1ellXWmxVMnh2ZHlrZ2UxeHVJQ0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR0oxWm1abGNseHVmU0JsYkhObElIdGNiaUFnTHk4Z1EyOXdlU0J3Y205d1pYSjBhV1Z6SUdaeWIyMGdjbVZ4ZFdseVpTZ25ZblZtWm1WeUp5bGNiaUFnWTI5d2VWQnliM0J6S0dKMVptWmxjaXdnWlhod2IzSjBjeWxjYmlBZ1pYaHdiM0owY3k1Q2RXWm1aWElnUFNCVFlXWmxRblZtWm1WeVhHNTlYRzVjYm1aMWJtTjBhVzl1SUZOaFptVkNkV1ptWlhJZ0tHRnlaeXdnWlc1amIyUnBibWRQY2s5bVpuTmxkQ3dnYkdWdVozUm9LU0I3WEc0Z0lISmxkSFZ5YmlCQ2RXWm1aWElvWVhKbkxDQmxibU52WkdsdVowOXlUMlptYzJWMExDQnNaVzVuZEdncFhHNTlYRzVjYmk4dklFTnZjSGtnYzNSaGRHbGpJRzFsZEdodlpITWdabkp2YlNCQ2RXWm1aWEpjYm1OdmNIbFFjbTl3Y3loQ2RXWm1aWElzSUZOaFptVkNkV1ptWlhJcFhHNWNibE5oWm1WQ2RXWm1aWEl1Wm5KdmJTQTlJR1oxYm1OMGFXOXVJQ2hoY21jc0lHVnVZMjlrYVc1blQzSlBabVp6WlhRc0lHeGxibWQwYUNrZ2UxeHVJQ0JwWmlBb2RIbHdaVzltSUdGeVp5QTlQVDBnSjI1MWJXSmxjaWNwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkQmNtZDFiV1Z1ZENCdGRYTjBJRzV2ZENCaVpTQmhJRzUxYldKbGNpY3BYRzRnSUgxY2JpQWdjbVYwZFhKdUlFSjFabVpsY2loaGNtY3NJR1Z1WTI5a2FXNW5UM0pQWm1aelpYUXNJR3hsYm1kMGFDbGNibjFjYmx4dVUyRm1aVUoxWm1abGNpNWhiR3h2WXlBOUlHWjFibU4wYVc5dUlDaHphWHBsTENCbWFXeHNMQ0JsYm1OdlpHbHVaeWtnZTF4dUlDQnBaaUFvZEhsd1pXOW1JSE5wZW1VZ0lUMDlJQ2R1ZFcxaVpYSW5LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduUVhKbmRXMWxiblFnYlhWemRDQmlaU0JoSUc1MWJXSmxjaWNwWEc0Z0lIMWNiaUFnZG1GeUlHSjFaaUE5SUVKMVptWmxjaWh6YVhwbEtWeHVJQ0JwWmlBb1ptbHNiQ0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQmxibU52WkdsdVp5QTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0FnSUdKMVppNW1hV3hzS0dacGJHd3NJR1Z1WTI5a2FXNW5LVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCaWRXWXVabWxzYkNobWFXeHNLVnh1SUNBZ0lIMWNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQmlkV1l1Wm1sc2JDZ3dLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQmlkV1pjYm4xY2JseHVVMkZtWlVKMVptWmxjaTVoYkd4dlkxVnVjMkZtWlNBOUlHWjFibU4wYVc5dUlDaHphWHBsS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnYzJsNlpTQWhQVDBnSjI1MWJXSmxjaWNwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkQmNtZDFiV1Z1ZENCdGRYTjBJR0psSUdFZ2JuVnRZbVZ5SnlsY2JpQWdmVnh1SUNCeVpYUjFjbTRnUW5WbVptVnlLSE5wZW1VcFhHNTlYRzVjYmxOaFptVkNkV1ptWlhJdVlXeHNiMk5WYm5OaFptVlRiRzkzSUQwZ1puVnVZM1JwYjI0Z0tITnBlbVVwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJ6YVhwbElDRTlQU0FuYm5WdFltVnlKeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjBGeVozVnRaVzUwSUcxMWMzUWdZbVVnWVNCdWRXMWlaWEluS1Z4dUlDQjlYRzRnSUhKbGRIVnliaUJpZFdabVpYSXVVMnh2ZDBKMVptWmxjaWh6YVhwbEtWeHVmVnh1SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRXB2ZVdWdWRDd2dTVzVqTGlCaGJtUWdiM1JvWlhJZ1RtOWtaU0JqYjI1MGNtbGlkWFJ2Y25NdVhHNHZMMXh1THk4Z1VHVnliV2x6YzJsdmJpQnBjeUJvWlhKbFlua2daM0poYm5SbFpDd2dabkpsWlNCdlppQmphR0Z5WjJVc0lIUnZJR0Z1ZVNCd1pYSnpiMjRnYjJKMFlXbHVhVzVuSUdGY2JpOHZJR052Y0hrZ2IyWWdkR2hwY3lCemIyWjBkMkZ5WlNCaGJtUWdZWE56YjJOcFlYUmxaQ0JrYjJOMWJXVnVkR0YwYVc5dUlHWnBiR1Z6SUNoMGFHVmNiaTh2SUZ3aVUyOW1kSGRoY21WY0lpa3NJSFJ2SUdSbFlXd2dhVzRnZEdobElGTnZablIzWVhKbElIZHBkR2h2ZFhRZ2NtVnpkSEpwWTNScGIyNHNJR2x1WTJ4MVpHbHVaMXh1THk4Z2QybDBhRzkxZENCc2FXMXBkR0YwYVc5dUlIUm9aU0J5YVdkb2RITWdkRzhnZFhObExDQmpiM0I1TENCdGIyUnBabmtzSUcxbGNtZGxMQ0J3ZFdKc2FYTm9MRnh1THk4Z1pHbHpkSEpwWW5WMFpTd2djM1ZpYkdsalpXNXpaU3dnWVc1a0wyOXlJSE5sYkd3Z1kyOXdhV1Z6SUc5bUlIUm9aU0JUYjJaMGQyRnlaU3dnWVc1a0lIUnZJSEJsY20xcGRGeHVMeThnY0dWeWMyOXVjeUIwYnlCM2FHOXRJSFJvWlNCVGIyWjBkMkZ5WlNCcGN5Qm1kWEp1YVhOb1pXUWdkRzhnWkc4Z2MyOHNJSE4xWW1wbFkzUWdkRzhnZEdobFhHNHZMeUJtYjJ4c2IzZHBibWNnWTI5dVpHbDBhVzl1Y3pwY2JpOHZYRzR2THlCVWFHVWdZV0p2ZG1VZ1kyOXdlWEpwWjJoMElHNXZkR2xqWlNCaGJtUWdkR2hwY3lCd1pYSnRhWE56YVc5dUlHNXZkR2xqWlNCemFHRnNiQ0JpWlNCcGJtTnNkV1JsWkZ4dUx5OGdhVzRnWVd4c0lHTnZjR2xsY3lCdmNpQnpkV0p6ZEdGdWRHbGhiQ0J3YjNKMGFXOXVjeUJ2WmlCMGFHVWdVMjltZEhkaGNtVXVYRzR2TDF4dUx5OGdWRWhGSUZOUFJsUlhRVkpGSUVsVElGQlNUMVpKUkVWRUlGd2lRVk1nU1ZOY0lpd2dWMGxVU0U5VlZDQlhRVkpTUVU1VVdTQlBSaUJCVGxrZ1MwbE9SQ3dnUlZoUVVrVlRVMXh1THk4Z1QxSWdTVTFRVEVsRlJDd2dTVTVEVEZWRVNVNUhJRUpWVkNCT1QxUWdURWxOU1ZSRlJDQlVUeUJVU0VVZ1YwRlNVa0ZPVkVsRlV5QlBSbHh1THk4Z1RVVlNRMGhCVGxSQlFrbE1TVlJaTENCR1NWUk9SVk5USUVaUFVpQkJJRkJCVWxSSlExVk1RVklnVUZWU1VFOVRSU0JCVGtRZ1RrOU9TVTVHVWtsT1IwVk5SVTVVTGlCSlRseHVMeThnVGs4Z1JWWkZUbFFnVTBoQlRFd2dWRWhGSUVGVlZFaFBVbE1nVDFJZ1EwOVFXVkpKUjBoVUlFaFBURVJGVWxNZ1FrVWdURWxCUWt4RklFWlBVaUJCVGxrZ1EweEJTVTBzWEc0dkx5QkVRVTFCUjBWVElFOVNJRTlVU0VWU0lFeEpRVUpKVEVsVVdTd2dWMGhGVkVoRlVpQkpUaUJCVGlCQlExUkpUMDRnVDBZZ1EwOU9WRkpCUTFRc0lGUlBVbFFnVDFKY2JpOHZJRTlVU0VWU1YwbFRSU3dnUVZKSlUwbE9SeUJHVWs5TkxDQlBWVlFnVDBZZ1QxSWdTVTRnUTA5T1RrVkRWRWxQVGlCWFNWUklJRlJJUlNCVFQwWlVWMEZTUlNCUFVpQlVTRVZjYmk4dklGVlRSU0JQVWlCUFZFaEZVaUJFUlVGTVNVNUhVeUJKVGlCVVNFVWdVMDlHVkZkQlVrVXVYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1THlvOGNtVndiR0ZqWlcxbGJuUStLaTljYmx4dWRtRnlJRUoxWm1abGNpQTlJSEpsY1hWcGNtVW9KM05oWm1VdFluVm1abVZ5SnlrdVFuVm1abVZ5TzF4dUx5bzhMM0psY0d4aFkyVnRaVzUwUGlvdlhHNWNiblpoY2lCcGMwVnVZMjlrYVc1bklEMGdRblZtWm1WeUxtbHpSVzVqYjJScGJtY2dmSHdnWm5WdVkzUnBiMjRnS0dWdVkyOWthVzVuS1NCN1hHNGdJR1Z1WTI5a2FXNW5JRDBnSnljZ0t5QmxibU52WkdsdVp6dGNiaUFnYzNkcGRHTm9JQ2hsYm1OdlpHbHVaeUFtSmlCbGJtTnZaR2x1Wnk1MGIweHZkMlZ5UTJGelpTZ3BLU0I3WEc0Z0lDQWdZMkZ6WlNBbmFHVjRKenBqWVhObElDZDFkR1k0SnpwallYTmxJQ2QxZEdZdE9DYzZZMkZ6WlNBbllYTmphV2tuT21OaGMyVWdKMkpwYm1GeWVTYzZZMkZ6WlNBblltRnpaVFkwSnpwallYTmxJQ2QxWTNNeUp6cGpZWE5sSUNkMVkzTXRNaWM2WTJGelpTQW5kWFJtTVRac1pTYzZZMkZ6WlNBbmRYUm1MVEUyYkdVbk9tTmhjMlVnSjNKaGR5YzZYRzRnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNCOVhHNTlPMXh1WEc1bWRXNWpkR2x2YmlCZmJtOXliV0ZzYVhwbFJXNWpiMlJwYm1jb1pXNWpLU0I3WEc0Z0lHbG1JQ2doWlc1aktTQnlaWFIxY200Z0ozVjBaamduTzF4dUlDQjJZWElnY21WMGNtbGxaRHRjYmlBZ2QyaHBiR1VnS0hSeWRXVXBJSHRjYmlBZ0lDQnpkMmwwWTJnZ0tHVnVZeWtnZTF4dUlDQWdJQ0FnWTJGelpTQW5kWFJtT0NjNlhHNGdJQ0FnSUNCallYTmxJQ2QxZEdZdE9DYzZYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW5kWFJtT0NjN1hHNGdJQ0FnSUNCallYTmxJQ2QxWTNNeUp6cGNiaUFnSUNBZ0lHTmhjMlVnSjNWamN5MHlKenBjYmlBZ0lDQWdJR05oYzJVZ0ozVjBaakUyYkdVbk9seHVJQ0FnSUNBZ1kyRnpaU0FuZFhSbUxURTJiR1VuT2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnSjNWMFpqRTJiR1VuTzF4dUlDQWdJQ0FnWTJGelpTQW5iR0YwYVc0eEp6cGNiaUFnSUNBZ0lHTmhjMlVnSjJKcGJtRnllU2M2WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFuYkdGMGFXNHhKenRjYmlBZ0lDQWdJR05oYzJVZ0oySmhjMlUyTkNjNlhHNGdJQ0FnSUNCallYTmxJQ2RoYzJOcGFTYzZYRzRnSUNBZ0lDQmpZWE5sSUNkb1pYZ25PbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaVzVqTzF4dUlDQWdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxkSEpwWldRcElISmxkSFZ5YmpzZ0x5OGdkVzVrWldacGJtVmtYRzRnSUNBZ0lDQWdJR1Z1WXlBOUlDZ25KeUFySUdWdVl5a3VkRzlNYjNkbGNrTmhjMlVvS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBjbWxsWkNBOUlIUnlkV1U3WEc0Z0lDQWdmVnh1SUNCOVhHNTlPMXh1WEc0dkx5QkVieUJ1YjNRZ1kyRmphR1VnWUVKMVptWmxjaTVwYzBWdVkyOWthVzVuWUNCM2FHVnVJR05vWldOcmFXNW5JR1Z1WTI5a2FXNW5JRzVoYldWeklHRnpJSE52YldWY2JpOHZJRzF2WkhWc1pYTWdiVzl1YTJWNUxYQmhkR05vSUdsMElIUnZJSE4xY0hCdmNuUWdZV1JrYVhScGIyNWhiQ0JsYm1OdlpHbHVaM05jYm1aMWJtTjBhVzl1SUc1dmNtMWhiR2w2WlVWdVkyOWthVzVuS0dWdVl5a2dlMXh1SUNCMllYSWdibVZ1WXlBOUlGOXViM0p0WVd4cGVtVkZibU52WkdsdVp5aGxibU1wTzF4dUlDQnBaaUFvZEhsd1pXOW1JRzVsYm1NZ0lUMDlJQ2R6ZEhKcGJtY25JQ1ltSUNoQ2RXWm1aWEl1YVhORmJtTnZaR2x1WnlBOVBUMGdhWE5GYm1OdlpHbHVaeUI4ZkNBaGFYTkZibU52WkdsdVp5aGxibU1wS1NrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVmJtdHViM2R1SUdWdVkyOWthVzVuT2lBbklDc2daVzVqS1R0Y2JpQWdjbVYwZFhKdUlHNWxibU1nZkh3Z1pXNWpPMXh1ZlZ4dVhHNHZMeUJUZEhKcGJtZEVaV052WkdWeUlIQnliM1pwWkdWeklHRnVJR2x1ZEdWeVptRmpaU0JtYjNJZ1pXWm1hV05wWlc1MGJIa2djM0JzYVhSMGFXNW5JR0VnYzJWeWFXVnpJRzltWEc0dkx5QmlkV1ptWlhKeklHbHVkRzhnWVNCelpYSnBaWE1nYjJZZ1NsTWdjM1J5YVc1bmN5QjNhWFJvYjNWMElHSnlaV0ZyYVc1bklHRndZWEowSUcxMWJIUnBMV0o1ZEdWY2JpOHZJR05vWVhKaFkzUmxjbk11WEc1bGVIQnZjblJ6TGxOMGNtbHVaMFJsWTI5a1pYSWdQU0JUZEhKcGJtZEVaV052WkdWeU8xeHVablZ1WTNScGIyNGdVM1J5YVc1blJHVmpiMlJsY2lobGJtTnZaR2x1WnlrZ2UxeHVJQ0IwYUdsekxtVnVZMjlrYVc1bklEMGdibTl5YldGc2FYcGxSVzVqYjJScGJtY29aVzVqYjJScGJtY3BPMXh1SUNCMllYSWdibUk3WEc0Z0lITjNhWFJqYUNBb2RHaHBjeTVsYm1OdlpHbHVaeWtnZTF4dUlDQWdJR05oYzJVZ0ozVjBaakUyYkdVbk9seHVJQ0FnSUNBZ2RHaHBjeTUwWlhoMElEMGdkWFJtTVRaVVpYaDBPMXh1SUNBZ0lDQWdkR2hwY3k1bGJtUWdQU0IxZEdZeE5rVnVaRHRjYmlBZ0lDQWdJRzVpSUQwZ05EdGNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJR05oYzJVZ0ozVjBaamduT2x4dUlDQWdJQ0FnZEdocGN5NW1hV3hzVEdGemRDQTlJSFYwWmpoR2FXeHNUR0Z6ZER0Y2JpQWdJQ0FnSUc1aUlEMGdORHRjYmlBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUdOaGMyVWdKMkpoYzJVMk5DYzZYRzRnSUNBZ0lDQjBhR2x6TG5SbGVIUWdQU0JpWVhObE5qUlVaWGgwTzF4dUlDQWdJQ0FnZEdocGN5NWxibVFnUFNCaVlYTmxOalJGYm1RN1hHNGdJQ0FnSUNCdVlpQTlJRE03WEc0Z0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnZEdocGN5NTNjbWwwWlNBOUlITnBiWEJzWlZkeWFYUmxPMXh1SUNBZ0lDQWdkR2hwY3k1bGJtUWdQU0J6YVcxd2JHVkZibVE3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUgxY2JpQWdkR2hwY3k1c1lYTjBUbVZsWkNBOUlEQTdYRzRnSUhSb2FYTXViR0Z6ZEZSdmRHRnNJRDBnTUR0Y2JpQWdkR2hwY3k1c1lYTjBRMmhoY2lBOUlFSjFabVpsY2k1aGJHeHZZMVZ1YzJGbVpTaHVZaWs3WEc1OVhHNWNibE4wY21sdVowUmxZMjlrWlhJdWNISnZkRzkwZVhCbExuZHlhWFJsSUQwZ1puVnVZM1JwYjI0Z0tHSjFaaWtnZTF4dUlDQnBaaUFvWW5WbUxteGxibWQwYUNBOVBUMGdNQ2tnY21WMGRYSnVJQ2NuTzF4dUlDQjJZWElnY2p0Y2JpQWdkbUZ5SUdrN1hHNGdJR2xtSUNoMGFHbHpMbXhoYzNST1pXVmtLU0I3WEc0Z0lDQWdjaUE5SUhSb2FYTXVabWxzYkV4aGMzUW9ZblZtS1R0Y2JpQWdJQ0JwWmlBb2NpQTlQVDBnZFc1a1pXWnBibVZrS1NCeVpYUjFjbTRnSnljN1hHNGdJQ0FnYVNBOUlIUm9hWE11YkdGemRFNWxaV1E3WEc0Z0lDQWdkR2hwY3k1c1lYTjBUbVZsWkNBOUlEQTdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdhU0E5SURBN1hHNGdJSDFjYmlBZ2FXWWdLR2tnUENCaWRXWXViR1Z1WjNSb0tTQnlaWFIxY200Z2NpQS9JSElnS3lCMGFHbHpMblJsZUhRb1luVm1MQ0JwS1NBNklIUm9hWE11ZEdWNGRDaGlkV1lzSUdrcE8xeHVJQ0J5WlhSMWNtNGdjaUI4ZkNBbkp6dGNibjA3WEc1Y2JsTjBjbWx1WjBSbFkyOWtaWEl1Y0hKdmRHOTBlWEJsTG1WdVpDQTlJSFYwWmpoRmJtUTdYRzVjYmk4dklGSmxkSFZ5Ym5NZ2IyNXNlU0JqYjIxd2JHVjBaU0JqYUdGeVlXTjBaWEp6SUdsdUlHRWdRblZtWm1WeVhHNVRkSEpwYm1kRVpXTnZaR1Z5TG5CeWIzUnZkSGx3WlM1MFpYaDBJRDBnZFhSbU9GUmxlSFE3WEc1Y2JpOHZJRUYwZEdWdGNIUnpJSFJ2SUdOdmJYQnNaWFJsSUdFZ2NHRnlkR2xoYkNCdWIyNHRWVlJHTFRnZ1kyaGhjbUZqZEdWeUlIVnphVzVuSUdKNWRHVnpJR1p5YjIwZ1lTQkNkV1ptWlhKY2JsTjBjbWx1WjBSbFkyOWtaWEl1Y0hKdmRHOTBlWEJsTG1acGJHeE1ZWE4wSUQwZ1puVnVZM1JwYjI0Z0tHSjFaaWtnZTF4dUlDQnBaaUFvZEdocGN5NXNZWE4wVG1WbFpDQThQU0JpZFdZdWJHVnVaM1JvS1NCN1hHNGdJQ0FnWW5WbUxtTnZjSGtvZEdocGN5NXNZWE4wUTJoaGNpd2dkR2hwY3k1c1lYTjBWRzkwWVd3Z0xTQjBhR2x6TG14aGMzUk9aV1ZrTENBd0xDQjBhR2x6TG14aGMzUk9aV1ZrS1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1c1lYTjBRMmhoY2k1MGIxTjBjbWx1WnloMGFHbHpMbVZ1WTI5a2FXNW5MQ0F3TENCMGFHbHpMbXhoYzNSVWIzUmhiQ2s3WEc0Z0lIMWNiaUFnWW5WbUxtTnZjSGtvZEdocGN5NXNZWE4wUTJoaGNpd2dkR2hwY3k1c1lYTjBWRzkwWVd3Z0xTQjBhR2x6TG14aGMzUk9aV1ZrTENBd0xDQmlkV1l1YkdWdVozUm9LVHRjYmlBZ2RHaHBjeTVzWVhOMFRtVmxaQ0F0UFNCaWRXWXViR1Z1WjNSb08xeHVmVHRjYmx4dUx5OGdRMmhsWTJ0eklIUm9aU0IwZVhCbElHOW1JR0VnVlZSR0xUZ2dZbmwwWlN3Z2QyaGxkR2hsY2lCcGRDZHpJRUZUUTBsSkxDQmhJR3hsWVdScGJtY2dZbmwwWlN3Z2IzSWdZVnh1THk4Z1kyOXVkR2x1ZFdGMGFXOXVJR0o1ZEdVdUlFbG1JR0Z1SUdsdWRtRnNhV1FnWW5sMFpTQnBjeUJrWlhSbFkzUmxaQ3dnTFRJZ2FYTWdjbVYwZFhKdVpXUXVYRzVtZFc1amRHbHZiaUIxZEdZNFEyaGxZMnRDZVhSbEtHSjVkR1VwSUh0Y2JpQWdhV1lnS0dKNWRHVWdQRDBnTUhnM1Jpa2djbVYwZFhKdUlEQTdaV3h6WlNCcFppQW9ZbmwwWlNBK1BpQTFJRDA5UFNBd2VEQTJLU0J5WlhSMWNtNGdNanRsYkhObElHbG1JQ2hpZVhSbElENCtJRFFnUFQwOUlEQjRNRVVwSUhKbGRIVnliaUF6TzJWc2MyVWdhV1lnS0dKNWRHVWdQajRnTXlBOVBUMGdNSGd4UlNrZ2NtVjBkWEp1SURRN1hHNGdJSEpsZEhWeWJpQmllWFJsSUQ0K0lEWWdQVDA5SURCNE1ESWdQeUF0TVNBNklDMHlPMXh1ZlZ4dVhHNHZMeUJEYUdWamEzTWdZWFFnYlc5emRDQXpJR0o1ZEdWeklHRjBJSFJvWlNCbGJtUWdiMllnWVNCQ2RXWm1aWElnYVc0Z2IzSmtaWElnZEc4Z1pHVjBaV04wSUdGdVhHNHZMeUJwYm1OdmJYQnNaWFJsSUcxMWJIUnBMV0o1ZEdVZ1ZWUkdMVGdnWTJoaGNtRmpkR1Z5TGlCVWFHVWdkRzkwWVd3Z2JuVnRZbVZ5SUc5bUlHSjVkR1Z6SUNneUxDQXpMQ0J2Y2lBMEtWeHVMeThnYm1WbFpHVmtJSFJ2SUdOdmJYQnNaWFJsSUhSb1pTQlZWRVl0T0NCamFHRnlZV04wWlhJZ0tHbG1JR0Z3Y0d4cFkyRmliR1VwSUdGeVpTQnlaWFIxY201bFpDNWNibVoxYm1OMGFXOXVJSFYwWmpoRGFHVmphMGx1WTI5dGNHeGxkR1VvYzJWc1ppd2dZblZtTENCcEtTQjdYRzRnSUhaaGNpQnFJRDBnWW5WbUxteGxibWQwYUNBdElERTdYRzRnSUdsbUlDaHFJRHdnYVNrZ2NtVjBkWEp1SURBN1hHNGdJSFpoY2lCdVlpQTlJSFYwWmpoRGFHVmphMEo1ZEdVb1luVm1XMnBkS1R0Y2JpQWdhV1lnS0c1aUlENDlJREFwSUh0Y2JpQWdJQ0JwWmlBb2JtSWdQaUF3S1NCelpXeG1MbXhoYzNST1pXVmtJRDBnYm1JZ0xTQXhPMXh1SUNBZ0lISmxkSFZ5YmlCdVlqdGNiaUFnZlZ4dUlDQnBaaUFvTFMxcUlEd2dhU0I4ZkNCdVlpQTlQVDBnTFRJcElISmxkSFZ5YmlBd08xeHVJQ0J1WWlBOUlIVjBaamhEYUdWamEwSjVkR1VvWW5WbVcycGRLVHRjYmlBZ2FXWWdLRzVpSUQ0OUlEQXBJSHRjYmlBZ0lDQnBaaUFvYm1JZ1BpQXdLU0J6Wld4bUxteGhjM1JPWldWa0lEMGdibUlnTFNBeU8xeHVJQ0FnSUhKbGRIVnliaUJ1WWp0Y2JpQWdmVnh1SUNCcFppQW9MUzFxSUR3Z2FTQjhmQ0J1WWlBOVBUMGdMVElwSUhKbGRIVnliaUF3TzF4dUlDQnVZaUE5SUhWMFpqaERhR1ZqYTBKNWRHVW9ZblZtVzJwZEtUdGNiaUFnYVdZZ0tHNWlJRDQ5SURBcElIdGNiaUFnSUNCcFppQW9ibUlnUGlBd0tTQjdYRzRnSUNBZ0lDQnBaaUFvYm1JZ1BUMDlJRElwSUc1aUlEMGdNRHRsYkhObElITmxiR1l1YkdGemRFNWxaV1FnUFNCdVlpQXRJRE03WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdVlqdGNiaUFnZlZ4dUlDQnlaWFIxY200Z01EdGNibjFjYmx4dUx5OGdWbUZzYVdSaGRHVnpJR0Z6SUcxaGJua2dZMjl1ZEdsdWRXRjBhVzl1SUdKNWRHVnpJR1p2Y2lCaElHMTFiSFJwTFdKNWRHVWdWVlJHTFRnZ1kyaGhjbUZqZEdWeUlHRnpYRzR2THlCdVpXVmtaV1FnYjNJZ1lYSmxJR0YyWVdsc1lXSnNaUzRnU1dZZ2QyVWdjMlZsSUdFZ2JtOXVMV052Ym5ScGJuVmhkR2x2YmlCaWVYUmxJSGRvWlhKbElIZGxJR1Y0Y0dWamRGeHVMeThnYjI1bExDQjNaU0JjSW5KbGNHeGhZMlZjSWlCMGFHVWdkbUZzYVdSaGRHVmtJR052Ym5ScGJuVmhkR2x2YmlCaWVYUmxjeUIzWlNkMlpTQnpaV1Z1SUhOdklHWmhjaUIzYVhSb1hHNHZMeUJoSUhOcGJtZHNaU0JWVkVZdE9DQnlaWEJzWVdObGJXVnVkQ0JqYUdGeVlXTjBaWElnS0NkY1hIVm1abVprSnlrc0lIUnZJRzFoZEdOb0lIWTRKM01nVlZSR0xUZ2daR1ZqYjJScGJtZGNiaTh2SUdKbGFHRjJhVzl5TGlCVWFHVWdZMjl1ZEdsdWRXRjBhVzl1SUdKNWRHVWdZMmhsWTJzZ2FYTWdhVzVqYkhWa1pXUWdkR2h5WldVZ2RHbHRaWE1nYVc0Z2RHaGxJR05oYzJWY2JpOHZJSGRvWlhKbElHRnNiQ0J2WmlCMGFHVWdZMjl1ZEdsdWRXRjBhVzl1SUdKNWRHVnpJR1p2Y2lCaElHTm9ZWEpoWTNSbGNpQmxlR2x6ZENCcGJpQjBhR1VnYzJGdFpTQmlkV1ptWlhJdVhHNHZMeUJKZENCcGN5QmhiSE52SUdSdmJtVWdkR2hwY3lCM1lYa2dZWE1nWVNCemJHbG5hSFFnY0dWeVptOXliV0Z1WTJVZ2FXNWpjbVZoYzJVZ2FXNXpkR1ZoWkNCdlppQjFjMmx1WnlCaFhHNHZMeUJzYjI5d0xseHVablZ1WTNScGIyNGdkWFJtT0VOb1pXTnJSWGgwY21GQ2VYUmxjeWh6Wld4bUxDQmlkV1lzSUhBcElIdGNiaUFnYVdZZ0tDaGlkV1piTUYwZ0ppQXdlRU13S1NBaFBUMGdNSGc0TUNrZ2UxeHVJQ0FnSUhObGJHWXViR0Z6ZEU1bFpXUWdQU0F3TzF4dUlDQWdJSEpsZEhWeWJpQW5YRngxWm1abVpDYzdYRzRnSUgxY2JpQWdhV1lnS0hObGJHWXViR0Z6ZEU1bFpXUWdQaUF4SUNZbUlHSjFaaTVzWlc1bmRHZ2dQaUF4S1NCN1hHNGdJQ0FnYVdZZ0tDaGlkV1piTVYwZ0ppQXdlRU13S1NBaFBUMGdNSGc0TUNrZ2UxeHVJQ0FnSUNBZ2MyVnNaaTVzWVhOMFRtVmxaQ0E5SURFN1hHNGdJQ0FnSUNCeVpYUjFjbTRnSjF4Y2RXWm1abVFuTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvYzJWc1ppNXNZWE4wVG1WbFpDQStJRElnSmlZZ1luVm1MbXhsYm1kMGFDQStJRElwSUh0Y2JpQWdJQ0FnSUdsbUlDZ29ZblZtV3pKZElDWWdNSGhETUNrZ0lUMDlJREI0T0RBcElIdGNiaUFnSUNBZ0lDQWdjMlZzWmk1c1lYTjBUbVZsWkNBOUlESTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW5YRngxWm1abVpDYzdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNiaTh2SUVGMGRHVnRjSFJ6SUhSdklHTnZiWEJzWlhSbElHRWdiWFZzZEdrdFlubDBaU0JWVkVZdE9DQmphR0Z5WVdOMFpYSWdkWE5wYm1jZ1lubDBaWE1nWm5KdmJTQmhJRUoxWm1abGNpNWNibVoxYm1OMGFXOXVJSFYwWmpoR2FXeHNUR0Z6ZENoaWRXWXBJSHRjYmlBZ2RtRnlJSEFnUFNCMGFHbHpMbXhoYzNSVWIzUmhiQ0F0SUhSb2FYTXViR0Z6ZEU1bFpXUTdYRzRnSUhaaGNpQnlJRDBnZFhSbU9FTm9aV05yUlhoMGNtRkNlWFJsY3loMGFHbHpMQ0JpZFdZc0lIQXBPMXh1SUNCcFppQW9jaUFoUFQwZ2RXNWtaV1pwYm1Wa0tTQnlaWFIxY200Z2NqdGNiaUFnYVdZZ0tIUm9hWE11YkdGemRFNWxaV1FnUEQwZ1luVm1MbXhsYm1kMGFDa2dlMXh1SUNBZ0lHSjFaaTVqYjNCNUtIUm9hWE11YkdGemRFTm9ZWElzSUhBc0lEQXNJSFJvYVhNdWJHRnpkRTVsWldRcE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxteGhjM1JEYUdGeUxuUnZVM1J5YVc1bktIUm9hWE11Wlc1amIyUnBibWNzSURBc0lIUm9hWE11YkdGemRGUnZkR0ZzS1R0Y2JpQWdmVnh1SUNCaWRXWXVZMjl3ZVNoMGFHbHpMbXhoYzNSRGFHRnlMQ0J3TENBd0xDQmlkV1l1YkdWdVozUm9LVHRjYmlBZ2RHaHBjeTVzWVhOMFRtVmxaQ0F0UFNCaWRXWXViR1Z1WjNSb08xeHVmVnh1WEc0dkx5QlNaWFIxY201eklHRnNiQ0JqYjIxd2JHVjBaU0JWVkVZdE9DQmphR0Z5WVdOMFpYSnpJR2x1SUdFZ1FuVm1abVZ5TGlCSlppQjBhR1VnUW5WbVptVnlJR1Z1WkdWa0lHOXVJR0ZjYmk4dklIQmhjblJwWVd3Z1kyaGhjbUZqZEdWeUxDQjBhR1VnWTJoaGNtRmpkR1Z5SjNNZ1lubDBaWE1nWVhKbElHSjFabVpsY21Wa0lIVnVkR2xzSUhSb1pTQnlaWEYxYVhKbFpGeHVMeThnYm5WdFltVnlJRzltSUdKNWRHVnpJR0Z5WlNCaGRtRnBiR0ZpYkdVdVhHNW1kVzVqZEdsdmJpQjFkR1k0VkdWNGRDaGlkV1lzSUdrcElIdGNiaUFnZG1GeUlIUnZkR0ZzSUQwZ2RYUm1PRU5vWldOclNXNWpiMjF3YkdWMFpTaDBhR2x6TENCaWRXWXNJR2twTzF4dUlDQnBaaUFvSVhSb2FYTXViR0Z6ZEU1bFpXUXBJSEpsZEhWeWJpQmlkV1l1ZEc5VGRISnBibWNvSjNWMFpqZ25MQ0JwS1R0Y2JpQWdkR2hwY3k1c1lYTjBWRzkwWVd3Z1BTQjBiM1JoYkR0Y2JpQWdkbUZ5SUdWdVpDQTlJR0oxWmk1c1pXNW5kR2dnTFNBb2RHOTBZV3dnTFNCMGFHbHpMbXhoYzNST1pXVmtLVHRjYmlBZ1luVm1MbU52Y0hrb2RHaHBjeTVzWVhOMFEyaGhjaXdnTUN3Z1pXNWtLVHRjYmlBZ2NtVjBkWEp1SUdKMVppNTBiMU4wY21sdVp5Z25kWFJtT0Njc0lHa3NJR1Z1WkNrN1hHNTlYRzVjYmk4dklFWnZjaUJWVkVZdE9Dd2dZU0J5WlhCc1lXTmxiV1Z1ZENCamFHRnlZV04wWlhJZ2FYTWdZV1JrWldRZ2QyaGxiaUJsYm1ScGJtY2diMjRnWVNCd1lYSjBhV0ZzWEc0dkx5QmphR0Z5WVdOMFpYSXVYRzVtZFc1amRHbHZiaUIxZEdZNFJXNWtLR0oxWmlrZ2UxeHVJQ0IyWVhJZ2NpQTlJR0oxWmlBbUppQmlkV1l1YkdWdVozUm9JRDhnZEdocGN5NTNjbWwwWlNoaWRXWXBJRG9nSnljN1hHNGdJR2xtSUNoMGFHbHpMbXhoYzNST1pXVmtLU0J5WlhSMWNtNGdjaUFySUNkY1hIVm1abVprSnp0Y2JpQWdjbVYwZFhKdUlISTdYRzU5WEc1Y2JpOHZJRlZVUmkweE5reEZJSFI1Y0dsallXeHNlU0J1WldWa2N5QjBkMjhnWW5sMFpYTWdjR1Z5SUdOb1lYSmhZM1JsY2l3Z1luVjBJR1YyWlc0Z2FXWWdkMlVnYUdGMlpTQmhiaUJsZG1WdVhHNHZMeUJ1ZFcxaVpYSWdiMllnWW5sMFpYTWdZWFpoYVd4aFlteGxMQ0IzWlNCdVpXVmtJSFJ2SUdOb1pXTnJJR2xtSUhkbElHVnVaQ0J2YmlCaElHeGxZV1JwYm1jdmFHbG5hRnh1THk4Z2MzVnljbTluWVhSbExpQkpiaUIwYUdGMElHTmhjMlVzSUhkbElHNWxaV1FnZEc4Z2QyRnBkQ0JtYjNJZ2RHaGxJRzVsZUhRZ2RIZHZJR0o1ZEdWeklHbHVJRzl5WkdWeUlIUnZYRzR2THlCa1pXTnZaR1VnZEdobElHeGhjM1FnWTJoaGNtRmpkR1Z5SUhCeWIzQmxjbXg1TGx4dVpuVnVZM1JwYjI0Z2RYUm1NVFpVWlhoMEtHSjFaaXdnYVNrZ2UxeHVJQ0JwWmlBb0tHSjFaaTVzWlc1bmRHZ2dMU0JwS1NBbElESWdQVDA5SURBcElIdGNiaUFnSUNCMllYSWdjaUE5SUdKMVppNTBiMU4wY21sdVp5Z25kWFJtTVRac1pTY3NJR2twTzF4dUlDQWdJR2xtSUNoeUtTQjdYRzRnSUNBZ0lDQjJZWElnWXlBOUlISXVZMmhoY2tOdlpHVkJkQ2h5TG14bGJtZDBhQ0F0SURFcE8xeHVJQ0FnSUNBZ2FXWWdLR01nUGowZ01IaEVPREF3SUNZbUlHTWdQRDBnTUhoRVFrWkdLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViR0Z6ZEU1bFpXUWdQU0F5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbXhoYzNSVWIzUmhiQ0E5SURRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YkdGemRFTm9ZWEpiTUYwZ1BTQmlkV1piWW5WbUxteGxibWQwYUNBdElESmRPMXh1SUNBZ0lDQWdJQ0IwYUdsekxteGhjM1JEYUdGeVd6RmRJRDBnWW5WbVcySjFaaTVzWlc1bmRHZ2dMU0F4WFR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhJdWMyeHBZMlVvTUN3Z0xURXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnY2p0Y2JpQWdmVnh1SUNCMGFHbHpMbXhoYzNST1pXVmtJRDBnTVR0Y2JpQWdkR2hwY3k1c1lYTjBWRzkwWVd3Z1BTQXlPMXh1SUNCMGFHbHpMbXhoYzNSRGFHRnlXekJkSUQwZ1luVm1XMkoxWmk1c1pXNW5kR2dnTFNBeFhUdGNiaUFnY21WMGRYSnVJR0oxWmk1MGIxTjBjbWx1WnlnbmRYUm1NVFpzWlNjc0lHa3NJR0oxWmk1c1pXNW5kR2dnTFNBeEtUdGNibjFjYmx4dUx5OGdSbTl5SUZWVVJpMHhOa3hGSUhkbElHUnZJRzV2ZENCbGVIQnNhV05wZEd4NUlHRndjR1Z1WkNCemNHVmphV0ZzSUhKbGNHeGhZMlZ0Wlc1MElHTm9ZWEpoWTNSbGNuTWdhV1lnZDJWY2JpOHZJR1Z1WkNCdmJpQmhJSEJoY25ScFlXd2dZMmhoY21GamRHVnlMQ0IzWlNCemFXMXdiSGtnYkdWMElIWTRJR2hoYm1Sc1pTQjBhR0YwTGx4dVpuVnVZM1JwYjI0Z2RYUm1NVFpGYm1Rb1luVm1LU0I3WEc0Z0lIWmhjaUJ5SUQwZ1luVm1JQ1ltSUdKMVppNXNaVzVuZEdnZ1B5QjBhR2x6TG5keWFYUmxLR0oxWmlrZ09pQW5KenRjYmlBZ2FXWWdLSFJvYVhNdWJHRnpkRTVsWldRcElIdGNiaUFnSUNCMllYSWdaVzVrSUQwZ2RHaHBjeTVzWVhOMFZHOTBZV3dnTFNCMGFHbHpMbXhoYzNST1pXVmtPMXh1SUNBZ0lISmxkSFZ5YmlCeUlDc2dkR2hwY3k1c1lYTjBRMmhoY2k1MGIxTjBjbWx1WnlnbmRYUm1NVFpzWlNjc0lEQXNJR1Z1WkNrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhJN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdKaGMyVTJORlJsZUhRb1luVm1MQ0JwS1NCN1hHNGdJSFpoY2lCdUlEMGdLR0oxWmk1c1pXNW5kR2dnTFNCcEtTQWxJRE03WEc0Z0lHbG1JQ2h1SUQwOVBTQXdLU0J5WlhSMWNtNGdZblZtTG5SdlUzUnlhVzVuS0NkaVlYTmxOalFuTENCcEtUdGNiaUFnZEdocGN5NXNZWE4wVG1WbFpDQTlJRE1nTFNCdU8xeHVJQ0IwYUdsekxteGhjM1JVYjNSaGJDQTlJRE03WEc0Z0lHbG1JQ2h1SUQwOVBTQXhLU0I3WEc0Z0lDQWdkR2hwY3k1c1lYTjBRMmhoY2xzd1hTQTlJR0oxWmx0aWRXWXViR1Z1WjNSb0lDMGdNVjA3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZEdocGN5NXNZWE4wUTJoaGNsc3dYU0E5SUdKMVpsdGlkV1l1YkdWdVozUm9JQzBnTWwwN1hHNGdJQ0FnZEdocGN5NXNZWE4wUTJoaGNsc3hYU0E5SUdKMVpsdGlkV1l1YkdWdVozUm9JQzBnTVYwN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUdKMVppNTBiMU4wY21sdVp5Z25ZbUZ6WlRZMEp5d2dhU3dnWW5WbUxteGxibWQwYUNBdElHNHBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmlZWE5sTmpSRmJtUW9ZblZtS1NCN1hHNGdJSFpoY2lCeUlEMGdZblZtSUNZbUlHSjFaaTVzWlc1bmRHZ2dQeUIwYUdsekxuZHlhWFJsS0dKMVppa2dPaUFuSnp0Y2JpQWdhV1lnS0hSb2FYTXViR0Z6ZEU1bFpXUXBJSEpsZEhWeWJpQnlJQ3NnZEdocGN5NXNZWE4wUTJoaGNpNTBiMU4wY21sdVp5Z25ZbUZ6WlRZMEp5d2dNQ3dnTXlBdElIUm9hWE11YkdGemRFNWxaV1FwTzF4dUlDQnlaWFIxY200Z2NqdGNibjFjYmx4dUx5OGdVR0Z6Y3lCaWVYUmxjeUJ2YmlCMGFISnZkV2RvSUdadmNpQnphVzVuYkdVdFlubDBaU0JsYm1OdlpHbHVaM01nS0dVdVp5NGdZWE5qYVdrc0lHeGhkR2x1TVN3Z2FHVjRLVnh1Wm5WdVkzUnBiMjRnYzJsdGNHeGxWM0pwZEdVb1luVm1LU0I3WEc0Z0lISmxkSFZ5YmlCaWRXWXVkRzlUZEhKcGJtY29kR2hwY3k1bGJtTnZaR2x1WnlrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhOcGJYQnNaVVZ1WkNoaWRXWXBJSHRjYmlBZ2NtVjBkWEp1SUdKMVppQW1KaUJpZFdZdWJHVnVaM1JvSUQ4Z2RHaHBjeTUzY21sMFpTaGlkV1lwSURvZ0p5YzdYRzU5SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0NjdUwzSmxZV1JoWW14bEp5a3VVR0Z6YzFSb2NtOTFaMmhjYmlJc0ltVjRjRzl5ZEhNZ1BTQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHZiR2xpTDE5emRISmxZVzFmY21WaFpHRmliR1V1YW5NbktUdGNibVY0Y0c5eWRITXVVM1J5WldGdElEMGdaWGh3YjNKMGN6dGNibVY0Y0c5eWRITXVVbVZoWkdGaWJHVWdQU0JsZUhCdmNuUnpPMXh1Wlhod2IzSjBjeTVYY21sMFlXSnNaU0E5SUhKbGNYVnBjbVVvSnk0dmJHbGlMMTl6ZEhKbFlXMWZkM0pwZEdGaWJHVXVhbk1uS1R0Y2JtVjRjRzl5ZEhNdVJIVndiR1Y0SUQwZ2NtVnhkV2x5WlNnbkxpOXNhV0l2WDNOMGNtVmhiVjlrZFhCc1pYZ3Vhbk1uS1R0Y2JtVjRjRzl5ZEhNdVZISmhibk5tYjNKdElEMGdjbVZ4ZFdseVpTZ25MaTlzYVdJdlgzTjBjbVZoYlY5MGNtRnVjMlp2Y20wdWFuTW5LVHRjYm1WNGNHOXlkSE11VUdGemMxUm9jbTkxWjJnZ1BTQnlaWEYxYVhKbEtDY3VMMnhwWWk5ZmMzUnlaV0Z0WDNCaGMzTjBhSEp2ZFdkb0xtcHpKeWs3WEc0aUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHZjbVZoWkdGaWJHVW5LUzVVY21GdWMyWnZjbTFjYmlJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpOXNhV0l2WDNOMGNtVmhiVjkzY21sMFlXSnNaUzVxY3ljcE8xeHVJaXdpTHk4Z1EyOXdlWEpwWjJoMElFcHZlV1Z1ZEN3Z1NXNWpMaUJoYm1RZ2IzUm9aWElnVG05a1pTQmpiMjUwY21saWRYUnZjbk11WEc0dkwxeHVMeThnVUdWeWJXbHpjMmx2YmlCcGN5Qm9aWEpsWW5rZ1ozSmhiblJsWkN3Z1puSmxaU0J2WmlCamFHRnlaMlVzSUhSdklHRnVlU0J3WlhKemIyNGdiMkowWVdsdWFXNW5JR0ZjYmk4dklHTnZjSGtnYjJZZ2RHaHBjeUJ6YjJaMGQyRnlaU0JoYm1RZ1lYTnpiMk5wWVhSbFpDQmtiMk4xYldWdWRHRjBhVzl1SUdacGJHVnpJQ2gwYUdWY2JpOHZJRndpVTI5bWRIZGhjbVZjSWlrc0lIUnZJR1JsWVd3Z2FXNGdkR2hsSUZOdlpuUjNZWEpsSUhkcGRHaHZkWFFnY21WemRISnBZM1JwYjI0c0lHbHVZMngxWkdsdVoxeHVMeThnZDJsMGFHOTFkQ0JzYVcxcGRHRjBhVzl1SUhSb1pTQnlhV2RvZEhNZ2RHOGdkWE5sTENCamIzQjVMQ0J0YjJScFpua3NJRzFsY21kbExDQndkV0pzYVhOb0xGeHVMeThnWkdsemRISnBZblYwWlN3Z2MzVmliR2xqWlc1elpTd2dZVzVrTDI5eUlITmxiR3dnWTI5d2FXVnpJRzltSUhSb1pTQlRiMlowZDJGeVpTd2dZVzVrSUhSdklIQmxjbTFwZEZ4dUx5OGdjR1Z5YzI5dWN5QjBieUIzYUc5dElIUm9aU0JUYjJaMGQyRnlaU0JwY3lCbWRYSnVhWE5vWldRZ2RHOGdaRzhnYzI4c0lITjFZbXBsWTNRZ2RHOGdkR2hsWEc0dkx5Qm1iMnhzYjNkcGJtY2dZMjl1WkdsMGFXOXVjenBjYmk4dlhHNHZMeUJVYUdVZ1lXSnZkbVVnWTI5d2VYSnBaMmgwSUc1dmRHbGpaU0JoYm1RZ2RHaHBjeUJ3WlhKdGFYTnphVzl1SUc1dmRHbGpaU0J6YUdGc2JDQmlaU0JwYm1Oc2RXUmxaRnh1THk4Z2FXNGdZV3hzSUdOdmNHbGxjeUJ2Y2lCemRXSnpkR0Z1ZEdsaGJDQndiM0owYVc5dWN5QnZaaUIwYUdVZ1UyOW1kSGRoY21VdVhHNHZMMXh1THk4Z1ZFaEZJRk5QUmxSWFFWSkZJRWxUSUZCU1QxWkpSRVZFSUZ3aVFWTWdTVk5jSWl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVV1NCUFJpQkJUbGtnUzBsT1JDd2dSVmhRVWtWVFUxeHVMeThnVDFJZ1NVMVFURWxGUkN3Z1NVNURURlZFU1U1SElFSlZWQ0JPVDFRZ1RFbE5TVlJGUkNCVVR5QlVTRVVnVjBGU1VrRk9WRWxGVXlCUFJseHVMeThnVFVWU1EwaEJUbFJCUWtsTVNWUlpMQ0JHU1ZST1JWTlRJRVpQVWlCQklGQkJVbFJKUTFWTVFWSWdVRlZTVUU5VFJTQkJUa1FnVGs5T1NVNUdVa2xPUjBWTlJVNVVMaUJKVGx4dUx5OGdUazhnUlZaRlRsUWdVMGhCVEV3Z1ZFaEZJRUZWVkVoUFVsTWdUMUlnUTA5UVdWSkpSMGhVSUVoUFRFUkZVbE1nUWtVZ1RFbEJRa3hGSUVaUFVpQkJUbGtnUTB4QlNVMHNYRzR2THlCRVFVMUJSMFZUSUU5U0lFOVVTRVZTSUV4SlFVSkpURWxVV1N3Z1YwaEZWRWhGVWlCSlRpQkJUaUJCUTFSSlQwNGdUMFlnUTA5T1ZGSkJRMVFzSUZSUFVsUWdUMUpjYmk4dklFOVVTRVZTVjBsVFJTd2dRVkpKVTBsT1J5QkdVazlOTENCUFZWUWdUMFlnVDFJZ1NVNGdRMDlPVGtWRFZFbFBUaUJYU1ZSSUlGUklSU0JUVDBaVVYwRlNSU0JQVWlCVVNFVmNiaTh2SUZWVFJTQlBVaUJQVkVoRlVpQkVSVUZNU1U1SFV5QkpUaUJVU0VVZ1UwOUdWRmRCVWtVdVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdVM1J5WldGdE8xeHVYRzUyWVhJZ1JVVWdQU0J5WlhGMWFYSmxLQ2RsZG1WdWRITW5LUzVGZG1WdWRFVnRhWFIwWlhJN1hHNTJZWElnYVc1b1pYSnBkSE1nUFNCeVpYRjFhWEpsS0NkcGJtaGxjbWwwY3ljcE8xeHVYRzVwYm1obGNtbDBjeWhUZEhKbFlXMHNJRVZGS1R0Y2JsTjBjbVZoYlM1U1pXRmtZV0pzWlNBOUlISmxjWFZwY21Vb0ozSmxZV1JoWW14bExYTjBjbVZoYlM5eVpXRmtZV0pzWlM1cWN5Y3BPMXh1VTNSeVpXRnRMbGR5YVhSaFlteGxJRDBnY21WeGRXbHlaU2duY21WaFpHRmliR1V0YzNSeVpXRnRMM2R5YVhSaFlteGxMbXB6SnlrN1hHNVRkSEpsWVcwdVJIVndiR1Y0SUQwZ2NtVnhkV2x5WlNnbmNtVmhaR0ZpYkdVdGMzUnlaV0Z0TDJSMWNHeGxlQzVxY3ljcE8xeHVVM1J5WldGdExsUnlZVzV6Wm05eWJTQTlJSEpsY1hWcGNtVW9KM0psWVdSaFlteGxMWE4wY21WaGJTOTBjbUZ1YzJadmNtMHVhbk1uS1R0Y2JsTjBjbVZoYlM1UVlYTnpWR2h5YjNWbmFDQTlJSEpsY1hWcGNtVW9KM0psWVdSaFlteGxMWE4wY21WaGJTOXdZWE56ZEdoeWIzVm5hQzVxY3ljcE8xeHVYRzR2THlCQ1lXTnJkMkZ5WkhNdFkyOXRjR0YwSUhkcGRHZ2dibTlrWlNBd0xqUXVlRnh1VTNSeVpXRnRMbE4wY21WaGJTQTlJRk4wY21WaGJUdGNibHh1WEc1Y2JpOHZJRzlzWkMxemRIbHNaU0J6ZEhKbFlXMXpMaUFnVG05MFpTQjBhR0YwSUhSb1pTQndhWEJsSUcxbGRHaHZaQ0FvZEdobElHOXViSGtnY21Wc1pYWmhiblJjYmk4dklIQmhjblFnYjJZZ2RHaHBjeUJqYkdGemN5a2dhWE1nYjNabGNuSnBaR1JsYmlCcGJpQjBhR1VnVW1WaFpHRmliR1VnWTJ4aGMzTXVYRzVjYm1aMWJtTjBhVzl1SUZOMGNtVmhiU2dwSUh0Y2JpQWdSVVV1WTJGc2JDaDBhR2x6S1R0Y2JuMWNibHh1VTNSeVpXRnRMbkJ5YjNSdmRIbHdaUzV3YVhCbElEMGdablZ1WTNScGIyNG9aR1Z6ZEN3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0IyWVhJZ2MyOTFjbU5sSUQwZ2RHaHBjenRjYmx4dUlDQm1kVzVqZEdsdmJpQnZibVJoZEdFb1kyaDFibXNwSUh0Y2JpQWdJQ0JwWmlBb1pHVnpkQzUzY21sMFlXSnNaU2tnZTF4dUlDQWdJQ0FnYVdZZ0tHWmhiSE5sSUQwOVBTQmtaWE4wTG5keWFYUmxLR05vZFc1cktTQW1KaUJ6YjNWeVkyVXVjR0YxYzJVcElIdGNiaUFnSUNBZ0lDQWdjMjkxY21ObExuQmhkWE5sS0NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2MyOTFjbU5sTG05dUtDZGtZWFJoSnl3Z2IyNWtZWFJoS1R0Y2JseHVJQ0JtZFc1amRHbHZiaUJ2Ym1SeVlXbHVLQ2tnZTF4dUlDQWdJR2xtSUNoemIzVnlZMlV1Y21WaFpHRmliR1VnSmlZZ2MyOTFjbU5sTG5KbGMzVnRaU2tnZTF4dUlDQWdJQ0FnYzI5MWNtTmxMbkpsYzNWdFpTZ3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR1JsYzNRdWIyNG9KMlJ5WVdsdUp5d2diMjVrY21GcGJpazdYRzVjYmlBZ0x5OGdTV1lnZEdobElDZGxibVFuSUc5d2RHbHZiaUJwY3lCdWIzUWdjM1Z3Y0d4cFpXUXNJR1JsYzNRdVpXNWtLQ2tnZDJsc2JDQmlaU0JqWVd4c1pXUWdkMmhsYmx4dUlDQXZMeUJ6YjNWeVkyVWdaMlYwY3lCMGFHVWdKMlZ1WkNjZ2IzSWdKMk5zYjNObEp5QmxkbVZ1ZEhNdUlDQlBibXg1SUdSbGMzUXVaVzVrS0NrZ2IyNWpaUzVjYmlBZ2FXWWdLQ0ZrWlhOMExsOXBjMU4wWkdsdklDWW1JQ2doYjNCMGFXOXVjeUI4ZkNCdmNIUnBiMjV6TG1WdVpDQWhQVDBnWm1Gc2MyVXBLU0I3WEc0Z0lDQWdjMjkxY21ObExtOXVLQ2RsYm1RbkxDQnZibVZ1WkNrN1hHNGdJQ0FnYzI5MWNtTmxMbTl1S0NkamJHOXpaU2NzSUc5dVkyeHZjMlVwTzF4dUlDQjlYRzVjYmlBZ2RtRnlJR1JwWkU5dVJXNWtJRDBnWm1Gc2MyVTdYRzRnSUdaMWJtTjBhVzl1SUc5dVpXNWtLQ2tnZTF4dUlDQWdJR2xtSUNoa2FXUlBia1Z1WkNrZ2NtVjBkWEp1TzF4dUlDQWdJR1JwWkU5dVJXNWtJRDBnZEhKMVpUdGNibHh1SUNBZ0lHUmxjM1F1Wlc1a0tDazdYRzRnSUgxY2JseHVYRzRnSUdaMWJtTjBhVzl1SUc5dVkyeHZjMlVvS1NCN1hHNGdJQ0FnYVdZZ0tHUnBaRTl1Ulc1a0tTQnlaWFIxY200N1hHNGdJQ0FnWkdsa1QyNUZibVFnUFNCMGNuVmxPMXh1WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJrWlhOMExtUmxjM1J5YjNrZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUdSbGMzUXVaR1Z6ZEhKdmVTZ3BPMXh1SUNCOVhHNWNiaUFnTHk4Z1pHOXVKM1FnYkdWaGRtVWdaR0Z1WjJ4cGJtY2djR2x3WlhNZ2QyaGxiaUIwYUdWeVpTQmhjbVVnWlhKeWIzSnpMbHh1SUNCbWRXNWpkR2x2YmlCdmJtVnljbTl5S0dWeUtTQjdYRzRnSUNBZ1kyeGxZVzUxY0NncE8xeHVJQ0FnSUdsbUlDaEZSUzVzYVhOMFpXNWxja052ZFc1MEtIUm9hWE1zSUNkbGNuSnZjaWNwSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QmxjanNnTHk4Z1ZXNW9ZVzVrYkdWa0lITjBjbVZoYlNCbGNuSnZjaUJwYmlCd2FYQmxMbHh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSE52ZFhKalpTNXZiaWduWlhKeWIzSW5MQ0J2Ym1WeWNtOXlLVHRjYmlBZ1pHVnpkQzV2YmlnblpYSnliM0luTENCdmJtVnljbTl5S1R0Y2JseHVJQ0F2THlCeVpXMXZkbVVnWVd4c0lIUm9aU0JsZG1WdWRDQnNhWE4wWlc1bGNuTWdkR2hoZENCM1pYSmxJR0ZrWkdWa0xseHVJQ0JtZFc1amRHbHZiaUJqYkdWaGJuVndLQ2tnZTF4dUlDQWdJSE52ZFhKalpTNXlaVzF2ZG1WTWFYTjBaVzVsY2lnblpHRjBZU2NzSUc5dVpHRjBZU2s3WEc0Z0lDQWdaR1Z6ZEM1eVpXMXZkbVZNYVhOMFpXNWxjaWduWkhKaGFXNG5MQ0J2Ym1SeVlXbHVLVHRjYmx4dUlDQWdJSE52ZFhKalpTNXlaVzF2ZG1WTWFYTjBaVzVsY2lnblpXNWtKeXdnYjI1bGJtUXBPMXh1SUNBZ0lITnZkWEpqWlM1eVpXMXZkbVZNYVhOMFpXNWxjaWduWTJ4dmMyVW5MQ0J2Ym1Oc2IzTmxLVHRjYmx4dUlDQWdJSE52ZFhKalpTNXlaVzF2ZG1WTWFYTjBaVzVsY2lnblpYSnliM0luTENCdmJtVnljbTl5S1R0Y2JpQWdJQ0JrWlhOMExuSmxiVzkyWlV4cGMzUmxibVZ5S0NkbGNuSnZjaWNzSUc5dVpYSnliM0lwTzF4dVhHNGdJQ0FnYzI5MWNtTmxMbkpsYlc5MlpVeHBjM1JsYm1WeUtDZGxibVFuTENCamJHVmhiblZ3S1R0Y2JpQWdJQ0J6YjNWeVkyVXVjbVZ0YjNabFRHbHpkR1Z1WlhJb0oyTnNiM05sSnl3Z1kyeGxZVzUxY0NrN1hHNWNiaUFnSUNCa1pYTjBMbkpsYlc5MlpVeHBjM1JsYm1WeUtDZGpiRzl6WlNjc0lHTnNaV0Z1ZFhBcE8xeHVJQ0I5WEc1Y2JpQWdjMjkxY21ObExtOXVLQ2RsYm1RbkxDQmpiR1ZoYm5Wd0tUdGNiaUFnYzI5MWNtTmxMbTl1S0NkamJHOXpaU2NzSUdOc1pXRnVkWEFwTzF4dVhHNGdJR1JsYzNRdWIyNG9KMk5zYjNObEp5d2dZMnhsWVc1MWNDazdYRzVjYmlBZ1pHVnpkQzVsYldsMEtDZHdhWEJsSnl3Z2MyOTFjbU5sS1R0Y2JseHVJQ0F2THlCQmJHeHZkeUJtYjNJZ2RXNXBlQzFzYVd0bElIVnpZV2RsT2lCQkxuQnBjR1VvUWlrdWNHbHdaU2hES1Z4dUlDQnlaWFIxY200Z1pHVnpkRHRjYm4wN1hHNGlMQ0oyWVhJZ2JtVjRkRlJwWTJzZ1BTQnlaWEYxYVhKbEtDZHdjbTlqWlhOekwySnliM2R6WlhJdWFuTW5LUzV1WlhoMFZHbGphenRjYm5aaGNpQmhjSEJzZVNBOUlFWjFibU4wYVc5dUxuQnliM1J2ZEhsd1pTNWhjSEJzZVR0Y2JuWmhjaUJ6YkdsalpTQTlJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXpiR2xqWlR0Y2JuWmhjaUJwYlcxbFpHbGhkR1ZKWkhNZ1BTQjdmVHRjYm5aaGNpQnVaWGgwU1cxdFpXUnBZWFJsU1dRZ1BTQXdPMXh1WEc0dkx5QkVUMDBnUVZCSmN5d2dabTl5SUdOdmJYQnNaWFJsYm1WemMxeHVYRzVsZUhCdmNuUnpMbk5sZEZScGJXVnZkWFFnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnY21WMGRYSnVJRzVsZHlCVWFXMWxiM1YwS0dGd2NHeDVMbU5oYkd3b2MyVjBWR2x0Wlc5MWRDd2dkMmx1Wkc5M0xDQmhjbWQxYldWdWRITXBMQ0JqYkdWaGNsUnBiV1Z2ZFhRcE8xeHVmVHRjYm1WNGNHOXlkSE11YzJWMFNXNTBaWEoyWVd3Z1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QlVhVzFsYjNWMEtHRndjR3g1TG1OaGJHd29jMlYwU1c1MFpYSjJZV3dzSUhkcGJtUnZkeXdnWVhKbmRXMWxiblJ6S1N3Z1kyeGxZWEpKYm5SbGNuWmhiQ2s3WEc1OU8xeHVaWGh3YjNKMGN5NWpiR1ZoY2xScGJXVnZkWFFnUFZ4dVpYaHdiM0owY3k1amJHVmhja2x1ZEdWeWRtRnNJRDBnWm5WdVkzUnBiMjRvZEdsdFpXOTFkQ2tnZXlCMGFXMWxiM1YwTG1Oc2IzTmxLQ2s3SUgwN1hHNWNibVoxYm1OMGFXOXVJRlJwYldWdmRYUW9hV1FzSUdOc1pXRnlSbTRwSUh0Y2JpQWdkR2hwY3k1ZmFXUWdQU0JwWkR0Y2JpQWdkR2hwY3k1ZlkyeGxZWEpHYmlBOUlHTnNaV0Z5Um00N1hHNTlYRzVVYVcxbGIzVjBMbkJ5YjNSdmRIbHdaUzUxYm5KbFppQTlJRlJwYldWdmRYUXVjSEp2ZEc5MGVYQmxMbkpsWmlBOUlHWjFibU4wYVc5dUtDa2dlMzA3WEc1VWFXMWxiM1YwTG5CeWIzUnZkSGx3WlM1amJHOXpaU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0IwYUdsekxsOWpiR1ZoY2tadUxtTmhiR3dvZDJsdVpHOTNMQ0IwYUdsekxsOXBaQ2s3WEc1OU8xeHVYRzR2THlCRWIyVnpJRzV2ZENCemRHRnlkQ0IwYUdVZ2RHbHRaU3dnYW5WemRDQnpaWFJ6SUhWd0lIUm9aU0J0WlcxaVpYSnpJRzVsWldSbFpDNWNibVY0Y0c5eWRITXVaVzV5YjJ4c0lEMGdablZ1WTNScGIyNG9hWFJsYlN3Z2JYTmxZM01wSUh0Y2JpQWdZMnhsWVhKVWFXMWxiM1YwS0dsMFpXMHVYMmxrYkdWVWFXMWxiM1YwU1dRcE8xeHVJQ0JwZEdWdExsOXBaR3hsVkdsdFpXOTFkQ0E5SUcxelpXTnpPMXh1ZlR0Y2JseHVaWGh3YjNKMGN5NTFibVZ1Y205c2JDQTlJR1oxYm1OMGFXOXVLR2wwWlcwcElIdGNiaUFnWTJ4bFlYSlVhVzFsYjNWMEtHbDBaVzB1WDJsa2JHVlVhVzFsYjNWMFNXUXBPMXh1SUNCcGRHVnRMbDlwWkd4bFZHbHRaVzkxZENBOUlDMHhPMXh1ZlR0Y2JseHVaWGh3YjNKMGN5NWZkVzV5WldaQlkzUnBkbVVnUFNCbGVIQnZjblJ6TG1GamRHbDJaU0E5SUdaMWJtTjBhVzl1S0dsMFpXMHBJSHRjYmlBZ1kyeGxZWEpVYVcxbGIzVjBLR2wwWlcwdVgybGtiR1ZVYVcxbGIzVjBTV1FwTzF4dVhHNGdJSFpoY2lCdGMyVmpjeUE5SUdsMFpXMHVYMmxrYkdWVWFXMWxiM1YwTzF4dUlDQnBaaUFvYlhObFkzTWdQajBnTUNrZ2UxeHVJQ0FnSUdsMFpXMHVYMmxrYkdWVWFXMWxiM1YwU1dRZ1BTQnpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVJRzl1VkdsdFpXOTFkQ2dwSUh0Y2JpQWdJQ0FnSUdsbUlDaHBkR1Z0TGw5dmJsUnBiV1Z2ZFhRcFhHNGdJQ0FnSUNBZ0lHbDBaVzB1WDI5dVZHbHRaVzkxZENncE8xeHVJQ0FnSUgwc0lHMXpaV056S1R0Y2JpQWdmVnh1ZlR0Y2JseHVMeThnVkdoaGRDZHpJRzV2ZENCb2IzY2dibTlrWlM1cWN5QnBiWEJzWlcxbGJuUnpJR2wwSUdKMWRDQjBhR1VnWlhod2IzTmxaQ0JoY0drZ2FYTWdkR2hsSUhOaGJXVXVYRzVsZUhCdmNuUnpMbk5sZEVsdGJXVmthV0YwWlNBOUlIUjVjR1Z2WmlCelpYUkpiVzFsWkdsaGRHVWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQS9JSE5sZEVsdGJXVmthV0YwWlNBNklHWjFibU4wYVc5dUtHWnVLU0I3WEc0Z0lIWmhjaUJwWkNBOUlHNWxlSFJKYlcxbFpHbGhkR1ZKWkNzck8xeHVJQ0IyWVhJZ1lYSm5jeUE5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUENBeUlEOGdabUZzYzJVZ09pQnpiR2xqWlM1allXeHNLR0Z5WjNWdFpXNTBjeXdnTVNrN1hHNWNiaUFnYVcxdFpXUnBZWFJsU1dSelcybGtYU0E5SUhSeWRXVTdYRzVjYmlBZ2JtVjRkRlJwWTJzb1puVnVZM1JwYjI0Z2IyNU9aWGgwVkdsamF5Z3BJSHRjYmlBZ0lDQnBaaUFvYVcxdFpXUnBZWFJsU1dSelcybGtYU2tnZTF4dUlDQWdJQ0FnTHk4Z1ptNHVZMkZzYkNncElHbHpJR1poYzNSbGNpQnpieUIzWlNCdmNIUnBiV2w2WlNCbWIzSWdkR2hsSUdOdmJXMXZiaUIxYzJVdFkyRnpaVnh1SUNBZ0lDQWdMeThnUUhObFpTQm9kSFJ3T2k4dmFuTndaWEptTG1OdmJTOWpZV3hzTFdGd2NHeDVMWE5sWjNWY2JpQWdJQ0FnSUdsbUlDaGhjbWR6S1NCN1hHNGdJQ0FnSUNBZ0lHWnVMbUZ3Y0d4NUtHNTFiR3dzSUdGeVozTXBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdabTR1WTJGc2JDaHVkV3hzS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUM4dklGQnlaWFpsYm5RZ2FXUnpJR1p5YjIwZ2JHVmhhMmx1WjF4dUlDQWdJQ0FnWlhod2IzSjBjeTVqYkdWaGNrbHRiV1ZrYVdGMFpTaHBaQ2s3WEc0Z0lDQWdmVnh1SUNCOUtUdGNibHh1SUNCeVpYUjFjbTRnYVdRN1hHNTlPMXh1WEc1bGVIQnZjblJ6TG1Oc1pXRnlTVzF0WldScFlYUmxJRDBnZEhsd1pXOW1JR05zWldGeVNXMXRaV1JwWVhSbElEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ1B5QmpiR1ZoY2tsdGJXVmthV0YwWlNBNklHWjFibU4wYVc5dUtHbGtLU0I3WEc0Z0lHUmxiR1YwWlNCcGJXMWxaR2xoZEdWSlpITmJhV1JkTzF4dWZUc2lMQ0pjYmk4cUtseHVJQ29nVFc5a2RXeGxJR1Y0Y0c5eWRITXVYRzRnS2k5Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmtaWEJ5WldOaGRHVTdYRzVjYmk4cUtseHVJQ29nVFdGeWF5QjBhR0YwSUdFZ2JXVjBhRzlrSUhOb2IzVnNaQ0J1YjNRZ1ltVWdkWE5sWkM1Y2JpQXFJRkpsZEhWeWJuTWdZU0J0YjJScFptbGxaQ0JtZFc1amRHbHZiaUIzYUdsamFDQjNZWEp1Y3lCdmJtTmxJR0o1SUdSbFptRjFiSFF1WEc0Z0tseHVJQ29nU1dZZ1lHeHZZMkZzVTNSdmNtRm5aUzV1YjBSbGNISmxZMkYwYVc5dUlEMGdkSEoxWldBZ2FYTWdjMlYwTENCMGFHVnVJR2wwSUdseklHRWdibTh0YjNBdVhHNGdLbHh1SUNvZ1NXWWdZR3h2WTJGc1UzUnZjbUZuWlM1MGFISnZkMFJsY0hKbFkyRjBhVzl1SUQwZ2RISjFaV0FnYVhNZ2MyVjBMQ0IwYUdWdUlHUmxjSEpsWTJGMFpXUWdablZ1WTNScGIyNXpYRzRnS2lCM2FXeHNJSFJvY205M0lHRnVJRVZ5Y205eUlIZG9aVzRnYVc1MmIydGxaQzVjYmlBcVhHNGdLaUJKWmlCZ2JHOWpZV3hUZEc5eVlXZGxMblJ5WVdObFJHVndjbVZqWVhScGIyNGdQU0IwY25WbFlDQnBjeUJ6WlhRc0lIUm9aVzRnWkdWd2NtVmpZWFJsWkNCbWRXNWpkR2x2Ym5OY2JpQXFJSGRwYkd3Z2FXNTJiMnRsSUdCamIyNXpiMnhsTG5SeVlXTmxLQ2xnSUdsdWMzUmxZV1FnYjJZZ1lHTnZibk52YkdVdVpYSnliM0lvS1dBdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1ptNGdMU0IwYUdVZ1puVnVZM1JwYjI0Z2RHOGdaR1Z3Y21WallYUmxYRzRnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYlhObklDMGdkR2hsSUhOMGNtbHVaeUIwYnlCd2NtbHVkQ0IwYnlCMGFHVWdZMjl1YzI5c1pTQjNhR1Z1SUdCbWJtQWdhWE1nYVc1MmIydGxaRnh1SUNvZ1FISmxkSFZ5Ym5NZ2UwWjFibU4wYVc5dWZTQmhJRzVsZHlCY0ltUmxjSEpsWTJGMFpXUmNJaUIyWlhKemFXOXVJRzltSUdCbWJtQmNiaUFxSUVCaGNHa2djSFZpYkdsalhHNGdLaTljYmx4dVpuVnVZM1JwYjI0Z1pHVndjbVZqWVhSbElDaG1iaXdnYlhObktTQjdYRzRnSUdsbUlDaGpiMjVtYVdjb0oyNXZSR1Z3Y21WallYUnBiMjRuS1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJtYmp0Y2JpQWdmVnh1WEc0Z0lIWmhjaUIzWVhKdVpXUWdQU0JtWVd4elpUdGNiaUFnWm5WdVkzUnBiMjRnWkdWd2NtVmpZWFJsWkNncElIdGNiaUFnSUNCcFppQW9JWGRoY201bFpDa2dlMXh1SUNBZ0lDQWdhV1lnS0dOdmJtWnBaeWduZEdoeWIzZEVaWEJ5WldOaGRHbHZiaWNwS1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lodGMyY3BPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hqYjI1bWFXY29KM1J5WVdObFJHVndjbVZqWVhScGIyNG5LU2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG5SeVlXTmxLRzF6WnlrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9iWE5uS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhkaGNtNWxaQ0E5SUhSeWRXVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJtYmk1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR1JsY0hKbFkyRjBaV1E3WEc1OVhHNWNiaThxS2x4dUlDb2dRMmhsWTJ0eklHQnNiMk5oYkZOMGIzSmhaMlZnSUdadmNpQmliMjlzWldGdUlIWmhiSFZsY3lCbWIzSWdkR2hsSUdkcGRtVnVJR0J1WVcxbFlDNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2JtRnRaVnh1SUNvZ1FISmxkSFZ5Ym5NZ2UwSnZiMnhsWVc1OVhHNGdLaUJBWVhCcElIQnlhWFpoZEdWY2JpQXFMMXh1WEc1bWRXNWpkR2x2YmlCamIyNW1hV2NnS0c1aGJXVXBJSHRjYmlBZ0x5OGdZV05qWlhOemFXNW5JR2RzYjJKaGJDNXNiMk5oYkZOMGIzSmhaMlVnWTJGdUlIUnlhV2RuWlhJZ1lTQkVUMDFGZUdObGNIUnBiMjRnYVc0Z2MyRnVaR0p2ZUdWa0lHbG1jbUZ0WlhOY2JpQWdkSEo1SUh0Y2JpQWdJQ0JwWmlBb0lXZHNiMkpoYkM1c2IyTmhiRk4wYjNKaFoyVXBJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdmU0JqWVhSamFDQW9YeWtnZTF4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdmVnh1SUNCMllYSWdkbUZzSUQwZ1oyeHZZbUZzTG14dlkyRnNVM1J2Y21GblpWdHVZVzFsWFR0Y2JpQWdhV1lnS0c1MWJHd2dQVDBnZG1Gc0tTQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lISmxkSFZ5YmlCVGRISnBibWNvZG1Gc0tTNTBiMHh2ZDJWeVEyRnpaU2dwSUQwOVBTQW5kSEoxWlNjN1hHNTlYRzRpTENKcFppQW9kSGx3Wlc5bUlFOWlhbVZqZEM1amNtVmhkR1VnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0x5OGdhVzF3YkdWdFpXNTBZWFJwYjI0Z1puSnZiU0J6ZEdGdVpHRnlaQ0J1YjJSbExtcHpJQ2QxZEdsc0p5QnRiMlIxYkdWY2JpQWdiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQnBibWhsY21sMGN5aGpkRzl5TENCemRYQmxja04wYjNJcElIdGNiaUFnSUNCamRHOXlMbk4xY0dWeVh5QTlJSE4xY0dWeVEzUnZjbHh1SUNBZ0lHTjBiM0l1Y0hKdmRHOTBlWEJsSUQwZ1QySnFaV04wTG1OeVpXRjBaU2h6ZFhCbGNrTjBiM0l1Y0hKdmRHOTBlWEJsTENCN1hHNGdJQ0FnSUNCamIyNXpkSEoxWTNSdmNqb2dlMXh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dZM1J2Y2l4Y2JpQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lIZHlhWFJoWW14bE9pQjBjblZsTEZ4dUlDQWdJQ0FnSUNCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdWY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdmVHRjYm4wZ1pXeHpaU0I3WEc0Z0lDOHZJRzlzWkNCelkyaHZiMndnYzJocGJTQm1iM0lnYjJ4a0lHSnliM2R6WlhKelhHNGdJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdhVzVvWlhKcGRITW9ZM1J2Y2l3Z2MzVndaWEpEZEc5eUtTQjdYRzRnSUNBZ1kzUnZjaTV6ZFhCbGNsOGdQU0J6ZFhCbGNrTjBiM0pjYmlBZ0lDQjJZWElnVkdWdGNFTjBiM0lnUFNCbWRXNWpkR2x2YmlBb0tTQjdmVnh1SUNBZ0lGUmxiWEJEZEc5eUxuQnliM1J2ZEhsd1pTQTlJSE4xY0dWeVEzUnZjaTV3Y205MGIzUjVjR1ZjYmlBZ0lDQmpkRzl5TG5CeWIzUnZkSGx3WlNBOUlHNWxkeUJVWlcxd1EzUnZjaWdwWEc0Z0lDQWdZM1J2Y2k1d2NtOTBiM1I1Y0dVdVkyOXVjM1J5ZFdOMGIzSWdQU0JqZEc5eVhHNGdJSDFjYm4xY2JpSXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdhWE5DZFdabVpYSW9ZWEpuS1NCN1hHNGdJSEpsZEhWeWJpQmhjbWNnSmlZZ2RIbHdaVzltSUdGeVp5QTlQVDBnSjI5aWFtVmpkQ2RjYmlBZ0lDQW1KaUIwZVhCbGIyWWdZWEpuTG1OdmNIa2dQVDA5SUNkbWRXNWpkR2x2YmlkY2JpQWdJQ0FtSmlCMGVYQmxiMllnWVhKbkxtWnBiR3dnUFQwOUlDZG1kVzVqZEdsdmJpZGNiaUFnSUNBbUppQjBlWEJsYjJZZ1lYSm5MbkpsWVdSVlNXNTBPQ0E5UFQwZ0oyWjFibU4wYVc5dUp6dGNibjBpTENJdkx5QkRiM0I1Y21sbmFIUWdTbTk1Wlc1MExDQkpibU11SUdGdVpDQnZkR2hsY2lCT2IyUmxJR052Ym5SeWFXSjFkRzl5Y3k1Y2JpOHZYRzR2THlCUVpYSnRhWE56YVc5dUlHbHpJR2hsY21WaWVTQm5jbUZ1ZEdWa0xDQm1jbVZsSUc5bUlHTm9ZWEpuWlN3Z2RHOGdZVzU1SUhCbGNuTnZiaUJ2WW5SaGFXNXBibWNnWVZ4dUx5OGdZMjl3ZVNCdlppQjBhR2x6SUhOdlpuUjNZWEpsSUdGdVpDQmhjM052WTJsaGRHVmtJR1J2WTNWdFpXNTBZWFJwYjI0Z1ptbHNaWE1nS0hSb1pWeHVMeThnWENKVGIyWjBkMkZ5WlZ3aUtTd2dkRzhnWkdWaGJDQnBiaUIwYUdVZ1UyOW1kSGRoY21VZ2QybDBhRzkxZENCeVpYTjBjbWxqZEdsdmJpd2dhVzVqYkhWa2FXNW5YRzR2THlCM2FYUm9iM1YwSUd4cGJXbDBZWFJwYjI0Z2RHaGxJSEpwWjJoMGN5QjBieUIxYzJVc0lHTnZjSGtzSUcxdlpHbG1lU3dnYldWeVoyVXNJSEIxWW14cGMyZ3NYRzR2THlCa2FYTjBjbWxpZFhSbExDQnpkV0pzYVdObGJuTmxMQ0JoYm1RdmIzSWdjMlZzYkNCamIzQnBaWE1nYjJZZ2RHaGxJRk52Wm5SM1lYSmxMQ0JoYm1RZ2RHOGdjR1Z5YldsMFhHNHZMeUJ3WlhKemIyNXpJSFJ2SUhkb2IyMGdkR2hsSUZOdlpuUjNZWEpsSUdseklHWjFjbTVwYzJobFpDQjBieUJrYnlCemJ5d2djM1ZpYW1WamRDQjBieUIwYUdWY2JpOHZJR1p2Ykd4dmQybHVaeUJqYjI1a2FYUnBiMjV6T2x4dUx5OWNiaTh2SUZSb1pTQmhZbTkyWlNCamIzQjVjbWxuYUhRZ2JtOTBhV05sSUdGdVpDQjBhR2x6SUhCbGNtMXBjM05wYjI0Z2JtOTBhV05sSUhOb1lXeHNJR0psSUdsdVkyeDFaR1ZrWEc0dkx5QnBiaUJoYkd3Z1kyOXdhV1Z6SUc5eUlITjFZbk4wWVc1MGFXRnNJSEJ2Y25ScGIyNXpJRzltSUhSb1pTQlRiMlowZDJGeVpTNWNiaTh2WEc0dkx5QlVTRVVnVTA5R1ZGZEJVa1VnU1ZNZ1VGSlBWa2xFUlVRZ1hDSkJVeUJKVTF3aUxDQlhTVlJJVDFWVUlGZEJVbEpCVGxSWklFOUdJRUZPV1NCTFNVNUVMQ0JGV0ZCU1JWTlRYRzR2THlCUFVpQkpUVkJNU1VWRUxDQkpUa05NVlVSSlRrY2dRbFZVSUU1UFZDQk1TVTFKVkVWRUlGUlBJRlJJUlNCWFFWSlNRVTVVU1VWVElFOUdYRzR2THlCTlJWSkRTRUZPVkVGQ1NVeEpWRmtzSUVaSlZFNUZVMU1nUms5U0lFRWdVRUZTVkVsRFZVeEJVaUJRVlZKUVQxTkZJRUZPUkNCT1QwNUpUa1pTU1U1SFJVMUZUbFF1SUVsT1hHNHZMeUJPVHlCRlZrVk9WQ0JUU0VGTVRDQlVTRVVnUVZWVVNFOVNVeUJQVWlCRFQxQlpVa2xIU0ZRZ1NFOU1SRVZTVXlCQ1JTQk1TVUZDVEVVZ1JrOVNJRUZPV1NCRFRFRkpUU3hjYmk4dklFUkJUVUZIUlZNZ1QxSWdUMVJJUlZJZ1RFbEJRa2xNU1ZSWkxDQlhTRVZVU0VWU0lFbE9JRUZPSUVGRFZFbFBUaUJQUmlCRFQwNVVVa0ZEVkN3Z1ZFOVNWQ0JQVWx4dUx5OGdUMVJJUlZKWFNWTkZMQ0JCVWtsVFNVNUhJRVpTVDAwc0lFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPSUZkSlZFZ2dWRWhGSUZOUFJsUlhRVkpGSUU5U0lGUklSVnh1THk4Z1ZWTkZJRTlTSUU5VVNFVlNJRVJGUVV4SlRrZFRJRWxPSUZSSVJTQlRUMFpVVjBGU1JTNWNibHh1ZG1GeUlHWnZjbTFoZEZKbFowVjRjQ0E5SUM4bFczTmthaVZkTDJjN1hHNWxlSEJ2Y25SekxtWnZjbTFoZENBOUlHWjFibU4wYVc5dUtHWXBJSHRjYmlBZ2FXWWdLQ0ZwYzFOMGNtbHVaeWhtS1NrZ2UxeHVJQ0FnSUhaaGNpQnZZbXBsWTNSeklEMGdXMTA3WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JoY21kMWJXVnVkSE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lHOWlhbVZqZEhNdWNIVnphQ2hwYm5Od1pXTjBLR0Z5WjNWdFpXNTBjMXRwWFNrcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdiMkpxWldOMGN5NXFiMmx1S0NjZ0p5azdYRzRnSUgxY2JseHVJQ0IyWVhJZ2FTQTlJREU3WEc0Z0lIWmhjaUJoY21keklEMGdZWEpuZFcxbGJuUnpPMXh1SUNCMllYSWdiR1Z1SUQwZ1lYSm5jeTVzWlc1bmRHZzdYRzRnSUhaaGNpQnpkSElnUFNCVGRISnBibWNvWmlrdWNtVndiR0ZqWlNobWIzSnRZWFJTWldkRmVIQXNJR1oxYm1OMGFXOXVLSGdwSUh0Y2JpQWdJQ0JwWmlBb2VDQTlQVDBnSnlVbEp5a2djbVYwZFhKdUlDY2xKenRjYmlBZ0lDQnBaaUFvYVNBK1BTQnNaVzRwSUhKbGRIVnliaUI0TzF4dUlDQWdJSE4zYVhSamFDQW9lQ2tnZTF4dUlDQWdJQ0FnWTJGelpTQW5KWE1uT2lCeVpYUjFjbTRnVTNSeWFXNW5LR0Z5WjNOYmFTc3JYU2s3WEc0Z0lDQWdJQ0JqWVhObElDY2xaQ2M2SUhKbGRIVnliaUJPZFcxaVpYSW9ZWEpuYzF0cEt5dGRLVHRjYmlBZ0lDQWdJR05oYzJVZ0p5VnFKenBjYmlBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdTbE5QVGk1emRISnBibWRwWm5rb1lYSm5jMXRwS3l0ZEtUdGNiaUFnSUNBZ0lDQWdmU0JqWVhSamFDQW9YeWtnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBblcwTnBjbU4xYkdGeVhTYzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjRPMXh1SUNBZ0lIMWNiaUFnZlNrN1hHNGdJR1p2Y2lBb2RtRnlJSGdnUFNCaGNtZHpXMmxkT3lCcElEd2diR1Z1T3lCNElEMGdZWEpuYzFzcksybGRLU0I3WEc0Z0lDQWdhV1lnS0dselRuVnNiQ2g0S1NCOGZDQWhhWE5QWW1wbFkzUW9lQ2twSUh0Y2JpQWdJQ0FnSUhOMGNpQXJQU0FuSUNjZ0t5QjRPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCemRISWdLejBnSnlBbklDc2dhVzV6Y0dWamRDaDRLVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdjbVYwZFhKdUlITjBjanRjYm4wN1hHNWNibHh1THk4Z1RXRnlheUIwYUdGMElHRWdiV1YwYUc5a0lITm9iM1ZzWkNCdWIzUWdZbVVnZFhObFpDNWNiaTh2SUZKbGRIVnlibk1nWVNCdGIyUnBabWxsWkNCbWRXNWpkR2x2YmlCM2FHbGphQ0IzWVhKdWN5QnZibU5sSUdKNUlHUmxabUYxYkhRdVhHNHZMeUJKWmlBdExXNXZMV1JsY0hKbFkyRjBhVzl1SUdseklITmxkQ3dnZEdobGJpQnBkQ0JwY3lCaElHNXZMVzl3TGx4dVpYaHdiM0owY3k1a1pYQnlaV05oZEdVZ1BTQm1kVzVqZEdsdmJpaG1iaXdnYlhObktTQjdYRzRnSUM4dklFRnNiRzkzSUdadmNpQmtaWEJ5WldOaGRHbHVaeUIwYUdsdVozTWdhVzRnZEdobElIQnliMk5sYzNNZ2IyWWdjM1JoY25ScGJtY2dkWEF1WEc0Z0lHbG1JQ2hwYzFWdVpHVm1hVzVsWkNobmJHOWlZV3d1Y0hKdlkyVnpjeWtwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdaWGh3YjNKMGN5NWtaWEJ5WldOaGRHVW9abTRzSUcxelp5a3VZWEJ3Ykhrb2RHaHBjeXdnWVhKbmRXMWxiblJ6S1R0Y2JpQWdJQ0I5TzF4dUlDQjlYRzVjYmlBZ2FXWWdLSEJ5YjJObGMzTXVibTlFWlhCeVpXTmhkR2x2YmlBOVBUMGdkSEoxWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJtYmp0Y2JpQWdmVnh1WEc0Z0lIWmhjaUIzWVhKdVpXUWdQU0JtWVd4elpUdGNiaUFnWm5WdVkzUnBiMjRnWkdWd2NtVmpZWFJsWkNncElIdGNiaUFnSUNCcFppQW9JWGRoY201bFpDa2dlMXh1SUNBZ0lDQWdhV1lnS0hCeWIyTmxjM011ZEdoeWIzZEVaWEJ5WldOaGRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvYlhObktUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jSEp2WTJWemN5NTBjbUZqWlVSbGNISmxZMkYwYVc5dUtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVkSEpoWTJVb2JYTm5LVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb2JYTm5LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSGRoY201bFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQm1iaTVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHUmxjSEpsWTJGMFpXUTdYRzU5TzF4dVhHNWNiblpoY2lCa1pXSjFaM01nUFNCN2ZUdGNiblpoY2lCa1pXSjFaMFZ1ZG1seWIyNDdYRzVsZUhCdmNuUnpMbVJsWW5WbmJHOW5JRDBnWm5WdVkzUnBiMjRvYzJWMEtTQjdYRzRnSUdsbUlDaHBjMVZ1WkdWbWFXNWxaQ2hrWldKMVowVnVkbWx5YjI0cEtWeHVJQ0FnSUdSbFluVm5SVzUyYVhKdmJpQTlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSRVZDVlVjZ2ZId2dKeWM3WEc0Z0lITmxkQ0E5SUhObGRDNTBiMVZ3Y0dWeVEyRnpaU2dwTzF4dUlDQnBaaUFvSVdSbFluVm5jMXR6WlhSZEtTQjdYRzRnSUNBZ2FXWWdLRzVsZHlCU1pXZEZlSEFvSjF4Y1hGeGlKeUFySUhObGRDQXJJQ2RjWEZ4Y1lpY3NJQ2RwSnlrdWRHVnpkQ2hrWldKMVowVnVkbWx5YjI0cEtTQjdYRzRnSUNBZ0lDQjJZWElnY0dsa0lEMGdjSEp2WTJWemN5NXdhV1E3WEc0Z0lDQWdJQ0JrWldKMVozTmJjMlYwWFNBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JYTm5JRDBnWlhod2IzSjBjeTVtYjNKdFlYUXVZWEJ3Ykhrb1pYaHdiM0owY3l3Z1lYSm5kVzFsYm5SektUdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnbkpYTWdKV1E2SUNWekp5d2djMlYwTENCd2FXUXNJRzF6WnlrN1hHNGdJQ0FnSUNCOU8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JrWldKMVozTmJjMlYwWFNBOUlHWjFibU4wYVc5dUtDa2dlMzA3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQmtaV0oxWjNOYmMyVjBYVHRjYm4wN1hHNWNibHh1THlvcVhHNGdLaUJGWTJodmN5QjBhR1VnZG1Gc2RXVWdiMllnWVNCMllXeDFaUzRnVkhKNWN5QjBieUJ3Y21sdWRDQjBhR1VnZG1Gc2RXVWdiM1YwWEc0Z0tpQnBiaUIwYUdVZ1ltVnpkQ0IzWVhrZ2NHOXpjMmxpYkdVZ1oybDJaVzRnZEdobElHUnBabVpsY21WdWRDQjBlWEJsY3k1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjJKcUlGUm9aU0J2WW1wbFkzUWdkRzhnY0hKcGJuUWdiM1YwTGx4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkSE1nVDNCMGFXOXVZV3dnYjNCMGFXOXVjeUJ2WW1wbFkzUWdkR2hoZENCaGJIUmxjbk1nZEdobElHOTFkSEIxZEM1Y2JpQXFMMXh1THlvZ2JHVm5ZV041T2lCdlltb3NJSE5vYjNkSWFXUmtaVzRzSUdSbGNIUm9MQ0JqYjJ4dmNuTXFMMXh1Wm5WdVkzUnBiMjRnYVc1emNHVmpkQ2h2WW1vc0lHOXdkSE1wSUh0Y2JpQWdMeThnWkdWbVlYVnNkQ0J2Y0hScGIyNXpYRzRnSUhaaGNpQmpkSGdnUFNCN1hHNGdJQ0FnYzJWbGJqb2dXMTBzWEc0Z0lDQWdjM1I1YkdsNlpUb2djM1I1YkdsNlpVNXZRMjlzYjNKY2JpQWdmVHRjYmlBZ0x5OGdiR1ZuWVdONUxpNHVYRzRnSUdsbUlDaGhjbWQxYldWdWRITXViR1Z1WjNSb0lENDlJRE1wSUdOMGVDNWtaWEIwYUNBOUlHRnlaM1Z0Wlc1MGMxc3lYVHRjYmlBZ2FXWWdLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQajBnTkNrZ1kzUjRMbU52Ykc5eWN5QTlJR0Z5WjNWdFpXNTBjMXN6WFR0Y2JpQWdhV1lnS0dselFtOXZiR1ZoYmlodmNIUnpLU2tnZTF4dUlDQWdJQzh2SUd4bFoyRmplUzR1TGx4dUlDQWdJR04wZUM1emFHOTNTR2xrWkdWdUlEMGdiM0IwY3p0Y2JpQWdmU0JsYkhObElHbG1JQ2h2Y0hSektTQjdYRzRnSUNBZ0x5OGdaMjkwSUdGdUlGd2liM0IwYVc5dWMxd2lJRzlpYW1WamRGeHVJQ0FnSUdWNGNHOXlkSE11WDJWNGRHVnVaQ2hqZEhnc0lHOXdkSE1wTzF4dUlDQjlYRzRnSUM4dklITmxkQ0JrWldaaGRXeDBJRzl3ZEdsdmJuTmNiaUFnYVdZZ0tHbHpWVzVrWldacGJtVmtLR04wZUM1emFHOTNTR2xrWkdWdUtTa2dZM1I0TG5Ob2IzZElhV1JrWlc0Z1BTQm1ZV3h6WlR0Y2JpQWdhV1lnS0dselZXNWtaV1pwYm1Wa0tHTjBlQzVrWlhCMGFDa3BJR04wZUM1a1pYQjBhQ0E5SURJN1hHNGdJR2xtSUNocGMxVnVaR1ZtYVc1bFpDaGpkSGd1WTI5c2IzSnpLU2tnWTNSNExtTnZiRzl5Y3lBOUlHWmhiSE5sTzF4dUlDQnBaaUFvYVhOVmJtUmxabWx1WldRb1kzUjRMbU4xYzNSdmJVbHVjM0JsWTNRcEtTQmpkSGd1WTNWemRHOXRTVzV6Y0dWamRDQTlJSFJ5ZFdVN1hHNGdJR2xtSUNoamRIZ3VZMjlzYjNKektTQmpkSGd1YzNSNWJHbDZaU0E5SUhOMGVXeHBlbVZYYVhSb1EyOXNiM0k3WEc0Z0lISmxkSFZ5YmlCbWIzSnRZWFJXWVd4MVpTaGpkSGdzSUc5aWFpd2dZM1I0TG1SbGNIUm9LVHRjYm4xY2JtVjRjRzl5ZEhNdWFXNXpjR1ZqZENBOUlHbHVjM0JsWTNRN1hHNWNibHh1THk4Z2FIUjBjRG92TDJWdUxuZHBhMmx3WldScFlTNXZjbWN2ZDJscmFTOUJUbE5KWDJWelkyRndaVjlqYjJSbEkyZHlZWEJvYVdOelhHNXBibk53WldOMExtTnZiRzl5Y3lBOUlIdGNiaUFnSjJKdmJHUW5JRG9nV3pFc0lESXlYU3hjYmlBZ0oybDBZV3hwWXljZ09pQmJNeXdnTWpOZExGeHVJQ0FuZFc1a1pYSnNhVzVsSnlBNklGczBMQ0F5TkYwc1hHNGdJQ2RwYm5abGNuTmxKeUE2SUZzM0xDQXlOMTBzWEc0Z0lDZDNhR2wwWlNjZ09pQmJNemNzSURNNVhTeGNiaUFnSjJkeVpYa25JRG9nV3prd0xDQXpPVjBzWEc0Z0lDZGliR0ZqYXljZ09pQmJNekFzSURNNVhTeGNiaUFnSjJKc2RXVW5JRG9nV3pNMExDQXpPVjBzWEc0Z0lDZGplV0Z1SnlBNklGc3pOaXdnTXpsZExGeHVJQ0FuWjNKbFpXNG5JRG9nV3pNeUxDQXpPVjBzWEc0Z0lDZHRZV2RsYm5SaEp5QTZJRnN6TlN3Z016bGRMRnh1SUNBbmNtVmtKeUE2SUZzek1Td2dNemxkTEZ4dUlDQW5lV1ZzYkc5M0p5QTZJRnN6TXl3Z016bGRYRzU5TzF4dVhHNHZMeUJFYjI0bmRDQjFjMlVnSjJKc2RXVW5JRzV2ZENCMmFYTnBZbXhsSUc5dUlHTnRaQzVsZUdWY2JtbHVjM0JsWTNRdWMzUjViR1Z6SUQwZ2UxeHVJQ0FuYzNCbFkybGhiQ2M2SUNkamVXRnVKeXhjYmlBZ0oyNTFiV0psY2ljNklDZDVaV3hzYjNjbkxGeHVJQ0FuWW05dmJHVmhiaWM2SUNkNVpXeHNiM2NuTEZ4dUlDQW5kVzVrWldacGJtVmtKem9nSjJkeVpYa25MRnh1SUNBbmJuVnNiQ2M2SUNkaWIyeGtKeXhjYmlBZ0ozTjBjbWx1WnljNklDZG5jbVZsYmljc1hHNGdJQ2RrWVhSbEp6b2dKMjFoWjJWdWRHRW5MRnh1SUNBdkx5QmNJbTVoYldWY0lqb2dhVzUwWlc1MGFXOXVZV3hzZVNCdWIzUWdjM1I1YkdsdVoxeHVJQ0FuY21WblpYaHdKem9nSjNKbFpDZGNibjA3WEc1Y2JseHVablZ1WTNScGIyNGdjM1I1YkdsNlpWZHBkR2hEYjJ4dmNpaHpkSElzSUhOMGVXeGxWSGx3WlNrZ2UxeHVJQ0IyWVhJZ2MzUjViR1VnUFNCcGJuTndaV04wTG5OMGVXeGxjMXR6ZEhsc1pWUjVjR1ZkTzF4dVhHNGdJR2xtSUNoemRIbHNaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQW5YRngxTURBeFlsc25JQ3NnYVc1emNHVmpkQzVqYjJ4dmNuTmJjM1I1YkdWZFd6QmRJQ3NnSjIwbklDc2djM1J5SUN0Y2JpQWdJQ0FnSUNBZ0lDQWdKMXhjZFRBd01XSmJKeUFySUdsdWMzQmxZM1F1WTI5c2IzSnpXM04wZVd4bFhWc3hYU0FySUNkdEp6dGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnlaWFIxY200Z2MzUnlPMXh1SUNCOVhHNTlYRzVjYmx4dVpuVnVZM1JwYjI0Z2MzUjViR2w2WlU1dlEyOXNiM0lvYzNSeUxDQnpkSGxzWlZSNWNHVXBJSHRjYmlBZ2NtVjBkWEp1SUhOMGNqdGNibjFjYmx4dVhHNW1kVzVqZEdsdmJpQmhjbkpoZVZSdlNHRnphQ2hoY25KaGVTa2dlMXh1SUNCMllYSWdhR0Z6YUNBOUlIdDlPMXh1WEc0Z0lHRnljbUY1TG1admNrVmhZMmdvWm5WdVkzUnBiMjRvZG1Gc0xDQnBaSGdwSUh0Y2JpQWdJQ0JvWVhOb1czWmhiRjBnUFNCMGNuVmxPMXh1SUNCOUtUdGNibHh1SUNCeVpYUjFjbTRnYUdGemFEdGNibjFjYmx4dVhHNW1kVzVqZEdsdmJpQm1iM0p0WVhSV1lXeDFaU2hqZEhnc0lIWmhiSFZsTENCeVpXTjFjbk5sVkdsdFpYTXBJSHRjYmlBZ0x5OGdVSEp2ZG1sa1pTQmhJR2h2YjJzZ1ptOXlJSFZ6WlhJdGMzQmxZMmxtYVdWa0lHbHVjM0JsWTNRZ1puVnVZM1JwYjI1ekxseHVJQ0F2THlCRGFHVmpheUIwYUdGMElIWmhiSFZsSUdseklHRnVJRzlpYW1WamRDQjNhWFJvSUdGdUlHbHVjM0JsWTNRZ1puVnVZM1JwYjI0Z2IyNGdhWFJjYmlBZ2FXWWdLR04wZUM1amRYTjBiMjFKYm5Od1pXTjBJQ1ltWEc0Z0lDQWdJQ0IyWVd4MVpTQW1KbHh1SUNBZ0lDQWdhWE5HZFc1amRHbHZiaWgyWVd4MVpTNXBibk53WldOMEtTQW1KbHh1SUNBZ0lDQWdMeThnUm1sc2RHVnlJRzkxZENCMGFHVWdkWFJwYkNCdGIyUjFiR1VzSUdsMEozTWdhVzV6Y0dWamRDQm1kVzVqZEdsdmJpQnBjeUJ6Y0dWamFXRnNYRzRnSUNBZ0lDQjJZV3gxWlM1cGJuTndaV04wSUNFOVBTQmxlSEJ2Y25SekxtbHVjM0JsWTNRZ0ppWmNiaUFnSUNBZ0lDOHZJRUZzYzI4Z1ptbHNkR1Z5SUc5MWRDQmhibmtnY0hKdmRHOTBlWEJsSUc5aWFtVmpkSE1nZFhOcGJtY2dkR2hsSUdOcGNtTjFiR0Z5SUdOb1pXTnJMbHh1SUNBZ0lDQWdJU2gyWVd4MVpTNWpiMjV6ZEhKMVkzUnZjaUFtSmlCMllXeDFaUzVqYjI1emRISjFZM1J2Y2k1d2NtOTBiM1I1Y0dVZ1BUMDlJSFpoYkhWbEtTa2dlMXh1SUNBZ0lIWmhjaUJ5WlhRZ1BTQjJZV3gxWlM1cGJuTndaV04wS0hKbFkzVnljMlZVYVcxbGN5d2dZM1I0S1R0Y2JpQWdJQ0JwWmlBb0lXbHpVM1J5YVc1bktISmxkQ2twSUh0Y2JpQWdJQ0FnSUhKbGRDQTlJR1p2Y20xaGRGWmhiSFZsS0dOMGVDd2djbVYwTENCeVpXTjFjbk5sVkdsdFpYTXBPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnY21WME8xeHVJQ0I5WEc1Y2JpQWdMeThnVUhKcGJXbDBhWFpsSUhSNWNHVnpJR05oYm01dmRDQm9ZWFpsSUhCeWIzQmxjblJwWlhOY2JpQWdkbUZ5SUhCeWFXMXBkR2wyWlNBOUlHWnZjbTFoZEZCeWFXMXBkR2wyWlNoamRIZ3NJSFpoYkhWbEtUdGNiaUFnYVdZZ0tIQnlhVzFwZEdsMlpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCd2NtbHRhWFJwZG1VN1hHNGdJSDFjYmx4dUlDQXZMeUJNYjI5cklIVndJSFJvWlNCclpYbHpJRzltSUhSb1pTQnZZbXBsWTNRdVhHNGdJSFpoY2lCclpYbHpJRDBnVDJKcVpXTjBMbXRsZVhNb2RtRnNkV1VwTzF4dUlDQjJZWElnZG1semFXSnNaVXRsZVhNZ1BTQmhjbkpoZVZSdlNHRnphQ2hyWlhsektUdGNibHh1SUNCcFppQW9ZM1I0TG5Ob2IzZElhV1JrWlc0cElIdGNiaUFnSUNCclpYbHpJRDBnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1vZG1Gc2RXVXBPMXh1SUNCOVhHNWNiaUFnTHk4Z1NVVWdaRzlsYzI0bmRDQnRZV3RsSUdWeWNtOXlJR1pwWld4a2N5QnViMjR0Wlc1MWJXVnlZV0pzWlZ4dUlDQXZMeUJvZEhSd09pOHZiWE5rYmk1dGFXTnliM052Wm5RdVkyOXRMMlZ1TFhWekwyeHBZbkpoY25rdmFXVXZaSGQzTlRKelluUW9kajEyY3k0NU5Da3VZWE53ZUZ4dUlDQnBaaUFvYVhORmNuSnZjaWgyWVd4MVpTbGNiaUFnSUNBZ0lDWW1JQ2hyWlhsekxtbHVaR1Y0VDJZb0oyMWxjM05oWjJVbktTQStQU0F3SUh4OElHdGxlWE11YVc1a1pYaFBaaWduWkdWelkzSnBjSFJwYjI0bktTQStQU0F3S1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJtYjNKdFlYUkZjbkp2Y2loMllXeDFaU2s3WEc0Z0lIMWNibHh1SUNBdkx5QlRiMjFsSUhSNWNHVWdiMllnYjJKcVpXTjBJSGRwZEdodmRYUWdjSEp2Y0dWeWRHbGxjeUJqWVc0Z1ltVWdjMmh2Y25SamRYUjBaV1F1WEc0Z0lHbG1JQ2hyWlhsekxteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJR2xtSUNocGMwWjFibU4wYVc5dUtIWmhiSFZsS1NrZ2UxeHVJQ0FnSUNBZ2RtRnlJRzVoYldVZ1BTQjJZV3gxWlM1dVlXMWxJRDhnSnpvZ0p5QXJJSFpoYkhWbExtNWhiV1VnT2lBbkp6dGNiaUFnSUNBZ0lISmxkSFZ5YmlCamRIZ3VjM1I1YkdsNlpTZ25XMFoxYm1OMGFXOXVKeUFySUc1aGJXVWdLeUFuWFNjc0lDZHpjR1ZqYVdGc0p5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHBjMUpsWjBWNGNDaDJZV3gxWlNrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCamRIZ3VjM1I1YkdsNlpTaFNaV2RGZUhBdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bkxtTmhiR3dvZG1Gc2RXVXBMQ0FuY21WblpYaHdKeWs3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hwYzBSaGRHVW9kbUZzZFdVcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1kzUjRMbk4wZVd4cGVtVW9SR0YwWlM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2gyWVd4MVpTa3NJQ2RrWVhSbEp5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHBjMFZ5Y205eUtIWmhiSFZsS1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdadmNtMWhkRVZ5Y205eUtIWmhiSFZsS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCMllYSWdZbUZ6WlNBOUlDY25MQ0JoY25KaGVTQTlJR1poYkhObExDQmljbUZqWlhNZ1BTQmJKM3NuTENBbmZTZGRPMXh1WEc0Z0lDOHZJRTFoYTJVZ1FYSnlZWGtnYzJGNUlIUm9ZWFFnZEdobGVTQmhjbVVnUVhKeVlYbGNiaUFnYVdZZ0tHbHpRWEp5WVhrb2RtRnNkV1VwS1NCN1hHNGdJQ0FnWVhKeVlYa2dQU0IwY25WbE8xeHVJQ0FnSUdKeVlXTmxjeUE5SUZzbld5Y3NJQ2RkSjEwN1hHNGdJSDFjYmx4dUlDQXZMeUJOWVd0bElHWjFibU4wYVc5dWN5QnpZWGtnZEdoaGRDQjBhR1Y1SUdGeVpTQm1kVzVqZEdsdmJuTmNiaUFnYVdZZ0tHbHpSblZ1WTNScGIyNG9kbUZzZFdVcEtTQjdYRzRnSUNBZ2RtRnlJRzRnUFNCMllXeDFaUzV1WVcxbElEOGdKem9nSnlBcklIWmhiSFZsTG01aGJXVWdPaUFuSnp0Y2JpQWdJQ0JpWVhObElEMGdKeUJiUm5WdVkzUnBiMjRuSUNzZ2JpQXJJQ2RkSnp0Y2JpQWdmVnh1WEc0Z0lDOHZJRTFoYTJVZ1VtVm5SWGh3Y3lCellYa2dkR2hoZENCMGFHVjVJR0Z5WlNCU1pXZEZlSEJ6WEc0Z0lHbG1JQ2hwYzFKbFowVjRjQ2gyWVd4MVpTa3BJSHRjYmlBZ0lDQmlZWE5sSUQwZ0p5QW5JQ3NnVW1WblJYaHdMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeTVqWVd4c0tIWmhiSFZsS1R0Y2JpQWdmVnh1WEc0Z0lDOHZJRTFoYTJVZ1pHRjBaWE1nZDJsMGFDQndjbTl3WlhKMGFXVnpJR1pwY25OMElITmhlU0IwYUdVZ1pHRjBaVnh1SUNCcFppQW9hWE5FWVhSbEtIWmhiSFZsS1NrZ2UxeHVJQ0FnSUdKaGMyVWdQU0FuSUNjZ0t5QkVZWFJsTG5CeWIzUnZkSGx3WlM1MGIxVlVRMU4wY21sdVp5NWpZV3hzS0haaGJIVmxLVHRjYmlBZ2ZWeHVYRzRnSUM4dklFMWhhMlVnWlhKeWIzSWdkMmwwYUNCdFpYTnpZV2RsSUdacGNuTjBJSE5oZVNCMGFHVWdaWEp5YjNKY2JpQWdhV1lnS0dselJYSnliM0lvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdZbUZ6WlNBOUlDY2dKeUFySUdadmNtMWhkRVZ5Y205eUtIWmhiSFZsS1R0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2hyWlhsekxteGxibWQwYUNBOVBUMGdNQ0FtSmlBb0lXRnljbUY1SUh4OElIWmhiSFZsTG14bGJtZDBhQ0E5UFNBd0tTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCaWNtRmpaWE5iTUYwZ0t5QmlZWE5sSUNzZ1luSmhZMlZ6V3pGZE8xeHVJQ0I5WEc1Y2JpQWdhV1lnS0hKbFkzVnljMlZVYVcxbGN5QThJREFwSUh0Y2JpQWdJQ0JwWmlBb2FYTlNaV2RGZUhBb2RtRnNkV1VwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWTNSNExuTjBlV3hwZW1Vb1VtVm5SWGh3TG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1Wnk1allXeHNLSFpoYkhWbEtTd2dKM0psWjJWNGNDY3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWTNSNExuTjBlV3hwZW1Vb0oxdFBZbXBsWTNSZEp5d2dKM053WldOcFlXd25LVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JqZEhndWMyVmxiaTV3ZFhOb0tIWmhiSFZsS1R0Y2JseHVJQ0IyWVhJZ2IzVjBjSFYwTzF4dUlDQnBaaUFvWVhKeVlYa3BJSHRjYmlBZ0lDQnZkWFJ3ZFhRZ1BTQm1iM0p0WVhSQmNuSmhlU2hqZEhnc0lIWmhiSFZsTENCeVpXTjFjbk5sVkdsdFpYTXNJSFpwYzJsaWJHVkxaWGx6TENCclpYbHpLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J2ZFhSd2RYUWdQU0JyWlhsekxtMWhjQ2htZFc1amRHbHZiaWhyWlhrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbWIzSnRZWFJRY205d1pYSjBlU2hqZEhnc0lIWmhiSFZsTENCeVpXTjFjbk5sVkdsdFpYTXNJSFpwYzJsaWJHVkxaWGx6TENCclpYa3NJR0Z5Y21GNUtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJR04wZUM1elpXVnVMbkJ2Y0NncE8xeHVYRzRnSUhKbGRIVnliaUJ5WldSMVkyVlViMU5wYm1kc1pWTjBjbWx1WnlodmRYUndkWFFzSUdKaGMyVXNJR0p5WVdObGN5azdYRzU5WEc1Y2JseHVablZ1WTNScGIyNGdabTl5YldGMFVISnBiV2wwYVhabEtHTjBlQ3dnZG1Gc2RXVXBJSHRjYmlBZ2FXWWdLR2x6Vlc1a1pXWnBibVZrS0haaGJIVmxLU2xjYmlBZ0lDQnlaWFIxY200Z1kzUjRMbk4wZVd4cGVtVW9KM1Z1WkdWbWFXNWxaQ2NzSUNkMWJtUmxabWx1WldRbktUdGNiaUFnYVdZZ0tHbHpVM1J5YVc1bktIWmhiSFZsS1NrZ2UxeHVJQ0FnSUhaaGNpQnphVzF3YkdVZ1BTQW5YRnduSnlBcklFcFRUMDR1YzNSeWFXNW5hV1o1S0haaGJIVmxLUzV5WlhCc1lXTmxLQzllWENKOFhDSWtMMmNzSUNjbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbkpsY0d4aFkyVW9MeWN2Wnl3Z1hDSmNYRnhjSjF3aUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbkpsY0d4aFkyVW9MMXhjWEZ4Y0lpOW5MQ0FuWENJbktTQXJJQ2RjWENjbk8xeHVJQ0FnSUhKbGRIVnliaUJqZEhndWMzUjViR2w2WlNoemFXMXdiR1VzSUNkemRISnBibWNuS1R0Y2JpQWdmVnh1SUNCcFppQW9hWE5PZFcxaVpYSW9kbUZzZFdVcEtWeHVJQ0FnSUhKbGRIVnliaUJqZEhndWMzUjViR2w2WlNnbkp5QXJJSFpoYkhWbExDQW5iblZ0WW1WeUp5azdYRzRnSUdsbUlDaHBjMEp2YjJ4bFlXNG9kbUZzZFdVcEtWeHVJQ0FnSUhKbGRIVnliaUJqZEhndWMzUjViR2w2WlNnbkp5QXJJSFpoYkhWbExDQW5ZbTl2YkdWaGJpY3BPMXh1SUNBdkx5QkdiM0lnYzI5dFpTQnlaV0Z6YjI0Z2RIbHdaVzltSUc1MWJHd2dhWE1nWENKdlltcGxZM1JjSWl3Z2MyOGdjM0JsWTJsaGJDQmpZWE5sSUdobGNtVXVYRzRnSUdsbUlDaHBjMDUxYkd3b2RtRnNkV1VwS1Z4dUlDQWdJSEpsZEhWeWJpQmpkSGd1YzNSNWJHbDZaU2duYm5Wc2JDY3NJQ2R1ZFd4c0p5azdYRzU5WEc1Y2JseHVablZ1WTNScGIyNGdabTl5YldGMFJYSnliM0lvZG1Gc2RXVXBJSHRjYmlBZ2NtVjBkWEp1SUNkYkp5QXJJRVZ5Y205eUxuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5NWpZV3hzS0haaGJIVmxLU0FySUNkZEp6dGNibjFjYmx4dVhHNW1kVzVqZEdsdmJpQm1iM0p0WVhSQmNuSmhlU2hqZEhnc0lIWmhiSFZsTENCeVpXTjFjbk5sVkdsdFpYTXNJSFpwYzJsaWJHVkxaWGx6TENCclpYbHpLU0I3WEc0Z0lIWmhjaUJ2ZFhSd2RYUWdQU0JiWFR0Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBc0lHd2dQU0IyWVd4MVpTNXNaVzVuZEdnN0lHa2dQQ0JzT3lBcksya3BJSHRjYmlBZ0lDQnBaaUFvYUdGelQzZHVVSEp2Y0dWeWRIa29kbUZzZFdVc0lGTjBjbWx1WnlocEtTa3BJSHRjYmlBZ0lDQWdJRzkxZEhCMWRDNXdkWE5vS0dadmNtMWhkRkJ5YjNCbGNuUjVLR04wZUN3Z2RtRnNkV1VzSUhKbFkzVnljMlZVYVcxbGN5d2dkbWx6YVdKc1pVdGxlWE1zWEc0Z0lDQWdJQ0FnSUNBZ1UzUnlhVzVuS0drcExDQjBjblZsS1NrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJRzkxZEhCMWRDNXdkWE5vS0NjbktUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2EyVjVjeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR3RsZVNrZ2UxeHVJQ0FnSUdsbUlDZ2hhMlY1TG0xaGRHTm9LQzllWEZ4a0t5UXZLU2tnZTF4dUlDQWdJQ0FnYjNWMGNIVjBMbkIxYzJnb1ptOXliV0YwVUhKdmNHVnlkSGtvWTNSNExDQjJZV3gxWlN3Z2NtVmpkWEp6WlZScGJXVnpMQ0IyYVhOcFlteGxTMlY1Y3l4Y2JpQWdJQ0FnSUNBZ0lDQnJaWGtzSUhSeWRXVXBLVHRjYmlBZ0lDQjlYRzRnSUgwcE8xeHVJQ0J5WlhSMWNtNGdiM1YwY0hWME8xeHVmVnh1WEc1Y2JtWjFibU4wYVc5dUlHWnZjbTFoZEZCeWIzQmxjblI1S0dOMGVDd2dkbUZzZFdVc0lISmxZM1Z5YzJWVWFXMWxjeXdnZG1semFXSnNaVXRsZVhNc0lHdGxlU3dnWVhKeVlYa3BJSHRjYmlBZ2RtRnlJRzVoYldVc0lITjBjaXdnWkdWell6dGNiaUFnWkdWell5QTlJRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJb2RtRnNkV1VzSUd0bGVTa2dmSHdnZXlCMllXeDFaVG9nZG1Gc2RXVmJhMlY1WFNCOU8xeHVJQ0JwWmlBb1pHVnpZeTVuWlhRcElIdGNiaUFnSUNCcFppQW9aR1Z6WXk1elpYUXBJSHRjYmlBZ0lDQWdJSE4wY2lBOUlHTjBlQzV6ZEhsc2FYcGxLQ2RiUjJWMGRHVnlMMU5sZEhSbGNsMG5MQ0FuYzNCbFkybGhiQ2NwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnpkSElnUFNCamRIZ3VjM1I1YkdsNlpTZ25XMGRsZEhSbGNsMG5MQ0FuYzNCbFkybGhiQ2NwTzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0JwWmlBb1pHVnpZeTV6WlhRcElIdGNiaUFnSUNBZ0lITjBjaUE5SUdOMGVDNXpkSGxzYVhwbEtDZGJVMlYwZEdWeVhTY3NJQ2R6Y0dWamFXRnNKeWs3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJR2xtSUNnaGFHRnpUM2R1VUhKdmNHVnlkSGtvZG1semFXSnNaVXRsZVhNc0lHdGxlU2twSUh0Y2JpQWdJQ0J1WVcxbElEMGdKMXNuSUNzZ2EyVjVJQ3NnSjEwbk8xeHVJQ0I5WEc0Z0lHbG1JQ2doYzNSeUtTQjdYRzRnSUNBZ2FXWWdLR04wZUM1elpXVnVMbWx1WkdWNFQyWW9aR1Z6WXk1MllXeDFaU2tnUENBd0tTQjdYRzRnSUNBZ0lDQnBaaUFvYVhOT2RXeHNLSEpsWTNWeWMyVlVhVzFsY3lrcElIdGNiaUFnSUNBZ0lDQWdjM1J5SUQwZ1ptOXliV0YwVm1Gc2RXVW9ZM1I0TENCa1pYTmpMblpoYkhWbExDQnVkV3hzS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhOMGNpQTlJR1p2Y20xaGRGWmhiSFZsS0dOMGVDd2daR1Z6WXk1MllXeDFaU3dnY21WamRYSnpaVlJwYldWeklDMGdNU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb2MzUnlMbWx1WkdWNFQyWW9KMXhjYmljcElENGdMVEVwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR0Z5Y21GNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnYzNSeUlEMGdjM1J5TG5Od2JHbDBLQ2RjWEc0bktTNXRZWEFvWm5WdVkzUnBiMjRvYkdsdVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNjZ0lDY2dLeUJzYVc1bE8xeHVJQ0FnSUNBZ0lDQWdJSDBwTG1wdmFXNG9KMXhjYmljcExuTjFZbk4wY2lneUtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0J6ZEhJZ1BTQW5YRnh1SnlBcklITjBjaTV6Y0d4cGRDZ25YRnh1SnlrdWJXRndLR1oxYm1OMGFXOXVLR3hwYm1VcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUFuSUNBZ0p5QXJJR3hwYm1VN1hHNGdJQ0FnSUNBZ0lDQWdmU2t1YW05cGJpZ25YRnh1SnlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYzNSeUlEMGdZM1I0TG5OMGVXeHBlbVVvSjF0RGFYSmpkV3hoY2wwbkxDQW5jM0JsWTJsaGJDY3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnBaaUFvYVhOVmJtUmxabWx1WldRb2JtRnRaU2twSUh0Y2JpQWdJQ0JwWmlBb1lYSnlZWGtnSmlZZ2EyVjVMbTFoZEdOb0tDOWVYRnhrS3lRdktTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlITjBjanRjYmlBZ0lDQjlYRzRnSUNBZ2JtRnRaU0E5SUVwVFQwNHVjM1J5YVc1bmFXWjVLQ2NuSUNzZ2EyVjVLVHRjYmlBZ0lDQnBaaUFvYm1GdFpTNXRZWFJqYUNndlhsd2lLRnRoTFhwQkxWcGZYVnRoTFhwQkxWcGZNQzA1WFNvcFhDSWtMeWtwSUh0Y2JpQWdJQ0FnSUc1aGJXVWdQU0J1WVcxbExuTjFZbk4wY2lneExDQnVZVzFsTG14bGJtZDBhQ0F0SURJcE8xeHVJQ0FnSUNBZ2JtRnRaU0E5SUdOMGVDNXpkSGxzYVhwbEtHNWhiV1VzSUNkdVlXMWxKeWs3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHNWhiV1VnUFNCdVlXMWxMbkpsY0d4aFkyVW9MeWN2Wnl3Z1hDSmNYRnhjSjF3aUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjbVZ3YkdGalpTZ3ZYRnhjWEZ3aUwyY3NJQ2RjSWljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNXlaWEJzWVdObEtDOG9YbHdpZkZ3aUpDa3ZaeXdnWENJblhDSXBPMXh1SUNBZ0lDQWdibUZ0WlNBOUlHTjBlQzV6ZEhsc2FYcGxLRzVoYldVc0lDZHpkSEpwYm1jbktUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2JtRnRaU0FySUNjNklDY2dLeUJ6ZEhJN1hHNTlYRzVjYmx4dVpuVnVZM1JwYjI0Z2NtVmtkV05sVkc5VGFXNW5iR1ZUZEhKcGJtY29iM1YwY0hWMExDQmlZWE5sTENCaWNtRmpaWE1wSUh0Y2JpQWdkbUZ5SUc1MWJVeHBibVZ6UlhOMElEMGdNRHRjYmlBZ2RtRnlJR3hsYm1kMGFDQTlJRzkxZEhCMWRDNXlaV1IxWTJVb1puVnVZM1JwYjI0b2NISmxkaXdnWTNWeUtTQjdYRzRnSUNBZ2JuVnRUR2x1WlhORmMzUXJLenRjYmlBZ0lDQnBaaUFvWTNWeUxtbHVaR1Y0VDJZb0oxeGNiaWNwSUQ0OUlEQXBJRzUxYlV4cGJtVnpSWE4wS3lzN1hHNGdJQ0FnY21WMGRYSnVJSEJ5WlhZZ0t5QmpkWEl1Y21Wd2JHRmpaU2d2WEZ4MU1EQXhZbHhjVzF4Y1pGeGNaRDl0TDJjc0lDY25LUzVzWlc1bmRHZ2dLeUF4TzF4dUlDQjlMQ0F3S1R0Y2JseHVJQ0JwWmlBb2JHVnVaM1JvSUQ0Z05qQXBJSHRjYmlBZ0lDQnlaWFIxY200Z1luSmhZMlZ6V3pCZElDdGNiaUFnSUNBZ0lDQWdJQ0FnS0dKaGMyVWdQVDA5SUNjbklEOGdKeWNnT2lCaVlYTmxJQ3NnSjF4Y2JpQW5LU0FyWEc0Z0lDQWdJQ0FnSUNBZ0lDY2dKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0lHOTFkSEIxZEM1cWIybHVLQ2NzWEZ4dUlDQW5LU0FyWEc0Z0lDQWdJQ0FnSUNBZ0lDY2dKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0lHSnlZV05sYzFzeFhUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQmljbUZqWlhOYk1GMGdLeUJpWVhObElDc2dKeUFuSUNzZ2IzVjBjSFYwTG1wdmFXNG9KeXdnSnlrZ0t5QW5JQ2NnS3lCaWNtRmpaWE5iTVYwN1hHNTlYRzVjYmx4dUx5OGdUazlVUlRvZ1ZHaGxjMlVnZEhsd1pTQmphR1ZqYTJsdVp5Qm1kVzVqZEdsdmJuTWdhVzUwWlc1MGFXOXVZV3hzZVNCa2IyNG5kQ0IxYzJVZ1lHbHVjM1JoYm1ObGIyWmdYRzR2THlCaVpXTmhkWE5sSUdsMElHbHpJR1p5WVdkcGJHVWdZVzVrSUdOaGJpQmlaU0JsWVhOcGJIa2dabUZyWldRZ2QybDBhQ0JnVDJKcVpXTjBMbU55WldGMFpTZ3BZQzVjYm1aMWJtTjBhVzl1SUdselFYSnlZWGtvWVhJcElIdGNiaUFnY21WMGRYSnVJRUZ5Y21GNUxtbHpRWEp5WVhrb1lYSXBPMXh1ZlZ4dVpYaHdiM0owY3k1cGMwRnljbUY1SUQwZ2FYTkJjbkpoZVR0Y2JseHVablZ1WTNScGIyNGdhWE5DYjI5c1pXRnVLR0Z5WnlrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlHRnlaeUE5UFQwZ0oySnZiMnhsWVc0bk8xeHVmVnh1Wlhod2IzSjBjeTVwYzBKdmIyeGxZVzRnUFNCcGMwSnZiMnhsWVc0N1hHNWNibVoxYm1OMGFXOXVJR2x6VG5Wc2JDaGhjbWNwSUh0Y2JpQWdjbVYwZFhKdUlHRnlaeUE5UFQwZ2JuVnNiRHRjYm4xY2JtVjRjRzl5ZEhNdWFYTk9kV3hzSUQwZ2FYTk9kV3hzTzF4dVhHNW1kVzVqZEdsdmJpQnBjMDUxYkd4UGNsVnVaR1ZtYVc1bFpDaGhjbWNwSUh0Y2JpQWdjbVYwZFhKdUlHRnlaeUE5UFNCdWRXeHNPMXh1ZlZ4dVpYaHdiM0owY3k1cGMwNTFiR3hQY2xWdVpHVm1hVzVsWkNBOUlHbHpUblZzYkU5eVZXNWtaV1pwYm1Wa08xeHVYRzVtZFc1amRHbHZiaUJwYzA1MWJXSmxjaWhoY21jcElIdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQmhjbWNnUFQwOUlDZHVkVzFpWlhJbk8xeHVmVnh1Wlhod2IzSjBjeTVwYzA1MWJXSmxjaUE5SUdselRuVnRZbVZ5TzF4dVhHNW1kVzVqZEdsdmJpQnBjMU4wY21sdVp5aGhjbWNwSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCaGNtY2dQVDA5SUNkemRISnBibWNuTzF4dWZWeHVaWGh3YjNKMGN5NXBjMU4wY21sdVp5QTlJR2x6VTNSeWFXNW5PMXh1WEc1bWRXNWpkR2x2YmlCcGMxTjViV0p2YkNoaGNtY3BJSHRjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUJoY21jZ1BUMDlJQ2R6ZVcxaWIyd25PMXh1ZlZ4dVpYaHdiM0owY3k1cGMxTjViV0p2YkNBOUlHbHpVM2x0WW05c08xeHVYRzVtZFc1amRHbHZiaUJwYzFWdVpHVm1hVzVsWkNoaGNtY3BJSHRjYmlBZ2NtVjBkWEp1SUdGeVp5QTlQVDBnZG05cFpDQXdPMXh1ZlZ4dVpYaHdiM0owY3k1cGMxVnVaR1ZtYVc1bFpDQTlJR2x6Vlc1a1pXWnBibVZrTzF4dVhHNW1kVzVqZEdsdmJpQnBjMUpsWjBWNGNDaHlaU2tnZTF4dUlDQnlaWFIxY200Z2FYTlBZbXBsWTNRb2NtVXBJQ1ltSUc5aWFtVmpkRlJ2VTNSeWFXNW5LSEpsS1NBOVBUMGdKMXR2WW1wbFkzUWdVbVZuUlhod1hTYzdYRzU5WEc1bGVIQnZjblJ6TG1selVtVm5SWGh3SUQwZ2FYTlNaV2RGZUhBN1hHNWNibVoxYm1OMGFXOXVJR2x6VDJKcVpXTjBLR0Z5WnlrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlHRnlaeUE5UFQwZ0oyOWlhbVZqZENjZ0ppWWdZWEpuSUNFOVBTQnVkV3hzTzF4dWZWeHVaWGh3YjNKMGN5NXBjMDlpYW1WamRDQTlJR2x6VDJKcVpXTjBPMXh1WEc1bWRXNWpkR2x2YmlCcGMwUmhkR1VvWkNrZ2UxeHVJQ0J5WlhSMWNtNGdhWE5QWW1wbFkzUW9aQ2tnSmlZZ2IySnFaV04wVkc5VGRISnBibWNvWkNrZ1BUMDlJQ2RiYjJKcVpXTjBJRVJoZEdWZEp6dGNibjFjYm1WNGNHOXlkSE11YVhORVlYUmxJRDBnYVhORVlYUmxPMXh1WEc1bWRXNWpkR2x2YmlCcGMwVnljbTl5S0dVcElIdGNiaUFnY21WMGRYSnVJR2x6VDJKcVpXTjBLR1VwSUNZbVhHNGdJQ0FnSUNBb2IySnFaV04wVkc5VGRISnBibWNvWlNrZ1BUMDlJQ2RiYjJKcVpXTjBJRVZ5Y205eVhTY2dmSHdnWlNCcGJuTjBZVzVqWlc5bUlFVnljbTl5S1R0Y2JuMWNibVY0Y0c5eWRITXVhWE5GY25KdmNpQTlJR2x6UlhKeWIzSTdYRzVjYm1aMWJtTjBhVzl1SUdselJuVnVZM1JwYjI0b1lYSm5LU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnWVhKbklEMDlQU0FuWm5WdVkzUnBiMjRuTzF4dWZWeHVaWGh3YjNKMGN5NXBjMFoxYm1OMGFXOXVJRDBnYVhOR2RXNWpkR2x2Ymp0Y2JseHVablZ1WTNScGIyNGdhWE5RY21sdGFYUnBkbVVvWVhKbktTQjdYRzRnSUhKbGRIVnliaUJoY21jZ1BUMDlJRzUxYkd3Z2ZIeGNiaUFnSUNBZ0lDQWdJSFI1Y0dWdlppQmhjbWNnUFQwOUlDZGliMjlzWldGdUp5QjhmRnh1SUNBZ0lDQWdJQ0FnZEhsd1pXOW1JR0Z5WnlBOVBUMGdKMjUxYldKbGNpY2dmSHhjYmlBZ0lDQWdJQ0FnSUhSNWNHVnZaaUJoY21jZ1BUMDlJQ2R6ZEhKcGJtY25JSHg4WEc0Z0lDQWdJQ0FnSUNCMGVYQmxiMllnWVhKbklEMDlQU0FuYzNsdFltOXNKeUI4ZkNBZ0x5OGdSVk0ySUhONWJXSnZiRnh1SUNBZ0lDQWdJQ0FnZEhsd1pXOW1JR0Z5WnlBOVBUMGdKM1Z1WkdWbWFXNWxaQ2M3WEc1OVhHNWxlSEJ2Y25SekxtbHpVSEpwYldsMGFYWmxJRDBnYVhOUWNtbHRhWFJwZG1VN1hHNWNibVY0Y0c5eWRITXVhWE5DZFdabVpYSWdQU0J5WlhGMWFYSmxLQ2N1TDNOMWNIQnZjblF2YVhOQ2RXWm1aWEluS1R0Y2JseHVablZ1WTNScGIyNGdiMkpxWldOMFZHOVRkSEpwYm1jb2J5a2dlMXh1SUNCeVpYUjFjbTRnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeTVqWVd4c0tHOHBPMXh1ZlZ4dVhHNWNibVoxYm1OMGFXOXVJSEJoWkNodUtTQjdYRzRnSUhKbGRIVnliaUJ1SUR3Z01UQWdQeUFuTUNjZ0t5QnVMblJ2VTNSeWFXNW5LREV3S1NBNklHNHVkRzlUZEhKcGJtY29NVEFwTzF4dWZWeHVYRzVjYm5aaGNpQnRiMjUwYUhNZ1BTQmJKMHBoYmljc0lDZEdaV0luTENBblRXRnlKeXdnSjBGd2NpY3NJQ2ROWVhrbkxDQW5TblZ1Snl3Z0owcDFiQ2NzSUNkQmRXY25MQ0FuVTJWd0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0owOWpkQ2NzSUNkT2IzWW5MQ0FuUkdWakoxMDdYRzVjYmk4dklESTJJRVpsWWlBeE5qb3hPVG96TkZ4dVpuVnVZM1JwYjI0Z2RHbHRaWE4wWVcxd0tDa2dlMXh1SUNCMllYSWdaQ0E5SUc1bGR5QkVZWFJsS0NrN1hHNGdJSFpoY2lCMGFXMWxJRDBnVzNCaFpDaGtMbWRsZEVodmRYSnpLQ2twTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVdRb1pDNW5aWFJOYVc1MWRHVnpLQ2twTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVdRb1pDNW5aWFJUWldOdmJtUnpLQ2twWFM1cWIybHVLQ2M2SnlrN1hHNGdJSEpsZEhWeWJpQmJaQzVuWlhSRVlYUmxLQ2tzSUcxdmJuUm9jMXRrTG1kbGRFMXZiblJvS0NsZExDQjBhVzFsWFM1cWIybHVLQ2NnSnlrN1hHNTlYRzVjYmx4dUx5OGdiRzluSUdseklHcDFjM1FnWVNCMGFHbHVJSGR5WVhCd1pYSWdkRzhnWTI5dWMyOXNaUzVzYjJjZ2RHaGhkQ0J3Y21Wd1pXNWtjeUJoSUhScGJXVnpkR0Z0Y0Z4dVpYaHdiM0owY3k1c2IyY2dQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdZMjl1YzI5c1pTNXNiMmNvSnlWeklDMGdKWE1uTENCMGFXMWxjM1JoYlhBb0tTd2daWGh3YjNKMGN5NW1iM0p0WVhRdVlYQndiSGtvWlhod2IzSjBjeXdnWVhKbmRXMWxiblJ6S1NrN1hHNTlPMXh1WEc1Y2JpOHFLbHh1SUNvZ1NXNW9aWEpwZENCMGFHVWdjSEp2ZEc5MGVYQmxJRzFsZEdodlpITWdabkp2YlNCdmJtVWdZMjl1YzNSeWRXTjBiM0lnYVc1MGJ5QmhibTkwYUdWeUxseHVJQ3BjYmlBcUlGUm9aU0JHZFc1amRHbHZiaTV3Y205MGIzUjVjR1V1YVc1b1pYSnBkSE1nWm5KdmJTQnNZVzVuTG1weklISmxkM0pwZEhSbGJpQmhjeUJoSUhOMFlXNWtZV3h2Ym1WY2JpQXFJR1oxYm1OMGFXOXVJQ2h1YjNRZ2IyNGdSblZ1WTNScGIyNHVjSEp2ZEc5MGVYQmxLUzRnVGs5VVJUb2dTV1lnZEdocGN5Qm1hV3hsSUdseklIUnZJR0psSUd4dllXUmxaRnh1SUNvZ1pIVnlhVzVuSUdKdmIzUnpkSEpoY0hCcGJtY2dkR2hwY3lCbWRXNWpkR2x2YmlCdVpXVmtjeUIwYnlCaVpTQnlaWGR5YVhSMFpXNGdkWE5wYm1jZ2MyOXRaU0J1WVhScGRtVmNiaUFxSUdaMWJtTjBhVzl1Y3lCaGN5QndjbTkwYjNSNWNHVWdjMlYwZFhBZ2RYTnBibWNnYm05eWJXRnNJRXBoZG1GVFkzSnBjSFFnWkc5bGN5QnViM1FnZDI5eWF5QmhjMXh1SUNvZ1pYaHdaV04wWldRZ1pIVnlhVzVuSUdKdmIzUnpkSEpoY0hCcGJtY2dLSE5sWlNCdGFYSnliM0l1YW5NZ2FXNGdjakV4TkRrd015a3VYRzRnS2x4dUlDb2dRSEJoY21GdElIdG1kVzVqZEdsdmJuMGdZM1J2Y2lCRGIyNXpkSEoxWTNSdmNpQm1kVzVqZEdsdmJpQjNhR2xqYUNCdVpXVmtjeUIwYnlCcGJtaGxjbWwwSUhSb1pWeHVJQ29nSUNBZ0lIQnliM1J2ZEhsd1pTNWNiaUFxSUVCd1lYSmhiU0I3Wm5WdVkzUnBiMjU5SUhOMWNHVnlRM1J2Y2lCRGIyNXpkSEoxWTNSdmNpQm1kVzVqZEdsdmJpQjBieUJwYm1obGNtbDBJSEJ5YjNSdmRIbHdaU0JtY205dExseHVJQ292WEc1bGVIQnZjblJ6TG1sdWFHVnlhWFJ6SUQwZ2NtVnhkV2x5WlNnbmFXNW9aWEpwZEhNbktUdGNibHh1Wlhod2IzSjBjeTVmWlhoMFpXNWtJRDBnWm5WdVkzUnBiMjRvYjNKcFoybHVMQ0JoWkdRcElIdGNiaUFnTHk4Z1JHOXVKM1FnWkc4Z1lXNTVkR2hwYm1jZ2FXWWdZV1JrSUdsemJpZDBJR0Z1SUc5aWFtVmpkRnh1SUNCcFppQW9JV0ZrWkNCOGZDQWhhWE5QWW1wbFkzUW9ZV1JrS1NrZ2NtVjBkWEp1SUc5eWFXZHBianRjYmx4dUlDQjJZWElnYTJWNWN5QTlJRTlpYW1WamRDNXJaWGx6S0dGa1pDazdYRzRnSUhaaGNpQnBJRDBnYTJWNWN5NXNaVzVuZEdnN1hHNGdJSGRvYVd4bElDaHBMUzBwSUh0Y2JpQWdJQ0J2Y21sbmFXNWJhMlY1YzF0cFhWMGdQU0JoWkdSYmEyVjVjMXRwWFYwN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUc5eWFXZHBianRjYm4wN1hHNWNibVoxYm1OMGFXOXVJR2hoYzA5M2JsQnliM0JsY25SNUtHOWlhaXdnY0hKdmNDa2dlMXh1SUNCeVpYUjFjbTRnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c5aWFpd2djSEp2Y0NrN1hHNTlYRzRpTENJdkx5QlNaWFIxY201eklHRWdkM0poY0hCbGNpQm1kVzVqZEdsdmJpQjBhR0YwSUhKbGRIVnlibk1nWVNCM2NtRndjR1ZrSUdOaGJHeGlZV05yWEc0dkx5QlVhR1VnZDNKaGNIQmxjaUJtZFc1amRHbHZiaUJ6YUc5MWJHUWdaRzhnYzI5dFpTQnpkSFZtWml3Z1lXNWtJSEpsZEhWeWJpQmhYRzR2THlCd2NtVnpkVzFoWW14NUlHUnBabVpsY21WdWRDQmpZV3hzWW1GamF5Qm1kVzVqZEdsdmJpNWNiaTh2SUZSb2FYTWdiV0ZyWlhNZ2MzVnlaU0IwYUdGMElHOTNiaUJ3Y205d1pYSjBhV1Z6SUdGeVpTQnlaWFJoYVc1bFpDd2djMjhnZEdoaGRGeHVMeThnWkdWamIzSmhkR2x2Ym5NZ1lXNWtJSE4xWTJnZ1lYSmxJRzV2ZENCc2IzTjBJR0ZzYjI1bklIUm9aU0IzWVhrdVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIZHlZWEJ3ZVZ4dVpuVnVZM1JwYjI0Z2QzSmhjSEI1SUNobWJpd2dZMklwSUh0Y2JpQWdhV1lnS0dadUlDWW1JR05pS1NCeVpYUjFjbTRnZDNKaGNIQjVLR1p1S1NoallpbGNibHh1SUNCcFppQW9kSGx3Wlc5bUlHWnVJQ0U5UFNBblpuVnVZM1JwYjI0bktWeHVJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oyNWxaV1FnZDNKaGNIQmxjaUJtZFc1amRHbHZiaWNwWEc1Y2JpQWdUMkpxWldOMExtdGxlWE1vWm00cExtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHc3BJSHRjYmlBZ0lDQjNjbUZ3Y0dWeVcydGRJRDBnWm01YmExMWNiaUFnZlNsY2JseHVJQ0J5WlhSMWNtNGdkM0poY0hCbGNseHVYRzRnSUdaMWJtTjBhVzl1SUhkeVlYQndaWElvS1NCN1hHNGdJQ0FnZG1GeUlHRnlaM01nUFNCdVpYY2dRWEp5WVhrb1lYSm5kVzFsYm5SekxteGxibWQwYUNsY2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdGeVozTXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUdGeVozTmJhVjBnUFNCaGNtZDFiV1Z1ZEhOYmFWMWNiaUFnSUNCOVhHNGdJQ0FnZG1GeUlISmxkQ0E5SUdadUxtRndjR3g1S0hSb2FYTXNJR0Z5WjNNcFhHNGdJQ0FnZG1GeUlHTmlJRDBnWVhKbmMxdGhjbWR6TG14bGJtZDBhQzB4WFZ4dUlDQWdJR2xtSUNoMGVYQmxiMllnY21WMElEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbUlISmxkQ0FoUFQwZ1kySXBJSHRjYmlBZ0lDQWdJRTlpYW1WamRDNXJaWGx6S0dOaUtTNW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaHJLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRGdHJYU0E5SUdOaVcydGRYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnY21WMFhHNGdJSDFjYm4xY2JpSmRmUT09In0=\n";
const inpageSuffix = `//# sourceURL=${_extensionizer.default.runtime.getURL('inpage.js')}\n`;
const inpageBundle = inpageContent + inpageSuffix;
const CONTENT_SCRIPT = 'starmask-contentscript';
const INPAGE = 'starmask-inpage';
const PROVIDER = 'starmask-provider';

if (shouldInjectProvider()) {
  injectScript(inpageBundle);
  setupStreams();
}
/**
 * Injects a script tag into the current document
 *
 * @param {string} content - Code to be executed in the current document
 */


function injectScript(content) {
  try {
    const container = document.head || document.documentElement;
    const scriptTag = document.createElement('script');
    scriptTag.setAttribute('async', 'false');
    scriptTag.textContent = content;
    container.insertBefore(scriptTag, container.children[0]);
    container.removeChild(scriptTag);
  } catch (error) {
    console.error('StarMask: Provider injection failed.', error);
  }
}
/**
 * Sets up two-way communication streams between the
 * browser extension and local per-page browser context.
 *
 */


async function setupStreams() {
  // the transport-specific streams for communication between inpage and background
  const pageStream = new _postMessageStream.default({
    name: CONTENT_SCRIPT,
    target: INPAGE
  });

  const extensionPort = _extensionizer.default.runtime.connect({
    name: CONTENT_SCRIPT
  });

  const extensionStream = new _extensionPortStream.default(extensionPort); // create and connect channel muxers
  // so we can handle the channels individually

  const pageMux = new _objMultiplex.default();
  pageMux.setMaxListeners(25);
  const extensionMux = new _objMultiplex.default();
  extensionMux.setMaxListeners(25);
  (0, _pump.default)(pageMux, pageStream, pageMux, err => logStreamDisconnectWarning('StarMask Inpage Multiplex', err));
  (0, _pump.default)(extensionMux, extensionStream, extensionMux, err => {
    logStreamDisconnectWarning('StarMask Background Multiplex', err);
    notifyInpageOfStreamFailure();
  }); // forward communication across inpage-background for these channels only

  forwardTrafficBetweenMuxes(PROVIDER, pageMux, extensionMux); // connect "phishing" channel to warning system

  const phishingStream = extensionMux.createStream('phishing');
  phishingStream.once('data', redirectToPhishingWarning);
}

function forwardTrafficBetweenMuxes(channelName, muxA, muxB) {
  const channelA = muxA.createStream(channelName);
  const channelB = muxB.createStream(channelName);
  (0, _pump.default)(channelA, channelB, channelA, error => console.debug(`StarMask: Muxed traffic for channel "${channelName}" failed.`, error));
}
/**
 * Error handler for page to extension stream disconnections
 *
 * @param {string} remoteLabel - Remote stream name
 * @param {Error} error - Stream connection error
 */


function logStreamDisconnectWarning(remoteLabel, error) {
  console.debug(`StarMask: Content script lost connection to "${remoteLabel}".`, error);
}
/**
 * This function must ONLY be called in pump destruction/close callbacks.
 * Notifies the inpage context that streams have failed, via window.postMessage.
 * Relies on obj-multiplex and post-message-stream implementation details.
 */


function notifyInpageOfStreamFailure() {
  window.postMessage({
    target: INPAGE,
    // the post-message-stream "target"
    data: {
      // this object gets passed to obj-multiplex
      name: PROVIDER,
      // the obj-multiplex channel name
      data: {
        jsonrpc: '2.0',
        method: 'STARMASK_STREAM_FAILURE'
      }
    }
  }, window.location.origin);
}
/**
 * Determines if the provider should be injected
 *
 * @returns {boolean} {@code true} Whether the provider should be injected
 */


function shouldInjectProvider() {
  return doctypeCheck() && suffixCheck() && documentElementCheck() && !blockedDomainCheck();
}
/**
 * Checks the doctype of the current document if it exists
 *
 * @returns {boolean} {@code true} if the doctype is html or if none exists
 */


function doctypeCheck() {
  const {
    doctype
  } = window.document;

  if (doctype) {
    return doctype.name === 'html';
  }

  return true;
}
/**
 * Returns whether or not the extension (suffix) of the current document is prohibited
 *
 * This checks {@code window.location.pathname} against a set of file extensions
 * that we should not inject the provider into. This check is indifferent of
 * query parameters in the location.
 *
 * @returns {boolean} whether or not the extension of the current document is prohibited
 */


function suffixCheck() {
  const prohibitedTypes = [/\.xml$/u, /\.pdf$/u];
  const currentUrl = window.location.pathname;

  for (let i = 0; i < prohibitedTypes.length; i++) {
    if (prohibitedTypes[i].test(currentUrl)) {
      return false;
    }
  }

  return true;
}
/**
 * Checks the documentElement of the current document
 *
 * @returns {boolean} {@code true} if the documentElement is an html node or if none exists
 */


function documentElementCheck() {
  const documentElement = document.documentElement.nodeName;

  if (documentElement) {
    return documentElement.toLowerCase() === 'html';
  }

  return true;
}
/**
 * Checks if the current domain is blocked
 *
 * @returns {boolean} {@code true} if the current domain is blocked
 */


function blockedDomainCheck() {
  const blockedDomains = ['uscourts.gov', 'dropbox.com', 'webbyawards.com', 'cdn.shopify.com/s/javascripts/tricorder/xtld-read-only-frame.html', 'adyen.com', 'gravityforms.com', 'harbourair.com', 'ani.gamer.com.tw', 'blueskybooking.com', 'sharefile.com'];
  const currentUrl = window.location.href;
  let currentRegex;

  for (let i = 0; i < blockedDomains.length; i++) {
    const blockedDomain = blockedDomains[i].replace('.', '\\.');
    currentRegex = new RegExp(`(?:https?:\\/\\/)(?:(?!${blockedDomain}).)*$`, 'u');

    if (!currentRegex.test(currentUrl)) {
      return true;
    }
  }

  return false;
}
/**
 * Redirects the current page to a phishing information page
 */


function redirectToPhishingWarning() {
  console.debug('StarMask: Routing to Phishing Warning component.');

  const extensionURL = _extensionizer.default.runtime.getURL('phishing.html');

  window.location.href = `${extensionURL}#${_querystring.default.stringify({
    hostname: window.location.hostname,
    href: window.location.href
  })}`;
}


},{"@babel/runtime/helpers/interopRequireDefault":"/home/ubuntu/starmask/node_modules/@babel/runtime/helpers/interopRequireDefault.js","extension-port-stream":"/home/ubuntu/starmask/node_modules/extension-port-stream/dist/index.js","extensionizer":"/home/ubuntu/starmask/node_modules/extensionizer/index.js","obj-multiplex":"/home/ubuntu/starmask/node_modules/obj-multiplex/index.js","path":"/home/ubuntu/starmask/node_modules/path-browserify/index.js","post-message-stream":"/home/ubuntu/starmask/node_modules/post-message-stream/index.js","pump":"/home/ubuntu/starmask/node_modules/pump/index.js","querystring":"/home/ubuntu/starmask/node_modules/querystring-es3/index.js"}],"/home/ubuntu/starmask/node_modules/@babel/runtime/helpers/interopRequireDefault.js":[function(require,module,exports){
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;
},{}],"/home/ubuntu/starmask/node_modules/base64-js/index.js":[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"/home/ubuntu/starmask/node_modules/browser-resolve/empty.js":[function(require,module,exports){

},{}],"/home/ubuntu/starmask/node_modules/browserify/node_modules/buffer/index.js":[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":"/home/ubuntu/starmask/node_modules/base64-js/index.js","ieee754":"/home/ubuntu/starmask/node_modules/ieee754/index.js"}],"/home/ubuntu/starmask/node_modules/browserify/node_modules/events/events.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],"/home/ubuntu/starmask/node_modules/core-util-is/lib/util.js":[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})

},{"../../is-buffer/index.js":"/home/ubuntu/starmask/node_modules/is-buffer/index.js"}],"/home/ubuntu/starmask/node_modules/end-of-stream/index.js":[function(require,module,exports){
(function (process){
var once = require('once');

var noop = function() {};

var isRequest = function(stream) {
	return stream.setHeader && typeof stream.abort === 'function';
};

var isChildProcess = function(stream) {
	return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3
};

var eos = function(stream, opts, callback) {
	if (typeof opts === 'function') return eos(stream, null, opts);
	if (!opts) opts = {};

	callback = once(callback || noop);

	var ws = stream._writableState;
	var rs = stream._readableState;
	var readable = opts.readable || (opts.readable !== false && stream.readable);
	var writable = opts.writable || (opts.writable !== false && stream.writable);
	var cancelled = false;

	var onlegacyfinish = function() {
		if (!stream.writable) onfinish();
	};

	var onfinish = function() {
		writable = false;
		if (!readable) callback.call(stream);
	};

	var onend = function() {
		readable = false;
		if (!writable) callback.call(stream);
	};

	var onexit = function(exitCode) {
		callback.call(stream, exitCode ? new Error('exited with error code: ' + exitCode) : null);
	};

	var onerror = function(err) {
		callback.call(stream, err);
	};

	var onclose = function() {
		process.nextTick(onclosenexttick);
	};

	var onclosenexttick = function() {
		if (cancelled) return;
		if (readable && !(rs && (rs.ended && !rs.destroyed))) return callback.call(stream, new Error('premature close'));
		if (writable && !(ws && (ws.ended && !ws.destroyed))) return callback.call(stream, new Error('premature close'));
	};

	var onrequest = function() {
		stream.req.on('finish', onfinish);
	};

	if (isRequest(stream)) {
		stream.on('complete', onfinish);
		stream.on('abort', onclose);
		if (stream.req) onrequest();
		else stream.on('request', onrequest);
	} else if (writable && !ws) { // legacy streams
		stream.on('end', onlegacyfinish);
		stream.on('close', onlegacyfinish);
	}

	if (isChildProcess(stream)) stream.on('exit', onexit);

	stream.on('end', onend);
	stream.on('finish', onfinish);
	if (opts.error !== false) stream.on('error', onerror);
	stream.on('close', onclose);

	return function() {
		cancelled = true;
		stream.removeListener('complete', onfinish);
		stream.removeListener('abort', onclose);
		stream.removeListener('request', onrequest);
		if (stream.req) stream.req.removeListener('finish', onfinish);
		stream.removeListener('end', onlegacyfinish);
		stream.removeListener('close', onlegacyfinish);
		stream.removeListener('finish', onfinish);
		stream.removeListener('exit', onexit);
		stream.removeListener('end', onend);
		stream.removeListener('error', onerror);
		stream.removeListener('close', onclose);
	};
};

module.exports = eos;

}).call(this,require('_process'))

},{"_process":"/home/ubuntu/starmask/node_modules/process/browser.js","once":"/home/ubuntu/starmask/node_modules/once/once.js"}],"/home/ubuntu/starmask/node_modules/extension-port-stream/dist/index.js":[function(require,module,exports){
(function (Buffer){
"use strict";
const stream_1 = require("stream");
module.exports = class PortDuplexStream extends stream_1.Duplex {
    /**
     * @param port - An instance of WebExtensions Runtime.Port. See:
     * {@link https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/Port}
     */
    constructor(port) {
        super({ objectMode: true });
        this._port = port;
        this._port.onMessage.addListener((msg) => this._onMessage(msg));
        this._port.onDisconnect.addListener(() => this._onDisconnect());
    }
    /**
     * Callback triggered when a message is received from
     * the remote Port associated with this Stream.
     *
     * @param msg - Payload from the onMessage listener of the port
     */
    _onMessage(msg) {
        if (Buffer.isBuffer(msg)) {
            // delete msg._isBuffer;
            const data = Buffer.from(msg);
            this.push(data);
        }
        else {
            this.push(msg);
        }
    }
    /**
     * Callback triggered when the remote Port associated with this Stream
     * disconnects.
     */
    _onDisconnect() {
        this.destroy();
    }
    /**
     * Explicitly sets read operations to a no-op.
     */
    _read() {
        return undefined;
    }
    /**
     * Called internally when data should be written to this writable stream.
     *
     * @param msg - Arbitrary object to write
     * @param encoding - Encoding to use when writing payload
     * @param cb - Called when writing is complete or an error occurs
     */
    _write(msg, _encoding, cb) {
        try {
            if (Buffer.isBuffer(msg)) {
                const data = msg.toJSON();
                data._isBuffer = true;
                this._port.postMessage(data);
            }
            else {
                this._port.postMessage(msg);
            }
        }
        catch (error) {
            return cb(new Error('PortDuplexStream - disconnected'));
        }
        return cb();
    }
};

}).call(this,require("buffer").Buffer)

},{"buffer":"/home/ubuntu/starmask/node_modules/browserify/node_modules/buffer/index.js","stream":"/home/ubuntu/starmask/node_modules/stream-browserify/index.js"}],"/home/ubuntu/starmask/node_modules/extensionizer/extension-instance.js":[function(require,module,exports){
const apis = [
  'alarms',
  'bookmarks',
  'browserAction',
  'commands',
  'contextMenus',
  'cookies',
  'downloads',
  'events',
  'extension',
  'extensionTypes',
  'history',
  'i18n',
  'idle',
  'notifications',
  'pageAction',
  'runtime',
  'storage',
  'tabs',
  'webNavigation',
  'webRequest',
  'windows',
]

const hasChrome = typeof chrome !== 'undefined'
const hasWindow = typeof window !== 'undefined'
const hasBrowser = typeof browser !== 'undefined'

function Extension () {
  const _this = this

  apis.forEach(function (api) {

    _this[api] = null

    if (hasChrome) {
      try {
        if (chrome[api]) {
          _this[api] = chrome[api]
        }
      } catch (e) {
      }
    }

    if (hasWindow) {
      try {
        if (window[api]) {
          _this[api] = window[api]
        }
      } catch (e) {
      }
    }

    if (hasBrowser) {
      try {
        if (browser[api]) {
          _this[api] = browser[api]
        }
      } catch (e) {
      }
      try {
        _this.api = browser.extension[api]
      } catch (e) {
      }
    }
  })

  if (hasBrowser) {
    try {
      if (browser && browser.runtime) {
        this.runtime = browser.runtime
      }
    } catch (e) {
    }

    try {
      if (browser && browser.browserAction) {
        this.browserAction = browser.browserAction
      }
    } catch (e) {
    }
  }

}

module.exports = Extension

},{}],"/home/ubuntu/starmask/node_modules/extensionizer/index.js":[function(require,module,exports){
/* Extension.js
 *
 * A module for unifying browser differences in the WebExtension API.
 *
 * Initially implemented because Chrome hides all of their WebExtension API
 * behind a global `chrome` variable, but we'd like to start grooming
 * the code-base for cross-browser extension support.
 *
 * You can read more about the WebExtension API here:
 * https://developer.mozilla.org/en-US/Add-ons/WebExtensions
 */

const Extension = require('./extension-instance')
module.exports = new Extension()

},{"./extension-instance":"/home/ubuntu/starmask/node_modules/extensionizer/extension-instance.js"}],"/home/ubuntu/starmask/node_modules/ieee754/index.js":[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"/home/ubuntu/starmask/node_modules/inherits/inherits_browser.js":[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],"/home/ubuntu/starmask/node_modules/is-buffer/index.js":[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],"/home/ubuntu/starmask/node_modules/isarray/index.js":[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"/home/ubuntu/starmask/node_modules/obj-multiplex/index.js":[function(require,module,exports){
const { Duplex } = require('readable-stream')
const endOfStream = require('end-of-stream')
const once = require('once')
const noop = () => {}

const IGNORE_SUBSTREAM = {}


class ObjectMultiplex extends Duplex {

  constructor(_opts = {}) {
    const opts = Object.assign({}, _opts, {
      objectMode: true,
    })
    super(opts)

    this._substreams = {}
  }

  createStream (name) {
    // validate name
    if (!name) throw new Error('ObjectMultiplex - name must not be empty')
    if (this._substreams[name]) throw new Error('ObjectMultiplex - Substream for name "${name}" already exists')

    // create substream
    const substream = new Substream({ parent: this, name: name })
    this._substreams[name] = substream

    // listen for parent stream to end
    anyStreamEnd(this, (err) => {
      substream.destroy(err)
    })

    return substream
  }

  // ignore streams (dont display orphaned data warning)
  ignoreStream (name) {
    // validate name
    if (!name) throw new Error('ObjectMultiplex - name must not be empty')
    if (this._substreams[name]) throw new Error('ObjectMultiplex - Substream for name "${name}" already exists')
    // set
    this._substreams[name] = IGNORE_SUBSTREAM
  }

  // stream plumbing

  _read () {}

  _write(chunk, encoding, callback) {
    // parse message
    const name = chunk.name
    const data = chunk.data
    if (!name) {
      console.warn(`ObjectMultiplex - malformed chunk without name "${chunk}"`)
      return callback()
    }

    // get corresponding substream
    const substream = this._substreams[name]
    if (!substream) {
      console.warn(`ObjectMultiplex - orphaned data for stream "${name}"`)
      return callback()
    }

    // push data into substream
    if (substream !== IGNORE_SUBSTREAM) {
      substream.push(data)
    }

    callback()
  }

}


class Substream extends Duplex {

  constructor ({ parent, name }) {
    super({
      objectMode: true,
    })

    this._parent = parent
    this._name = name
  }

  _read () {}

  _write (chunk, enc, callback) {
    this._parent.push({
      name: this._name,
      data: chunk,
    })
    callback()
  }

}

module.exports = ObjectMultiplex

// util

function anyStreamEnd(stream, _cb) {
  const cb = once(_cb)
  endOfStream(stream, { readable: false }, cb)
  endOfStream(stream, { writable: false }, cb)
}
},{"end-of-stream":"/home/ubuntu/starmask/node_modules/end-of-stream/index.js","once":"/home/ubuntu/starmask/node_modules/once/once.js","readable-stream":"/home/ubuntu/starmask/node_modules/readable-stream/readable-browser.js"}],"/home/ubuntu/starmask/node_modules/once/once.js":[function(require,module,exports){
var wrappy = require('wrappy')
module.exports = wrappy(once)
module.exports.strict = wrappy(onceStrict)

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })

  Object.defineProperty(Function.prototype, 'onceStrict', {
    value: function () {
      return onceStrict(this)
    },
    configurable: true
  })
})

function once (fn) {
  var f = function () {
    if (f.called) return f.value
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  f.called = false
  return f
}

function onceStrict (fn) {
  var f = function () {
    if (f.called)
      throw new Error(f.onceError)
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  var name = fn.name || 'Function wrapped with `once`'
  f.onceError = name + " shouldn't be called more than once"
  f.called = false
  return f
}

},{"wrappy":"/home/ubuntu/starmask/node_modules/wrappy/wrappy.js"}],"/home/ubuntu/starmask/node_modules/path-browserify/index.js":[function(require,module,exports){
(function (process){
// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))

},{"_process":"/home/ubuntu/starmask/node_modules/process/browser.js"}],"/home/ubuntu/starmask/node_modules/post-message-stream/index.js":[function(require,module,exports){
const DuplexStream = require('readable-stream').Duplex
const inherits = require('util').inherits

module.exports = PostMessageStream

inherits(PostMessageStream, DuplexStream)

function PostMessageStream (opts) {
  DuplexStream.call(this, {
    objectMode: true,
  })

  this._name = opts.name
  this._target = opts.target
  this._targetWindow = opts.targetWindow || window
  this._origin = (opts.targetWindow ? '*' : location.origin)

  // initialization flags
  this._init = false
  this._haveSyn = false

  window.addEventListener('message', this._onMessage.bind(this), false)
  // send syncorization message
  this._write('SYN', null, noop)
  this.cork()
}

// private
PostMessageStream.prototype._onMessage = function (event) {
  var msg = event.data

  // validate message
  if (this._origin !== '*' && event.origin !== this._origin) return
  if (event.source !== this._targetWindow) return
  if (typeof msg !== 'object') return
  if (msg.target !== this._name) return
  if (!msg.data) return

  if (!this._init) {
    if (msg.data === 'SYN') {
      this._haveSyn = true
      this._write('ACK', null, noop)
    } else if (msg.data === 'ACK') {
      this._init = true
      if (!this._haveSyn) {
        this._write('ACK', null, noop)
      }
      this.uncork()
    }
  } else {
    // forward message
    try {
      this.push(msg.data)
    } catch (err) {
      this.emit('error', err)
    }
  }
}

// stream plumbing
PostMessageStream.prototype._read = noop

PostMessageStream.prototype._write = function (data, encoding, cb) {
  var message = {
    target: this._target,
    data: data,
  }
  this._targetWindow.postMessage(message, this._origin)
  cb()
}

// util

function noop () {}

},{"readable-stream":"/home/ubuntu/starmask/node_modules/readable-stream/readable-browser.js","util":"/home/ubuntu/starmask/node_modules/util/util.js"}],"/home/ubuntu/starmask/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],"/home/ubuntu/starmask/node_modules/pump/index.js":[function(require,module,exports){
(function (process){
var once = require('once')
var eos = require('end-of-stream')
var fs = require('fs') // we only need fs to get the ReadStream and WriteStream prototypes

var noop = function () {}
var ancient = /^v?\.0/.test(process.version)

var isFn = function (fn) {
  return typeof fn === 'function'
}

var isFS = function (stream) {
  if (!ancient) return false // newer node version do not need to care about fs is a special way
  if (!fs) return false // browser
  return (stream instanceof (fs.ReadStream || noop) || stream instanceof (fs.WriteStream || noop)) && isFn(stream.close)
}

var isRequest = function (stream) {
  return stream.setHeader && isFn(stream.abort)
}

var destroyer = function (stream, reading, writing, callback) {
  callback = once(callback)

  var closed = false
  stream.on('close', function () {
    closed = true
  })

  eos(stream, {readable: reading, writable: writing}, function (err) {
    if (err) return callback(err)
    closed = true
    callback()
  })

  var destroyed = false
  return function (err) {
    if (closed) return
    if (destroyed) return
    destroyed = true

    if (isFS(stream)) return stream.close(noop) // use close for fs streams to avoid fd leaks
    if (isRequest(stream)) return stream.abort() // request.destroy just do .end - .abort is what we want

    if (isFn(stream.destroy)) return stream.destroy()

    callback(err || new Error('stream was destroyed'))
  }
}

var call = function (fn) {
  fn()
}

var pipe = function (from, to) {
  return from.pipe(to)
}

var pump = function () {
  var streams = Array.prototype.slice.call(arguments)
  var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop

  if (Array.isArray(streams[0])) streams = streams[0]
  if (streams.length < 2) throw new Error('pump requires two streams per minimum')

  var error
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1
    var writing = i > 0
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err
      if (err) destroys.forEach(call)
      if (reading) return
      destroys.forEach(call)
      callback(error)
    })
  })

  return streams.reduce(pipe)
}

module.exports = pump

}).call(this,require('_process'))

},{"_process":"/home/ubuntu/starmask/node_modules/process/browser.js","end-of-stream":"/home/ubuntu/starmask/node_modules/end-of-stream/index.js","fs":"/home/ubuntu/starmask/node_modules/browser-resolve/empty.js","once":"/home/ubuntu/starmask/node_modules/once/once.js"}],"/home/ubuntu/starmask/node_modules/querystring-es3/decode.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],"/home/ubuntu/starmask/node_modules/querystring-es3/encode.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],"/home/ubuntu/starmask/node_modules/querystring-es3/index.js":[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":"/home/ubuntu/starmask/node_modules/querystring-es3/decode.js","./encode":"/home/ubuntu/starmask/node_modules/querystring-es3/encode.js"}],"/home/ubuntu/starmask/node_modules/readable-stream/duplex-browser.js":[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_duplex.js"}],"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_duplex.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};
},{"./_stream_readable":"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_readable.js","./_stream_writable":"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_writable.js","core-util-is":"/home/ubuntu/starmask/node_modules/core-util-is/lib/util.js","inherits":"/home/ubuntu/starmask/node_modules/inherits/inherits_browser.js","process-nextick-args":"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/process-nextick-args/index.js"}],"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_passthrough.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_transform.js","core-util-is":"/home/ubuntu/starmask/node_modules/core-util-is/lib/util.js","inherits":"/home/ubuntu/starmask/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_readable.js":[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./_stream_duplex":"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_duplex.js","./internal/streams/BufferList":"/home/ubuntu/starmask/node_modules/readable-stream/lib/internal/streams/BufferList.js","./internal/streams/destroy":"/home/ubuntu/starmask/node_modules/readable-stream/lib/internal/streams/destroy.js","./internal/streams/stream":"/home/ubuntu/starmask/node_modules/readable-stream/lib/internal/streams/stream-browser.js","_process":"/home/ubuntu/starmask/node_modules/process/browser.js","core-util-is":"/home/ubuntu/starmask/node_modules/core-util-is/lib/util.js","events":"/home/ubuntu/starmask/node_modules/browserify/node_modules/events/events.js","inherits":"/home/ubuntu/starmask/node_modules/inherits/inherits_browser.js","isarray":"/home/ubuntu/starmask/node_modules/isarray/index.js","process-nextick-args":"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/process-nextick-args/index.js","safe-buffer":"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/safe-buffer/index.js","string_decoder/":"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/string_decoder/lib/string_decoder.js","util":"/home/ubuntu/starmask/node_modules/browser-resolve/empty.js"}],"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_transform.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_duplex.js","core-util-is":"/home/ubuntu/starmask/node_modules/core-util-is/lib/util.js","inherits":"/home/ubuntu/starmask/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_writable.js":[function(require,module,exports){
(function (process,global,setImmediate){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)

},{"./_stream_duplex":"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_duplex.js","./internal/streams/destroy":"/home/ubuntu/starmask/node_modules/readable-stream/lib/internal/streams/destroy.js","./internal/streams/stream":"/home/ubuntu/starmask/node_modules/readable-stream/lib/internal/streams/stream-browser.js","_process":"/home/ubuntu/starmask/node_modules/process/browser.js","core-util-is":"/home/ubuntu/starmask/node_modules/core-util-is/lib/util.js","inherits":"/home/ubuntu/starmask/node_modules/inherits/inherits_browser.js","process-nextick-args":"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/process-nextick-args/index.js","safe-buffer":"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/safe-buffer/index.js","timers":"/home/ubuntu/starmask/node_modules/timers-browserify/main.js","util-deprecate":"/home/ubuntu/starmask/node_modules/util-deprecate/browser.js"}],"/home/ubuntu/starmask/node_modules/readable-stream/lib/internal/streams/BufferList.js":[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
var util = require('util');

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}
},{"safe-buffer":"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/safe-buffer/index.js","util":"/home/ubuntu/starmask/node_modules/browser-resolve/empty.js"}],"/home/ubuntu/starmask/node_modules/readable-stream/lib/internal/streams/destroy.js":[function(require,module,exports){
'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/process-nextick-args/index.js"}],"/home/ubuntu/starmask/node_modules/readable-stream/lib/internal/streams/stream-browser.js":[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":"/home/ubuntu/starmask/node_modules/browserify/node_modules/events/events.js"}],"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/process-nextick-args/index.js":[function(require,module,exports){
(function (process){
'use strict';

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


}).call(this,require('_process'))

},{"_process":"/home/ubuntu/starmask/node_modules/process/browser.js"}],"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/safe-buffer/index.js":[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":"/home/ubuntu/starmask/node_modules/browserify/node_modules/buffer/index.js"}],"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/string_decoder/lib/string_decoder.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":"/home/ubuntu/starmask/node_modules/readable-stream/node_modules/safe-buffer/index.js"}],"/home/ubuntu/starmask/node_modules/readable-stream/passthrough.js":[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":"/home/ubuntu/starmask/node_modules/readable-stream/readable-browser.js"}],"/home/ubuntu/starmask/node_modules/readable-stream/readable-browser.js":[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_duplex.js","./lib/_stream_passthrough.js":"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_passthrough.js","./lib/_stream_readable.js":"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_readable.js","./lib/_stream_transform.js":"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_transform.js","./lib/_stream_writable.js":"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_writable.js"}],"/home/ubuntu/starmask/node_modules/readable-stream/transform.js":[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":"/home/ubuntu/starmask/node_modules/readable-stream/readable-browser.js"}],"/home/ubuntu/starmask/node_modules/readable-stream/writable-browser.js":[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":"/home/ubuntu/starmask/node_modules/readable-stream/lib/_stream_writable.js"}],"/home/ubuntu/starmask/node_modules/stream-browserify/index.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":"/home/ubuntu/starmask/node_modules/browserify/node_modules/events/events.js","inherits":"/home/ubuntu/starmask/node_modules/inherits/inherits_browser.js","readable-stream/duplex.js":"/home/ubuntu/starmask/node_modules/readable-stream/duplex-browser.js","readable-stream/passthrough.js":"/home/ubuntu/starmask/node_modules/readable-stream/passthrough.js","readable-stream/readable.js":"/home/ubuntu/starmask/node_modules/readable-stream/readable-browser.js","readable-stream/transform.js":"/home/ubuntu/starmask/node_modules/readable-stream/transform.js","readable-stream/writable.js":"/home/ubuntu/starmask/node_modules/readable-stream/writable-browser.js"}],"/home/ubuntu/starmask/node_modules/timers-browserify/main.js":[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)

},{"process/browser.js":"/home/ubuntu/starmask/node_modules/process/browser.js","timers":"/home/ubuntu/starmask/node_modules/timers-browserify/main.js"}],"/home/ubuntu/starmask/node_modules/util-deprecate/browser.js":[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/home/ubuntu/starmask/node_modules/util/node_modules/inherits/inherits_browser.js":[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],"/home/ubuntu/starmask/node_modules/util/support/isBufferBrowser.js":[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],"/home/ubuntu/starmask/node_modules/util/util.js":[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":"/home/ubuntu/starmask/node_modules/util/support/isBufferBrowser.js","_process":"/home/ubuntu/starmask/node_modules/process/browser.js","inherits":"/home/ubuntu/starmask/node_modules/util/node_modules/inherits/inherits_browser.js"}],"/home/ubuntu/starmask/node_modules/wrappy/wrappy.js":[function(require,module,exports){
// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy
function wrappy (fn, cb) {
  if (fn && cb) return wrappy(fn)(cb)

  if (typeof fn !== 'function')
    throw new TypeError('need wrapper function')

  Object.keys(fn).forEach(function (k) {
    wrapper[k] = fn[k]
  })

  return wrapper

  function wrapper() {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i]
    }
    var ret = fn.apply(this, args)
    var cb = args[args.length-1]
    if (typeof ret === 'function' && ret !== cb) {
      Object.keys(cb).forEach(function (k) {
        ret[k] = cb[k]
      })
    }
    return ret
  }
}

},{}]},{},["/home/ubuntu/starmask/app/scripts/contentscript.js"])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
